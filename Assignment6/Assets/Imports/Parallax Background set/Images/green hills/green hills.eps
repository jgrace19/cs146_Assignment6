%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: green hills.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Ленка
%%CreationDate: 3/25/2015
%%BoundingBox: 0 0 2001 684
%%HiResBoundingBox: 0 0 2000.0010 683.1329
%%CropBox: 0 0 2000.0010 683.1329
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2015-03-25T22:11:28+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-03-25T22:11:28+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-03-25T22:11:28+03:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>88</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAWAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9D4ujVYLaWb7Oy9CxwGV&#xA;NmPCZckSdMNNpN/l/bkeNv8Aynmh57WSGhahU9CMkJW0ZMJhzUcLW7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXAE7Dc4rSr9VuKf3ZwcQbPBn3KbKymjAg+Bw21kEc2sVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVXohdwo6k0GRtlGNmk1t4TFHwJrvWuVk27LFDhFKmBsU7lOcLilTTYe+ENeWNxKVNGyGjKVPgcs&#xA;t1piRzW0wodTFXUxV1MVdTFXUxV1MVdTFXUxV1MVRFtaGU1YER+IyJk3YsJlz5I+GCOJaIPmT1yB&#xA;NubDGIjZUwNiC1FBRG77jJxLiaocigaZNw3UxV1MVdTFXUxV1MVdTFV6RMxXYhSQOVNsFsowJTH6&#xA;lb8ePH/ZV3yHEXP8CFUgzYzVagqAdvE5LicQ6eW6gRQ0PXJW001TFXUxVXglWIligY9ie2QLbjnw&#xA;70r/AKQP8n44OFu/NHub/SP/ABX+P9mPCn815O/SP/Ff4/2Y8K/mvJZJdRSfbhqR0+L+zDTCWYS5&#xA;hC0wuO6mKupirqYq6mKupirqYq6mKrlRmNFBJ9sbSIk8leGxd15MeHgCN8Bk3w05Is7I2KMRxqgN&#xA;ad8iXLhHhFL8DN2Koe+jZoqjou5GSDj6iJMfcl1Mk4LqYquVGc0UEn2xtIiTyVDZ3FK8foqMFtng&#xA;T7lIqQaEUI7HC1EU1TFV8IHqpUVFdxSuJZYx6gmw6bZW7N1R44rbVR44raCv0XkGA3/abtkg4epA&#xA;uwhKZJxnUxVF/UJOVOQp45G3J/LG0p8z6nH5f0W71S4XnHaxl1QGnNyeKJWhpyYgVpjbVPGYndU0&#xA;y/h1HTbW/gqIbuJJoweoEihgDTuK4sKRNMVbCkmgFSegxUBcYJQKlDT5YszjkOiymLB1MVdTFVdL&#xA;OZlB2APjjbdHTyKJgtEjPInk36sFuRjwiO6o8Ubj4lB9++LZKAPNDyWKhCUJLDse+NuPLTCtuaHr&#xA;ND8O6V3phaLlHbk715v52+/FfEl3tetN/O33nFfEl3u9ab+dvvOK8cu8u9ab+dvvOK+JLvaaSVhR&#xA;mJHgScUGZPMqZdFZVZgGeoUE7mgqaYsV1MVpM7dFWFeI6gE/M4HY4ogRFKmBsUp4FlArsQevemFq&#xA;yYxJQubRETmm1OoOG2jLhAFhCUxcZ1MVdTFXUxV1MVVYbZ5RUUC9KnG23HhMlf8AR60+2a/LBbd+&#xA;WHehNS136rKscSCSq8iSSO9P4YgIyaqjtu8p/OvzVNcaRaaZQJ9ZlMrhT+xEOh+bOD9GJcc5TM7o&#xA;78pvMs0vlGG2ZRIbCaS3JJPIry9RfuWSg+WGmM5UXqS20MsSywt8LgMtfA4HL8AEWESkSKFooqO9&#xA;MDfGAHRfizS2WB4/tdD0IwuunjMeaXa3qkOk6Td6lMOSWsbScK8eRA+Fa705NQYsERpepG8061vY&#xA;vgS6hjmVdiQJFDAVp74s4zI5JD508+S+XbvRYOSn9I3ax3BkGyW4osj7dCC6kfTiyGWXeyj65KTx&#xA;9QV8Nq4o8aXe76zP/OfwxXxZd7vrE/8AOcV8WXesZmY1YknxOLAknm0FJ6CuKAF628rGgUjvvtiz&#xA;GKR6IiC1jFRJQyDcrXoD06fLFyMeAVuqS2sbLRQFYdCP44s54QRsgCpHUU+eLgkU8m8/+bzZfmXo&#xA;cSvxg0pk+snw+tkLLX5QkUxSA9ggliiqeJLH5YtuOcYqv12P+U/hgbvzA7m/rsf8p/DFfzAWSana&#xA;xish4fOg/jhX8zFbNcRTopVjwO4oK1+muLXkyCXVD0xcd1MVbVGY0UEnwGKREnkkHn3XJvL3la81&#xA;FBxuQBFa8hX97IeKmh2PHdqe2KTAjmEf5f1NdW0Ww1FaL9cgjlZR0VmUFl3/AJWqMUVunkBjiShk&#xA;U132OBy8dRHNZa6rp10jvbzrKscjwuVqaPGxV1O3YjFn40e95f8AmR5rOlPZvC9GnukVveCIgy0+&#xA;ew+nJOsqy81/MrUTeeaJowax2iJClOnTmx+9sEmWPko+SPNLaLbamvIkPNblE3oeRIk/4QbZOJAD&#xA;LLC6ew2Gu6lazQkXDtFG1fSZiUIPWor75aYBx4Z5RrdMdJ/MO51C+1O1SGL/AHHzCLkA24K0Nfi/&#xA;nVsx6cw6uXcGvPv5hXHlzy9b39vHFLeXUsccUTE8aD45TQGpoF4+xIwNg1EiymHUY7y2injCvDMi&#xA;yRP4q4qCPoOKJZr5h53+dGqm28vW+nq1Hv5quPGOGjH/AIcpgaCu8ha9eT+VbECXe3VoCCAaCNiq&#xA;ipH8lMmA1ykQXmP5q65LqvmWRDJzjsolgSmwr9tjTberU+jAebZAvTdJ1yCfyzbaxcSfu/qqz3L9&#xA;SCqVk+moOSaZDekWNUtiAyEsjAMrrShBFQcmIEsDKk1tvNGl2tgzXLsggRnZipIoKt2rkJQLZDIO&#xA;Sl+WPmB9a8ttdX3KW6S5mSRu3xN6oA36KsgA9hlblYzCt2Xm8tYImdv3caAs7GgAAFSSScNt0c0B&#xA;yCGm8x6XDpLas0hNgsP1n1gOsZXkCB13HQY2y/MReSeV/wAw1ufzg1C4kmJ03UVeytqFuAS3FYXA&#xA;P83psfm5xaxmqRJ5PX11vTm6SdfGg/WcLL81BIte8+aRYanpumyI7vfyuglBUKoSMmo33q5Ve34Y&#xA;015M8ZDq+a/NWqnV9a1PUiTxupZJIweoSp4D6FAGANceb6c8p3kmseW9M1EHk1zbRSSNX9soOY+h&#xA;q4shiJOyay2zxxPIxHFFLHr0Ar4YsjgIFvLZvOTDzyugkj0WhJdzsROV9Ub1px9P8TknD4drTifV&#xA;7GK8trR5R611z9KhBH7scmqa7ZKmCf6JcM/KGvJAOaHw33p9+Rk2Yyj2vrJbiO2adBPKrNHHyFSE&#xA;pyI+XIZFsYd+Y3n+Ty9p0X1AA38twqx8wGUxxnlL9+yf7KuNJjIWz+y1fT7rSI9WjkCWEkP1gSvR&#xA;QsfHkS3hQYXYRkCLeR/85B68kkWj6TBIHjkDX8nE1BBHpwsCOxq+Bp1EuQRf5R+Y0XyH6cnxyafd&#xA;TQKld+DUmB+VZSMkBbi5DwgFMz5qu7GC8vrlzMsUDskZNF5jde3c7ZZOIAcaEzaD/JbUPrGiahbO&#xA;xeeK69ZyTXaZBT/ho2yhyA83/NDVUvfMCQRPzgtYUCkGqlpR6hYfNWXJFjAbKvmay06/8qQa1HHT&#xA;VrmO34yITyd2ZFkBUbMQvLtXLclVZXD/AHnCfpSTzPpml6XcR2lgrUZfUmkdizNuQtewpQ9PHISM&#xA;TyNrCUj9T0LSdZWXQILxyZJTbiRlFSWYLUj512zI6W4shUq80i/LrVxbatqP1hz6b2z3Ezdd4WrU&#xA;/QzZjRcmUdmK63rl9qISC4flHDLNOi+D3JVn/wCIjINg5Pbfy3802reQtKe5ZjJBzsmCitPq7cV7&#xA;/wC++GSECVySEebC/wA0NR/TskOr2DGTSrKN4JQaBkkSVg78e6uvAgg/OmPAatiDxGhzSny3rWta&#xA;Bd2el3CGCG7uWlaNgpcq6eku25A5iv0ZMCqBYzoiwwu+u2urm4u3+1M7yt82JJys820DoyW21x4/&#xA;y0jsg2807W5Fd+Kv6xI+8LlsvpYTj+8Zj5c1OGby9YSV5MsSxEDrWL92f+I5bDk4mXaRUPNmqKmi&#xA;TIgYPMViB7AE1P3qCMGTYLiNlU/KHzPHp/6S0+VC6sY54wpGxoUfr/scojC3LlLhFs0/MLzDHD5E&#xA;ubiAlGv6WsQPX94SJAf+eatkZCjSRKxbCNb80IPyf0+yWZWu7h/q0sYI5rHBIxBp/sY/oOCleY2N&#xA;82n39rfL1tZo5fmFcEj6Rko82YF7Poa2uYriP1Iz8OTIpwwbeO/mFq8lx5qfhKUWx4xxuD9kg82P&#xA;0cqfRkZc2/GNknufK2ufpNdHigWa9mjMsQjkTi0YbiWDMV7+O+PDRbIEEcXR6r+Tuq6pZ+Zx5Xv7&#xA;hSljprRCKNy0ZmWf1tug5okxRv8AVwFyMMrk9I8xazZC3uoIroCWydPr6AkGNJI2cc/YqK4hdVL0&#xA;0O98vz63K2vNrLfC5ufrLKN6Lz5Fflx2xid3GEb2Zhq2sBfOdmykelbmOHkDUfvtmb7pPwywy9bR&#xA;GPpej2OsRWNrIWakhRo4+vVtwfoyUoWWuM+EMDm10R+erEqawwD0CtaAtMpH62X7sjLeVM4D0pH+&#xA;ZmsG/wBfWBaiOyiCca1HN/jYj6Co+jITFFtx8k/t/Pfpfk02lhm+uySNp4cdBGGqR8jCOP04kbW3&#xA;eJVx72DeYdam1a5tJZKhbaytbSEH+W3iEbEfOQMcisiSv8r+Z7jSbTUIom2muLdwOwVC5k/4IAA5&#xA;YDTHLCwGbedtTjXSRbxt8U7qGHT4F+L/AIkBk8vJw8O5S/8ALPVktNbu7eWURQzW3qOxNByhaor8&#xA;lZspi5Eh6WLz6PLNaafdxThv0hItsBJUcHVWFSRWo/dHKMuojEkcyBZcnDhMrPJEauZNM0vT9KWc&#xA;TPbs0zOoIAPI8KfKrZjaesk5Trns2ZTVBMtfsbDUzbXcIlWWaSFJXXf9yx+JqfFSi98xNPqJY7ia&#xA;2v5txxxluWQ6Tb2dnaxWFs5ZIhRORqx5MT127nNro9cJxPFsY7/B1Ws05E7H8Sprlk1lod+LUNJN&#xA;eOGcAVb4gqMABuRxXNRj1ksucSkaj9jnHFUKA5PLHbkxbxNc3bjMl8lazNbaTq0IlZVt39aJanjz&#xA;lHCtPcotcvgaBatTGzFN/Kq2eoaHqOlXbskTMC5U0bjIKbVB/wB9+GabXajLjMeE+kuZp4i+Ktwx&#xA;zzRqrSeZJ7tGLC1kURe3on/moHNjhymcYyPNo8MC4sk1TQrC71Gz1N44TZW6TSXqFaesHQcCStK8&#xA;ftb5DU66EJiIHFJOlxT4De3KmN3Yub7y/wDW0Ecdtp0sx+rIOJAlKv8AAB160AwZNSBMQI5tmLAZ&#xA;bgsr8rabe6dpZt7wqX9V3RUJIVWoaE0G9a5nYJiUbBsOu1X18l+u3yW5s4nNI5pl9YUBrEpHMb/M&#xA;ZDUZDGPp+pGnx8R35JjpWlfoawiiQx+tSkzooBY1NDWgJzX6HtIZJ8BFdzma3CR6gdkm8861NPbW&#xA;WmEkJCz3DDsS9EX7uLffmfmG7RgJMWIXN7C2l/U2UmeO4Mkb1NAjRgMtOm7KDlFS4hv6a+1yqFea&#xA;U3X9w30frywc0w5vR7PzNeWHk6G+tpeE7wJEpIDVkHwVowIqKE5fI+m3B4T4hDB9Th1O5umlkt5G&#xA;uNR5zxKiluYf4iU412HLfwzFOWNncbOfjxnbZlltqMthrehXMylb/wCqmG4iYA7MARt1qZE7H2zG&#xA;/OTkJSFVHky8CI9O+5tJPL3mG7svOVpqxkMVzLcv6rjsbgMj7H/XzLEgNzyawD05ph/ju9kTzN6j&#xA;l5dc4MJJN3CoWiC+H91MR9AyW27EknmxCb+6f5HIhlHmzvy5p9hrdrZajNEiLAjQ3JLMDLPGIvTc&#xA;gEf5dafjmFqtd4WSqvl+lsjhuJo72m/mS8uPqBjjJae4dYIQvi57fMCmbKWeJx8Y5F1kMZ46PRC3&#xA;PlT/AHLRXcsrRRhDc3EgI4rPG6FVDEdD8R+jNQO1YmV11+Pv/Y7IaYiHPdgV/dveXtxdOKNPI0hH&#xA;hyNafRmyJstQFBDQ3Uhie0r+6SVpQv8AlOApP/C4TyZyHIsgtLhb7yZPp8nDla3sfpMwFVSSRWYK&#xA;SDSvxYJZYxFHmsIkT4v4a+1V88TWYv4bSzgjt4LePkY40VBzkNTsoA+yFxGaOQAx5NUYSj9XNG6D&#xA;qY1HWNPEpBikt1gkruCfT5N18XFMhq9RLHEyHMBEMAJ4T3ozUrNfL/lB4T6a39xWCVkoSwkdmPxU&#xA;B/u9sxNJrzkkY1t3uTqMI4uIfJLvL8FyNMWC8h4+jO01vyoSOQoCPD7TZh6ycTO4npu5OOwKSrzJ&#xA;bXhvvVMZaOTjHAV3q3GvGg361zL0WWAhV79WnJjkTafaOtxHpdslwhSVECMDvTjsNxt0zXaggzJH&#xA;JvjyTC2kWK5ilYBgjhqH2OUm62SQmmpvNdW86o3B3jdYiTspIIByvFUSCUEPLr2wvrIcrmBlSvFZ&#xA;AOSMTsKMtRv2zpMeeE/pLiHFIJr5W8t3n1j6zqETLYzKeUQbjI3ddqim/jmPqdfGMTGB9X2NnhXV&#xA;sk0DTIbG3M8tUuJqh+TCnFWPEUG3TNbqtQchroG4QEeTGdU8rXg1OGzinSQ3wlkjleq0EfEtyoG3&#xA;+Pb+GbHDro8FkfTTWNOSbTnWLyWx8urZCQO4jS3aUCnKgoaf7EHMTTxE83F8WeWVRpKPKtyDLd2U&#xA;gWSKWNHaJwCp4kg7H5jMntCO0ZBhpzQZHqmoXv1f1Ld/SdN240NR9NemV9m5uCfD0l97DV4hMX1C&#xA;T6/Dqkkdi86PKZoR6TKK82fk9AF78f1ZmjURlOVnkfu/b97RDCQBQZdbyzPbRSz1WZkVpQ3UMRU1&#xA;+WaAnhnceh2c4ixRSC4El9p+pi5Cz3kSFdO4qA7NueScaE9Btm51Otsw4Tt/F+pxdNphEmxslOv+&#xA;XLiD0JbK2Z4fSUT8OTv6tSWYqatQ+2Q0usErEzvf2NmXH3MXuXBUxLUuTQrTcUzZRDVGNHdMBeXg&#xA;0i30+U0iiZpFjI3FSae/7RyczsA1EDiJDJNFl+tWum3YcrLp6TwU2IIdlH4KgzQ6ocM5D+dRdjjl&#xA;6Uk1rUpDrDXXIk27rwJP++yOn01zP02IeFXePvcaUvWnWqM1sl7fiQM95FHAlQCRTmCQ3ur/AIZg&#xA;ab1SjHuNuRllUWMSeiYIWXaUGRHHiBxYH/hqZto3xEdNnDI9IQ85pC/yywIjzZT+XN1WO6tielHU&#xA;fLZv+JDNZ2rD6ZOVj5ll8dkjapDfSEmO2RqJXYyGgU0+RbNd+Yl4Rx95U4xxcSh5nvJv0PeSgE/u&#xA;yoUdlb4SfoBrg0kAckR5sp8i8xBBFR0zpXCWafA1zLeRxoXnaFzb0NCHDCh+7K88+EA+blYogkAs&#xA;i8wx2VpDHZ2EAgjdvVkpVmJUFULMSSerZhaOcpkymfJGbbYJreomr21lO8UTnnFK7EUYxdWSo7Gv&#xA;TMKEzilIAnq5Gx5pfqEaaZfwXlsgigWRHVF6LxYFgMztPk8XGYnnTizhUwUw88QXctpFOg5W1vzk&#xA;uGqNthRiD179MxezpxjIg8zyZ5YGXJFSPwjLpylVerpGeO3vXp7gHMQN62ayiuFty06+urLPHDUD&#xA;4gDSnc7HDGZFqCuvrvUIZVtbO25JSnNgSG238B9+CMQdyVUJ7uWzgU3Vqxd9qBqKP9kOW+ECzsVR&#xA;MWsQS2yLPIIvUIorAklVYVqw23oR0wHGQdlpDW17cXck8l0jGy4F0i4ijcTUAGm52rhNRqjutLLv&#xA;WPrFtGqq/qyVIjiYigBoKkCpO3TDHHRWlG1vNUekMR9N41Jlnl6ha9ywNBhlGPNUVDeQlgZHiluo&#xA;+QjlQkUWQrzCqQOvEE4KNeSbV5rUTIY5oQ6kVKNxb8Kk4IzINgsSEstLC00iBWaF5bx15SMo+yrG&#xA;tGcgnLsmaWQ89lER0RFrfR3SyowKKBvyIOx2O4AyFGJBCkWE6u5rKVYJTxcQuGhowCoVQjc9gEJy&#xA;kGW/mo2U21G2mQ0YFIw0knEhgQny+eDhIVJ1m1fUJPUV/q9sPiVz8KAKfHucuqMfelFXmv8Aouqq&#xA;fVBH242XiPEUIb8chHFa0lFlpdwx1SaRSov50ngdlIUUry5Hen29s2GLViEo+QosM8OOICL9K30u&#xA;2V7iCO4upSeBNGUJ06075VqNSc07BIiGOHFwikws49OtnVFRIpJx6q26D4VJFWboB275iTlKXM22&#xA;Ul2ozWN/OIr1IXjQlllRmNKdm2Ut8h3y7FKUN4kqYgobWWtbuw42zycoTzWNlAVgBT4SOlB45bpZ&#xA;8E7PVhkgZBDaboxSymOoeikd0Fe3jkYiRSARyoAaVrl+bVjjBjfp5+bGOM8NILQdHtL/AFm+tL52&#xA;FvahDEEbqW99698u1WrMYgw6so4QIgnmy/RtLttM9RLaOIuWdvWBNfSZyY05EE7Ku/8AHNXnzyyc&#xA;z/azodEXe3gihaaWNmRaARDcE9eXhT3yiMbNKhbHWJXV3e2eK34kq1Cy7eFAO2TlDzTTGPMNtY3z&#xA;wyafEYnWUG4RY+IeNiORPAmlPlmx0eeUTUzswlAUdt08tNPsbCJRb26xS8AJGJBcsR+1uzAE5i58&#xA;8skjvteyYxoLtQvzDL9Ts4hJIKeq7LyJJymMb3LJdEk1lZl7xeKoekYDUDdNhQDfEniOyqQfStQp&#xA;FdEmBTzPVDUA9aE/gcshOeM3HmxlG021BbW5097MDmlwvpCOpWqkb79QOPfKIEiXF3JGyKg0CFkr&#xA;eXQZxtEsDGNEHXYVO+Yk9RO/TE/JnQXWflzT7aSSX60zyyDjzqlQPaoOCWpyn+H7CtBFxaVpcYar&#xA;s5bqzStXbwIIplRy5j0+xdlT9H6T6ZjZEdD1V2Ljx/aJyHHm812XtZ6SyBHhgdAahWCsK/TgvN/S&#xA;+1OyoVsjEIqR+mBxCfDQDwAyHBku6K2EMml6Ijc44YkahHJKKaH5EZbx5v6SNmm0vSyjJy+FuoaQ&#xA;v3r+2WyQzZu77FoJdL5XsDOZoblY3oQKqpG/eilBl41WSqMfvWggZ/J8kkvqfpCJm234CP8A4ict&#xA;jrD/ADChWl0TWmeqajCqDooqKfga/ScA1A/mSWg3J5XKEm0vI1kf7czUDdT9kLsK+2COql1iVoKU&#xA;nlW6mBE2pR0NBQLUUH0jJfmyOUCtI228vmFBGdQR4gvER+moWny5Hc5VLUyP8B/HwWgvk8tafLUS&#xA;3kvpkBfRR1WMBewWh8Mj+Zy9I/YU0Gk8p+Xl68n9zJ/SmA6nP3fYuyLttF0O2lEsKBZB3MrkH5gs&#xA;QcqllzSFG/kuytdafpF0gSeONlHQA8e1P2SO2QhLLHlfyTshH8uaCxJFVJXhUSt9mlKbk9suGoz9&#xA;32I2Qr+TtBbpNInykX+KnJjV5v5v2FdlV9ATiiRai0aIqoEIRloopuO9cI1M+sPvRQXXugafcIQG&#xA;i5kAc3FW226gjBDUZAdwU0EBF5bu7eEJb3kIYVqzFhWp9jtlx1VneMkUoP5Y1SQcZb+GRCQWUs29&#xA;OxNK5L80P5svktIptH1cuvC7to4U+zChIFB0BIFcj+YH82S079B6uz8m1WNPZVBA9qbYPzA/mFaC&#xA;uPLNiFqtyElahldQtCe9FJNK+G+V/mcl/SU7K9n5d0i2Zn9UyyOas7shP0UG2QnqMx6V8CuyLj03&#xA;SI3d0VVeQ1dg5qSPpys5c3n8l2autN0q5g9GQKE/ySA3/BdcEZ5Ym6KdkvXyxp8W9reywHwDIR9I&#xA;pvl/5rL1jfwKNlkeg3MMruuopKj1pE44oCfYE/hTLPzJPOBRQf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:99D7A7E6E0D2E411B7EFCD784D1E7487</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:99D7A7E6E0D2E411B7EFCD784D1E7487</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:28BBD9AABDB6E4118ACDAF2C71629BB7</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:85B0D14397BAE411B42FCA47A68AA8E1</stRef:instanceID>
            <stRef:documentID>xmp.did:85B0D14397BAE411B42FCA47A68AA8E1</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:28BBD9AABDB6E4118ACDAF2C71629BB7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28BBD9AABDB6E4118ACDAF2C71629BB7</stEvt:instanceID>
                  <stEvt:when>2015-02-17T18:57:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EE7598766FBAE411B42FCA47A68AA8E1</stEvt:instanceID>
                  <stEvt:when>2015-02-22T12:16:33+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EF7598766FBAE411B42FCA47A68AA8E1</stEvt:instanceID>
                  <stEvt:when>2015-02-22T12:16:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7CB0D14397BAE411B42FCA47A68AA8E1</stEvt:instanceID>
                  <stEvt:when>2015-02-22T16:32:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:85B0D14397BAE411B42FCA47A68AA8E1</stEvt:instanceID>
                  <stEvt:when>2015-02-22T18:13:31+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:99D7A7E6E0D2E411B7EFCD784D1E7487</stEvt:instanceID>
                  <stEvt:when>2015-03-25T22:11:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -683.133 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 683.133 li
2e3 683.133 li
2e3 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.000976563 0 mo
2e3 0 li
2e3 683.133 li
.000976563 683.133 li
.000976563 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[-2.86601e-5 -655.667 655.667 -2.86601e-5 1e3 676.853 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.839216 1 .866667 ]
/C1 [.819608 .992157 .87451 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.819608 .992157 .87451 ]
/C1 [.764706 .968627 .898039 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.764706 .968627 .898039 ]
/C1 [.760784 .968627 .901961 ]
/N 1 
>>
]
/Bounds [.4477 .9646 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.86601e-5 -655.667 655.667 -2.86601e-5 1e3 676.853 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f%&=$e^`4#e^`4#e^`4#e^`4#e^`4"eC<!teC<!teC<!teC<!teC<!teC;sre'ldpe'ldpe'ldpe'ldp
e'ldpe'c[mdaHRldaHRldaHRldaHRldaHRldF$@hdF$@hdF$@hdF$@hdF$@hdF$@gd*U.dd*U.dd*L%a
cd0q`cd0n^cHa_\cHa_[c-=MXc-=MXc-4DUbfn;Tbfn8RbKJ)PbKJ)Pb0%lLb0%lLb/qcIaiVZHaiVZG
aN2HDaN2HDa2c6@a2c6@a2c3>`l?$<`l?$;`Pog8`Pog8`Pf^5`5KU4`5KR2_o'C0_o'C/_SX1,_SX1,
~>
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2lprVc]n
rVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kj
r;?Kjr;?Kjr;6Bgqtp9fqtp9fqtp9fqtp9fqtp9eqYL'bqYL'bqYL'bqYL'bqYL'bqYBs_q>'j^q>'j^
q>'j^q>'j^q>'j]q"XXZq"XXZq"XXZq"XXZq"XXZq"OOWp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FV
~>
<~h;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-oCh;-rEhVR,G
hVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,GhVR,Hhr!>Khr!>Khr!>K
hr!>Khr!>Khr*GNi8EPOi8EPOi8EPOi8EPOi8EPPiSibSiSibSiSibSiSibSiSibSiSrkVio8tWio8tW
io8tWio8tWio8tXj5]1[j5]1[j5]1[j5]1[j5]1[j5f:^jQ,C_jQ,C_jQ,C_jQ,C_jQ,C`jlPUcjlPUc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
1252.69 279.786 mo
1252.69 279.806 1252.69 279.826 1252.69 279.847 cv
1252.68 279.89 1252.67 279.934 1252.68 279.977 cv
1252.68 280.045 1252.68 280.112 1252.7 280.182 cv
1253.3 283.202 1266.81 283.591 1270.22 284.077 cv
1273.63 284.564 1272.66 287 1281.91 287 cv
1291.16 287 1405.99 284.761 1487.36 288.459 cv
1508.78 289.433 1542.86 289.92 1551.63 288.945 cv
1560.39 287.973 1566.72 286.512 1564.29 284.564 cv
1564.25 284.531 1564.19 284.5 1564.13 284.468 cv
1564.13 284.467 1564.13 284.466 1564.13 284.465 cv
1564.07 284.433 1564 284.402 1563.93 284.372 cv
1563.93 284.372 li
1563.93 284.372 li
1559.49 282.548 1526.06 281.583 1519.49 282.131 cv
1513.65 282.617 1540.02 261.252 1547.25 244.643 cv
1552.12 233.445 1532.15 209.102 1514.14 206.181 cv
1504.88 204.678 1485.7 219.591 1476.85 230.287 cv
1476.85 230.286 1476.85 230.286 1476.85 230.285 cv
1476.79 230.364 1476.71 230.444 1476.65 230.523 cv
1476.58 230.612 1476.51 230.681 1476.46 230.733 cv
1476.45 230.738 1476.45 230.745 1476.44 230.75 cv
1476.39 230.799 1476.34 230.829 1476.3 230.849 cv
1476.29 230.852 1476.29 230.855 1476.28 230.856 cv
1476.24 230.871 1476.21 230.871 1476.18 230.858 cv
1476.18 230.856 1476.17 230.854 1476.17 230.852 cv
1476.14 230.834 1476.12 230.805 1476.11 230.763 cv
1476.11 230.756 1476.1 230.748 1476.1 230.74 cv
1476.09 230.694 1476.08 230.637 1476.07 230.565 cv
1476.07 230.555 1476.07 230.543 1476.07 230.531 cv
1476.07 230.456 1476.07 230.37 1476.07 230.271 cv
1476.08 230.261 1476.08 230.246 1476.08 230.234 cv
1476.08 230.13 1476.09 230.016 1476.11 229.887 cv
1476.11 229.881 1476.11 229.873 1476.11 229.864 cv
1476.13 229.739 1476.15 229.602 1476.17 229.456 cv
1476.17 229.436 1476.17 229.417 1476.18 229.397 cv
1476.2 229.256 1476.22 229.102 1476.25 228.942 cv
1476.26 228.903 1476.26 228.866 1476.27 228.825 cv
1476.3 228.676 1476.33 228.517 1476.36 228.354 cv
1476.37 228.29 1476.38 228.227 1476.39 228.16 cv
1476.42 228.018 1476.45 227.869 1476.48 227.717 cv
1477.55 222.209 1480.14 210.884 1477.14 205.207 cv
1472.79 196.985 1432.83 170.152 1403.62 170.152 cv
1376.34 170.152 1337.54 189.947 1326.21 203.745 cv
1315.01 217.377 1322.6 250.232 1325.24 256.813 cv
1326.21 259.248 1311.6 247.563 1299.43 249.511 cv
1288.37 251.281 1280.43 267.255 1283.85 275.801 cv
1283.85 275.801 1254.33 275.354 1252.74 279.606 cv
1252.74 279.611 1252.74 279.615 1252.74 279.62 cv
1252.72 279.675 1252.7 279.729 1252.69 279.786 cv
cp
.960784 1 .941176 rgb
f
1232.24 479.921 mo
1232.24 479.923 1232.24 479.924 1232.24 479.925 cv
1232.27 480.182 1232.36 480.434 1232.5 480.684 cv
1232.5 480.684 1232.5 480.684 1232.5 480.685 cv
1232.59 480.848 1232.71 481.011 1232.85 481.174 cv
1232.86 481.18 1232.86 481.188 1232.87 481.194 cv
1233.09 481.44 1233.35 481.688 1233.66 481.938 cv
1233.68 481.948 1233.69 481.959 1233.7 481.969 cv
1233.89 482.113 1234.08 482.258 1234.29 482.404 cv
1234.35 482.447 1234.42 482.49 1234.48 482.533 cv
1234.63 482.636 1234.79 482.739 1234.95 482.844 cv
1235.06 482.913 1235.17 482.982 1235.29 483.053 cv
1235.38 483.111 1235.48 483.171 1235.58 483.23 cv
1235.77 483.346 1235.96 483.463 1236.17 483.581 cv
1236.24 483.624 1236.32 483.668 1236.4 483.711 cv
1236.63 483.847 1236.87 483.984 1237.13 484.125 cv
1249.18 490.889 1437.75 489.775 1479.88 488.094 cv
1480.37 488.074 1480.84 488.04 1481.3 487.994 cv
1481.46 487.978 1481.6 487.952 1481.75 487.933 cv
1482.04 487.896 1482.33 487.863 1482.59 487.817 cv
1482.76 487.788 1482.91 487.75 1483.08 487.718 cv
1483.31 487.67 1483.55 487.624 1483.77 487.568 cv
1483.93 487.529 1484.07 487.481 1484.22 487.438 cv
1484.43 487.377 1484.64 487.319 1484.84 487.252 cv
1484.98 487.203 1485.11 487.147 1485.24 487.096 cv
1485.43 487.022 1485.62 486.951 1485.79 486.871 cv
1485.92 486.816 1486.03 486.755 1486.14 486.696 cv
1486.31 486.609 1486.49 486.524 1486.64 486.432 cv
1486.75 486.371 1486.84 486.306 1486.94 486.243 cv
1487.09 486.143 1487.25 486.043 1487.39 485.937 cv
1487.47 485.873 1487.55 485.806 1487.63 485.74 cv
1487.77 485.626 1487.91 485.511 1488.04 485.391 cv
1488.1 485.326 1488.17 485.26 1488.23 485.194 cv
1488.35 485.064 1488.48 484.934 1488.59 484.797 cv
1488.64 484.734 1488.69 484.671 1488.73 484.607 cv
1488.84 484.461 1488.95 484.313 1489.05 484.162 cv
1489.08 484.104 1489.12 484.044 1489.15 483.985 cv
1489.25 483.821 1489.34 483.656 1489.42 483.486 cv
1489.44 483.436 1489.46 483.384 1489.48 483.331 cv
1489.56 483.15 1489.63 482.966 1489.7 482.778 cv
1489.71 482.735 1489.72 482.692 1489.74 482.648 cv
1489.8 482.449 1489.85 482.246 1489.89 482.041 cv
1489.9 482.008 1489.91 481.975 1489.91 481.941 cv
1489.96 481.723 1489.99 481.502 1490.01 481.279 cv
1490.01 481.258 1490.02 481.236 1490.02 481.215 cv
1490.04 480.979 1490.05 480.74 1490.05 480.499 cv
1490.05 480.49 1490.05 480.479 1490.05 480.471 cv
1490.04 476.412 1487.11 471.937 1483.91 470.325 cv
1475.65 466.176 1468.93 465.156 1461.63 466.303 cv
1454.33 467.449 1464.06 446.805 1451.89 439.924 cv
1439.72 433.042 1425.12 438.775 1417.82 436.482 cv
1410.52 434.188 1421.47 377.99 1400.78 372.256 cv
1394.7 360.786 1384.96 355.051 1353.33 352.758 cv
1321.69 350.464 1277.88 353.905 1276.67 371.108 cv
1275.45 388.313 1271.8 420.426 1271.8 420.426 cv
1271.8 420.426 1251.11 429.601 1252.33 438.776 cv
1253.54 447.953 1249.27 467.826 1250.48 472.414 cv
1251.05 474.56 1239.26 473.836 1234.97 476.592 cv
1232.94 477.894 1232.15 478.943 1232.24 479.922 cv
1232.24 479.921 li
cp
f
837.008 197.338 mo
837.012 197.305 837.017 197.271 837.024 197.236 cv
837.04 197.166 837.063 197.09 837.093 197.01 cv
837.114 196.954 837.14 196.895 837.167 196.834 cv
837.2 196.76 837.235 196.686 837.278 196.605 cv
837.313 196.541 837.353 196.474 837.394 196.404 cv
837.429 196.346 837.467 196.285 837.507 196.223 cv
837.69 195.936 837.921 195.619 838.194 195.277 cv
838.222 195.242 838.249 195.209 838.278 195.174 cv
841.928 190.682 852.593 182.098 859.608 180.094 cv
869.22 177.346 882.262 180.779 890.501 184.212 cv
890.501 184.212 889.128 170.482 907.662 160.186 cv
926.197 149.889 939.927 161.558 939.927 161.558 cv
939.927 161.558 939.24 151.262 952.97 153.32 cv
952.97 153.32 948.164 127.921 958.462 117.623 cv
968.759 107.326 974.937 111.445 979.056 110.76 cv
983.175 110.071 974.937 97.0293 985.921 90.1641 cv
996.903 83.2998 1008.57 86.7324 1014.07 86.0449 cv
1019.56 85.3594 1014.75 75.748 1034.66 66.8242 cv
1054.57 57.9004 1058.69 62.0186 1058.69 62.0186 cv
1058.69 62.0186 1057.31 55.1543 1078.59 52.4082 cv
1099.88 49.6621 1136.26 51.7207 1146.56 63.3926 cv
1156.85 75.0625 1160.97 105.953 1160.29 130.667 cv
1159.6 155.38 1159.6 162.932 1159.6 162.932 cv
1159.6 162.932 1172.64 162.246 1171.27 172.541 cv
1171.27 172.541 1175.76 173.546 1176.23 179.81 cv
1176.23 179.809 1176.23 179.809 1176.23 179.808 cv
1176.23 179.814 1176.23 179.821 1176.23 179.828 cv
1176.25 180.073 1176.26 180.327 1176.27 180.589 cv
1176.27 180.629 1176.27 180.67 1176.27 180.71 cv
1176.27 180.941 1176.27 181.18 1176.26 181.423 cv
1176.26 181.488 1176.26 181.553 1176.25 181.619 cv
1176.24 181.85 1176.23 182.086 1176.21 182.327 cv
1176.2 182.404 1176.2 182.479 1176.19 182.557 cv
1176.16 182.87 1176.12 183.191 1176.07 183.524 cv
1174.7 193.136 1164.4 194.51 1141.75 195.195 cv
1119.1 195.881 1025.05 194.51 974.25 195.195 cv
923.45 195.881 841.761 197.941 837.642 197.941 cv
837.526 197.941 837.434 197.926 837.351 197.902 cv
837.326 197.896 837.306 197.887 837.284 197.879 cv
837.226 197.855 837.177 197.826 837.137 197.791 cv
837.124 197.779 837.108 197.77 837.098 197.758 cv
837.055 197.708 837.026 197.648 837.011 197.58 cv
837.007 197.56 837.007 197.535 837.005 197.514 cv
836.999 197.459 837 197.4 837.008 197.338 cv
cp
f
834.604 249.748 mo
834.603 249.75 834.601 249.752 834.6 249.755 cv
833.405 251.658 831.745 253.548 830.025 255.127 cv
830.022 255.129 830.02 255.131 830.018 255.133 cv
829.813 255.322 829.606 255.506 829.399 255.685 cv
829.389 255.693 829.378 255.703 829.368 255.713 cv
829.172 255.882 828.978 256.045 828.783 256.204 cv
828.761 256.223 828.739 256.242 828.716 256.26 cv
828.534 256.408 828.354 256.549 828.173 256.688 cv
828.139 256.715 828.104 256.742 828.07 256.77 cv
827.902 256.896 827.737 257.018 827.571 257.137 cv
827.526 257.17 827.48 257.205 827.435 257.236 cv
827.278 257.349 827.124 257.452 826.97 257.555 cv
826.919 257.589 826.867 257.627 826.816 257.659 cv
826.663 257.76 826.514 257.852 826.364 257.942 cv
826.315 257.973 826.266 258.006 826.218 258.034 cv
826.065 258.125 825.917 258.207 825.771 258.287 cv
825.729 258.311 825.685 258.337 825.643 258.359 cv
825.456 258.458 825.274 258.549 825.097 258.629 cv
819.502 261.188 682.713 263.744 659.707 263.744 cv
636.702 263.744 539.707 263.746 527.893 263.106 cv
521.035 262.734 514.214 263.106 513.592 259.909 cv
513.579 259.842 513.585 259.774 513.6 259.707 cv
513.603 259.689 513.606 259.674 513.612 259.657 cv
513.654 259.52 513.749 259.379 513.896 259.236 cv
513.912 259.221 513.929 259.205 513.946 259.189 cv
514.024 259.119 514.11 259.049 514.212 258.977 cv
514.214 258.977 514.214 258.975 514.217 258.974 cv
514.217 258.974 li
518.71 255.834 546.157 251.697 565.821 249.672 cv
571.885 249.049 572.628 234.44 579.004 231.344 cv
579.166 231.263 579.329 231.188 579.499 231.125 cv
586.338 228.566 616.184 226.646 623.024 226.646 cv
623.362 226.646 623.683 226.622 623.995 226.586 cv
624.043 226.58 624.092 226.577 624.14 226.57 cv
624.433 226.531 624.713 226.477 624.986 226.407 cv
625.04 226.395 625.093 226.38 625.146 226.365 cv
625.414 226.291 625.674 226.207 625.924 226.106 cv
625.963 226.092 626 226.073 626.039 226.057 cv
626.281 225.956 626.516 225.844 626.743 225.721 cv
626.765 225.709 626.789 225.699 626.811 225.687 cv
627.043 225.558 627.267 225.416 627.486 225.266 cv
627.534 225.233 627.583 225.201 627.63 225.168 cv
627.836 225.022 628.037 224.869 628.233 224.708 cv
628.288 224.663 628.342 224.617 628.396 224.572 cv
628.586 224.411 628.773 224.246 628.957 224.074 cv
629.012 224.021 629.067 223.967 629.122 223.914 cv
629.263 223.777 629.403 223.639 629.542 223.497 cv
629.647 223.389 629.754 223.278 629.86 223.166 cv
629.962 223.058 630.065 222.948 630.167 222.838 cv
632.297 220.521 634.347 217.76 637.946 216.413 cv
644.785 213.854 655.977 215.773 655.977 215.773 cv
655.977 215.773 669.035 195.944 678.361 189.549 cv
687.688 183.15 738.051 200.422 744.89 204.26 cv
751.729 208.096 747.999 216.413 747.999 216.413 cv
747.999 216.413 772.248 210.656 780.331 211.936 cv
788.414 213.215 798.984 224.088 800.849 227.926 cv
802.715 231.765 803.336 239.438 803.336 239.438 cv
803.336 239.438 824.476 237.521 833.181 240.719 cv
837.469 242.294 836.925 246.043 834.604 249.748 cv
834.604 249.748 li
cp
f
435.097 335.715 mo
435.101 335.706 435.106 335.697 435.11 335.688 cv
435.179 335.53 435.232 335.361 435.276 335.186 cv
435.282 335.162 435.289 335.137 435.294 335.113 cv
435.335 334.934 435.365 334.748 435.38 334.556 cv
435.381 334.549 435.381 334.54 435.381 334.533 cv
435.412 334.127 435.386 333.692 435.305 333.241 cv
435.303 333.229 435.301 333.217 435.298 333.204 cv
435.041 331.82 434.254 330.285 432.93 328.924 cv
432.93 328.924 432.929 328.923 432.928 328.923 cv
432.928 328.923 li
432.172 328.146 431.243 327.422 430.131 326.82 cv
423.814 323.394 408.663 319.677 404.674 318.738 cv
400.685 317.802 415.68 313.094 404.511 299.439 cv
399.104 292.828 374.368 287.182 374.368 287.182 cv
374.368 287.182 375.329 258.271 369.224 248.422 cv
367.336 245.375 362.032 243.371 355.318 242.113 cv
355.31 242.112 355.301 242.109 355.292 242.108 cv
354.695 241.998 354.085 241.892 353.467 241.792 cv
353.417 241.783 353.367 241.775 353.318 241.768 cv
352.723 241.672 352.119 241.583 351.507 241.498 cv
351.433 241.488 351.359 241.479 351.286 241.468 cv
350.684 241.386 350.077 241.309 349.463 241.236 cv
349.381 241.227 349.3 241.217 349.218 241.208 cv
348.6 241.136 347.977 241.069 347.348 241.007 cv
347.282 241 347.216 240.994 347.15 240.988 cv
346.496 240.925 345.838 240.865 345.176 240.812 cv
345.173 240.812 345.17 240.811 345.167 240.811 cv
345.167 240.811 345.167 240.811 345.168 240.811 cv
331.754 239.719 316.87 240.54 311.563 241.682 cv
301.846 243.771 296.548 258.066 297.164 263.714 cv
290.176 256.246 271.705 255.633 262.738 259.354 cv
253.946 263.004 253.109 283.141 254.444 288.515 cv
254.443 288.515 li
254.47 288.621 254.496 288.733 254.524 288.827 cv
254.561 288.951 254.58 289.063 254.589 289.168 cv
254.59 289.182 254.593 289.196 254.594 289.209 cv
254.6 289.307 254.59 289.393 254.571 289.473 cv
254.568 289.485 254.564 289.499 254.56 289.512 cv
254.537 289.588 254.502 289.655 254.455 289.714 cv
254.447 289.723 254.438 289.731 254.431 289.74 cv
254.378 289.798 254.316 289.849 254.239 289.889 cv
254.233 289.891 254.227 289.895 254.221 289.896 cv
254.142 289.936 254.049 289.967 253.944 289.988 cv
253.938 289.99 253.932 289.993 253.925 289.993 cv
253.819 290.015 253.699 290.026 253.569 290.03 cv
253.551 290.031 253.534 290.032 253.516 290.033 cv
253.386 290.034 253.245 290.029 253.092 290.017 cv
253.07 290.015 253.047 290.012 253.025 290.01 cv
252.867 289.994 252.7 289.973 252.52 289.942 cv
252.503 289.939 252.484 289.936 252.467 289.933 cv
252.086 289.866 251.657 289.769 251.183 289.641 cv
251.162 289.635 251.142 289.63 251.12 289.624 cv
250.89 289.561 250.648 289.49 250.396 289.415 cv
250.365 289.405 250.332 289.396 250.3 289.385 cv
250.046 289.308 249.785 289.225 249.512 289.135 cv
249.483 289.126 249.453 289.115 249.424 289.104 cv
249.139 289.011 248.846 288.911 248.54 288.804 cv
248.537 288.803 248.534 288.801 248.531 288.801 cv
248.213 288.688 247.884 288.571 247.545 288.445 cv
247.536 288.442 247.528 288.439 247.519 288.437 cv
247.192 288.315 246.854 288.188 246.507 288.058 cv
246.473 288.044 246.439 288.032 246.404 288.019 cv
246.063 287.889 245.714 287.754 245.355 287.613 cv
237.525 284.558 225.503 279.146 212.388 274.564 cv
199.672 270.122 189.259 268.973 181.122 271.919 cv
172.984 274.863 149.938 290.98 150.474 299.039 cv
150.489 299.27 150.514 299.503 150.545 299.738 cv
150.555 299.813 150.567 299.886 150.579 299.961 cv
150.603 300.125 150.631 300.29 150.663 300.457 cv
150.679 300.541 150.696 300.626 150.714 300.711 cv
150.749 300.877 150.788 301.044 150.83 301.211 cv
150.849 301.289 150.867 301.365 150.888 301.443 cv
150.948 301.669 151.013 301.896 151.085 302.124 cv
151.09 302.142 151.095 302.159 151.101 302.177 cv
151.178 302.422 151.264 302.668 151.355 302.916 cv
151.384 302.994 151.415 303.073 151.445 303.151 cv
151.511 303.324 151.579 303.497 151.65 303.67 cv
151.688 303.76 151.726 303.851 151.765 303.942 cv
151.837 304.11 151.913 304.28 151.99 304.45 cv
152.029 304.535 152.067 304.621 152.108 304.707 cv
152.208 304.919 152.313 305.131 152.42 305.344 cv
152.441 305.385 152.46 305.425 152.48 305.465 cv
152.608 305.713 152.742 305.962 152.879 306.211 cv
152.927 306.298 152.977 306.385 153.026 306.473 cv
153.12 306.639 153.215 306.804 153.313 306.971 cv
153.373 307.072 153.434 307.174 153.495 307.274 cv
153.59 307.432 153.687 307.588 153.785 307.744 cv
153.847 307.844 153.908 307.942 153.972 308.042 cv
154.085 308.22 154.203 308.396 154.32 308.572 cv
154.371 308.649 154.419 308.725 154.47 308.801 cv
154.631 309.037 154.795 309.274 154.962 309.51 cv
155.039 309.618 155.117 309.725 155.195 309.832 cv
155.295 309.971 155.397 310.11 155.5 310.249 cv
155.587 310.368 155.676 310.485 155.766 310.604 cv
155.862 310.73 155.958 310.856 156.056 310.982 cv
156.15 311.104 156.244 311.225 156.339 311.346 cv
156.436 311.468 156.535 311.589 156.633 311.712 cv
156.818 311.94 157.004 312.166 157.193 312.392 cv
157.281 312.496 157.368 312.603 157.457 312.707 cv
157.576 312.846 157.695 312.983 157.815 313.12 cv
157.896 313.213 157.978 313.306 158.059 313.399 cv
158.183 313.539 158.307 313.678 158.432 313.816 cv
158.509 313.9 158.586 313.985 158.663 314.07 cv
158.795 314.213 158.927 314.357 159.06 314.499 cv
159.119 314.563 159.178 314.624 159.237 314.687 cv
159.724 315.201 160.219 315.704 160.719 316.192 cv
160.765 316.237 160.811 316.283 160.857 316.328 cv
161.016 316.481 161.174 316.633 161.332 316.783 cv
161.381 316.828 161.43 316.874 161.479 316.921 cv
161.643 317.075 161.808 317.229 161.973 317.379 cv
161.996 317.4 162.019 317.42 162.042 317.442 cv
162.604 317.954 163.168 318.446 163.73 318.913 cv
163.738 318.919 163.745 318.926 163.751 318.932 cv
163.751 318.932 li
165.286 320.205 166.8 321.3 168.197 322.139 cv
175.292 326.393 148.924 321.498 138.59 317.939 cv
131.415 315.467 124.28 323.465 121.1 329.408 cv
121.1 329.408 li
121.098 329.412 121.095 329.418 121.092 329.423 cv
121.008 329.58 120.926 329.736 120.848 329.892 cv
120.847 329.893 120.846 329.893 120.846 329.895 cv
120.603 330.374 120.387 330.836 120.201 331.275 cv
120.2 331.278 120.199 331.279 120.198 331.282 cv
120.138 331.422 120.083 331.56 120.03 331.694 cv
120.025 331.704 120.022 331.713 120.018 331.724 cv
119.855 332.14 119.721 332.532 119.62 332.891 cv
119.617 332.9 119.614 332.909 119.612 332.919 cv
119.583 333.023 119.557 333.123 119.533 333.223 cv
119.528 333.244 119.522 333.267 119.518 333.289 cv
119.498 333.376 119.48 333.46 119.464 333.541 cv
119.46 333.563 119.456 333.585 119.451 333.608 cv
119.436 333.697 119.422 333.784 119.412 333.868 cv
119.411 333.877 119.409 333.886 119.408 333.895 cv
119.396 333.988 119.389 334.078 119.385 334.162 cv
119.384 334.176 119.385 334.188 119.384 334.201 cv
119.382 334.268 119.382 334.333 119.385 334.395 cv
119.385 334.419 119.388 334.44 119.389 334.464 cv
119.393 334.513 119.398 334.561 119.405 334.604 cv
119.408 334.628 119.412 334.65 119.417 334.672 cv
119.417 334.677 119.418 334.681 119.418 334.687 cv
119.418 334.686 li
119.418 334.686 119.419 334.687 119.419 334.688 cv
119.427 334.726 119.438 334.761 119.448 334.795 cv
119.454 334.813 119.458 334.83 119.464 334.847 cv
119.484 334.899 119.506 334.949 119.533 334.992 cv
122.243 339.366 140.439 334.883 193.522 334.234 cv
193.923 334.229 194.332 334.225 194.747 334.221 cv
194.837 334.22 194.93 334.218 195.021 334.218 cv
195.345 334.214 195.673 334.211 196.006 334.208 cv
196.13 334.206 196.257 334.205 196.382 334.205 cv
196.687 334.201 196.994 334.199 197.305 334.196 cv
197.441 334.195 197.579 334.194 197.715 334.192 cv
198.032 334.191 198.351 334.188 198.674 334.187 cv
198.806 334.186 198.938 334.185 199.071 334.184 cv
199.403 334.182 199.738 334.18 200.076 334.178 cv
200.204 334.177 200.332 334.177 200.46 334.175 cv
200.823 334.174 201.19 334.172 201.561 334.171 cv
201.667 334.17 201.772 334.169 201.878 334.169 cv
202.305 334.167 202.736 334.166 203.172 334.164 cv
203.225 334.163 203.277 334.163 203.33 334.163 cv
204.858 334.159 206.445 334.155 208.086 334.154 cv
208.091 334.154 208.095 334.154 208.099 334.154 cv
209.198 334.153 210.32 334.153 211.467 334.154 cv
211.472 334.154 211.478 334.154 211.483 334.154 cv
212.032 334.154 212.587 334.156 213.147 334.156 cv
213.196 334.156 213.244 334.156 213.292 334.156 cv
213.855 334.157 214.421 334.158 214.994 334.159 cv
214.995 334.159 214.997 334.159 214.999 334.159 cv
245.48 334.225 290.475 334.813 331.646 335.469 cv
331.847 335.472 332.049 335.476 332.25 335.479 cv
332.835 335.488 333.42 335.497 334.004 335.507 cv
334.179 335.51 334.353 335.513 334.528 335.516 cv
335.122 335.524 335.715 335.534 336.307 335.544 cv
336.566 335.549 336.827 335.552 337.085 335.557 cv
337.56 335.564 338.033 335.572 338.506 335.579 cv
338.763 335.584 339.02 335.588 339.275 335.593 cv
339.671 335.599 340.065 335.604 340.46 335.611 cv
377.339 336.215 409.96 336.845 424.502 337.158 cv
424.512 337.158 424.521 337.159 424.531 337.159 cv
428.632 337.248 431.292 337.31 432.195 337.341 cv
432.418 337.348 432.625 337.334 432.826 337.312 cv
432.864 337.307 432.903 337.303 432.941 337.297 cv
433.13 337.27 433.308 337.229 433.474 337.175 cv
433.506 337.164 433.536 337.151 433.567 337.141 cv
433.728 337.082 433.88 337.016 434.019 336.935 cv
434.028 336.93 434.038 336.926 434.046 336.92 cv
434.191 336.835 434.32 336.734 434.441 336.625 cv
434.465 336.604 434.489 336.583 434.511 336.562 cv
434.626 336.449 434.731 336.33 434.824 336.199 cv
434.837 336.18 434.849 336.159 434.862 336.14 cv
434.951 336.006 435.03 335.865 435.097 335.715 cv
cp
f
86.6406 289.169 mo
71.6216 287.651 63.7114 285.513 62.915 284.133 cv
62.8418 284.006 63.0513 283.659 63.4888 283.13 cv
63.5854 283.013 63.6938 282.887 63.812 282.753 cv
63.8242 282.739 63.8374 282.725 63.8496 282.711 cv
63.9561 282.591 64.0708 282.465 64.1934 282.332 cv
64.2153 282.308 64.2378 282.284 64.2603 282.26 cv
64.5405 281.958 64.8584 281.626 65.2124 281.265 cv
65.2329 281.244 65.2539 281.223 65.2744 281.202 cv
65.4351 281.038 65.6025 280.868 65.7769 280.694 cv
65.8042 280.667 65.8311 280.64 65.8589 280.612 cv
66.2515 280.22 66.6758 279.801 67.1289 279.358 cv
67.1621 279.326 67.1963 279.293 67.2295 279.261 cv
67.4336 279.062 67.6426 278.858 67.8579 278.649 cv
67.8853 278.623 67.9121 278.598 67.9395 278.571 cv
68.4258 278.101 68.9385 277.607 69.4727 277.097 cv
69.5156 277.056 69.5601 277.013 69.6035 276.972 cv
69.8232 276.761 70.0469 276.548 70.2734 276.331 cv
70.3345 276.273 70.394 276.216 70.4551 276.158 cv
71.0166 275.623 71.5962 275.072 72.1919 274.507 cv
72.1953 274.503 72.1982 274.501 72.2012 274.497 cv
73.1353 273.61 74.106 272.689 75.0972 271.746 cv
75.0972 271.746 75.0967 271.746 75.0967 271.747 cv
84.0503 263.226 94.6719 252.899 94.771 249.629 cv
94.9443 243.898 86.6084 234.452 84.2275 232.092 cv
81.8472 229.731 56.1323 221.346 46.8604 224.149 cv
43.3989 225.196 39.7485 227.099 36.3892 229.184 cv
36.3892 229.183 li
36.3853 229.186 36.3818 229.188 36.3774 229.19 cv
36.0493 229.394 35.7241 229.6 35.4023 229.807 cv
35.3267 229.854 35.2524 229.903 35.1777 229.952 cv
34.9346 230.109 34.6929 230.267 34.4536 230.425 cv
34.3589 230.487 34.2656 230.549 34.1724 230.611 cv
33.9414 230.766 33.7124 230.919 33.4858 231.073 cv
33.4067 231.126 33.3276 231.181 33.249 231.233 cv
32.9688 231.426 32.6919 231.616 32.4194 231.808 cv
32.3999 231.821 32.3799 231.835 32.3604 231.849 cv
32.0601 232.059 31.7646 232.268 31.4746 232.476 cv
31.4204 232.515 31.3682 232.552 31.3149 232.591 cv
31.0845 232.756 30.8569 232.92 30.6338 233.083 cv
30.5596 233.138 30.4868 233.19 30.4136 233.245 cv
30.2061 233.397 30.0024 233.548 29.8013 233.696 cv
29.7368 233.745 29.6724 233.793 29.6084 233.841 cv
29.3608 234.025 29.1177 234.208 28.8818 234.388 cv
28.875 234.392 28.8682 234.397 28.8618 234.402 cv
28.6025 234.599 28.3516 234.791 28.1074 234.979 cv
28.0864 234.995 28.0664 235.011 28.0459 235.026 cv
27.8286 235.193 27.6191 235.356 27.415 235.516 cv
27.3774 235.545 27.3413 235.573 27.3042 235.603 cv
27.1079 235.756 26.9175 235.905 26.7339 236.05 cv
26.7148 236.065 26.6953 236.08 26.6763 236.095 cv
25.5952 236.949 24.7446 237.643 24.2031 238.072 cv
24.2031 238.072 24.5742 232.54 24.1709 230.369 cv
23.9507 229.188 13.7739 224.138 .000976563 220.237 cv
.000976563 295.435 li
1.44775 295.367 2.88037 295.303 4.29395 295.244 cv
46.5596 293.485 95.9624 298.021 103.075 298.583 cv
103.294 298.601 103.516 298.612 103.74 298.62 cv
103.818 298.622 103.899 298.621 103.978 298.622 cv
104.125 298.626 104.271 298.629 104.42 298.628 cv
104.515 298.627 104.612 298.622 104.708 298.62 cv
104.842 298.616 104.976 298.614 105.111 298.608 cv
105.213 298.604 105.316 298.596 105.419 298.59 cv
105.55 298.581 105.682 298.574 105.813 298.563 cv
105.918 298.556 106.023 298.544 106.127 298.534 cv
106.26 298.521 106.391 298.51 106.524 298.494 cv
106.632 298.482 106.74 298.468 106.848 298.454 cv
106.978 298.438 107.106 298.422 107.236 298.403 cv
107.347 298.388 107.458 298.37 107.57 298.353 cv
107.698 298.333 107.827 298.313 107.955 298.292 cv
108.066 298.272 108.176 298.252 108.286 298.231 cv
108.415 298.208 108.543 298.186 108.672 298.16 cv
108.783 298.139 108.895 298.115 109.006 298.093 cv
109.134 298.065 109.261 298.039 109.388 298.011 cv
109.5 297.987 109.61 297.961 109.721 297.936 cv
109.847 297.906 109.974 297.878 110.1 297.847 cv
110.209 297.82 110.318 297.792 110.427 297.765 cv
110.554 297.732 110.682 297.7 110.809 297.666 cv
110.915 297.639 111.021 297.608 111.127 297.579 cv
111.253 297.546 111.378 297.511 111.503 297.475 cv
111.609 297.444 111.715 297.413 111.82 297.382 cv
111.944 297.346 112.067 297.309 112.19 297.271 cv
112.293 297.239 112.396 297.207 112.499 297.175 cv
112.621 297.136 112.743 297.097 112.863 297.058 cv
112.963 297.025 113.063 296.992 113.162 296.959 cv
113.283 296.918 113.404 296.877 113.523 296.836 cv
113.619 296.804 113.712 296.771 113.806 296.736 cv
113.926 296.694 114.045 296.651 114.163 296.608 cv
114.255 296.574 114.346 296.54 114.438 296.507 cv
114.553 296.463 114.668 296.419 114.781 296.376 cv
114.869 296.343 114.957 296.308 115.043 296.274 cv
115.158 296.229 115.27 296.185 115.382 296.139 cv
115.464 296.105 115.545 296.072 115.626 296.038 cv
115.736 295.993 115.844 295.948 115.951 295.901 cv
116.031 295.868 116.109 295.835 116.187 295.802 cv
116.292 295.756 116.395 295.71 116.497 295.665 cv
116.57 295.632 116.643 295.599 116.715 295.565 cv
116.816 295.52 116.914 295.475 117.011 295.429 cv
117.08 295.396 117.149 295.364 117.216 295.332 cv
117.311 295.286 117.403 295.241 117.494 295.196 cv
117.558 295.165 117.621 295.134 117.683 295.103 cv
117.771 295.058 117.855 295.014 117.939 294.97 cv
117.999 294.938 118.06 294.907 118.117 294.877 cv
118.196 294.835 118.271 294.793 118.346 294.751 cv
118.402 294.72 118.459 294.689 118.513 294.659 cv
118.584 294.618 118.651 294.579 118.718 294.539 cv
118.768 294.51 118.819 294.479 118.867 294.45 cv
118.93 294.412 118.988 294.376 119.046 294.338 cv
119.091 294.31 119.138 294.28 119.181 294.252 cv
119.233 294.218 119.281 294.184 119.329 294.149 cv
119.37 294.122 119.413 294.093 119.45 294.065 cv
119.492 294.034 119.528 294.005 119.565 293.976 cv
119.602 293.948 119.639 293.919 119.671 293.892 cv
119.703 293.866 119.728 293.842 119.755 293.816 cv
119.785 293.789 119.818 293.761 119.844 293.734 cv
119.863 293.714 119.877 293.696 119.894 293.677 cv
119.918 293.649 119.945 293.62 119.964 293.593 cv
119.973 293.581 119.977 293.57 119.984 293.559 cv
120.002 293.528 120.021 293.498 120.03 293.472 cv
120.03 293.471 li
120.042 293.436 120.047 293.402 120.042 293.374 cv
119.638 291.204 101.66 290.687 86.6406 289.169 cv
cp
f
2e3 220.237 mo
1988.45 216.966 1974.37 214.502 1961.49 215.817 cv
1933.26 218.701 1906.64 231.456 1900.94 236.615 cv
1895.23 241.774 1897 253.8 1906.24 275.705 cv
1907.23 278.07 1905.85 278.076 1903.09 278.089 cv
1900.32 278.1 1883.5 279.379 1889.3 288.418 cv
1890.69 290.585 1888.52 290.199 1880.82 290.626 cv
1874.26 290.991 1865.13 293.372 1865.02 296.988 cv
1865.02 296.989 1865.02 296.991 1865.02 296.992 cv
1865.02 297.139 1865.03 297.287 1865.06 297.438 cv
1865.06 297.461 1865.06 297.483 1865.07 297.507 cv
1865.1 297.636 1865.13 297.765 1865.18 297.896 cv
1865.2 297.933 1865.21 297.97 1865.22 298.007 cv
1865.28 298.128 1865.34 298.251 1865.41 298.375 cv
1865.44 298.415 1865.46 298.456 1865.48 298.497 cv
1865.58 298.659 1865.7 298.821 1865.84 298.985 cv
1868.74 302.435 1883.25 304.641 1893.51 303.808 cv
1903.44 303.002 1958.19 297.396 2e3 295.435 cv
2e3 220.237 li
cp
f
309.89 154.496 mo
310.111 154.471 310.312 154.426 310.502 154.372 cv
310.558 154.355 310.611 154.336 310.665 154.318 cv
310.798 154.271 310.924 154.219 311.042 154.158 cv
311.088 154.133 311.137 154.109 311.182 154.084 cv
311.327 153.998 311.461 153.902 311.58 153.794 cv
311.584 153.789 311.59 153.785 311.595 153.781 cv
311.719 153.666 311.826 153.537 311.921 153.4 cv
311.95 153.361 311.973 153.318 311.999 153.277 cv
312.065 153.17 312.124 153.059 312.176 152.941 cv
312.197 152.895 312.217 152.85 312.236 152.801 cv
312.295 152.648 312.346 152.488 312.383 152.32 cv
312.386 152.311 312.389 152.3 312.392 152.289 cv
312.432 152.105 312.457 151.913 312.473 151.715 cv
312.477 151.664 312.479 151.611 312.481 151.561 cv
312.49 151.404 312.492 151.244 312.488 151.078 cv
312.486 151.023 312.485 150.969 312.483 150.912 cv
312.471 150.703 312.454 150.489 312.423 150.27 cv
312.423 150.266 312.423 150.264 312.422 150.26 cv
312.391 150.025 312.346 149.785 312.294 149.541 cv
312.286 149.501 312.275 149.46 312.266 149.42 cv
312.219 149.213 312.167 149.005 312.108 148.795 cv
312.094 148.75 312.082 148.705 312.069 148.66 cv
311.919 148.152 311.736 147.637 311.522 147.12 cv
311.516 147.105 311.51 147.092 311.503 147.078 cv
311.4 146.831 311.291 146.584 311.174 146.34 cv
311.163 146.314 311.151 146.289 311.138 146.263 cv
309.844 143.551 307.821 140.989 305.952 140.055 cv
299.39 136.773 281.013 139.398 277.075 139.398 cv
273.136 139.398 280.034 129.23 271.168 120.365 cv
265.917 115.115 249.724 115.553 239.008 117.085 cv
234.413 117.74 244.001 91.6318 236.383 76.3916 cv
232.445 68.5156 227.195 69.1738 227.195 69.1738 cv
227.195 69.1738 227.195 54.7324 212.098 44.8892 cv
197.003 35.0454 155.65 31.6597 138.591 32.4185 cv
109.056 33.731 109.056 47.5132 109.056 47.5132 cv
109.056 47.5132 97.8999 43.5762 88.7104 54.7324 cv
79.522 65.8906 84.1167 90.1738 83.4595 94.1133 cv
82.8047 98.0498 74.9287 95.4238 66.3965 98.7061 cv
57.8628 101.988 51.2998 111.822 51.2998 131.523 cv
51.2998 135.461 46.0493 134.148 38.1753 137.43 cv
32.8848 139.635 29.6714 143.911 29.5215 147.477 cv
29.5215 147.477 li
29.5215 147.479 29.5215 147.479 29.5215 147.48 cv
29.4946 148.123 29.5679 148.742 29.7466 149.322 cv
29.7524 149.342 29.7588 149.36 29.7651 149.379 cv
29.8203 149.553 29.8848 149.721 29.9595 149.887 cv
29.9673 149.904 29.9746 149.922 29.9824 149.939 cv
30.145 150.288 30.3516 150.617 30.603 150.926 cv
30.6343 150.965 30.6685 151.002 30.7017 151.041 cv
30.7988 151.152 30.9028 151.262 31.0122 151.367 cv
31.0522 151.406 31.0918 151.445 31.1333 151.482 cv
31.2827 151.617 31.4404 151.748 31.6113 151.87 cv
36.1436 155.105 81.4907 151.87 148.436 154.496 cv
215.38 157.117 301.017 155.479 309.89 154.496 cv
cp
f
1842.56 399.52 mo
1842.65 399.503 1842.75 399.479 1842.84 399.461 cv
1843.05 399.422 1843.25 399.384 1843.45 399.335 cv
1843.57 399.307 1843.68 399.271 1843.8 399.239 cv
1843.98 399.191 1844.16 399.145 1844.33 399.089 cv
1844.46 399.05 1844.57 399.004 1844.7 398.963 cv
1844.86 398.904 1845.03 398.848 1845.2 398.783 cv
1845.32 398.735 1845.44 398.682 1845.56 398.63 cv
1845.72 398.563 1845.88 398.497 1846.04 398.424 cv
1846.16 398.367 1846.29 398.305 1846.41 398.245 cv
1846.56 398.168 1846.72 398.094 1846.87 398.013 cv
1846.99 397.948 1847.11 397.879 1847.23 397.812 cv
1847.38 397.727 1847.53 397.644 1847.68 397.555 cv
1847.79 397.482 1847.91 397.406 1848.03 397.332 cv
1848.18 397.24 1848.32 397.148 1848.46 397.054 cv
1848.58 396.975 1848.7 396.892 1848.81 396.81 cv
1848.95 396.711 1849.09 396.613 1849.23 396.512 cv
1849.34 396.428 1849.46 396.339 1849.57 396.252 cv
1849.71 396.146 1849.84 396.043 1849.97 395.935 cv
1850.09 395.844 1850.2 395.75 1850.31 395.658 cv
1850.44 395.548 1850.57 395.438 1850.7 395.325 cv
1850.81 395.23 1850.91 395.133 1851.02 395.035 cv
1851.15 394.92 1851.28 394.805 1851.4 394.686 cv
1851.5 394.587 1851.61 394.486 1851.71 394.385 cv
1851.83 394.266 1851.96 394.146 1852.08 394.023 cv
1852.18 393.92 1852.28 393.814 1852.38 393.709 cv
1852.5 393.588 1852.61 393.466 1852.73 393.343 cv
1852.83 393.234 1852.93 393.125 1853.03 393.014 cv
1853.14 392.891 1853.25 392.768 1853.36 392.643 cv
1853.46 392.531 1853.55 392.418 1853.65 392.305 cv
1853.75 392.18 1853.86 392.055 1853.96 391.93 cv
1854.05 391.814 1854.15 391.699 1854.24 391.584 cv
1854.34 391.459 1854.44 391.332 1854.54 391.206 cv
1854.63 391.09 1854.72 390.973 1854.81 390.855 cv
1854.9 390.73 1855 390.604 1855.09 390.479 cv
1855.18 390.359 1855.26 390.239 1855.35 390.119 cv
1855.44 389.996 1855.53 389.873 1855.61 389.751 cv
1855.7 389.629 1855.78 389.508 1855.86 389.386 cv
1855.95 389.265 1856.03 389.144 1856.11 389.022 cv
1856.19 388.898 1856.27 388.775 1856.35 388.652 cv
1856.43 388.535 1856.5 388.42 1856.57 388.304 cv
1856.65 388.178 1856.73 388.053 1856.81 387.928 cv
1856.88 387.816 1856.94 387.705 1857.01 387.593 cv
1857.09 387.466 1857.16 387.339 1857.24 387.213 cv
1857.3 387.107 1857.36 387.004 1857.42 386.898 cv
1857.49 386.769 1857.56 386.639 1857.63 386.511 cv
1857.69 386.416 1857.74 386.321 1857.79 386.227 cv
1857.86 386.093 1857.93 385.959 1858 385.828 cv
1858.05 385.742 1858.09 385.658 1858.13 385.573 cv
1858.2 385.438 1858.27 385.301 1858.34 385.168 cv
1858.38 385.093 1858.41 385.021 1858.45 384.947 cv
1858.51 384.808 1858.58 384.67 1858.64 384.535 cv
1858.67 384.471 1858.7 384.41 1858.73 384.348 cv
1858.79 384.207 1858.85 384.066 1858.91 383.932 cv
1858.94 383.882 1858.95 383.834 1858.97 383.785 cv
1859.04 383.641 1859.1 383.498 1859.15 383.36 cv
1859.17 383.327 1859.18 383.297 1859.19 383.264 cv
1859.25 383.115 1859.3 382.969 1859.36 382.828 cv
1859.36 382.813 1859.37 382.797 1859.37 382.781 cv
1859.54 382.308 1859.67 381.884 1859.75 381.531 cv
1860.65 377.458 1847.53 375.195 1834.85 378.363 cv
1834.85 378.363 1849.34 362.068 1841.64 352.563 cv
1833.95 343.057 1821.28 339.888 1812.22 342.15 cv
1812.22 342.15 1812.54 320.123 1797.74 310.466 cv
1783.4 301.108 1754.12 303.331 1743.42 303.676 cv
1729.39 304.128 1725.31 315.445 1725.31 317.709 cv
1725.31 319.972 1709.02 311.823 1703.13 312.275 cv
1697.25 312.729 1659.68 338.982 1659.23 350.3 cv
1658.77 361.615 1675.07 383.795 1680.95 389.227 cv
1680.95 389.227 1672.8 386.964 1661.04 381.531 cv
1654.18 378.366 1632.24 390.449 1631.3 395.311 cv
1631.3 395.316 1631.3 395.323 1631.3 395.329 cv
1631.27 395.471 1631.26 395.606 1631.27 395.735 cv
1631.27 395.747 1631.28 395.758 1631.28 395.77 cv
1631.29 395.895 1631.32 396.014 1631.37 396.124 cv
1631.38 396.135 1631.38 396.144 1631.39 396.154 cv
1631.45 396.266 1631.52 396.372 1631.61 396.469 cv
1634.63 399.489 1651.98 400.543 1679.6 401.448 cv
1705.87 402.309 1831.69 400.543 1841.64 399.639 cv
1841.95 399.61 1842.25 399.57 1842.56 399.52 cv
cp
f
1845.74 154.835 mo
1845.71 145.707 1802.22 107.044 1791.63 103.284 cv
1785.52 101.12 1762.87 117.6 1760.24 116.949 cv
1757.62 116.299 1759.61 99.9316 1753.07 91.4697 cv
1746.53 83.0107 1719.64 73.4971 1708.89 75.8887 cv
1698.14 78.2803 1683.02 93.4893 1681.33 97.9609 cv
1679.63 102.433 1688.73 119.678 1683.71 124.529 cv
1678.68 129.381 1662.43 118.783 1654.52 118.777 cv
1646.61 118.771 1619.49 133.144 1614.19 143.731 cv
1611.02 150.057 1613.14 164.077 1618.1 167.791 cv
1623.06 171.504 1633.86 176.368 1637.02 177.953 cv
1640.18 179.537 1624.57 177.413 1620.48 179.046 cv
1617.36 180.291 1611.81 183.655 1611.05 185.622 cv
1611.05 185.622 1611.05 185.622 1611.05 185.621 cv
1611.05 185.625 1611.05 185.629 1611.05 185.633 cv
1611.02 185.703 1611 185.771 1610.99 185.839 cv
1610.98 185.846 1610.98 185.852 1610.98 185.858 cv
1610.97 185.924 1610.96 185.987 1610.96 186.048 cv
1610.96 186.057 1610.96 186.064 1610.97 186.074 cv
1610.97 186.132 1610.97 186.188 1610.99 186.242 cv
1610.99 186.254 1611 186.266 1611 186.277 cv
1611.02 186.326 1611.04 186.375 1611.07 186.42 cv
1611.08 186.436 1611.09 186.449 1611.1 186.465 cv
1611.13 186.505 1611.16 186.545 1611.2 186.582 cv
1611.22 186.601 1611.25 186.617 1611.27 186.635 cv
1611.31 186.666 1611.34 186.697 1611.39 186.725 cv
1611.43 186.748 1611.48 186.768 1611.52 186.789 cv
1611.56 186.809 1611.6 186.83 1611.64 186.848 cv
1611.74 186.887 1611.84 186.92 1611.96 186.95 cv
1615.67 187.895 1642.96 185.703 1696.37 185.584 cv
1749.77 185.461 1830.29 185.044 1844.09 184.826 cv
1850.7 184.723 1853.69 183.063 1853.69 181.748 cv
1853.69 181.641 1853.67 181.528 1853.64 181.414 cv
1853.63 181.39 1853.63 181.365 1853.62 181.34 cv
1853.59 181.23 1853.55 181.118 1853.5 181.003 cv
1853.5 181 1853.5 180.996 1853.5 180.993 cv
1853.5 180.994 li
1852.26 178.309 1845.28 174.379 1841.7 174.078 cv
1837.78 173.748 1826.32 176.738 1824.3 177.228 cv
1822.28 177.719 1845.76 162.718 1845.74 154.835 cv
cp
f
1183.11 346.047 mo
1183.11 345.844 1183.09 345.63 1183.06 345.408 cv
1183.06 345.402 1183.06 345.395 1183.06 345.389 cv
1183.03 345.173 1182.98 344.951 1182.93 344.723 cv
1182.93 344.722 1182.93 344.72 1182.92 344.719 cv
1182.92 344.719 1182.92 344.719 1182.92 344.719 cv
1182.16 341.697 1179.07 337.715 1175.33 336.965 cv
1171 336.102 1162.36 336.965 1162.36 336.965 cv
1163.22 334.372 1166.68 324.858 1165.38 323.129 cv
1159.41 315.165 1139.87 306.264 1135.11 306.695 cv
1130.36 307.131 1126.9 313.184 1124.74 311.887 cv
1122.57 310.589 1127.33 298.049 1124.3 293.725 cv
1121.28 289.4 1094.03 260.86 1087.55 257.833 cv
1081.06 254.807 1038.25 263.021 1031.76 269.51 cv
1018.96 282.31 1014.47 301.075 1012.3 299.344 cv
1010.14 297.615 995.007 291.562 983.333 296.752 cv
971.658 301.939 968.065 313.9 966.901 313.184 cv
965.207 312.141 962.071 306.352 953.495 304.102 cv
949.73 303.113 938.188 303.939 933.604 307.993 cv
931.771 309.613 930.144 312.75 930.144 312.75 cv
918.471 308.428 908.519 309.488 902.469 314.047 cv
895.457 319.332 893.389 328.318 893.389 328.318 cv
890.361 327.885 875.712 325.65 865.713 327.021 cv
862.18 327.506 850.143 329.268 841.931 333.507 cv
838.305 335.379 825.775 344.479 825.296 346.879 cv
825.193 347.392 824.823 348.338 825.034 349.221 cv
825.034 349.221 li
825.034 349.221 825.035 349.223 825.035 349.224 cv
825.105 349.518 825.24 349.803 825.471 350.064 cv
825.478 350.072 825.486 350.08 825.493 350.088 cv
825.543 350.143 825.597 350.195 825.654 350.247 cv
825.669 350.261 825.686 350.274 825.702 350.287 cv
825.755 350.333 825.813 350.377 825.874 350.42 cv
825.896 350.436 825.918 350.451 825.94 350.466 cv
826.001 350.507 826.067 350.546 826.136 350.584 cv
826.162 350.599 826.187 350.613 826.213 350.627 cv
826.289 350.666 826.37 350.704 826.453 350.74 cv
826.478 350.751 826.5 350.762 826.525 350.772 cv
826.75 350.865 827.003 350.947 827.292 351.016 cv
827.323 351.023 827.358 351.03 827.391 351.037 cv
827.503 351.063 827.618 351.086 827.739 351.107 cv
827.794 351.117 827.852 351.125 827.908 351.135 cv
828.017 351.15 828.126 351.167 828.243 351.182 cv
828.309 351.189 828.378 351.196 828.446 351.203 cv
828.561 351.215 828.679 351.225 828.802 351.233 cv
828.877 351.238 828.953 351.243 829.032 351.248 cv
829.159 351.254 829.291 351.259 829.425 351.263 cv
829.507 351.265 829.587 351.268 829.67 351.269 cv
829.82 351.271 829.979 351.27 830.137 351.268 cv
830.214 351.267 830.287 351.267 830.364 351.266 cv
830.606 351.26 830.857 351.25 831.12 351.236 cv
831.12 351.236 1093.78 351.594 1151.61 351.334 cv
1151.72 351.333 1151.83 351.332 1151.95 351.332 cv
1152.33 351.33 1152.71 351.328 1153.07 351.326 cv
1153.32 351.325 1153.56 351.324 1153.8 351.322 cv
1153.95 351.322 1154.1 351.321 1154.25 351.32 cv
1154.46 351.319 1154.66 351.318 1154.86 351.316 cv
1155.04 351.316 1155.22 351.314 1155.39 351.314 cv
1155.71 351.313 1156.03 351.31 1156.33 351.308 cv
1156.46 351.307 1156.58 351.307 1156.71 351.305 cv
1156.89 351.305 1157.06 351.303 1157.22 351.302 cv
1157.38 351.301 1157.54 351.299 1157.69 351.298 cv
1157.95 351.297 1158.21 351.294 1158.45 351.292 cv
1158.53 351.291 1158.61 351.291 1158.69 351.29 cv
1158.9 351.287 1159.1 351.286 1159.3 351.284 cv
1159.37 351.283 1159.45 351.283 1159.51 351.282 cv
1159.76 351.279 1159.99 351.277 1160.2 351.273 cv
1160.24 351.273 1160.27 351.273 1160.3 351.273 cv
1160.49 351.271 1160.66 351.269 1160.83 351.266 cv
1160.88 351.266 1160.93 351.265 1160.98 351.264 cv
1161.17 351.262 1161.35 351.258 1161.51 351.256 cv
1161.51 351.256 1161.51 351.256 1161.51 351.256 cv
1161.67 351.252 1161.8 351.25 1161.93 351.247 cv
1161.96 351.246 1162 351.246 1162.04 351.244 cv
1162.15 351.242 1162.27 351.238 1162.36 351.236 cv
1163.15 351.21 1163.93 351.18 1164.68 351.145 cv
1164.71 351.143 1164.75 351.142 1164.79 351.141 cv
1165.52 351.105 1166.23 351.066 1166.92 351.023 cv
1166.96 351.021 1167.01 351.018 1167.06 351.016 cv
1167.74 350.973 1168.4 350.924 1169.05 350.872 cv
1169.09 350.868 1169.14 350.865 1169.18 350.861 cv
1169.82 350.809 1170.44 350.751 1171.04 350.689 cv
1171.08 350.686 1171.12 350.682 1171.15 350.678 cv
1171.76 350.616 1172.33 350.549 1172.89 350.478 cv
1172.92 350.474 1172.95 350.47 1172.98 350.466 cv
1173.54 350.394 1174.08 350.316 1174.6 350.235 cv
1174.62 350.232 1174.64 350.229 1174.67 350.225 cv
1175.18 350.143 1175.68 350.056 1176.15 349.965 cv
1176.17 349.961 1176.19 349.958 1176.2 349.954 cv
1176.67 349.863 1177.12 349.767 1177.54 349.666 cv
1177.55 349.663 1177.56 349.66 1177.58 349.658 cv
1177.58 349.658 li
1181.21 348.789 1183.11 347.586 1183.11 346.047 cv
cp
f
0 567.161 mo
0 379.936 li
0 377.183 19.3066 338.637 19.3066 338.637 cv
30.2646 280.817 li
180.939 278.063 li
208.336 338.637 li
317.918 341.39 li
326.136 435.002 li
383.667 446.016 li
408.322 520.354 li
463.113 523.108 li
474.071 410.223 li
498.728 410.223 li
520.644 330.377 li
616.528 330.377 li
638.444 311.104 li
761.725 316.61 li
767.203 352.403 li
783.641 355.156 li
808.297 459.782 li
885.004 459.782 li
895.962 528.614 li
928.837 531.368 li
928.837 487.315 li
986.367 473.549 li
1000.07 396.456 li
1046.64 390.949 li
1046.64 363.416 li
1137.04 368.923 li
1142.52 352.403 li
1227.45 355.156 li
1235.67 382.689 li
1252.1 382.689 li
1260.32 440.509 li
1293.2 443.262 li
1304.16 468.042 li
1353.47 468.042 li
1353.47 388.196 li
1367.17 382.689 li
1383.6 316.61 li
1446.61 316.61 li
1501.4 302.844 li
1534.28 344.144 li
1539.76 412.976 li
1602.77 415.729 li
1613.72 374.43 li
1632.9 374.43 li
1641.12 349.649 li
1698.65 357.91 li
1717.83 437.756 li
1775.36 437.756 li
1783.58 388.196 li
1843.85 382.689 li
1854.8 349.649 li
1931.51 346.896 li
1942.47 382.689 li
2e3 379.936 li
2e3 558.901 li
0 567.161 li
cp
.647059 .882353 .776471 rgb
f
0 567.161 mo
0 379.936 li
0 377.183 19.3066 338.637 19.3066 338.637 cv
30.2646 280.817 li
180.939 278.063 li
208.336 338.637 li
317.918 341.39 li
326.136 435.002 li
383.667 446.016 li
408.322 520.354 li
463.113 523.108 li
474.071 410.223 li
498.728 410.223 li
520.644 330.377 li
616.528 330.377 li
638.444 311.104 li
761.725 316.61 li
767.203 352.403 li
783.641 355.156 li
808.297 459.782 li
885.004 459.782 li
895.962 528.614 li
928.837 531.368 li
928.837 487.315 li
986.367 473.549 li
1000.07 396.456 li
1046.64 390.949 li
1046.64 363.416 li
1137.04 368.923 li
1142.52 352.403 li
1227.45 355.156 li
1235.67 382.689 li
1252.1 382.689 li
1260.32 440.509 li
1293.2 443.262 li
1304.16 468.042 li
1353.47 468.042 li
1353.47 388.196 li
1367.17 382.689 li
1383.6 316.61 li
1446.61 316.61 li
1501.4 302.844 li
1534.28 344.144 li
1539.76 412.976 li
1602.77 415.729 li
1613.72 374.43 li
1632.9 374.43 li
1641.12 349.649 li
1698.65 357.91 li
1717.83 437.756 li
1775.36 437.756 li
1783.58 388.196 li
1843.85 382.689 li
1854.8 349.649 li
1931.51 346.896 li
1942.47 382.689 li
2e3 379.936 li
2e3 558.901 li
0 567.161 li
cp
f
0 567.161 mo
0 435.002 li
24.9102 437.756 li
41.4297 388.196 li
63.4561 385.442 li
82.7295 327.623 li
234.161 322.117 li
250.681 377.183 li
283.721 382.689 li
291.98 440.509 li
336.033 446.016 li
352.553 484.562 li
399.359 473.549 li
413.126 415.729 li
503.985 426.742 li
514.998 393.703 li
564.558 396.456 li
567.311 360.663 li
630.637 355.156 li
671.937 410.223 li
693.963 410.223 li
702.223 349.649 li
806.848 360.663 li
831.628 410.223 li
883.941 412.976 li
903.214 470.795 li
936.253 468.042 li
939.007 429.496 li
1021.61 432.249 li
1029.87 412.976 li
1079.43 412.976 li
1101.45 457.028 li
1126.23 457.028 li
1137.25 388.196 li
1203.33 388.196 li
1203.33 426.742 li
1239.12 432.249 li
1241.87 465.288 li
1277.66 468.042 li
1283.17 454.275 li
1327.22 448.769 li
1335.48 462.535 li
1376.78 462.535 li
1379.54 407.469 li
1420.83 404.716 li
1434.6 368.923 li
1508.94 368.923 li
1522.71 421.235 li
1547.49 423.989 li
1564.01 374.43 li
1591.54 371.676 li
1597.05 401.963 li
1649.36 412.976 li
1663.13 465.288 li
1690.66 462.535 li
1698.92 423.989 li
1740.22 412.976 li
1751.23 448.769 li
1798.04 451.522 li
1817.31 412.976 li
1844.84 410.223 li
1880.64 327.623 li
1910.92 322.117 li
1919.18 382.689 li
1954.98 393.703 li
1960.48 429.496 li
2e3 435.002 li
2e3 569.914 li
0 567.161 li
cp
.533333 .8 .741176 rgb
f
0 556.147 mo
0 462.535 li
38.6763 462.535 li
46.9365 476.302 li
77.2227 470.795 li
99.249 423.989 li
132.289 418.482 li
151.562 385.442 li
198.368 382.689 li
206.628 421.235 li
256.188 423.989 li
269.954 457.028 li
305.747 465.288 li
327.773 487.315 li
385.593 484.562 li
383.939 446.016 li
437.906 446.016 li
448.919 468.042 li
498.478 465.288 li
528.765 437.756 li
592.091 440.509 li
608.61 465.288 li
658.17 462.535 li
666.43 429.496 li
721.496 429.496 li
732.509 412.976 li
815.108 415.729 li
826.122 448.769 li
885.276 459.782 li
900.46 481.809 li
955.527 479.055 li
961.033 446.016 li
999.58 448.769 li
1007.84 415.729 li
1040.88 407.469 li
1049.14 429.496 li
1084.93 440.509 li
1101.45 457.028 li
1142.75 454.275 li
1164.78 432.249 li
1214.34 437.756 li
1222.6 479.055 li
1280.42 484.562 li
1291.43 506.588 li
1316.21 503.835 li
1327.22 476.302 li
1409.82 470.795 li
1434.6 498.328 li
1467.64 498.328 li
1481.41 459.782 li
1522.71 454.275 li
1547.49 423.989 li
1597.05 426.742 li
1605.31 457.028 li
1635.59 465.288 li
1663.13 492.821 li
1709.93 490.068 li
1734.71 462.535 li
1773.26 457.028 li
1789.78 473.549 li
1847.6 473.549 li
1866.87 423.989 li
1905.42 418.482 li
1921.94 401.963 li
1941.21 401.963 li
1946.72 443.262 li
1971.5 448.769 li
1982.51 473.549 li
1993.52 476.302 li
2e3 462.535 li
2e3 531.368 li
0 556.147 li
cp
.435294 .745098 .682353 rgb
f
2e3 492.568 mo
2e3 683.133 li
.000976563 683.133 li
.000976563 492.568 li
92.7959 492.568 756.979 521.325 1054.93 519.407 cv
1352.88 517.491 1874.31 492.568 2e3 492.568 cv
cp
.294118 .509804 .462745 rgb
f
998.212 453.989 mo
998.212 453.989 997.033 484.636 995.854 488.172 cv
994.676 491.709 989.961 491.119 989.961 486.994 cv
989.961 482.867 989.371 452.221 989.371 452.221 cv
998.212 453.989 li
cp
.337255 .294118 .243137 rgb
f
997.033 356.742 mo
1001.78 356.742 1023.55 451.042 1018.84 455.757 cv
1014.13 460.472 1001.37 463.65 992.908 462.24 cv
982.299 460.472 970.512 455.167 969.334 451.042 cv
968.154 446.916 992.908 356.742 997.033 356.742 cv
cp
.290196 .407843 .345098 rgb
f
1001.75 452.81 mo
994.162 464.443 976.159 453.941 969.715 447.376 cv
972.916 429.72 993.321 356.742 997.033 356.742 cv
1003.35 359.039 1009.09 441.553 1001.75 452.81 cv
cp
.298039 .494118 .368627 rgb
f
1420.64 536.938 mo
1420.64 536.938 1419.46 567.585 1418.28 571.121 cv
1417.1 574.658 1412.39 574.068 1412.39 569.943 cv
1412.39 565.816 1411.8 535.17 1411.8 535.17 cv
1420.64 536.938 li
cp
.337255 .294118 .243137 rgb
f
1419.46 439.691 mo
1424.21 439.691 1445.98 533.991 1441.27 538.706 cv
1436.55 543.421 1423.8 546.6 1415.33 545.189 cv
1404.73 543.421 1392.94 538.116 1391.76 533.991 cv
1390.58 529.865 1415.33 439.691 1419.46 439.691 cv
cp
.290196 .407843 .345098 rgb
f
1424.17 535.759 mo
1416.59 547.393 1398.59 536.891 1392.14 530.325 cv
1395.34 512.669 1415.75 439.691 1419.46 439.691 cv
1425.77 441.988 1431.52 524.502 1424.17 535.759 cv
cp
.298039 .494118 .368627 rgb
f
1558.89 538.475 mo
1558.89 538.475 1557.71 569.121 1556.53 572.657 cv
1555.35 576.194 1550.64 575.604 1550.64 571.479 cv
1550.64 567.353 1550.05 536.706 1550.05 536.706 cv
1558.89 538.475 li
cp
.337255 .294118 .243137 rgb
f
1557.71 441.228 mo
1562.46 441.228 1584.23 535.527 1579.52 540.242 cv
1574.8 544.957 1562.05 548.136 1553.58 546.726 cv
1542.97 544.957 1531.19 539.652 1530.01 535.527 cv
1528.83 531.401 1553.58 441.228 1557.71 441.228 cv
cp
.290196 .407843 .345098 rgb
f
1562.42 537.295 mo
1554.84 548.929 1536.83 538.427 1530.39 531.861 cv
1533.59 514.205 1554 441.228 1557.71 441.228 cv
1564.02 443.524 1569.77 526.038 1562.42 537.295 cv
cp
.298039 .494118 .368627 rgb
f
213.916 648.778 mo
213.916 648.778 232.416 443.579 287.914 443.579 cv
343.412 443.579 372.189 628.595 372.189 628.595 cv
213.916 648.778 li
cp
.603922 .709804 .329412 rgb
f
405.077 630.629 mo
405.077 630.629 423.577 451.801 479.075 451.801 cv
534.573 451.801 563.351 613.039 563.351 613.039 cv
405.077 630.629 li
cp
f
744.234 640.906 mo
744.234 640.906 762.734 462.078 818.232 462.078 cv
873.73 462.078 902.508 623.316 902.508 623.316 cv
744.234 640.906 li
cp
f
890.174 632.685 mo
890.174 632.685 908.674 453.856 964.172 453.856 cv
1019.67 453.856 1048.45 615.095 1048.45 615.095 cv
890.174 632.685 li
cp
f
1397.88 642.962 mo
1397.88 642.962 1416.38 464.134 1471.88 464.134 cv
1527.38 464.134 1556.16 625.372 1556.16 625.372 cv
1397.88 642.962 li
cp
f
2e3 513.954 mo
1986.52 483.34 1968.71 457.967 1946.7 457.967 cv
1891.2 457.967 1872.7 636.795 1872.7 636.795 cv
2e3 622.647 li
2e3 513.954 li
cp
f
1519.16 645.017 mo
1519.16 645.017 1537.66 466.188 1593.15 466.188 cv
1648.65 466.188 1677.43 627.427 1677.43 627.427 cv
1519.16 645.017 li
cp
f
223.938 576.776 mo
250.247 529.886 295.104 476.117 321.03 467.08 cv
311.334 452.783 300.289 443.579 287.914 443.579 cv
254.572 443.579 234.584 517.641 223.938 576.776 cv
cp
.682353 .8 .372549 rgb
f
518.526 481.313 mo
507.397 463.829 494.233 451.801 479.075 451.801 cv
447.645 451.801 428.082 509.156 417.024 558.903 cv
437.446 523.978 475.227 473.12 518.526 481.313 cv
cp
f
751.551 592.003 mo
773.664 551.745 814.337 491.118 858.188 492.395 cv
846.953 474.478 833.621 462.078 818.232 462.078 cv
781.82 462.078 761.335 539.056 751.551 592.003 cv
cp
f
1009.2 492.863 mo
996.973 470.388 981.942 453.856 964.172 453.856 cv
929.323 453.856 909.063 524.368 898.811 576.839 cv
918.146 532.287 956.631 467.25 1009.2 492.863 cv
cp
f
1506.63 486.764 mo
1496.54 473.084 1484.95 464.134 1471.88 464.134 cv
1437.35 464.134 1417.15 533.343 1406.81 585.651 cv
1425.64 540.478 1459.87 480.18 1506.63 486.764 cv
cp
f
1626.87 487.449 mo
1617.03 474.544 1605.79 466.188 1593.15 466.188 cv
1563.15 466.188 1543.96 518.455 1532.66 566.475 cv
1557.9 531.692 1591.73 495.326 1626.87 487.449 cv
cp
f
1885.33 562.033 mo
1916.6 520.736 1957.62 479.122 1988.94 492.039 cv
1977.24 472.12 1963.14 457.967 1946.7 457.967 cv
1915.91 457.967 1896.5 513.019 1885.33 562.033 cv
cp
f
500.776 414.029 mo
500.776 414.029 499.167 455.841 497.56 460.666 cv
495.952 465.49 489.519 464.687 489.519 459.059 cv
489.519 453.429 488.714 411.616 488.714 411.616 cv
500.776 414.029 li
cp
.337255 .294118 .243137 rgb
f
499.167 281.354 mo
505.65 281.354 535.352 410.009 528.919 416.441 cv
522.487 422.873 505.088 427.21 493.54 425.286 cv
479.066 422.873 462.983 415.637 461.375 410.009 cv
459.767 404.379 493.539 281.354 499.167 281.354 cv
cp
.290196 .407843 .345098 rgb
f
505.601 412.42 mo
495.25 428.291 470.691 413.964 461.897 405.006 cv
466.264 380.918 494.104 281.354 499.167 281.354 cv
507.784 284.486 515.617 397.062 505.601 412.42 cv
cp
.298039 .494118 .368627 rgb
f
1477.68 445.652 mo
1477.68 445.652 1476.57 474.532 1475.46 477.865 cv
1474.35 481.197 1469.91 480.643 1469.91 476.755 cv
1469.91 472.866 1469.36 443.986 1469.36 443.986 cv
1477.68 445.652 li
cp
.337255 .294118 .243137 rgb
f
1476.57 354.013 mo
1481.05 354.013 1501.57 442.875 1497.12 447.318 cv
1492.68 451.762 1480.66 454.757 1472.69 453.428 cv
1462.69 451.762 1451.58 446.763 1450.47 442.875 cv
1449.36 438.987 1472.69 354.013 1476.57 354.013 cv
cp
.290196 .407843 .345098 rgb
f
1481.02 444.542 mo
1473.87 455.504 1456.9 445.607 1450.83 439.42 cv
1453.85 422.783 1473.08 354.013 1476.57 354.013 cv
1482.53 356.178 1487.94 433.934 1481.02 444.542 cv
cp
.298039 .494118 .368627 rgb
f
799.443 545.445 mo
799.443 545.445 798.258 576.276 797.073 579.834 cv
795.887 583.393 791.143 582.8 791.143 578.649 cv
791.143 574.498 790.551 543.667 790.551 543.667 cv
799.443 545.445 li
cp
.337255 .294118 .243137 rgb
f
798.258 447.614 mo
803.038 447.614 824.939 542.48 820.197 547.225 cv
815.452 551.967 802.623 555.165 794.108 553.746 cv
783.437 551.967 771.577 546.631 770.392 542.48 cv
769.206 538.33 794.108 447.614 798.258 447.614 cv
cp
.290196 .407843 .345098 rgb
f
803.002 544.26 mo
795.369 555.963 777.259 545.397 770.775 538.792 cv
773.997 521.03 794.524 447.614 798.258 447.614 cv
804.611 449.925 810.388 532.935 803.002 544.26 cv
cp
.298039 .494118 .368627 rgb
f
1455.36 565.415 mo
1455.36 565.415 1454.17 596.246 1452.99 599.804 cv
1451.8 603.362 1447.06 602.77 1447.06 598.619 cv
1447.06 594.468 1446.46 563.637 1446.46 563.637 cv
1455.36 565.415 li
cp
.337255 .294118 .243137 rgb
f
1454.17 467.584 mo
1458.95 467.584 1480.85 562.45 1476.11 567.194 cv
1471.37 571.937 1458.54 575.135 1450.02 573.716 cv
1439.35 571.937 1427.49 566.601 1426.31 562.45 cv
1425.12 558.3 1450.02 467.584 1454.17 467.584 cv
cp
.290196 .407843 .345098 rgb
f
1458.92 564.229 mo
1451.28 575.933 1433.17 565.367 1426.69 558.762 cv
1429.91 541 1450.44 467.584 1454.17 467.584 cv
1460.53 469.895 1466.3 552.904 1458.92 564.229 cv
cp
.298039 .494118 .368627 rgb
f
451.562 512.134 mo
451.562 512.134 450.377 542.965 449.192 546.522 cv
448.005 550.081 443.261 549.488 443.261 545.338 cv
443.261 541.187 442.67 510.355 442.67 510.355 cv
451.562 512.134 li
cp
.337255 .294118 .243137 rgb
f
450.377 414.303 mo
455.157 414.303 477.058 509.169 472.315 513.913 cv
467.571 518.655 454.742 521.854 446.227 520.435 cv
435.555 518.655 423.696 513.319 422.511 509.169 cv
421.325 505.019 446.227 414.303 450.377 414.303 cv
cp
.290196 .407843 .345098 rgb
f
455.121 510.948 mo
447.488 522.651 429.378 512.086 422.894 505.48 cv
426.116 487.719 446.643 414.303 450.377 414.303 cv
456.73 416.613 462.507 499.623 455.121 510.948 cv
cp
.298039 .494118 .368627 rgb
f
272.029 430.002 mo
272.029 430.002 270.921 458.831 269.812 462.158 cv
268.703 465.485 264.268 464.931 264.268 461.05 cv
264.268 457.168 263.714 428.339 263.714 428.339 cv
272.029 430.002 li
cp
.337255 .294118 .243137 rgb
f
270.921 338.522 mo
275.39 338.522 295.87 427.229 291.435 431.666 cv
286.999 436.101 275.001 439.091 267.04 437.764 cv
257.061 436.101 245.972 431.11 244.863 427.229 cv
243.754 423.349 267.04 338.522 270.921 338.522 cv
cp
.290196 .407843 .345098 rgb
f
275.356 428.894 mo
268.219 439.837 251.286 429.958 245.222 423.78 cv
248.234 407.173 267.43 338.522 270.921 338.522 cv
276.861 340.683 282.263 418.304 275.356 428.894 cv
cp
.298039 .494118 .368627 rgb
f
824.973 434.43 mo
824.973 434.43 823.617 469.711 822.26 473.782 cv
820.904 477.853 815.475 477.175 815.475 472.426 cv
815.475 467.676 814.797 432.394 814.797 432.394 cv
824.973 434.43 li
cp
.337255 .294118 .243137 rgb
f
823.617 322.478 mo
829.086 322.478 854.149 431.037 848.722 436.465 cv
843.293 441.893 828.612 445.552 818.867 443.928 cv
806.655 441.893 793.085 435.786 791.728 431.037 cv
790.371 426.287 818.867 322.478 823.617 322.478 cv
cp
.290196 .407843 .345098 rgb
f
829.045 433.072 mo
820.311 446.465 799.587 434.374 792.167 426.815 cv
795.853 406.49 819.344 322.478 823.617 322.478 cv
830.888 325.122 837.497 420.112 829.045 433.072 cv
cp
.298039 .494118 .368627 rgb
f
1952.37 432.194 mo
1952.37 432.194 1950.76 474.006 1949.15 478.831 cv
1947.54 483.655 1941.11 482.852 1941.11 477.223 cv
1941.11 471.594 1940.31 429.781 1940.31 429.781 cv
1952.37 432.194 li
cp
.337255 .294118 .243137 rgb
f
1950.76 299.518 mo
1957.24 299.518 1986.94 428.174 1980.51 434.605 cv
1974.08 441.038 1956.68 445.375 1945.13 443.451 cv
1930.66 441.038 1914.58 433.802 1912.97 428.174 cv
1911.36 422.544 1945.13 299.518 1950.76 299.518 cv
cp
.290196 .407843 .345098 rgb
f
1957.19 430.585 mo
1946.84 446.456 1922.28 432.128 1913.49 423.17 cv
1917.86 399.083 1945.7 299.518 1950.76 299.518 cv
1959.38 302.651 1967.21 415.227 1957.19 430.585 cv
cp
.298039 .494118 .368627 rgb
f
1601.15 455.417 mo
1601.15 455.417 1600.04 484.297 1598.93 487.63 cv
1597.82 490.961 1593.38 490.406 1593.38 486.519 cv
1593.38 482.63 1592.82 453.75 1592.82 453.75 cv
1601.15 455.417 li
cp
.337255 .294118 .243137 rgb
f
1600.04 363.777 mo
1604.52 363.777 1625.03 452.64 1620.59 457.083 cv
1616.15 461.525 1604.13 464.521 1596.15 463.191 cv
1586.16 461.525 1575.05 456.527 1573.94 452.64 cv
1572.83 448.752 1596.15 363.777 1600.04 363.777 cv
cp
.290196 .407843 .345098 rgb
f
1604.48 454.306 mo
1597.33 465.269 1580.37 455.372 1574.3 449.185 cv
1577.31 432.547 1596.54 363.777 1600.04 363.777 cv
1605.99 365.941 1611.4 443.697 1604.48 454.306 cv
cp
.298039 .494118 .368627 rgb
f
328.172 486.168 mo
328.172 486.168 326.816 521.449 325.459 525.521 cv
324.103 529.591 318.673 528.913 318.673 524.164 cv
318.673 519.413 317.997 484.132 317.997 484.132 cv
328.172 486.168 li
cp
.337255 .294118 .243137 rgb
f
326.816 374.216 mo
332.285 374.216 357.349 482.774 351.921 488.203 cv
346.492 493.631 331.811 497.29 322.067 495.666 cv
309.854 493.631 296.285 487.524 294.928 482.774 cv
293.57 478.025 322.067 374.216 326.816 374.216 cv
cp
.290196 .407843 .345098 rgb
f
332.245 484.811 mo
323.51 498.203 302.787 486.112 295.367 478.554 cv
299.052 458.229 322.542 374.216 326.816 374.216 cv
334.086 376.86 340.696 471.851 332.245 484.811 cv
cp
.298039 .494118 .368627 rgb
f
941.506 502.769 mo
941.506 502.769 939.805 546.993 938.105 552.097 cv
936.404 557.199 929.599 556.351 929.599 550.396 cv
929.599 544.441 928.749 500.217 928.749 500.217 cv
941.506 502.769 li
cp
.337255 .294118 .243137 rgb
f
939.805 362.435 mo
946.663 362.435 978.078 498.515 971.274 505.319 cv
964.47 512.124 946.067 516.71 933.852 514.676 cv
918.543 512.124 901.533 504.469 899.832 498.515 cv
898.131 492.562 933.851 362.435 939.805 362.435 cv
cp
.290196 .407843 .345098 rgb
f
946.609 501.066 mo
935.662 517.854 909.685 502.698 900.384 493.223 cv
905.003 467.745 934.449 362.435 939.805 362.435 cv
948.919 365.75 957.204 484.822 946.609 501.066 cv
cp
.298039 .494118 .368627 rgb
f
1910.78 570.357 mo
1910.78 570.357 1909.08 614.582 1907.38 619.686 cv
1905.68 624.788 1898.88 623.939 1898.88 617.985 cv
1898.88 612.03 1898.03 567.806 1898.03 567.806 cv
1910.78 570.357 li
cp
.337255 .294118 .243137 rgb
f
1909.08 430.023 mo
1915.94 430.023 1947.36 566.104 1940.55 572.908 cv
1933.75 579.713 1915.35 584.299 1903.13 582.265 cv
1887.82 579.713 1870.81 572.058 1869.11 566.104 cv
1867.41 560.15 1903.13 430.023 1909.08 430.023 cv
cp
.290196 .407843 .345098 rgb
f
1915.89 568.655 mo
1904.94 585.442 1878.96 570.287 1869.66 560.812 cv
1874.28 535.334 1903.73 430.023 1909.08 430.023 cv
1918.2 433.339 1926.48 552.411 1915.89 568.655 cv
cp
.298039 .494118 .368627 rgb
f
124.298 381.329 mo
124.298 381.329 122.336 432.32 120.375 438.205 cv
118.414 444.089 110.569 443.108 110.569 436.244 cv
110.569 429.379 109.588 378.387 109.588 378.387 cv
124.298 381.329 li
cp
.278431 .243137 .2 rgb
f
122.336 219.524 mo
130.242 219.524 166.465 376.426 158.62 384.271 cv
150.775 392.115 129.556 397.404 115.472 395.058 cv
97.8213 392.115 78.208 383.29 76.2471 376.426 cv
74.2856 369.561 115.472 219.524 122.336 219.524 cv
cp
.247059 .34902 .294118 rgb
f
130.182 379.367 mo
117.559 398.723 87.6069 381.249 76.8828 370.324 cv
82.2095 340.948 116.161 219.524 122.336 219.524 cv
132.844 223.346 142.397 360.637 130.182 379.367 cv
cp
.262745 .435294 .32549 rgb
f
115.453 434.756 mo
48.9351 438.773 16.1221 488.209 .000976563 532.997 cv
.000976563 612.028 li
126.311 654.611 257.181 606.394 257.181 606.394 cv
257.181 606.394 250.122 426.622 115.453 434.756 cv
cp
.533333 .627451 .290196 rgb
f
115.453 434.756 mo
48.9248 438.774 16.1182 488.217 .000976563 533.007 cv
.000976563 564.337 li
16.0781 535.999 47.1157 486.322 100.917 475.801 cv
155.526 465.12 209.938 501.918 213.573 483.262 cv
214.029 480.92 212.937 477.694 210.565 473.89 cv
189.613 449.388 159.302 432.107 115.453 434.756 cv
cp
.631373 .701961 .34902 rgb
f
178.907 451.11 mo
178.907 451.11 177.552 486.331 176.198 490.396 cv
174.843 494.459 169.424 493.782 169.424 489.041 cv
169.424 484.299 168.748 449.078 168.748 449.078 cv
178.907 451.11 li
cp
.278431 .243137 .2 rgb
f
177.552 339.352 mo
183.012 339.352 208.032 447.724 202.614 453.143 cv
197.194 458.561 182.539 462.214 172.811 460.593 cv
160.62 458.561 147.073 452.465 145.718 447.724 cv
144.364 442.982 172.811 339.352 177.552 339.352 cv
cp
.247059 .34902 .294118 rgb
f
182.971 449.756 mo
174.252 463.125 153.564 451.056 146.157 443.51 cv
149.836 423.22 173.287 339.352 177.552 339.352 cv
184.81 341.991 191.409 436.818 182.971 449.756 cv
cp
.262745 .435294 .32549 rgb
f
114.211 540.966 mo
114.211 540.966 112.766 578.566 111.32 582.905 cv
109.874 587.244 104.088 586.521 104.088 581.46 cv
104.088 576.397 103.366 538.797 103.366 538.797 cv
114.211 540.966 li
cp
.278431 .243137 .2 rgb
f
112.766 421.656 mo
118.595 421.656 145.305 537.351 139.521 543.136 cv
133.734 548.92 118.089 552.82 107.704 551.089 cv
94.689 548.92 80.2266 542.412 78.7808 537.351 cv
77.335 532.289 107.704 421.656 112.766 421.656 cv
cp
.247059 .34902 .294118 rgb
f
118.551 539.521 mo
109.243 553.793 87.1567 540.908 79.249 532.852 cv
83.1772 511.191 108.212 421.656 112.766 421.656 cv
120.514 424.475 127.558 525.709 118.551 539.521 cv
cp
.262745 .435294 .32549 rgb
f
.000976563 564.188 mo
.677734 553.221 1.16016 540.678 1.16016 540.678 cv
.000976563 540.446 li
.000976563 564.188 li
cp
.278431 .243137 .2 rgb
f
.000976563 429.17 mo
.000976563 550.517 li
9.18848 550.552 20.271 547.261 24.8262 542.707 cv
30.1743 537.357 5.81641 431.536 .000976563 429.17 cv
cp
.247059 .34902 .294118 rgb
f
.000976563 429.223 mo
.000976563 543.999 li
1.99121 543.047 3.77148 541.543 5.21777 539.326 cv
13.5654 526.526 7.16895 433.441 .000976563 429.223 cv
cp
.262745 .435294 .32549 rgb
f
51.4536 462.413 mo
51.4536 462.413 49.7993 505.44 48.1445 510.405 cv
46.4897 515.37 39.8696 514.543 39.8696 508.751 cv
39.8696 502.958 39.043 459.931 39.043 459.931 cv
51.4536 462.413 li
cp
.278431 .243137 .2 rgb
f
49.7993 325.883 mo
56.4692 325.883 87.0342 458.275 80.4155 464.896 cv
73.7944 471.515 55.8906 475.978 44.0068 473.997 cv
29.1133 471.515 12.564 464.067 10.9092 458.275 cv
9.25439 452.483 44.0068 325.883 49.7993 325.883 cv
cp
.247059 .34902 .294118 rgb
f
56.4189 460.758 mo
45.7681 477.091 20.4937 462.346 11.4448 453.128 cv
15.9399 428.34 44.5879 325.883 49.7993 325.883 cv
58.6655 329.107 66.7271 444.953 56.4189 460.758 cv
cp
.262745 .435294 .32549 rgb
f
2e3 612.028 mo
2e3 532.997 li
1986.18 571.404 1984.63 606.394 1984.63 606.394 cv
1989.74 608.435 1994.87 610.298 2e3 612.028 cv
cp
.533333 .627451 .290196 rgb
f
2e3 533.007 mo
1993.06 552.289 1989.21 570.71 1987.11 584.271 cv
1989.16 584.321 1993.27 576.196 2e3 564.337 cv
2e3 533.007 li
cp
.631373 .701961 .34902 rgb
f
2e3 540.446 mo
1991.02 538.649 li
1991.02 538.649 1991.69 573.809 1991.69 578.542 cv
1991.69 583.275 1997.1 583.951 1998.46 579.894 cv
1999 578.26 1999.54 571.583 2e3 564.191 cv
2e3 540.446 li
cp
.278431 .243137 .2 rgb
f
2e3 429.17 mo
1999.94 429.144 1999.87 429.114 1999.81 429.114 cv
1995.08 429.114 1966.68 532.563 1968.03 537.297 cv
1969.38 542.03 1982.91 548.115 1995.08 550.144 cv
1996.61 550.399 1998.28 550.51 2e3 550.517 cv
2e3 429.17 li
cp
.247059 .34902 .294118 rgb
f
2e3 429.223 mo
1999.94 429.185 1999.87 429.138 1999.81 429.114 cv
1995.55 429.114 1972.14 512.837 1968.47 533.09 cv
1974.63 539.372 1990.01 548.78 2e3 543.999 cv
2e3 429.223 li
cp
.262745 .435294 .32549 rgb
f
609.812 434.697 mo
609.812 434.697 607.851 485.688 605.89 491.573 cv
603.928 497.457 596.083 496.477 596.083 489.612 cv
596.083 482.747 595.103 431.755 595.103 431.755 cv
609.812 434.697 li
cp
.278431 .243137 .2 rgb
f
607.851 272.893 mo
615.756 272.893 651.979 429.794 644.134 437.639 cv
636.289 445.483 615.07 450.772 600.986 448.426 cv
583.335 445.483 563.722 436.658 561.761 429.794 cv
559.8 422.929 600.986 272.893 607.851 272.893 cv
cp
.247059 .34902 .294118 rgb
f
615.696 432.735 mo
603.073 452.091 573.121 434.617 562.397 423.692 cv
567.724 394.316 601.675 272.893 607.851 272.893 cv
618.358 276.714 627.912 414.005 615.696 432.735 cv
cp
.262745 .435294 .32549 rgb
f
517.558 654.156 mo
517.558 654.156 523.941 477.668 632.463 469.645 cv
750.743 460.901 756.943 654.156 756.943 654.156 cv
756.943 654.156 632.463 710.312 517.558 654.156 cv
cp
.533333 .627451 .290196 rgb
f
718.642 521.789 mo
719.042 519.271 718.083 515.804 716 511.714 cv
697.598 485.374 670.976 466.798 632.463 469.645 cv
548.876 475.824 525.888 581.934 519.734 630.375 cv
525.863 630.556 552.668 529.812 619.696 513.769 cv
667.659 502.287 715.45 541.845 718.642 521.789 cv
cp
.631373 .701961 .34902 rgb
f
687.032 469.535 mo
687.032 469.535 685.677 504.756 684.323 508.82 cv
682.968 512.884 677.549 512.207 677.549 507.466 cv
677.549 502.724 676.873 467.503 676.873 467.503 cv
687.032 469.535 li
cp
.278431 .243137 .2 rgb
f
685.677 357.776 mo
691.137 357.776 716.157 466.148 710.739 471.567 cv
705.319 476.985 690.664 480.639 680.936 479.018 cv
668.745 476.985 655.198 470.89 653.843 466.148 cv
652.489 461.407 680.936 357.776 685.677 357.776 cv
cp
.247059 .34902 .294118 rgb
f
691.096 468.181 mo
682.377 481.55 661.689 469.48 654.282 461.935 cv
657.961 441.645 681.412 357.776 685.677 357.776 cv
692.935 360.416 699.534 455.243 691.096 468.181 cv
cp
.262745 .435294 .32549 rgb
f
543.586 526.748 mo
543.586 526.748 541.932 569.775 540.277 574.74 cv
538.623 579.705 532.002 578.878 532.002 573.086 cv
532.002 567.293 531.176 524.266 531.176 524.266 cv
543.586 526.748 li
cp
.278431 .243137 .2 rgb
f
541.932 390.218 mo
548.602 390.218 579.167 522.61 572.548 529.23 cv
565.927 535.85 548.023 540.313 536.14 538.332 cv
521.246 535.85 504.697 528.402 503.042 522.61 cv
501.387 516.818 536.14 390.218 541.932 390.218 cv
cp
.247059 .34902 .294118 rgb
f
548.552 525.093 mo
537.901 541.426 512.626 526.681 503.578 517.463 cv
508.073 492.675 536.721 390.218 541.932 390.218 cv
550.798 393.442 558.86 509.288 548.552 525.093 cv
cp
.262745 .435294 .32549 rgb
f
639.492 564.313 mo
639.492 564.313 638.055 601.688 636.617 606 cv
635.18 610.313 629.429 609.595 629.429 604.563 cv
629.429 599.531 628.711 562.156 628.711 562.156 cv
639.492 564.313 li
cp
.278431 .243137 .2 rgb
f
638.055 445.716 mo
643.848 445.716 670.398 560.718 664.649 566.469 cv
658.898 572.219 643.346 576.095 633.023 574.375 cv
620.086 572.219 605.71 565.749 604.273 560.718 cv
602.835 555.687 633.023 445.716 638.055 445.716 cv
cp
.247059 .34902 .294118 rgb
f
643.805 562.874 mo
634.553 577.063 612.598 564.254 604.738 556.247 cv
608.643 534.715 633.528 445.716 638.055 445.716 cv
645.756 448.517 652.759 549.146 643.805 562.874 cv
cp
.262745 .435294 .32549 rgb
f
1337.08 536.115 mo
1337.08 536.115 1335.72 571.336 1334.37 575.4 cv
1333.01 579.464 1327.59 578.787 1327.59 574.046 cv
1327.59 569.304 1326.92 534.083 1326.92 534.083 cv
1337.08 536.115 li
cp
.278431 .243137 .2 rgb
f
1335.72 424.356 mo
1341.18 424.356 1366.2 532.729 1360.78 538.147 cv
1355.36 543.565 1340.71 547.219 1330.98 545.598 cv
1318.79 543.565 1305.24 537.47 1303.89 532.729 cv
1302.53 527.987 1330.98 424.356 1335.72 424.356 cv
cp
.247059 .34902 .294118 rgb
f
1341.14 534.761 mo
1332.42 548.13 1311.73 536.061 1304.33 528.515 cv
1308.01 508.225 1331.46 424.356 1335.72 424.356 cv
1342.98 426.996 1349.58 521.823 1341.14 534.761 cv
cp
.262745 .435294 .32549 rgb
f
1229.02 408.78 mo
1229.02 408.78 1227.06 459.771 1225.1 465.656 cv
1223.14 471.54 1215.29 470.56 1215.29 463.695 cv
1215.29 456.83 1214.31 405.838 1214.31 405.838 cv
1229.02 408.78 li
cp
.278431 .243137 .2 rgb
f
1227.06 246.976 mo
1234.97 246.976 1271.19 403.877 1263.35 411.722 cv
1255.5 419.566 1234.28 424.855 1220.2 422.509 cv
1202.55 419.566 1182.93 410.741 1180.97 403.877 cv
1179.01 397.012 1220.2 246.976 1227.06 246.976 cv
cp
.247059 .34902 .294118 rgb
f
1234.91 406.818 mo
1222.29 426.174 1192.33 408.7 1181.61 397.775 cv
1186.94 368.399 1220.89 246.976 1227.06 246.976 cv
1237.57 250.797 1247.12 388.088 1234.91 406.818 cv
cp
.262745 .435294 .32549 rgb
f
1075.21 646.739 mo
1075.21 646.739 1083.24 470.25 1219.61 462.227 cv
1368.25 453.483 1376.05 646.739 1376.05 646.739 cv
1376.05 646.739 1219.61 702.895 1075.21 646.739 cv
cp
.533333 .627451 .290196 rgb
f
1327.91 514.371 mo
1328.42 511.854 1327.21 508.387 1324.59 504.296 cv
1301.47 477.956 1268.01 459.38 1219.61 462.227 cv
1114.57 468.406 1085.68 574.516 1077.95 622.957 cv
1085.65 623.138 1119.34 522.395 1203.57 506.351 cv
1263.84 494.869 1323.9 534.428 1327.91 514.371 cv
cp
.631373 .701961 .34902 rgb
f
1281.58 492.95 mo
1281.58 492.95 1280.22 528.171 1278.87 532.235 cv
1277.52 536.299 1272.1 535.622 1272.1 530.881 cv
1272.1 526.139 1271.42 490.918 1271.42 490.918 cv
1281.58 492.95 li
cp
.278431 .243137 .2 rgb
f
1280.22 381.191 mo
1285.68 381.191 1310.7 489.563 1305.29 494.982 cv
1299.87 500.4 1285.21 504.054 1275.48 502.433 cv
1263.29 500.4 1249.75 494.305 1248.39 489.563 cv
1247.04 484.822 1275.48 381.191 1280.22 381.191 cv
cp
.247059 .34902 .294118 rgb
f
1285.64 491.596 mo
1276.92 504.965 1256.24 492.896 1248.83 485.35 cv
1252.51 465.06 1275.96 381.191 1280.22 381.191 cv
1287.48 383.831 1294.08 478.658 1285.64 491.596 cv
cp
.262745 .435294 .32549 rgb
f
1168.96 480.275 mo
1168.96 480.275 1167.31 523.303 1165.66 528.268 cv
1164 533.232 1157.38 532.405 1157.38 526.613 cv
1157.38 520.82 1156.55 477.793 1156.55 477.793 cv
1168.96 480.275 li
cp
.278431 .243137 .2 rgb
f
1167.31 343.745 mo
1173.98 343.745 1204.55 476.138 1197.93 482.758 cv
1191.31 489.377 1173.4 493.84 1161.52 491.859 cv
1146.62 489.377 1130.08 481.93 1128.42 476.138 cv
1126.77 470.346 1161.52 343.745 1167.31 343.745 cv
cp
.247059 .34902 .294118 rgb
f
1173.93 478.62 mo
1163.28 494.953 1138 480.208 1128.96 470.99 cv
1133.45 446.202 1162.1 343.745 1167.31 343.745 cv
1176.18 346.97 1184.24 462.815 1173.93 478.62 cv
cp
.262745 .435294 .32549 rgb
f
1229.74 566.939 mo
1229.74 566.939 1228.36 602.784 1226.98 606.92 cv
1225.6 611.057 1220.09 610.367 1220.09 605.542 cv
1220.09 600.716 1219.4 564.872 1219.4 564.872 cv
1229.74 566.939 li
cp
.278431 .243137 .2 rgb
f
1228.36 453.201 mo
1233.91 453.201 1259.38 563.492 1253.86 569.008 cv
1248.35 574.521 1233.43 578.239 1223.53 576.59 cv
1211.13 574.521 1197.34 568.317 1195.96 563.492 cv
1194.58 558.668 1223.53 453.201 1228.36 453.201 cv
cp
.247059 .34902 .294118 rgb
f
1233.87 565.561 mo
1225 579.167 1203.94 566.884 1196.41 559.204 cv
1200.15 538.555 1224.02 453.201 1228.36 453.201 cv
1235.74 455.888 1242.46 552.395 1233.87 565.561 cv
cp
.262745 .435294 .32549 rgb
f
1122.85 566.939 mo
1122.85 566.939 1121.47 602.784 1120.09 606.92 cv
1118.71 611.057 1113.2 610.367 1113.2 605.542 cv
1113.2 600.716 1112.51 564.872 1112.51 564.872 cv
1122.85 566.939 li
cp
.278431 .243137 .2 rgb
f
1121.47 453.201 mo
1127.03 453.201 1152.49 563.492 1146.98 569.008 cv
1141.46 574.521 1126.55 578.239 1116.65 576.59 cv
1104.24 574.521 1090.45 568.317 1089.08 563.492 cv
1087.7 558.668 1116.65 453.201 1121.47 453.201 cv
cp
.247059 .34902 .294118 rgb
f
1126.99 565.561 mo
1118.11 579.167 1097.06 566.884 1089.52 559.204 cv
1093.27 538.555 1117.13 453.201 1121.47 453.201 cv
1128.86 455.888 1135.57 552.395 1126.99 565.561 cv
cp
.262745 .435294 .32549 rgb
f
1320.47 599.078 mo
1320.47 599.078 1319 637.277 1317.53 641.685 cv
1316.06 646.094 1310.19 645.358 1310.19 640.217 cv
1310.19 635.073 1309.45 596.875 1309.45 596.875 cv
1320.47 599.078 li
cp
.278431 .243137 .2 rgb
f
1319 477.867 mo
1324.92 477.867 1352.06 595.404 1346.18 601.282 cv
1340.3 607.158 1324.41 611.12 1313.86 609.362 cv
1300.64 607.158 1285.95 600.546 1284.48 595.404 cv
1283.01 590.263 1313.86 477.867 1319 477.867 cv
cp
.247059 .34902 .294118 rgb
f
1324.88 597.608 mo
1315.42 612.108 1292.98 599.019 1284.95 590.834 cv
1288.94 568.828 1314.37 477.867 1319 477.867 cv
1326.87 480.73 1334.03 583.577 1324.88 597.608 cv
cp
.262745 .435294 .32549 rgb
f
1810.79 430.918 mo
1810.79 430.918 1808.83 481.909 1806.87 487.794 cv
1804.91 493.678 1797.06 492.697 1797.06 485.833 cv
1797.06 478.968 1796.08 427.976 1796.08 427.976 cv
1810.79 430.918 li
cp
.278431 .243137 .2 rgb
f
1808.83 269.113 mo
1816.74 269.113 1852.96 426.015 1845.11 433.859 cv
1837.27 441.704 1816.05 446.993 1801.97 444.646 cv
1784.32 441.704 1764.7 432.879 1762.74 426.015 cv
1760.78 419.149 1801.97 269.113 1808.83 269.113 cv
cp
.247059 .34902 .294118 rgb
f
1816.68 428.956 mo
1804.05 448.312 1774.1 430.838 1763.38 419.913 cv
1768.7 390.537 1802.66 269.113 1808.83 269.113 cv
1819.34 272.935 1828.89 410.226 1816.68 428.956 cv
cp
.262745 .435294 .32549 rgb
f
1690.88 627.225 mo
1690.88 627.225 1697.1 490.514 1802.74 484.3 cv
1917.88 477.526 1923.91 627.225 1923.91 627.225 cv
1923.91 627.225 1802.74 670.723 1690.88 627.225 cv
cp
.533333 .627451 .290196 rgb
f
1886.63 524.691 mo
1887.02 522.741 1886.09 520.056 1884.06 516.887 cv
1866.14 496.484 1840.23 482.095 1802.74 484.3 cv
1721.37 489.086 1698.99 571.28 1693 608.803 cv
1698.97 608.943 1725.06 530.906 1790.31 518.479 cv
1837 509.585 1883.52 540.227 1886.63 524.691 cv
cp
.631373 .701961 .34902 rgb
f
1865.4 500.699 mo
1865.4 500.699 1864.05 535.92 1862.69 539.984 cv
1861.34 544.048 1855.92 543.371 1855.92 538.63 cv
1855.92 533.888 1855.24 498.667 1855.24 498.667 cv
1865.4 500.699 li
cp
.278431 .243137 .2 rgb
f
1864.05 388.94 mo
1869.51 388.94 1894.53 497.313 1889.11 502.731 cv
1883.69 508.149 1869.03 511.803 1859.31 510.182 cv
1847.12 508.149 1833.57 502.054 1832.21 497.313 cv
1830.86 492.571 1859.31 388.94 1864.05 388.94 cv
cp
.247059 .34902 .294118 rgb
f
1869.47 499.345 mo
1860.75 512.714 1840.06 500.645 1832.65 493.099 cv
1836.33 472.809 1859.78 388.94 1864.05 388.94 cv
1871.31 391.58 1877.9 486.407 1869.47 499.345 cv
cp
.262745 .435294 .32549 rgb
f
1803.56 580.007 mo
1803.56 580.007 1802.32 612.128 1801.09 615.834 cv
1799.85 619.54 1794.91 618.923 1794.91 614.6 cv
1794.91 610.274 1794.29 578.154 1794.29 578.154 cv
1803.56 580.007 li
cp
.278431 .243137 .2 rgb
f
1802.32 478.085 mo
1807.3 478.085 1830.12 576.919 1825.18 581.86 cv
1820.23 586.802 1806.87 590.133 1798 588.655 cv
1786.88 586.802 1774.52 581.242 1773.29 576.919 cv
1772.05 572.594 1798 478.085 1802.32 478.085 cv
cp
.247059 .34902 .294118 rgb
f
1807.26 578.772 mo
1799.31 590.964 1780.44 579.958 1773.69 573.075 cv
1777.04 554.571 1798.43 478.085 1802.32 478.085 cv
1808.94 480.493 1814.96 566.973 1807.26 578.772 cv
cp
.262745 .435294 .32549 rgb
f
1750.73 502.413 mo
1750.73 502.413 1749.08 545.44 1747.42 550.405 cv
1745.77 555.37 1739.15 554.543 1739.15 548.751 cv
1739.15 542.958 1738.32 499.931 1738.32 499.931 cv
1750.73 502.413 li
cp
.278431 .243137 .2 rgb
f
1749.08 365.883 mo
1755.75 365.883 1786.31 498.275 1779.7 504.896 cv
1773.07 511.515 1755.17 515.978 1743.29 513.997 cv
1728.39 511.515 1711.84 504.067 1710.19 498.275 cv
1708.53 492.483 1743.29 365.883 1749.08 365.883 cv
cp
.247059 .34902 .294118 rgb
f
1755.7 500.758 mo
1745.05 517.091 1719.77 502.346 1710.72 493.128 cv
1715.22 468.34 1743.87 365.883 1749.08 365.883 cv
1757.95 369.107 1766.01 484.953 1755.7 500.758 cv
cp
.262745 .435294 .32549 rgb
f
1410.56 563.875 mo
1410.56 563.875 1407.78 636.118 1405 644.455 cv
1402.22 652.791 1391.11 651.402 1391.11 641.677 cv
1391.11 631.95 1389.72 559.707 1389.72 559.707 cv
1410.56 563.875 li
cp
.278431 .243137 .2 rgb
f
1407.78 334.637 mo
1418.98 334.637 1470.3 556.929 1459.19 568.043 cv
1448.07 579.157 1418.01 586.65 1398.06 583.325 cv
1373.05 579.157 1345.26 566.653 1342.48 556.929 cv
1339.71 547.202 1398.05 334.637 1407.78 334.637 cv
cp
.247059 .34902 .294118 rgb
f
1418.9 561.096 mo
1401.01 588.518 1358.58 563.762 1343.38 548.284 cv
1350.93 506.665 1399.03 334.637 1407.78 334.637 cv
1422.67 340.051 1436.2 534.56 1418.9 561.096 cv
cp
.262745 .435294 .32549 rgb
f
1030.29 541.266 mo
1030.29 541.266 1027.52 613.509 1024.74 621.846 cv
1021.96 630.182 1010.84 628.793 1010.84 619.067 cv
1010.84 609.341 1009.46 537.098 1009.46 537.098 cv
1030.29 541.266 li
cp
.278431 .243137 .2 rgb
f
1027.52 312.027 mo
1038.72 312.027 1090.04 534.319 1078.92 545.434 cv
1067.8 556.548 1037.74 564.041 1017.79 560.716 cv
992.783 556.548 964.995 544.044 962.217 534.319 cv
959.439 524.593 1017.79 312.027 1027.52 312.027 cv
cp
.247059 .34902 .294118 rgb
f
1038.63 538.486 mo
1020.75 565.908 978.312 541.152 963.119 525.675 cv
970.665 484.056 1018.77 312.027 1027.52 312.027 cv
1042.4 317.441 1055.94 511.95 1038.63 538.486 cv
cp
.262745 .435294 .32549 rgb
f
367.426 538.47 mo
367.426 538.47 364.956 602.706 362.485 610.119 cv
360.015 617.531 350.131 616.297 350.131 607.649 cv
350.131 599 348.896 534.764 348.896 534.764 cv
367.426 538.47 li
cp
.278431 .243137 .2 rgb
f
364.956 334.638 mo
374.915 334.638 420.547 532.293 410.664 542.176 cv
400.781 552.059 374.05 558.721 356.309 555.765 cv
334.073 552.059 309.364 540.94 306.895 532.293 cv
304.424 523.645 356.307 334.638 364.956 334.638 cv
cp
.247059 .34902 .294118 rgb
f
374.838 535.999 mo
358.937 560.381 321.206 538.369 307.696 524.606 cv
314.406 487.601 357.176 334.638 364.956 334.638 cv
378.194 339.452 390.227 512.403 374.838 535.999 cv
cp
.262745 .435294 .32549 rgb
f
1679.77 558.27 mo
1679.77 558.27 1677.01 630.042 1674.25 638.324 cv
1671.49 646.606 1660.45 645.227 1660.45 635.565 cv
1660.45 625.901 1659.07 554.129 1659.07 554.129 cv
1679.77 558.27 li
cp
.278431 .243137 .2 rgb
f
1677.01 330.525 mo
1688.14 330.525 1739.13 551.368 1728.08 562.41 cv
1717.04 573.453 1687.17 580.896 1667.35 577.594 cv
1642.51 573.453 1614.9 561.03 1612.14 551.368 cv
1609.38 541.705 1667.35 330.525 1677.01 330.525 cv
cp
.247059 .34902 .294118 rgb
f
1688.05 555.509 mo
1670.29 582.751 1628.13 558.157 1613.04 542.78 cv
1620.53 501.433 1668.32 330.525 1677.01 330.525 cv
1691.8 335.904 1705.25 529.146 1688.05 555.509 cv
cp
.262745 .435294 .32549 rgb
f
.000976563 662.09 mo
228.58 663.06 1711.81 669.349 2e3 670.555 cv
2e3 624.346 li
1979.04 621.993 1953.23 621.481 1930.67 623.286 cv
1886.72 626.802 1793.54 616.254 1714.42 616.254 cv
1635.31 616.254 1628.28 633.835 1577.29 630.319 cv
1526.31 626.804 1443.68 618.013 1361.05 630.319 cv
1278.42 642.626 1185.24 614.496 1104.37 605.706 cv
1023.5 596.916 991.852 618.013 925.044 614.496 cv
858.236 610.979 852.962 628.561 775.606 626.803 cv
698.25 625.045 591.007 598.673 548.813 605.706 cv
506.62 612.739 416.957 621.528 357.182 605.706 cv
297.407 589.884 255.213 600.432 255.213 600.432 cv
95.2271 614.496 li
.000976563 593.624 li
.000976563 662.09 li
cp
.533333 .627451 .290196 rgb
f
.000976563 683.133 mo
.000976563 657.054 li
247.477 653.652 li
305.125 628.709 li
468.579 627.197 li
484.2 653.652 li
600.721 652.519 li
763.852 650.252 li
1042.28 636.646 li
1117.1 649.118 li
1261.83 652.519 li
1443.36 654.787 li
1931.52 654.787 li
2e3 653.652 li
2e3 683.133 li
.000976563 683.133 li
cp
.419608 .490196 .223529 rgb
f
578.101 659.863 mo
562.585 655.562 542.774 603.93 579.651 603.93 cv
606.027 603.93 624.644 615.404 624.644 615.404 cv
624.644 615.404 626.23 576.323 680.498 578.114 cv
723.939 579.55 722.387 625.443 723.939 632.614 cv
723.939 632.614 759.623 603.93 778.241 628.312 cv
791.453 645.611 750.314 667.034 750.314 667.034 cv
578.101 659.863 li
cp
f
570.709 642.255 mo
555.52 626.809 560.076 612.77 572.228 608.557 cv
584.379 604.344 614.758 609.96 629.947 621.192 cv
628.428 605.748 646.653 583.28 669.437 581.878 cv
692.221 580.475 704.372 588.899 708.929 595.919 cv
693.74 590.303 637.54 591.706 642.097 636.638 cv
619.314 622.598 566.153 607.152 570.709 642.255 cv
cp
.588235 .690196 .317647 rgb
f
718.042 647.87 mo
713.486 631.021 768.569 612.963 775.203 631.119 cv
756.015 629.617 737.788 631.021 718.042 647.87 cv
cp
f
623.875 653.487 mo
620.837 632.428 670.961 598.729 699.82 640.852 cv
675.518 632.428 636.026 633.831 623.875 653.487 cv
cp
f
2e3 592.86 mo
1977.8 603.304 1976.93 624.546 1976.93 624.546 cv
1976.93 624.546 1958.31 613.072 1931.94 613.072 cv
1895.06 613.072 1914.87 664.704 1930.39 669.005 cv
2e3 671.904 li
2e3 592.86 li
cp
.419608 .490196 .223529 rgb
f
2e3 599.131 mo
1988.55 607.396 1981.25 620.334 1982.23 630.335 cv
1967.04 619.102 1936.67 613.485 1924.51 617.699 cv
1912.36 621.912 1907.81 635.951 1923 651.397 cv
1918.44 616.294 1971.6 631.739 1994.38 645.78 cv
1993.31 635.155 1995.63 626.967 2e3 620.727 cv
2e3 599.131 li
cp
.588235 .690196 .317647 rgb
f
2e3 633.483 mo
1985.35 639.684 1974.71 652.59 1976.16 662.629 cv
1980.85 655.045 1989.62 650.188 2e3 647.555 cv
2e3 633.483 li
cp
f
76.2266 641.756 mo
74.6738 634.586 76.2266 588.691 32.7842 587.257 cv
18.5283 586.786 7.91211 589.139 .000976563 592.86 cv
.000976563 671.904 li
102.601 676.178 li
102.601 676.178 143.74 654.754 130.527 637.454 cv
111.91 613.072 76.2266 641.756 76.2266 641.756 cv
cp
.419608 .490196 .223529 rgb
f
21.7236 591.02 mo
13.6924 591.514 6.23389 594.633 .000976563 599.131 cv
.000976563 620.727 li
14.1162 600.58 49.6191 600.773 61.2148 605.062 cv
56.6582 598.042 44.5078 589.616 21.7236 591.02 cv
cp
.588235 .690196 .317647 rgb
f
70.3281 657.013 mo
65.7725 640.164 120.855 622.105 127.489 640.261 cv
108.301 638.759 90.0742 640.164 70.3281 657.013 cv
cp
f
.000976563 633.483 mo
.000976563 647.555 li
16.5332 643.362 37.1816 644.82 52.1074 649.994 cv
37.0054 627.952 16.084 626.677 .000976563 633.483 cv
cp
f
280.874 642.066 mo
225.575 616.507 260.905 573.907 299.307 596.627 cv
290.091 554.028 349.999 531.308 366.896 576.748 cv
386.865 531.308 440.628 525.627 455.99 575.327 cv
483.639 544.087 534.331 561.127 517.433 600.887 cv
551.227 586.688 574.269 619.347 518.969 640.646 cv
280.874 642.066 li
cp
.419608 .490196 .223529 rgb
f
272.629 631.593 mo
263.287 614.319 280.804 597.048 310 615.399 cv
309.999 588.41 336.859 558.184 362.551 584.093 cv
370.726 563.581 339.194 547.386 321.677 558.183 cv
304.16 568.979 300.657 587.331 304.16 599.206 cv
288.979 591.649 270.293 589.491 263.287 599.206 cv
256.28 608.921 255.111 619.718 272.629 631.593 cv
cp
.588235 .690196 .317647 rgb
f
371.894 577.615 mo
376.564 550.626 410.432 540.91 420.942 543.069 cv
431.452 545.229 450.137 556.025 455.976 579.774 cv
446.633 558.184 403.426 562.503 403.425 591.65 cv
391.747 579.774 354.377 598.126 366.055 624.035 cv
343.866 603.524 346.202 584.093 371.894 577.615 cv
cp
f
454.808 594.887 mo
452.472 577.615 478.166 557.104 496.85 562.501 cv
515.535 567.898 516.703 578.694 517.871 585.172 cv
512.031 576.535 472.325 570.058 454.808 594.887 cv
cp
f
519.039 605.684 mo
519.039 605.684 527.212 611.08 528.38 616.478 cv
535.387 610.001 543.563 611.08 547.066 616.478 cv
551.737 604.604 533.053 594.888 519.039 605.684 cv
cp
f
396.42 621.877 mo
382.407 599.206 408.1 570.059 439.63 589.491 cv
419.777 584.093 394.084 604.604 396.42 621.877 cv
cp
f
1056 652.923 mo
1002.77 623.863 1041.22 583.643 1077.82 608.782 cv
1071.84 565.692 1133.31 546.886 1146.74 593.305 cv
1170.09 549.261 1224.15 547.059 1235.73 597.628 cv
1265.66 568.245 1314.95 588.51 1295.09 627.083 cv
1329.88 615.096 1350.4 649.16 1293.63 666.847 cv
1056 652.923 li
cp
.419608 .490196 .223529 rgb
f
1048.57 641.942 mo
1040.55 624.11 1059.33 608.009 1087.07 628.197 cv
1089.1 601.273 1118.18 572.851 1141.85 600.352 cv
1151.55 580.416 1121.32 562.229 1103.03 571.871 cv
1084.74 581.512 1079.87 599.596 1082.46 611.667 cv
1067.89 603.149 1049.41 599.792 1041.69 609.033 cv
1033.97 618.273 1031.99 628.968 1048.57 641.942 cv
cp
.588235 .690196 .317647 rgb
f
1151.66 594.492 mo
1158.35 567.87 1192.87 560.359 1203.19 563.189 cv
1213.52 566.021 1231.34 577.995 1235.38 602.063 cv
1227.68 579.922 1184.26 581.448 1182.06 610.523 cv
1171.3 597.925 1132.64 613.825 1142.34 640.423 cv
1121.75 618.532 1125.54 599.298 1151.66 594.492 cv
cp
f
1233.07 617.064 mo
1232.04 599.684 1259.22 580.877 1277.45 587.465 cv
1295.69 594.053 1296.04 604.898 1296.71 611.436 cv
1291.54 602.443 1252.42 593.423 1233.07 617.064 cv
cp
f
1296.33 631.973 mo
1296.33 631.973 1304.08 637.881 1304.84 643.343 cv
1312.32 637.333 1320.39 638.935 1323.48 644.547 cv
1329.03 633.001 1311.13 622.106 1296.33 631.973 cv
cp
f
1172.79 640.227 mo
1160.52 616.707 1188.35 589.287 1218.34 610.703 cv
1198.94 604.039 1171.76 622.845 1172.79 640.227 cv
cp
f
764.764 659.144 mo
764.764 659.144 741.623 642.437 755.638 629.675 cv
770.36 616.269 789.405 633.392 789.405 633.392 cv
789.405 633.392 781.929 603.759 806.428 599.129 cv
835.376 593.658 847.571 623 847.571 623 cv
847.571 623 844.16 554.913 896.425 552.734 cv
936.322 551.071 941.813 600.592 941.813 600.592 cv
941.813 600.592 960.102 565.715 996.294 582.686 cv
1030.54 598.744 1007.37 620.603 1007.37 620.603 cv
1007.37 620.603 1038.83 603.654 1051.73 615.91 cv
1068.47 631.809 1036.51 650.659 1036.51 650.659 cv
764.764 659.144 li
cp
.419608 .490196 .223529 rgb
f
756.996 645.752 mo
749.989 628.479 769.843 618.764 792.031 638.195 cv
779.185 630.639 758.164 633.878 756.996 645.752 cv
cp
.588235 .690196 .317647 rgb
f
794.366 633.878 mo
788.527 605.81 815.524 585.133 844.067 621.92 cv
830.568 610.127 799.037 609.049 794.366 633.878 cv
cp
f
824.729 648.991 mo
817.723 630.639 835.378 620.759 853.41 626.239 cv
848.086 597.173 859.766 565.866 883.121 560.468 cv
906.477 555.07 923.993 565.866 927.497 572.344 cv
912.315 565.866 857.429 584.218 865.604 642.514 cv
853.925 634.957 828.232 630.638 824.729 648.991 cv
cp
f
940.344 611.207 mo
945.015 591.775 962.532 580.979 974.21 580.979 cv
985.888 580.979 1006.91 590.694 1010.41 600.411 cv
997.566 590.695 959.029 587.458 940.344 611.207 cv
cp
f
998.734 627.4 mo
1013.92 617.685 1039.61 611.208 1048.95 619.844 cv
1058.29 628.479 1050.12 633.878 1050.12 633.878 cv
1050.12 633.878 1033.77 618.766 998.734 627.4 cv
cp
f
885.459 647.912 mo
877.284 631.718 894.801 606.89 912.318 618.764 cv
913.486 592.855 961.366 591.773 963.702 619.843 cv
955.527 606.89 918.157 615.525 920.493 636.036 cv
905.312 623.082 885.459 633.878 885.459 647.912 cv
cp
f
849.257 648.991 mo
853.928 632.799 877.284 620.924 885.459 647.912 cv
874.948 645.752 860.936 640.354 849.257 648.991 cv
cp
f
1658.04 662.758 mo
1658.04 662.758 1635.3 645.577 1649.62 633.108 cv
1664.67 620.009 1683.29 637.521 1683.29 637.521 cv
1683.29 637.521 1676.53 607.742 1701.14 603.617 cv
1730.21 598.745 1741.7 628.332 1741.7 628.332 cv
1741.7 628.332 1739.93 560.191 1792.23 559.093 cv
1832.16 558.253 1836.45 607.874 1836.45 607.874 cv
1836.45 607.874 1855.58 573.384 1891.35 591.098 cv
1925.21 607.859 1901.51 629.232 1901.51 629.232 cv
1901.51 629.232 1933.38 612.938 1945.98 625.458 cv
1962.33 641.697 1929.92 659.884 1929.92 659.884 cv
1658.04 662.758 li
cp
.419608 .490196 .223529 rgb
f
1650.59 649.21 mo
1644 631.796 1664.09 622.492 1685.8 642.378 cv
1673.14 634.558 1652.05 637.361 1650.59 649.21 cv
cp
.588235 .690196 .317647 rgb
f
1688.24 638.11 mo
1683.08 609.928 1710.57 589.813 1738.22 627.18 cv
1725.01 615.112 1693.51 613.383 1688.24 638.11 cv
cp
f
1718.23 653.845 mo
1711.67 635.353 1729.56 625.841 1747.45 631.69 cv
1742.83 602.523 1755.27 571.464 1778.75 566.549 cv
1802.23 561.637 1819.48 572.79 1822.82 579.338 cv
1807.8 572.548 1752.49 589.764 1759.25 648.213 cv
1747.76 640.417 1722.18 635.568 1718.23 653.845 cv
cp
f
1834.73 618.457 mo
1839.87 599.127 1857.64 588.695 1869.32 588.936 cv
1880.99 589.178 1901.77 599.323 1905.04 609.11 cv
1892.43 599.132 1853.98 595.099 1834.73 618.457 cv
cp
f
1892.71 635.852 mo
1908.13 626.451 1933.97 620.507 1943.1 629.333 cv
1952.23 638.159 1943.93 643.388 1943.93 643.388 cv
1943.93 643.388 1927.95 627.94 1892.71 635.852 cv
cp
f
1778.97 654.02 mo
1771.19 637.661 1789.3 613.2 1806.53 625.434 cv
1808.32 599.555 1856.21 599.463 1857.87 627.572 cv
1850.01 614.453 1812.44 622.315 1814.28 642.87 cv
1799.42 629.605 1779.31 639.989 1778.97 654.02 cv
cp
f
1742.75 654.352 mo
1747.81 638.259 1771.45 626.869 1778.97 654.02 cv
1768.51 651.644 1754.64 645.957 1742.75 654.352 cv
cp
f
121.649 604.552 mo
120.118 567.407 150.74 547.289 167.582 555.027 cv
197.606 568.822 204.328 593.717 198.203 612.289 cv
213.515 581.337 236.969 562.317 262.509 585.979 cv
280.883 603.003 256.385 624.671 256.385 624.671 cv
256.385 624.671 283.944 613.838 293.131 632.409 cv
302.318 650.98 256.385 661.814 256.385 661.814 cv
42.0322 663.361 li
42.0322 663.361 -11.5562 637.051 12.9414 615.385 cv
37.439 593.718 66.5293 629.313 66.5293 629.313 cv
66.5293 629.313 57.3428 590.623 77.2471 584.433 cv
96.4951 578.445 121.649 604.552 121.649 604.552 cv
cp
.419608 .490196 .223529 rgb
f
22.314 648.171 mo
7.18164 634.052 6.01807 625.816 16.4937 618.757 cv
26.9697 611.697 49.0859 606.991 68.874 635.229 cv
50.25 621.11 13.002 628.169 22.314 648.171 cv
cp
.588235 .690196 .317647 rgb
f
74.6943 634.052 mo
64.2178 619.934 67.7104 597.578 75.8579 591.695 cv
84.0063 585.813 96.812 585.813 124.747 611.697 cv
120.09 589.341 138.715 552.868 159.667 556.397 cv
180.619 559.928 192.259 574.046 194.587 588.165 cv
185.275 575.223 129.403 581.107 136.387 630.523 cv
117.763 611.697 75.8584 610.52 74.6943 634.052 cv
cp
f
97.9741 652.878 mo
90.9907 635.229 116.598 615.228 130.566 614.051 cv
144.535 612.874 164.323 617.58 168.979 629.347 cv
156.175 624.64 120.09 634.053 97.9741 652.878 cv
cp
f
205.063 610.52 mo
212.047 591.695 221.359 576.4 235.328 577.576 cv
249.295 578.753 264.428 586.988 266.756 597.578 cv
258.607 591.695 224.851 585.813 205.063 610.52 cv
cp
f
250.459 632.876 mo
260.936 623.464 284.216 617.58 291.2 636.405 cv
284.216 631.698 271.411 626.991 250.459 632.876 cv
cp
f
151.519 649.349 mo
155.011 619.934 209.719 578.753 239.983 645.818 cv
213.211 621.11 171.307 628.17 151.519 649.349 cv
cp
f
1521.63 611.758 mo
1520.09 577.679 1550.81 559.219 1567.71 566.318 cv
1597.83 578.977 1604.58 601.817 1598.43 618.857 cv
1613.79 590.458 1637.32 573.007 1662.95 594.719 cv
1681.38 610.338 1656.8 630.219 1656.8 630.219 cv
1656.8 630.219 1684.45 620.278 1693.67 637.318 cv
1702.89 654.357 1656.8 664.298 1656.8 664.298 cv
1441.75 665.718 li
1441.75 665.718 1387.99 641.577 1412.56 621.698 cv
1437.14 601.818 1466.33 634.479 1466.33 634.479 cv
1466.33 634.479 1457.11 598.979 1477.08 593.299 cv
1496.39 587.805 1521.63 611.758 1521.63 611.758 cv
cp
.419608 .490196 .223529 rgb
f
1421.97 651.78 mo
1406.79 638.825 1405.62 631.269 1416.13 624.791 cv
1426.64 618.314 1448.83 613.997 1468.68 639.906 cv
1449.99 626.951 1412.63 633.428 1421.97 651.78 cv
cp
.588235 .690196 .317647 rgb
f
1474.52 638.825 mo
1464.01 625.872 1467.51 605.36 1475.69 599.963 cv
1483.86 594.564 1496.71 594.564 1524.73 618.314 cv
1520.06 597.803 1538.75 564.338 1559.77 567.576 cv
1580.79 570.814 1592.47 583.769 1594.8 596.724 cv
1585.46 584.849 1529.41 590.247 1536.41 635.588 cv
1517.73 618.314 1475.69 617.234 1474.52 638.825 cv
cp
f
1497.88 656.099 mo
1490.87 639.906 1516.56 621.554 1530.57 620.474 cv
1544.59 619.395 1564.44 623.713 1569.11 634.508 cv
1556.27 630.189 1520.06 638.827 1497.88 656.099 cv
cp
f
1605.31 617.234 mo
1612.32 599.963 1621.66 585.929 1635.68 587.008 cv
1649.69 588.088 1664.87 595.644 1667.21 605.36 cv
1659.03 599.963 1625.17 594.564 1605.31 617.234 cv
cp
f
1650.86 637.746 mo
1661.37 629.11 1684.72 623.713 1691.73 640.985 cv
1684.72 636.666 1671.88 632.348 1650.86 637.746 cv
cp
f
1551.59 652.859 mo
1555.1 625.872 1609.98 588.088 1640.35 649.622 cv
1613.49 626.951 1571.45 633.429 1551.59 652.859 cv
cp
f
432.248 661.381 mo
420.319 658.074 405.086 618.376 433.44 618.376 cv
453.719 618.376 468.033 627.197 468.033 627.197 cv
468.033 627.197 469.252 597.149 510.976 598.527 cv
544.376 599.63 543.183 634.916 544.376 640.429 cv
544.376 640.429 571.812 618.376 586.126 637.121 cv
596.285 650.423 564.655 666.895 564.655 666.895 cv
432.248 661.381 li
cp
.419608 .490196 .223529 rgb
f
426.565 647.842 mo
414.886 635.966 418.389 625.172 427.732 621.933 cv
437.075 618.694 460.432 623.012 472.11 631.647 cv
470.942 619.773 484.955 602.499 502.472 601.421 cv
519.99 600.342 529.332 606.819 532.835 612.217 cv
521.158 607.898 477.948 608.978 481.452 643.522 cv
463.935 632.729 423.062 620.854 426.565 647.842 cv
cp
.588235 .690196 .317647 rgb
f
539.842 652.159 mo
536.339 639.205 578.69 625.321 583.791 639.279 cv
569.038 638.125 555.024 639.205 539.842 652.159 cv
cp
f
467.442 656.479 mo
465.106 640.286 503.644 614.377 525.833 646.763 cv
507.147 640.286 476.784 641.365 467.442 656.479 cv
cp
f
1272.27 667.834 mo
1259.14 664.194 1242.38 620.506 1273.58 620.506 cv
1295.9 620.506 1311.65 630.215 1311.65 630.215 cv
1311.65 630.215 1312.99 597.146 1358.91 598.661 cv
1395.67 599.876 1394.35 638.709 1395.67 644.776 cv
1395.67 644.776 1425.86 620.506 1441.61 641.136 cv
1452.79 655.775 1417.98 673.902 1417.98 673.902 cv
1272.27 667.834 li
cp
.419608 .490196 .223529 rgb
f
1266.01 652.934 mo
1253.16 639.864 1257.02 627.985 1267.3 624.421 cv
1277.58 620.855 1303.29 625.608 1316.14 635.112 cv
1314.85 622.045 1330.27 603.033 1349.55 601.847 cv
1368.83 600.659 1379.11 607.788 1382.97 613.728 cv
1370.12 608.976 1322.56 610.163 1326.42 648.182 cv
1307.14 636.301 1262.16 623.231 1266.01 652.934 cv
cp
.588235 .690196 .317647 rgb
f
1390.68 657.686 mo
1386.82 643.43 1433.43 628.148 1439.04 643.512 cv
1422.81 642.24 1407.38 643.43 1390.68 657.686 cv
cp
f
1311 662.439 mo
1308.43 644.619 1350.84 616.105 1375.26 651.747 cv
1354.7 644.619 1321.28 645.807 1311 662.439 cv
cp
f
2e3 662.111 mo
2e3 683.133 li
.000976563 683.133 li
.000976563 662.111 li
47.3877 662.111 268.296 610.15 488.068 647.055 cv
717.614 685.6 917.868 640.868 1063.67 640.496 cv
1247.31 640.028 1452.32 688.052 1718.18 647.426 cv
1845.26 628.006 1951.78 662.111 2e3 662.111 cv
cp
.701961 .8 .25098 rgb
f
311.911 641.263 mo
333.739 615.342 li
326.918 631.713 li
354.203 612.613 li
336.468 633.077 li
370.574 618.07 li
347.382 633.077 li
373.303 627.62 li
341.925 642.627 li
311.911 641.263 li
cp
f
1301.89 668.352 mo
1323.72 642.431 li
1316.9 658.802 li
1344.19 639.702 li
1326.45 660.166 li
1360.56 645.159 li
1337.36 660.166 li
1363.29 654.709 li
1331.91 669.716 li
1301.89 668.352 li
cp
f
1812.23 647.33 mo
1833.38 623.799 li
1827.24 637.78 li
1854.52 618.681 li
1836.79 639.145 li
1864.91 630.806 li
1836.88 648.322 li
1812.23 647.33 li
cp
f
685.718 664.455 mo
693.903 650.813 li
693.352 660.752 li
711.639 642.627 li
702.539 661.772 li
729.374 646.72 li
696.632 672.641 li
685.718 664.455 li
cp
f
1638.35 661.169 mo
1636.01 641.315 li
1641.85 654.162 li
1649.73 638.225 li
1646.52 655.329 li
1667.81 640.342 li
1646.52 667.008 li
1638.35 661.169 li
cp
f
18.8281 664.427 mo
34.7319 642.605 li
30.4072 654.146 li
50.4028 637.61 li
38.4863 653.768 li
59.6528 642.353 li
49.583 651.879 li
68.9033 647.094 li
46.9106 660.146 li
18.8281 664.427 li
cp
f
1039.41 651.565 mo
1064.16 622.005 li
1057.97 638.783 li
1085.37 614.815 li
1069.46 635.587 li
1103.05 623.604 li
1079.19 637.983 li
1111.89 632.392 li
1076.54 645.174 li
1039.41 651.565 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (\713\745\755\752\740) ()
%%Title: (green hills.eps)
%%CreationDate: 3/25/2015 10:11 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&Bj2Q;QS!MJfCRLA8=(]?9KJu*O<QBeaX"\9*l7H85QYX%M)1?Ahs(a8\)4mMQ6IOS"8/87kLT$DG;UqY-&%)U4_a6Ieb7qb
%@&nd]diSF6^6(6MQSiTBR"e2<iqM?5?@CIUeJh4!C*m(a>)T]2gh.B*!:ph&^?H:Ab0FDdBYSaFIPDgYp-tgR_;8QZRVsbUeNIS.
%mI&&&\rHHt]tM7s)XY6+jq"/"4j(OBo_3Y^KAh9'gi1Mk@/?/,Y=Co*(#\8*5<@HP45/u5&Gk87UODt8Lk"r%q9)r[4I0kXWs1_5
%oq5UZ%)*PXAj3romIWp/@<^KK*.5JOU9-p\)dVbMG4cADRFEJ]B&o#4:2dakZo?Rm1a]'[a75,nWgIWc56N_cQ'6q2s!?Wrraq#p
%M#ZTGrc_9,jA5PR`kRXM4"jo^d"^'P/nnk,r7M8UF.r\nO(KaoL?lPO_nGKJa2p1oQ,ik;MoiW9Leg^N8B[`iqm)W&%:`&g1bOpa
%12E>H$Nu[hn,:r.rG0.;Yh.^r%Dt$3L?#]@J&ueAnaJd%&$M#eHGe>>rNV<N-!';)4<882p2hWK"Y4q*b\_cMptnnW]fY$6NFhnq
%p5Ug=o8TJZjk8&\CA4nQ(1\I)H%+C-=<G1a=6FCkABc[K;X'XlS&SQuVku&)Ht=H/]hF;CFd\R>88D-BgH^Ik/iMe\5FA\lZ8A0a
%q`Fb/q:JpOotdlI<ElXum=.uWZ`*h0)?2@3>m=b#mN'6^1%sq]dn*iN3M3IJh;s9kV85@X"M<`0>?:]RCl#d@:AF/9(]I./3'%Hi
%6f@::JIqGa;"="h4k%.\?XN.?aWDT5#=jQ1%^lVWs#/?[)Jo$albi.fP\`J>ptjbi>qm"Ca\Q\BrGf$om2t1EV^hMZ@BZAS'ls:'
%s*l!fs!%*@?%o1M.St6_i6U9:i367%Kldj6)K37*_i%JHm,t$'D"%s8h5gK=jY'mWX@_dmlpB7FW]?;p,8&*=CZ:9S[6IrqWU>"4
%\8^nECK/ie^E2^RJetD,mB?JJ_-VVu?WC2uWh1rs]5_b6nGGP`3BS5I2V&+c]u`NQJafSZ,S.pfo8dU].XYD%o#H5tj\+FC^&H<]
%Haqhf4K\T]ra%JS$ebujU.p[EBe<*[WG:cF`BU+<%.n`C5Yf*!\_^lX#5a1;Y8V2gh*\t+\Paq<WAji,9Y/N&kN76nbr",ZFXI&p
%f\Pg#O.U@7]KS==me=..3rtLJ:1?3")XXZaJ,B$<DfWc6PGE6e-MYPjV9eh$L#7Aa8q6m.*oPH]c?`sC3O,Z*okSnF`0TttA_VCM
%G3j7<UaEK`RV$9*3i1G;*VkIW/boX76N5<SJ"<\Xl^1GQ['I'Oe6,sYC+kiF`KFSK9DMI$H6[!%3q?&RXgI1s9E(4IYE46_`Q'_^
%ZCK!#,QFkC9BBM-s70+&+LAV#6TS38mg?#?l[&#)-gtStRAqq8T4RiMWES_3QK=aG5LiLGm'KIYGW/cC%&JcWGDRuY7N?(=OI4H^
%jNB!8TaDe'?iT^9g7uc##AQqTT[%rElI87*,\a7-V%XGZWX&Q<*SLa^QT!<1)kZ;"KcTDp6:n)^-7??jcVs*[CO0@R_1,WUBO?En
%N"r:L1bSrV.V'$`=0ll:5@+Z^6iT(Od9=.<fuA$$Sh"0=]'7P7.J7TjZH%I^5q0DDjC%J\"9-l=(H1b;-nq931i>MkL=!FVA_-^P
%$M:>b8`Mi1;cd&WFb.3B_"g*D`mJm7juDH5M&!F[Mp5gals0u%;$VC@(Og]^5CF@7?]]/t2ElRb)I'u"+('Se8K5O)DQDi?kP*jP
%\#$"tJY+5U;>[<`8*<<b:ZUH*I`@;*Mtd+Y;TKGppKncJj4`LN:&2QtUc2;CIrCKNV:)?"3Vgd#j?Hl_-IG&Xk_6&9T86-Oa3e8%
%&3:hs]2!S*`HJa3!N[7<g>Bj<FGG>Li8)l4B;33?im2fe1]Q=h4-0MbEiKWH)b8q[8><Rq\2>7Ls0#JpJ#JW9\]rt0hU\oT&5(Wq
%m7/p2eXuB(nR"9Rq<+/]#G\Jtm=3rS]t#I!L^H">oZus^;,nB])#^0O:ARd>FCmB.li4'fs7K3UZ\RNA"#/HpDtYe?!k8/Y0_`GI
%RNaI$NSCX_h7YU.HahVafc=F5ia^AoI/e]n#HG%*A<ugNn6c-rna;+F09lB)I%FM3ci(A'?Ymd^6U%NUoUbe[IpM9Erq_CtQE7p2
%k\Xs[cc0?T*pg*([`<-d]?o`3,l1^rpV38#XppDGRm#Kt0?uKU>C3dVYQ$'<Rn*4Fh;RRiIs1jA5#_c>KAK$dBlC6OUUPB>@>[MR
%&aX(@UJJ(]\]@:`RT\s9TCH\Ln=fO7s3h*3q6k`rA++o-9_TV_L&!qdc5'7MT<[>ESXW+o3W8pXm-h]3M9_0n0U4p%Q$rGR3(DrB
%Ta1FdeXq?2!:BO#h(>&"rr\f@s0k(2Gq2uj0!kXoV,bcrU20'lff8=>p4eQ(J,a2C7]Bl"L*GI4G[o)@DDa?28rpUG3/:%1Pjf3q
%>?f.;g@(&N*1*0cLP$7GlL+?*IS>qNFCOR?h[Em.+R.$fnqF29NRlL%d!4(]NI/SBIoShH98g1RP%\H2l5olV*N`%n\NE[Z?[ct3
%1c?[jTA'b]p92WmHJ*B**VN5:<9oZ$NAt@+rb-iO$E:C&E?K^3T#AH7]ha!Mh<N`PP%539E-;=J%RfS"*/tn!lMR33r1s2P8)lrc
%ED?W!%a=!DD6;H8fKC&lG%Gl6r["-!Dol2\Y6tm7cELAeX)geC?J%p\a,=AEe/SD?CTR:04`2fhouGmJra(*Pf4=A;[8ON?<\hUe
%Z._@n3U6&))D;;MeHjHJI+m??+77[7l#U^FSlSXC_iW-ahM`C2!R4ESb9W)7WoT7?1A>F"F"C\.dG=+0Cn=I"O3qe3oabV)E!#uB
%k%"]o7d#lSqUk*UoGXLpE:BV`09^HLO(BlgWVA0-qr#fWn.<V!=F"4P9<]1lJ2in!:l^nB4eD/L1WmF`nS5)n$mK_\8Sp53ZlZ=h
%mHqmWGU$32@Vbm7:3TB.=R5?;m#HdIFg0QT_lSi"i,l5u.P:8F)a<O\Q*((7*QK7jNZEo:$ie\35LdDUmEL9e#T%4drr)85,a_5n
%\PgdlQCgXR1`RK1&Hrj&YD^,s)9gAZrNL0']RsqP*"9<&>GhmHj7]gqGl$m+^@.@pX>QRk?ROCH3^3.N#Mm9r<hF6M=n+VUd'[5`
%kG_qV;[YU/8;eJVcSV,&QVZ1QhIf?%F*f++hYo^kBF6!%BlL.,a%N[%h7^LCMN*)W%l]/M`++'JI4$KYmNu1bVg%1fmL=Lu)P\?;
%A9bpS7NO]R[hH#W]d%_Np'lN/j1tr:,oX0SA*T6&_-k,l)Z9d/^qlsVNT^+"Ro=bOT0BO.QG@='!jd;4`GFj&SRqJA^&:EgH$c!J
%f+36\*dth_2H'q?plR[]N[rX0Q6P=65fM4?"I2!PK[9FNPD)fi>SfC36%.-Z:eP/CaL(m&*]#+S^nCWR>Pdi.fMmk)N89(P>O'au
%a'G)le&n20]PQDr;.QP,rj(ULB4n*jgQo%uC2EgukR<0%%W@lO(I;2&09Xe!h`TbX?^I5H`+akB;A9biAJ*DI3a'qgYdlF0d@#D$
%DD_[:S`\TG%u$bB`$E)K2A1k>=4MJ3_*?925"cpaD>n[tC=,A;#GX)1<!nUR]WK\?;]"WBrf?1IJHP'M&i$5c`gg@K;oF5CqRq;2
%DJni9cd&MD7RnEJ\##u[2JV[%0m)"*-UfrifViHUH.4t?m;sLGS6]lNE%n.<qQ*#1#%pYSI$2Gg.lc6OP^BUR>YcpU!W&HJ3cU>4
%MuEOWGsWT4XUs!51O:]##)A\#o1Fte)?H/V3kEs8E/a:V4Y?5T%*-c3k*aGEV7Hm:Q+>k4@coN-c2B[>R9:Ga7(1WJH2c`%bPK5V
%R7D&=)ofJ5ce3RUO0_V@IdqPYdG]&Kh62!h4hW]b=*jh%r_a9@3ji-'&pla!V?N.s<KG.HnRS=e<!dE>f8JX^>]!Ba.!rIXES<La
%GV9Q9cE1*EB2\<mSKp]p+*Vs_(Mo-c<cVI8VmF]N/Np2+>%aJ5>$g$rkF\/pmHmd>bT?)LH+_q36M=GueDE9b>P1`q@?igd&Y-FF
%f#a*J7=/X_mV&@[hX@&T?r0l3%8S]]SU-)"cP?7d%.iF\h*o^`i8;=%Z#e4/_%<n\pUhP<a_bIT]7]'l`>/!&@T5"XCAW]=+hc[s
%*aV+s#R/P;'6r=+%U_FZHTUK&bl(M1cSN_d</pe8ail\\Id3q'=kV6M!fdS<VfrpQAR@:'o?%MXZ'4@n)mK-TFGHVIGCLpQaF61B
%=%nmNn;@Yg*_m*Rk7sWK(@IONpUe<bULQI%5j:kd02T18o*Z8)lM7Erf@5QsNI%/3AfJLV[?FTO4</5L%aNl"PfNL684Mbn&J;Es
%j'uQJ`8>N-"rX#j9[kXi/%TdF-3g_JH._nfC$G8AC3i$=&t7\NVi$Nb0a0.U1chCOasUqrh;&%r9]e>a3>h5YVAqCWH);>"f*sQZ
%F'1]3Lqi0R]=7O/2r*hl/@kK:_7TQ#;P>ae[ZC)Y^s78hJf=L0a%(K'8)u=U@H0QaZ;+al(kNQpQ*3sg#D::WiF$#Yr4``k"ald+
%jg5B?2obk,WB,2NQs/S>C2,d.,q%<i`LT;mW[*)?H#Xb57DE3.d*1h1f]OmlHi6PcG%]#!DZVRd(rVX;_:Dbj/^ce[YdGZRf,B\L
%2&Q<pSabB@FHgkXL>BUZc+Q7)em(gsYJp0kp3\@UWAf+Bo!7s*o.h2U#rQY;[l+GU$Cm[?1tMC=`+SiA=OS)B(Vea-s7+UIcTQT(
%8c#H1<1Z8"e$F.:W;adTSmGC2h!j)Y\oj>D#@!Eb+)M=bm;MaF1tM[YkM\)'XL8Ou(K3A&qh!QrmG,%^3r3JnS&<'3GH@.j:YL)T
%o;[`D`NorSXOF`"7>C]X7pfZ6_Be1"5Jc8oIP-OG[Y7n,_g*fue6R.`)Ea;MX=_.1oC02t!AEP'3elbI*V\-/O7kLB])B=KjM!Tk
%Y=Cau)XDP+k%Rl5ad9dof0A]hs7N7eW*8*Bk0,W2m:ZSa6H%GV=FM&(-/E>%[A\lhc%muJiC"JqKCd]tksiEajC7rX@=S<V8GI,h
%[ed>]n(P9uYgjb#A6$9=M\<$s5:m$'[-GOL]"cPJ9p7SAm2qiE_8`Kdg^aqAd@4Y!:2_uWX*LPmPF;)LiDg=tS.JQ-&PQDg;95]`
%pt'EPTJ>a2M/'X-%EP%u8/ERJn;0VYKKk4H!M,K*?DlJ<23*RU^E]SEWq`d6;<(IUWJ7Xg*n\-4Jo57u45Km%UOSqYNLIA(X!%pR
%'cb;>29#_t[+T6ekq)3[p:<lj(SZUoP_:D59-#$im\7U[%QZF+9e+VX6[Q,M7,;Ve[O3*\NuCLn5B+*=q.j+jNqMP=Is?u[FabIU
%q4#!EbYn3$Pq/d+UU.'<Z)B3U/F\RfPdNsQ2qU=HpbAq$<e'+`51;JH2(Ip7S&%Msh?tAP<=Hir,/da]$dP*l1QHr=8,NgiUpc>M
%Fiu@Z%lJg;hl?o%$]QW>99o&bH,aBiCC-B^#+>PWGQbnD_+)WX<VML1DYKo<gKIg-oVfhmU>9_WCA-3ErpsnIB,BF]]mcmVmagFj
%g@MlKipae`mekAHV8k*QDTuEnl?A_m/+3)JATrEKnb%N]:UBriX.QOZ>oXo&qNYXh[('kVluJ8J3o<"\[ur8"GJ5nP/hYp?*%d2B
%f\=iuignUm_cZ3o\@qM'jm(hleluADhn?MPBf<0`S7l\\lb,.=4"FCqrJ(X<cM,ZPm).V\f)B'"e9\J[hOV@C/g%3;Z7BkJhtO:g
%Q"E)3alA@ZCV/TLD?&b[a%ri1V<47S[otFDs*8VCa3*Saq,)3_[WCd"dE9[cX_hd,j0eGP(0kMLo3:,/>MOQa^YR`e0CATHAnj`J
%?0c<qeXqa-pTM?^MPS^rV(Xo;#4g6NT:JJVO"Rj'MXOVMCNGgQZkMo>>=[+8q0cjuF*TQk3O?)^ID)u6\scrpD*PZ*D0Bp`qWjEC
%hU0SpD]W9B]sG9&rILU;Zch+(]@sV`DKl&`J*#F4s3'H)p>4?sfB7mpT8m*UCY+$p")][HH+]V=1[`PXc\noXc0P85GG!a&mIrj$
%m<a>0[%4X[Rube[O*OZ(\_26jH6XZtYP7tL1te>d0AZ'=,b(]UBBF+)g3`h<^4*useZ4U$Nts@_?+s>$\5V:1o[-sYkEcB[Af'<?
%I@RbcQTqh5HO!X6PO>uNQSC'6h-9XE!(1n4rSrX%$OcUOenSYX?[g_>h-IP!EbY6b&C!34i<sF0&SWTFpu>5k?Y8c//;0W2hC_%?
%nk6HX^M.QY]mV.Vpg#Y%n)!UegUY(?2cTGCm_YNsn'A^e2QIllIF$YnCdq%)+'2bC4R%Hc\bc`1H5X!c;S2Oc__(6PIc`i(n!gHP
%cM-#;p?a4lQb2)>=5%QPoulpFeT\3$c^3?=3nnHKT8PoucQck!4+"aA<<r/Kg\S/Pe]baABCB$M=$#6rIU25gGIR$WmpFmR=k^T(
%A.7pToD[:k@+&Gfp2g7*lhThj-S(`,>>K?_i`PL^^_.J+2IFbdJ(+@qT6/Boh8MJAj$-`5O2ja<5OR1^ej^iY`k13+=Oil,T]\s=
%0X1I`lfsN/[W'!FXF+2F\IKCh/Za&)NSM0(gE)SdNmH>Li7987:51Bnqn&UJNYB.(5#dSE+1/aG2I&0KZ\Nb=XitTGBss1Yoagc9
%PqNO!PN`[!8$C(lb0792)b[g2eW8hFe`P"b]uiN`59R:8>Md4`?'O0QIn`,pnr9K:h;sd6ZhaGtbC?a7O3b_%LO3s:.f\PFo%^@,
%o!E*[J+T<`8MdLAVd$LED!mRZp?MMsVtHBFCZQVMpY3!!Q>L(QA5>uRTCIi))_^pQXE="DG4sdFDb.\uq)%oMc0^eX:@?kSmeIgm
%Su-f.jq_1gh#;JAZi,<b[GTh&GVa$8n%QCXFZc(o.QC\I20`_7Y0Hd'X]O8hf7iS_[C2Q1h$pIW7VDVp6RVgQlmbY5Ie2u9jQP%/
%PL&RZb2U_&GMr5Q3ZHc?gXb\kS"o4gf35B/5OK9DpZ<74h'V:dR[Fj,4AH[G5@tE&.glm39T@SPG]g>s*u6k@C96/8)b8(-GCR>t
%S34jkM?Q.!p,g^=hV*ef`OFM^O%.m@^Gdh/D0*)YZ*j;mnP]-tg%r.en8P?U7D?GII^".#D*AqfD64h\B9U*90R0$/qhrA:q.i$&
%oo4:prPJNr9*a<<l!@++O$>6D:M0<ejZcu:jGDQ)ktdAth_!rfGP;7+0%Mb`dj>6eW>Fq+asSu,99JeWr,e]]TgXGo[\+@LD20W>
%mf"a4l$GpYKYiM<RAtlf<Nh5'm!"KA;<r["nbC.*-ZhlUK\isLkldL'04gF4erBBl@\G]/(RkI$nPQ;IID"+\KePPHR'B/1q09YD
%rcn?g5t\i)0E:k#WfJL]TD>c0#BJd7D%Le[5?r[RC\cDI$ne!:SupK)p[:ksZ'gt9@kU!$j!@t?jZhU[6T$_F>&No3/fH>a1juYC
%^\XCW9FJU$Iu76\^J=`b[DBEL`UYuuD1&k#>5tbIH9!ulqu`EKD7oL^3>ca(C0ut;ViE8D8F<Iq(et;&pkK5SBX"LH\i[=UWZV0/
%hGgPS:Kr6k:\W+Eb,2(;LC[C"Go;Ri[S5>A+N$CA03,IR4j4?Br8$<qGL:BZhs&23<a%BX'-c7n4%oV$@cXnL&(X&,Sjr$)h"1:S
%57&F+hg57MZqP_N[Jo=1_91d1hR_nOgU;Q[PcY$J4a0q.^--m/^N/RN'?=;)gR'Xg">G$gjI+;S`OD1@mk".HHsL"6r:0BISo$>&
%,9O\q[CT;'7:tFTh1<!mXmrWrSXm;1pJiPfn`[ujae:YiO!U,/hcud&QZeErIHWe=o!;X%V"WDHld\;aq;U+pi<Fti]u>CUh97EM
%Mtq#-hUdIlD_$J#J%bg$NK9g4^,]HT]X<4#m;CUfRVHQj)`sVIc/j]oOc':jj.gWM2F0D$<'7?uGBM"ooN*HVjke-f>K+#a'th_C
%Ci44hl)RT3F:858aR].^ruL4_!h'K#W;fTRjT:lD'F1[m3erbp`Hk-DrpjQn_%_7@iPR>[YHRp2@ahs0D+_=%TpesR5>LaA^)])6
%LS$V'g?uPZE+>[AEq/27p<0M/`tXf&`t++nAZ4mo$<R6jpS?Jfo\F^=,6u0iK,:DXFn!bmfiqa#4b*DuQG%*5?)*UTr(?/!+hd'o
%c"\=_B^`L&O44W7R>H6/ZE(\%SHhB^p10f/>_)W[;gu;8IW5)&7Tn$nadu5Y]D;mUB&S&D2@iu,H],3s^@Tfi^:O@"0##&!#'G+f
%Al$G47s9o4^jc&uH"m$%V0V=qf<90#Hu@(32o,[O5G$/XU@MbTX#A*_oS,$d+85-!aWIN?T?M6@mj4@$a&AG6CTf9?Iqi#lpm!M)
%DdHaQ4ugFQZrbHL6J'hk/%7_YIWP1%qrNaT(\YlGrF_h)8+3Xi?9VS?"-l"JiU-@r%.iC\idVqb]LZ'6RsPZ8c[3Q>9ulXHXS)VB
%9hR:mb$8'h%X28mo2"9#B+&pHqffb?!F/7*bG@_:b+Bca+1AMNG%,@&*aP5'LQ>eGjddc?eK<AKT?VgX[C,+#Mo.b#5?taEj&RM.
%l`DR#\$ce-\9bQgo(C#!?$pG!\?PMb@.EX-fk^2kZYOtL%En3FmPS=!_US*pY4Hm_o35=2-eHV>ja11<g<!:$?#1Haf=JsHOZ&^#
%G&fXK;kC[^CH]Kl(2\&q^!n.s*R,+9+%<,1rjd-PapV;RCA#<R,_p[#`i46foOO"Ok"Tj[)7[JApFjOg-h#<GcK3k0caGl=qrOri
%"D@]FFoHj<=aG<q&#ZtSV0boo(oXk0mG30(p[)-;%+W63\(c8S=%4ZF4.n,Kc"NTm?5K6#^OE`i;7aM`C%5j5b=m&3m8g8`Gd+f#
%<<f4GKJR:SH/nURrj63'rr%s/IQ52GG9B0H[ndOdVU'<8l5.n1hX[#r)dc$C\HC]pI:IPD2YkkFB$-IW$JuUK+,'@:bDQc&?XN+]
%g@'N-kAT37>;'p/fP/$&T3]:I\bb6jDuVLq_n#iC#L)#YSOXc'DaFMN`?N1"(Y2@II^+@hb1b"ibLbTp[UmP6Hc;7SS]<NFAgm4D
%\,aL+SZ=tcAX%]"ftOc#HV1?,*3684bHj.`G5](kHl[ZQIp%/?AN[,a?Bo6]\`Cc2.o6T-q0I+"l>P9--'(5R=9s%K7kX2?:VUgd
%chFWXHn)GYXk$,-rPP,&IG@f4Hrc]Ho6KiqdoiO(h"8oNmlWg8jA,0eN?>O>bs0sndpKgHpgAbLk,,PPYC(f'5JDC`jh=g?k/:H7
%4Hd&4l)on&pYEFd9@&p\gcr54K(!2ol(a'a5@;N+0E/&0NM3AJ.3na+M,EM%3Fs8#Z;I5RGB`03_hHCmC-E5k_aJsaI&XHcp2.%`
%s5Q^(lT9IM3k4otE8!Y<ggKM4+)E!a:Ub83f(8_!-]<3&LNTjaoPJ#KEB%#@JO;*!r9(1pSaH"&mH"kln[2jo>(.Q"?Pcl'bPTju
%p\@Mlg@UQ-UaZ6=C!qFof)8+HV/l%-92Ab<jcA!`HHVYY-r5<ZCqgtKOB/LrqYTdQb#7QscH=SpcDu_%m[?YJo(J-qks\c7^G!<(
%J(.b,k_s<5&\`YgO2^q(]q*.%E;5]qbYss5[Pr)E^18h/fY-LXWr+e]bJJnFVu*gpr.BbaDgm/Fo=gZq<4M)]#U]P;Z:;Q8>C<cj
%IT3BGSpPk7Bti;i>F^3:rC9S&QiF/!5?88[K'T;f[m+(4Y))ecS;1$AE..3KDXYcX38D3K4sCN0+*AWR)3$\d2HH+[DHsaK>#s_]
%TC)U?p[XN+k2d\*SGi4J!U>]5&Z1n#'cCofG%Z/M./I>W]jKNOO%,bV4h/(Dl,hrSns=?/HSB9-Z>N;q7sAjd3V73#C&<??fg\iR
%J]-JT^/`QrjiY4(rP[h_Fup6&?1!L(;*),?DSGp#Wp7:(1@o2F/JQQ-i"kcB]nJ+9,`ZIa3b%1t8oN#1..Z>f[j!@dptg=7g8ScG
%pO=_HgcN/Rhipu!P+T1#f*3uJh>6't^!;pJq:q1#?lA*kAlsprrN]na:HbNQ=BRdhhTQM+l+,r9;o\-LbHF'7Oa23OU,?V$chsLT
%)>tr%YNhJeTdn``Ila(Aft)Y"dY5-reERQco;`<sg$P!.D!1JD<atO$]Tf8c/QpqX5Kl3I%hF00_RB^\oUN(]#O`K'k^JI7a6_X&
%+!0#<8<0Cim6/4/KpkJMLcTc-r66IjN`YgngC(pa>O/_TV[m\kmCg3NDo_MJg.JCdjVuA^ahm_^HloA1qM3X.[g/PFAN5%"euQXP
%\9%!3c`JT\rA^gg4a#VcR;:!8J%3h!l!,.0//PK2*g]-@5('b1Fo'DWrj?O9h1'V^&a:"/i2Q57jX)>pc(#qjgj-Loqu$;lN8^,6
%Zc_*N.f8bX'kqujH!8\F9\'!o`J)!j)g)2[G\q62hLO8%5F7rnQf!&'bha:e-msrdX:nr`GNS"HpX!<>h<nXA?O3rT/@G%kn$Wma
%l1Pnk]:J%anR+2.,COH@k4.5r-1cG4FJh'ID-t$ReW"n(pO;O/]Hi9H^Y,)gSO]ekj)Co>6BM.pGhIKn6JrusZ[L=B*bWEDS"8:k
%MTWu`PliPW:K+EQ0YY!$ZFD-;II1]rlhk>\W#9Y%THu^c2>#IWOL"A_[<?=_k%<f=_,N3qUW],sIsc)JF3Qol._9,J9[9Pg?9A%h
%[H68XrqrY_pQlpRm=*je""MqFM[M2e0:aId(B191cH"$LVlb'E/MGuVr)t@Ds)L$&[si3%e,So)NoBBCeuQL^m1`4]^0;T5GkX_k
%al??$s5it5C"tQM!PJ3cf=rBsiK:Ok96WHZ\bfmqf$UD0]D(pZZD^>RJ$(?(CkbA]nZ%I@7J7F?g*l/)0<WRV?1`Vg(lTS#q7Pe?
%[K[*NeISj2R@@;HkI7lXfB7#Fk)8riS6:@2m_cX=R@A2C@fOn$cb=38XaL"n[#53MlVsJ<%W8C]S;d;t-d6,)1U;FUm]F_4l^?>?
%`m1OBF&Q(fZ26WuCN1:lotD$Kp</SWiVT[mia*[#rYehkgXc4:^HNOLo#Kba<VcFg[o6m6N:aTgEb6==UK4\im'((mj`n2:0<BA8
%p2=k%gj9!rh(!;*6@IJ^p_rSS8l#65kf3u:U>N8t=RFAao-Y(-GMRP*Og%c4HMN>d'toZP\o.i2U#Op8rdK!$\K(7.^V&<L/\G`a
%r@-jC\_#.lILjY7Flh(*.pohA^,&mJF>rdadi17Brnu2I=XrdYc.F[<(3mE2>upW`&'K%_Mk,%b2P$m#Jc;!?40A2$kbe7QUjN-E
%B[AQ0I4^iN#-1pFhSm4^R/_08o==o#Ec&?e'iFpr1MHeiFeg[WFr.XM3fj!#hB!=4')V7Kjcu5]D*4rQHL]tFTJcpO(3EXJLd#q1
%I!K4M3M3OtWMVmFR!?,096W4iHmi]XTdH<W>LW;6q;q%Rn$cI*pFj3^q)7it@T.[>4MJ1n9KF"@s8(j&UZW.p\bUHQ2rnb#.m\?C
%"W-sRirfQqaF?.EKhlhQ^RN"9q*IqOH22T+q<;]E]5RD/m%sC&o&dW@;Ut)KLKDXMb9*pP4)^fa9A^f-VVh=">2S-UUR2#HhXAu`
%[HZ>T%WaeuAL9X4X/B9?3oVpOAR"L"fmA%P2sqdUoifC6*5t"lCMt7F+)DF%=oIW8g#)"1l-4olObiQu`02FtfI>4PiNKXcl>6#-
%4p+^[;uQ8,ZJ+Mp?H9qFENsE6g[%_nW3"D2"-A^Q<e!G*`[AIYnLH_qM]*KuSk;=)+[nL=1T;C<X#ja6::[`5HeRT6X!2eOnAH9!
%]JuVr`L,ASO1oGgNCKE#nd?Pp=l&lO[i(KLQlD%8",9q#9V.Ojq":CWA%nY5^Ii3G9aMl/PX!ukFS%(iP2VT_n,E"WDb&=s3@6kh
%H0tbnHmlBNMs@:k`r>GASU<]1Z!'Yur;3P&$;Lcjo^*(rdqK>A23Xgm-([d[Oc$<c94);]@%&Xgn2cSJ(tk;$`0[@KQ9@F0C#Ws^
%E-^;^cL^/L/EF)eMT20KW\W$oIF9\;/8r2UO&T.p_h1$FPPN\+;J-nh0!fiP9#')L<GNpu#h$pQHZ!Wdr<ZK\8CO;9$5`OBQ'9Tg
%9/f;)R"e>)eg0Z"6mbLRAnk#!ke%ENQ$(@,8tYTYgK5Tcp+KM-\`ra84\:U)IbGeQqu9.5`lq?H;,!=aNqY4"DmcXZfV;fYq;McL
%?RO*jA4p;*6=#TJ<'*DgD8Ln2s1s<Io2n(o>TDUtIJ<I0hd0Z;a3)0g2XU,M<!bWk276V7^55ib^Sc0'c`uCgi&C6,:9pD^Dm>i)
%_CS4Q9f#?SkOmZ?`&Ut/r3=aqhse3WR2P$jGd$GmcYqLl2E_]@HKUco9hMXfJBD1BRM\0`9.3f=.$?>P8Zn/=Xfr[WX`K@<+)-]c
%>sM^G%ZjBdKM!Su!Hl\V`cQ?KaiAT+AMOCAC`_>rXdWgo'gA$rkb*"6.>j(G1!U+ObX5c;QStBd9;V=PMpDa)-F40cV3/]hOb=-D
%:)iQg)FDTp1bIQ#X,:JFPM%F:=IBnj$<6et^bX!:F0.8$auh,AL"%PZdBm3agBc8ld4V5K>R%$dq)3M9Uh?Q8.IW5(RS.-nRQ4Ei
%M%[ng&O(T0Bc:EaJ;!$\M4&aVdUp@;'pD7tR+3K*bRgBH`-BRo+K=_f88(Do;AA.5TY(PlWLu(7_Sn$/P?UKK@g,K1649Y^`cfgC
%ku4.C1sHt4,Wu@7rXtI3aA\%rbP=]%e0phhN^t]uq8&e.K0lCMb%6U?Imt3(<(Jk)_4##hC03TPCM#=4J@l;]BbYS;,VIP'S',R-
%CY4?'EPr9R4;FfZGqA#MEf%"/Bct<oJZaRJ6di"dXFX&(?'.^<3!j/uj@qgC-u1'/g!%Vp/nOli2`3B9CDPs)BGs]HnnUe-WfX4-
%@V#O6Oft17b[a#\iX&+AY*<K*Ln3E3[*C.gE'FDdZ.ES$I%*I(hs!6lb,k49F[]t$.lhj)9^&_i6DdTI-`!_]$=\o)8dkGVTYgRk
%RV$9-&2o!5(#beo-tYgi)\>-h845X'5fohB[OAN'Gk4c?arsS&LTJf:b).+>:#2U7KhN*UBCcC?`M@R;eeD\odAL0n\0?=8NC]Y<
%$K:+;MGfa?(d/N:8m7$I)%i3j;0U!41c;iGK_'nc2:h%R8UM/?2;[VmaNW^T-YRBn'QfFp'QO3UhjDcF'kR!:>cL>`]%CRmC/;.B
%5#+#;j%Oac']e6pW4jJIf%4TG/E@N85.6prSrbHs2DrWtRb=K#aqYgRWUPK>V%m^s4p<iI7HtP'[WF]L!`O-bABQ?G[4H,c#\-c7
%-s\>_0hbTm#H1gaM'nB3ASj#N(B_p^<FK1l#e<O%AZh$`/?-'RP%os[IL&cC/[?XL6]0JP$-@ZDZl,3pLodQ^o94Jq7]BasRi=Zu
%TG.^kX">t4N+cfiZ_B0fD-<!S0$B!q$0@R*-_r@/FP'*7d=g521ieKo8KRqt?p[Hn0`sO+FH[+<J[?\l&_fC4c"L#c*Z-(\ZCKRP
%]2n23<C+()#V>>G*!9_F"mX=R.co`AoMHbS:!(L2Y>r+iQ(JC7:.PFH\foiX0HN5)a=9bsjLiW4A")Ui0*Q4Aag[.tMWHJ>.$3Xq
%KnTZ!kQsQ/=JIOR.V))Gs%6H?GjdPE*)t'_qZ9[!/5D]>'RN)RjD1FqED?WLRDd9NHi/t(Ft6HQ""ZV*,!&!i>,%Z:@Yk>l$s?1T
%8;XM-ac.;`]^jAs%7W1j;%Oil+]CdbU4kj$=9:lj*"l5*,`7S8b-Wi5SKe!3^*_(Fb'6K63Mb+jFOg>RBSJPS'bO&669tSQ.dK;H
%8str@"pGX$<N0)n*7"om&h]g@J=Srd6SaC769tkUPuI0(6U@=PLBkc8S5<)ZS5>5U0Qp99A#cL#TjX:E(e)MR)\E^SY=RTI2T6>q
%8P,/`25.D$[>cGnVG5B',2fsdY=Q3,LdM#9.!;LU=[]P\M<Tn^AXY"n2lo7g@p)62Coeg02ERQgWVR!$5`lYdgg#AS=:i>89.79;
%QD-bdBcTr$TSYV,('MO15cY;686H]r$CAaB9/RnN'(ofCr?Mi3&[Ig'Lt`c.bHhL,G8\b4GCi)e0bApsKokLl8h8]A<O@H2FeVco
%4a'ZK[6"+OUCb`e9'S<t6Mr:?_P@I%WQVCf&>KPC)4.VP#Tb"IUsAS\;Ul3_@E/H>f('b&)3cG@]Eem"'-0Z)TgkWs,0#Pq_MD_M
%Q*R`;iJ(pDns]&ad97G"qOIq&$s&AJL1"`uo.CAd#s\tO=Oai;(@jFpQ-rK:-"qR5']=[I_LQ[jPCPbC((dhi-+,Kf)8X2Z<"aj(
%NXu=k6Fo#T(%GNEZk.YWW/OHM"`X_[ak:%S>rGY_(1mDAfjHgA'9!$X?3K9A+B5.oE!1_gY_f/%NWl.RkTCn'FB)F0(3p8n=d_R0
%idM'RPm(-J)aLPK3t\EIeJ4gn&>JHc['F1`6fDI3ZrCUldNTj5&;1+K9k7^->1$rec_?YXJdu69+J7hj\cS$Y+Nii/[a`!M_iKDZ
%W-!k,m?Tl8!/YBLcS35@OuQLJhSDa>QMPUZRRp,-63&/FBgiWT.U(0CA"]Q^>-99`ac&hSKM(>I!kC.2g$="dc(ShaJq=9HWAIl`
%8JmQ`8R@OB<s)G_'SnFi,%YH<a5(HE$:#132S$__2PH*C'*sDl^Habj/J1U&8h0"I<[qfUlOY1S3:(\2ANl4HTEA.6+$e:1d(2mU
%["urN#(mL1DJ;A4M:*;=BVn0\FV]OA:]aQea;>6*l)[]aD8&>\@STQb/4^N\.#"0::oT$NGnc9DV(H]:.-GVBRVP4LN7'bRRK1/<
%UFaadMUn(sXseCMQTAg@W]B0TJ[jJk($?g8Cb7e9K)@8uT&`M3Wb`#5<sn">=-:)4.qoK=;'?d%GkfX/",K23.'pmg=mdr;hLlAc
%-kAED9bsb(ZpQ5p-LHrsl;?lbQPD3mo9`P^9cuG-'ln1Y>%Y=f!HL_arc,EI,[dqa7B%IAUntdb%C!d$.0<A%,"b0J'2\*rQH?6&
%'@ON!."qpn/l>au;]?f%)k\t-GXTYjA`MMh&*9$%#=Z67abEQJ$"X:/PN?1X3!Q3F'\?B*.#F%&90K2cC7_u^Pqsi;LZ0\MY,o$'
%5Kd%Tb]3Q[IO=V@2j0]OZ;S1J?*HVh<0fpF6PSSP,)K5+f`A+K'D3MN.<8iN+u'?;"D#rX=?j)LSWUh-Tmrf1cq*)X+s-8NS"6o5
%Rn?-mWhW$Y$7?cf%Xm:Z"U\Gt]R4Y83Lo:Q4m;s+X!4UD_@&Xj/Mjf:3H/9Xa&3mL&;=@<bQhW)6FuN3@962rQWO9g.iC4O3`2nn
%7R>p!BlG2[NLWf]JIr?Naq7L*/RZs.BV%uEmhDWYJW0"(B;Mn#LAa88(-,/5"Z`"P>d0BhZ>4SZAEEb-%,LRSjWuf3"\FiE;MZC)
%0.Z(1U1-79J.5BYRa;f1@1f@H,ZBgP8O9;jHr=G7VT+Lfe[A?e$8PK"3GHhE9M'[CK0edtp/C3H\ZI]UBmj`]MO#[MZJ/op6"s)"
%8Nf^4W3cV<=@GWJn2hgRne@4i+qfk)":Hdb59,,2fT6(Q9i4/RYO0`o)ou\EVWOJfkQ1lR"q\r&5XYf,'q*EO>&&,g?bH)2e6qo@
%`YmqU&@,ji-;eOr_4:H:OLi%(d)Z2h3*Cd1>sj^P\.F<JPoq>t+Ls4u#d(^,E`cRs'IogYoP(H;H6;u`dR',WW/$?V/_&8\,_MGI
%KS:mt"<C/M5bPb$.2<+qBIdq_l1I4&($[5PLAZsl#<,Fd@Xp^=)]F)e6%TpG>oLZ&q]pP5A8-k@"^!2*["rZV]eG,\!La<n_\+J=
%e9\1((,Ce';9*n^nHX+YH`+6u%T[n@N9+"19Ih7c6%Y6$#gd&J(9h]7%$Et_[mVB5+dF*9h_$]&$e]<l.<SLS\VMhoE!4jp4:0B1
%$WaSh9D";^fip@t6/,-T#,UZi>!7CT--8u><%(C7k+S$M&r,RbKNPo!ge3O516&T;RmC0kq*jQ[2GujL'Iai)ClskhTgV>!=c/=9
%74g#=:KeL\'A1K=^'']ucQMYM+Eak#2B51;Lj&*(KU1,iJmC0pj1rKg>N1%NKF%cQ%/kmY%f,l_$\m1b8%L6OLhqp'CaYBJ=b9]i
%"o4YoC<E>@j(]p&]L3\E[R_)H"tSJ4-:PM)YnNs$)H/*;5^1/,P#Wnc-((j/>VH$g?6%UpM+UGJo6(ltAI)]>.\qEjKjlojU^7S%
%*oCC&ErdM3&`jiS6UW/[W'f@mDcfc!&fODSqC!K';6+F5Q9Mp["fG0F^?7k[RYVZ#&VUWV%8kE@L4#]#/5aItgk[Dd<C6jAHn,8p
%U@JKo7gpO*MNKeS7T#RC'+<Lo;)>=?Z8UYBRaCUuSB>`u"k<li.e>GA2]1@#=rb(@iDKtYU6*3'#[[eu"tLCt>kPciN51<]>cL*O
%B*8m*6Fdlk#ZRU&7)>/k":l7n>Y9EtaMmD!N!g#,P(FJC+rA7`r#\89M$'Dg%Z""OYeu8l(4:]o6@^2U)/O3Wnj5=".61:.f:5?M
%@M?*X"#E$o1uS>tWfRZB;?0DGOVXJ+*[`OV@'::kfQtAFOd.t;3(J'(6mNa2m,_2$)NfjjiT-_a&4hpoeH&1&P+[Zp-[]Ppi-s&e
%[1$Uhil.Z0E\9X;oS>cm+p,3RLUtm5b/m4+nm\R8%i5QTWV0UWYBGKBF!<mkUo4;_P$k8sdi8X%J-pse0tGFFAo`JNH9*E'In_.O
%SDX]L<ZmL,,%6e;r*aj\Hf^*KS.ZXmX34D16,jPW%/1k!!FXj_&bC:`nC[eHp`4EN+H%O^(hQn_3<CkpN1o^S8?q=<pFM+s3;B"c
%hLi@s:on1-IAS-SKHaP:&/PXi*Y@/iKe7G"!`T\eL!Yo0Tga21O:9uA+LHe,_CS-#!'gYS!Q8.f9ON5l!_]FEj^<^k*XJ`p!A&&i
%od<?K%SA_C2/o=Dbtnk*"L0fa;XOT1$;Wo83rs=m5f,5d0Sc&%+O<4o1f"4I63'E@>Y9\#oKXf;N1j%FKFUUB'OjL?M]-a>"KRrD
%?A/eKK?2ImUiPLPcsI!q_,C^epIQ80\ZZ<kZP.n77g)N4qVVK+CN?rp681Y>Hu7M[5V-`P5U^"@Th1?!d$dlb`\WC+0L$`feeaE7
%oHQd[?Ud?mN&Cf0k(q*rXoq'M4-0lr%8U2_C6np!(omt?SAfI6&^^dF1d8e*J7>P`.8Bon.>)/C"2J7OS9=Ul+WMcMe[PdEZ&(kb
%WNE"gT9lU$Pt:%c,_WE@R-!8JBnShbJ;MN<0.+PW)._,bMMN&%#[IK"O9ZqVMN%1\:2))+coI6"Hj6KQ"EWeqEaf1TQ7FMdPl8g*
%*YUkK)[KDb"P'H$(n$mW%E000P<'+"N;P_d"@WbG=O>r56F[em1:;[p*3(D:)Y,^%-kQhW6s<QCefQ)PXAC5_$-PY$3dQA(6N\UQ
%<X2N7M,kAC28NP^1'jWX4LQO%Q\i.PQAHC!N>gh2#)V@W#RID__*Nkt!9,\^3_iun=u2M00FV8EE=s^10j/C>$pmi[4btK%<Ib7s
%HHKimd`TuDTkn<%*g0Oha9=8JC']>eTS.b":cf%VfJ=Ei<HSmc#T6s.9hBsB%%oI$1kdJ"#g=4fe7S*Q6;n>r#nEXK-MW2#6]t#K
%1d[-'QG$/5S1GBqd0d^iL%k`BB<%>3S.:V^!1d5P!.?DobCW2Wd'JtQ$<9@B+;*<4JDa4S0(Yc[#.FSps.9q/.=7.$P#FGW93m#M
%MbFF+r;ohP"VBl?6l7+WKD-i,ApL)'&FfaF'?3>=&^=$?+RVg60tCW631LFG-qXJ2BpO@\S8-"q#d=;-RqnoaN+h.K0%!R=Err&Q
%*XL<&5UWI'!)'H-86NRTXq4I-N&*TAT9&SO<AOlSb(_#M!<M7BS8^3M/CO&R,m\Pu&Ga)"#d*2V4G%^+Unrp$.OcQl!n6Hd>TKM(
%#)rVf^/2[Eff62MlP$<1MjH]FQ'\Lb('sdB`2$NJl!2C);N89h6E:5#Wg""A8&?=ClM_p"J2rZt!=ROa"jml2/9,>J7(?jNas*5^
%QBH4m43C;\/i&E/"<nd;,@X@mP=;9DC-j)IP):f9\-[],l;T$1;9D2!96g/B)H6b@>!3HYqgk\Kc,*C#joM.g$lX_^^sAdnSt]:G
%cQ2@R@&so)Bo`=(-C%\LB9?+1?73BLg>QFoQF.j(406@_Q"UWE8aa5b:I8i!U$(U2;@M_#=DAFR-9_lI-jATq)0-oQQ79c6/?L0Y
%:EpgG=B_^0dq;+2hICK#)i/ro>up'1$7cG]26uc%810saOZ<unl":Q%<5+/u069o`0hGj$B@*c"e0e;7L1Ku"LuBk'PC]br.Fb!e
%*eFN(*"Wg<&17`+133$e(5Yt*n"2n<'59cu@5nH@/F6>2<ffj[lA[p"ALsCHH)T+L9;?<4N!c`b&X5".QED2+cEj!jI#0&'hZ739
%\djffQ2h@VRRB8k*.qfJZNVV^Qj,ii#n2LJX9?B<Lk%&hJ]Ol_TiEhc,SIs8!0GVJ&<S5$&U\2fd2H[PeW0uX%,k#Zf%;h=HiREE
%o98n;'u6bE&P*Lg%QOT#`\(g6ZV769Dm>pr(C<G&<[81]inY;?;^,)&!LP#/<gKEJ6hUo=!D"(_L)?%i--cL/MTVup?l$T&L14j+
%GnZ+d_,UY=mt-K*;h'P(;TO%N2UTd8JUMbOO%lukB[gLl@ueX$AGS&ah]e`84G%pt;3.2&4;NK%mMLV_D'32JF3.Zu#,4%?$*+j(
%BTV=Pi3@\J$6`qo=_]XmcSIGPM#a<?!]L+X%*?L%8JjW:(#.uX886a0\UjQ:ZE[:t?_$TcfrgE4;`NVsfQNElb^beT!/8*&f-!B7
%J5S)m=q#JQL^scm9T&%W&L.&7;Mu\8$NNU6!)ueQrDJu6+Jirk?l:-uM';/=L]QZ=!d>ZuAo`D*U^VoWrHnc%7EAQ.N0[6S5sW/'
%ceu#u>Vh&k!R#k@0Q@6RGU*>8)iumN[%;M2+_BkK8W5_pV<N]iFK/9_5*;*OlAgHY5]/]9#V6.rb9TK[=+EgR)\DD7/.BR5E2j`W
%8?A,N[mP<]iWumn51-;4K&Ad!C+0P.!!.`u!AS.d"@SSm.KV[0>/9'2QPij,4HKV7-4gXd"]B*&1dMehR@kaL)A!\sSeD--MM-++
%+QW`g*M(UaKJP(IH>'+1/#U!)nRQJF/>Xj,$R&d.8`fFi8u),0kTlJ3>LofS7FjcU[rAgnh?-2FoKIB?_J!>n!GP]!^VZ]0eTR1m
%G%;1C!k(K#/m"eZr2)atK*+If"c/+(Ti[!0*,?ZT2(QHlEeJ=4W_WXh-fD"VU&c3b_CnR1jr$hrH(gQGLeuP6U^0G#J1bhfTdL@m
%[!^th\etdL0PS@q'VnY2o)N5&(#a!Q.$sL5!V&R0G"[d/1,+BN:=Van#n^?fE"sg%VkJ]C4&8eTp)JY&5a!;k=uG>F!a-#$R32VH
%*>bniZupCS9:.^NcWBE%TqKrZ:Q4#SEJJrFLsL3S1AjB_`%;RsKao5!3fGbi9h5iP!s)kFN6?k60+_$K="m=_oeleN7n,=='9FK#
%FHi)99ad+&&/gjSE=;=r(E7u!LkH5=@-B$A'o:f9JKeeGOMjnU5fcb-J/$"SpagfS.ld>9#ZL\8#'U5;`WRcYCPuqG,a&>L73J_r
%<6-1q[9j]s;Mo^9:pe_KVG+9dW#!F":M!F5hdr&aTok^u&*q4>b9"Ef/L"L_$V8DD@1`qb`\6!2#f?#-TQaS``j+.k@D#_[<$)pd
%`I4(,r>F4nYRt&((h[%56u:KXM0"4X=8n_mE(1EpEhfQED\S$n&O$aQfM"4fDr4Y$+]uG4B6?3[W[AE.D5:,#'&,8u=pg%CmU)_(
%l.&9HelM/aV$YlrN^?C"8Z=ia[8.B7D88Jc+9ZAkIWUT(5Tj2I!5u_dJ7X9o.gc,R5W)(76r];6j,a;.jE2#nJ\Y_\(7Ctl]n3[6
%`A/_I9=3&]",]'"5m!V%"'_Wh?o(43YZoNj\BKNbdZE=u%+cj5ik#oKPYaQY#`'"Ib7k5eQ,#f>cr);t82e@7#jE"(&%)d!1gB>K
%[9aJ,[Jgb+BHRjpD+^b=&4f:I?)k4n&2JjV1U\-Z/.6IgT(0Xu.`_1IPWt?S+X43Qk8*+.:J<rg`Yn5+'Pb(=',41Sgr$'r%n00S
%JRFGK..Cicm[Sg8q'''$/I]sIO5R<1:!5ksC+6OD&Fk]mAJi4(V\aRe_K%>"OJcU4.BjMo$^SVX9I.[>1V*X=Y!?A`nX//U^(Z/%
%%NmDa)@$"fcN&Og7taoRj@I?YA3)u]$a'Q3V0IbQo6S_2:P&Y!q9C4IVj[q&/:<BFGu$[mAJmU`&]i`Q$m&fu*eXof5X[;'7&*-f
%;3WMmeHcPQ[(m5U#3Gr3)aIRMY_*%_LqO.+U/?8h$*M,`6mC`3<^BahZN*=S+%RGj;ZNR`!6jPmQ:a0O\[#9\Lkd@@-5E6D)m,]H
%NFBV#WJKCB!5\o.AIOA)FL3#""1KZ;pq+Ngi-,I`5cBD@ZCm@(%**+f0ZQ"PnTP8apmoe;JW-HGO/l1f7Fj^P!X89X!*Uh&<-R4"
%(0jb:L/7u7j"r-H+o'A+J1:`k'u]6S=[N`p'r4nILbYSQMMjlCn=1%d.DK(TT8<QKq[,kdpLb8SUkW;[S0qOoeHm!r^fJ!1&DhpB
%_L#WXkbnS]h9&4.,C9taTS@ZiE#p-f+NkLn`Wp%[3irT\&PRGs3i1g<+ESc,IlNN<;?A[s1M92ENBfo'6*Wfg"<d9_,nV5O>cDTV
%`#R"!"@=79SH7[3+[@a<FAK:u5_dJ_@6bG:b,.Gr844G"n95HIHO!*Z2@qWJT*Ar%J])36,)BVQ*?56%&u>l`jtajQ)Qu#p])+7r
%5Q`98JcTHf>:ZO]=0'Xe&hkH/8\p>N;;Xnl7j((Y?+=R.Rl!Ck>Z$/!+n_iU(5N:F(;W><:N4VkJ:Vq!_m69Ok"r-BOi#/^m_XB+
%?&U1"r)Jch<le'uqRAu00\CLYpI(ejh-&uU;?PpX_o4kM+?Yl+[@((_ag[uT\49<6$hjgHJi)>ac>c=:d-2i+&j"R8!G["2*ptca
%an,[\m4p!)=MmCk'j?K,"TYpA!ML#BM";0[;X%I)DRUbH%-A(NSp0*(qT/R=\>dHl"nBDZ^q_>GH1e1^h??7\=mgo*M&40VZ?^a0
%I2is21E]]ViYaCk7BHXtcRC!LFTj%OQQdU';S&Y]R9_:!AqC;lL-R^-FD2A*%o<9XLbZJ%Vc'Xo1<iu&JWfpFQM3/6aRU<E&0N2!
%oAK0.n_,&r3pP2P"V,W_$)`u)Q6,Arf*YsN6qAB4nuu2N+F6;W/-.O8q1J%R_^S=Q654qoe._dS!,4)]K6,-'_@ueUe$E&m.tU=`
%Yf'cZ:5fl7(D?<>JT;(t4;._4i.7[YhTc:K,XB%YKj-pO:SpVK(I0D-VhoHO5c<c(1f;F@&O^[Q!LprC+j8,mBLHU.UCACNmtBbP
%Ma9?N4]0D,J_?1V.4u3fQn!\EB;?]fL^6?9JM;\9#i%j:ii1%84>b0G)Gb3h_8`-T#d8fQ$O@t+@?U<"Im^GjoYSrmS:F#CSr$jS
%""@Lu6k)e?E!euo&=9GOcs,<i#+&eu,r,#oJ[$C+o.]eJNa9^BiIg+=diGK5Y>jom@CS0+/1<F3@fRN]4bll:[VVg2JP"S$_+`T<
%Q80.Khi.4okD@a*eHeLQ,KOCR;'5s=nE-PRqDXNJ)%"o<Sgqf$%Mg5&F;M`KOsn0Y;'8<g6OK7^ns2V:f"#-25r?#A#eOKIL6SO%
%Wl$W:"YUQ4Ah@);IgU:`g-%]WJr3s&R;a<>&K?jO=BbL"kWa#PjKo?"bD:gU%1+qU&gl-lj[=/l&ELR6bbe@feY*&+NF?KcMDU!(
%il4lq`H'"Ld1Fq9`:/pF,,ZmDQqV?gJ^?Cj5]._f#aFohX+j_N`2Qh8;PsN[(M.p-NCX\^ap[T'mX9'NKKt"j_5c`+Z<BE'9EYqY
%MXV:cAr%]TQ3Ag6)?1$g!(9@F&LJVlWQl\$/nkn*V3L-U8[Kh5hLSLBUq\D9MMW2j#f=8F`-HKSPr<_i<_Z>Bf/b-bcB1nT7R\R3
%#k^A*2B["1!p&<qi#[jpL22PC.`<);Tga^ER+bh1"g*AjXM67).nETMP.X9JeA%?d,;OtK@3&?*V=gFWM,qVi!fDXAdL5dA^@OB`
%7Hem07/@3Qc(Iu8J^$cKd%X*H/Q05=WFhGp6qd&&N_W@e^).3QTT*=l)K_Z=9a*p1%:uV11*$IVk&4/%S<TO50[P<(@MB%)DT-`(
%>te:I`L:e)CG$'-N3,!<<YjuY<KdG"X&WLZD_=i:\=I.ej&RSXnQ\=+,*E1l1?7P4]+M$f,,Yd9+@O(tfZ\\V_<cfS/5CNP3`HlZ
%:3+gJLoMuR!.pp'g54GW:uN-jftr?a6DP&E<EBJns1f@-8dIg-WKe\&]0)Q*,_QIQdJ;t8!V(+H.>#1:#RY(/!YJ_s8;$,YUDj5j
%!,/*+^_4_%;%Gpb&kT!kC_kDj6HV,/(se@bhZ8SCZ'!A.#S(qP."S>j:W+aBWDF36&dcG,]Sd^E,$.o\q"\G.$_gC*+Ak$2O@k7Z
%d,2u4cNQb!]EB9a3_tQb,6M(I1*::amTGiA\03&[A!(9?<gDuM!0i*gF:;@\8F#"c,]I$3WltPr>S5XgMX6bX]Yd_3fWmc0l:2GO
%%fsg%*K.aY%DSEQZ2R'%O[IS(6:+nG,NR[f.\l7sTRthZ,7qR"q;3AoZ:o#nMQ)]Q`!DGS;sSscaMUPED</NT.`j#9F$:2l8IEK,
%$%RntmMM*ua6:YoH).IYLi*tBpBb;N'i#>RFS4pM:rf"oio6mBXh#!W`GAA>M82>A^2C7`6:,;Eo@(ZXeZC'1l;&#sYm,haU)9[1
%(PfO$![D%1-3I&\*4MakF2?c$E?Hj2WF.Wk($C/B!C>`Oqc&;$7lWWQoHXIB+k6t9+IZJ>cm]Yb=Lo5%MV'ZpKN>2i!/i&P`]+$5
%PdI%pOl'XY6Mqn\o*BQ>@Z"PI8K!$?bCF,\j?=P;VUQ0L'FMJ$3$@)6!Pg*7ND>(4+/XcTI#EROQZOjuM#i9()Mj3pTaQYb:3gn<
%HqV+N"H]&tY`'#,)XU6%eg2Hh;8nItUau'[;\6@'Ra@,r$tDP#Rfkd9Kpgltl2W.>Vas/03t[qq&Z-TN[mL).PaB[(C,&2K]XYtP
%-k?F;P!3Cb*H[0XnSKJ_-cY"3O9dsgMT?#7TlVV+,V7FO$8>sd('6r,*A?/&k(j3oDJ`GY0a.S)dEE[tS503[:E,bR.rh8[4HFUV
%4gR;]fnj6.6o$'!<%O/n_BOW?Jn_1aVX.Ba0agB+EXRY%(n&2.M<Vr*A?H&K5Qd*(n1>(j&`/q"=etXQHm$o=!2U,F@+%-THR3*r
%UhKP;%)1"2J/ed38V_2Hmh7-;Q^FU"&B^kM_?,SOJ-8W9kcFh-R1>0aDNR2N-epdQm=@Z'lA(+f6NhF)HuMd_3p1dY),3a(6tE6Z
%#_].8G-aLcU::g!K(*=CHmVa+7Cpj-eg^.C*gN`j=/pRVoR[>Nk]hm"(lcZu)=b59=0nEOmqS@__;"E"!L5Y3iQ]7k_R>$."Ps==
%K1mY]pb^ikE`V5ZJ?]JUF+SsON`F"LVd\eV6emGV>8ZBW3Ncl2Y`9M<%E#f$Nm<cM5Zrg6C7q_jfrg^]"QK[dC`Pd_PcIsK#X^h>
%OI-cgP,<m)"DA[@jIjbeiLUZ)8ocOcs"sdK:e2Q-%1rnA&nZU9X6<c8+JTa@4cErOEo7[/K/="qAd&iq=H+1gbU<s3@!W8O9ecdD
%>b_g#BFTKtQVqBu`8N<^Y)^pA!]s>\5XEf;q8rsD/E?6i`\Dr8RbO2gjH-Sk8HVP`[j#h0Q,YE=<N9\XOcUiVScIQeeWd\m1K;8(
%FqLnh_LD$%Ai*.%djd-;*)es9RQ=B(1tS?M2"q`&"S;=!DR#sK2@2;"Ju:r79'WIm&0J'!$Lt/_\<%*g49SPF&R;h8"3c>L\0tGU
%6uQ,;1AK'Vr4:hs6E.,'@L0%]FnhM#\-rti51,;o8u.'D:K0Dd$^_a+\"GH&dD0o*+_)!)UaubH2[R<k9DuO\UriF:4K?'A*#7sn
%e$Xf"@3Ngf\tNqr*q6/O)PRN7?n,+aqRfgN?3(iBVbVQ]<!VpD(Sh)D`O<hS+^!9C*mD-Vh>!*-$<4QB"0SkB!-*AilJp\RY[cJC
%cSS6#f/kE7i;Xa8d^#fhPsNBB*f2"'^$"fM?3c:[]\CK"Wgp?X/u0.0JkX39W/0Yh_o@&:?:SW:guq>4<uUY6dMQPfl?s1XKb-dI
%?6r0"^(AS\P\E;h<Q:=9Am<;2>).q\2ILbn^o;%&!/+5O2@G%k+BfGr]U2q=_8^TjPTb%I7l78%,(<Q*Ubm$IUY1cDGDE)ojL$A=
%W?E+sDDgf41X1IXRX;#ZRl-iTTtA#EWGWBj?>@bng>%d&P&?dH,]Q<E#b8<8ilSjG&1o]gaY\Ee&C47>9/Mhd`G(\s'VJ/U9uBC=
%j4$5q<*=*d\>s1C..pUS*](bmS24`dc'<u6d."^;68#CLLm^[AcB-^=.A[JG@(:N>q"%B.BRjZ^?>!Xu!rt4\O=HVkPNd;_.ePUG
%dj/AXJLa!J8=6;9=+_LK3Mi%7*W[I[.KV:R>6&p4!<?\N"3IcH^o6%U18lC,&ocu9K'+IHa>D/QEoOt7igF!fiLV1m<Yd9.F$lgi
%4d8:I1KoNK%NZPFn=jNl3FC`[_3G\$C@O/1n%EJbA7rD0SN0D8*])L&;K)>>;_iX"%<4Q7E$!YPZ>GLB%HDmKn&<(/MS&Jm<Q$=e
%,7jqAFk<F850>2QAiMoP\iC(9!)r9i/_$i%J=^eCf6JO2G0,>8H7.9Wb#)DTcC$!4C3D0TU<67?pP=(O3<0tL<p68%:kZ*(5<IDa
%F0%gc#3.!F@l<!@DD=6P)Ke+aapkHKa`/-!i#kD9OrXQG/%$#$D3]u%*eanr#Ok&9X"g%u$9.*pTd<t3Fjs^0]>Gl3Yn0i-!.\Xr
%WUH@lRi(RKJ8)^>6^&e`=;>*-M<]8+66Sn3eFNrEQ%_:f7Q"7RqT=_XG?a.J57pKl-asJ2&=,'uQ.-aD>d`*l1q`br:Zt^DKc6#^
%(9i:UGbP$q`DX3j&R<2?(W<OS7m_G#UYp_F#-RE:S)DEm6Nq^!'d?m`CA%t]&"p?l,"=L-0YP.%N9R^41l)ZF),f'6Buh;',eD*;
%O<NmV6*7iE(]tF<]k)X[;LhSsA8mG\Auc=`@CX5V<tGrj7nGI1"e\DBKu,tda3^SZn$E0oT2='j9KfB(rIi2M6g(_qL"S=$^.Q0j
%^dN.!"Q)k8LU]nc$r!$[Y%K@!llR?bGpf?PddSST(bK8n!2+7O!(]J0qVh^@/?Kh$C^i[dD$IHLS.>n#i,B^TgHZTneH7(H+:([J
%8="u7RIp\a0BenEr<tKU;rsX^A=;o-9dX'(3d?3!e\U5`,[nck9FqL?J`o8(/DSt\@Z*W)B4dSta;^!>%I8f$3E8Dj@@n[?6MMI*
%h[+t-!ahgKT`M+V#67\!L:/iN.)=jeQLa&C^%=UD03,gH!&kr2+4;>[7;u'ZS@<#XhEUanpk<i0GGe+O\14%qohYr[7Vsk#?)WS\
%_'8%eZp/BK?nMLoI%gK_,6O)U:;<+Z&<elfTE9r&`KN&F&0Y6dU_k4,&,V*DS3YR+$cL)Z.>+IY8S,+N_#0.?@:AEQ9%3qRTQ9NU
%$&,fX7G?*4'Nb>f5oH,#XEM5b=sH:p"11'_Ws.Y/%>!GQA-)j2+Jh5`bXB#tPi6Sul9V$N6al5T1`A:920Va`-Q:6A6r4Og1!h1G
%K\9LBX!e[eC$_bF<71pFZj1C^1e[sZ/nu@sNZmHh!K$e=>iRHDR&5m%0oQ^#-DUu<=W__VOV%H(#U"1t)]L$VTf<qH\kMd$U.G`c
%$\K8$*&63[,1HXEP_n"0`pd^FmpHblRUV/J&E1#S]&S<oT`'OH`<0DG0CZb``RU*j+RCA"QW%2]7(b7:cnX#uO&:f^8BaJ"3a,rS
%0j8i?T*p7T`F'+-jjIK>),6/`U\5`O2@2Y1/r-OK0Qn*H/J,p2j;O"p(^@d#CK$Y,!Qm67.8BGO6G+l^FY7<qh9#7\?2VQ5V*]co
%Y2ii+U3d@4bnMT6D6XGZKI!,(<R!UQE*XBL:,6Z`4_?#ODK$^Qlis^08YI7O*Jfs=UG_<MK"Omd.b\,/Tt6d+dqcIZTd5m!7@I2I
%nJt@hLM;'*La:?[)e7B*"%;U1!V$S)E2j`TTfO(t2*r]%@\$q89<!Q]"D:!jN5K5k*!p^^n&AJ;&/$Ek*hq!h5i%blip/'@VRQY/
%E(opN(Woe&K56i1dfsM:7!1l[Ze>R4JHY0q!Q&K!9Xo@=,QrBZpu<AF)]fTc`p&C(PiYN'dk-g=M0g#!VBhkK*567i/eioD"G#@7
%YU\$(.^^_diRnPOF_;mhJ42kE90cVg+fm"qW[GloRTas5*FPI^,)g9]XmY@;W2;8!3m0r'e9D9K$]&[Rh!&ts+glZKoWLV/:=t>$
%9eSnTZE1E*7g+nS-3P3($`&GU*$N_\/&Gg"6p__NhGW=TY&_/inK(dNOoh*s>R\\hiTC2d4W>N=a8#X+W4`Q-U!Q=UUg@H7\<P/b
%<@8(b7U+t/i8$YqEWM$=h#Ze@\eo+2[p0d&RKp;]&b>">6&.04]_BaJ[Wr9DaU(e*d'/N!0s94CGf@iT*Ufn#6D"hMSV4d'*Z@4s
%I0W**3NYO8"t1(Of'd+YNOlY3#Ta*/!+oYKp!"EuhJ-%a;FI<3[1?7S/0CBR[!p.i!*n`%'s:H5es!+(,g_7ci54#G,*l+m;!a%7
%KrRTN^f_"t%'BVuLNjOtE'jcn"681$gLfa->7(COC-U3,+:))EeMGO2,*=K.Wn>-U06h(Yn7`_FY!"'=@I.:&4eT:rgRE^K&?>g_
%>TdU@EuXMSLn3]rEEYgN9Z&Ff:*U8jVa3HMJIP2\5KJ)D'E/bi_bAomXVBE9`dSW\aWO"#1-p6.]De7,7'h[oI4?HjOP6IUf:djH
%N4C@)^P*g`cq0,a8/P^E.Zl!gTRFuH#D0<J$<3gdd!PDP"XL-[pH7Ge(q>IWQt_r=jqq/%c%MPtAoLLH$%7bP/qaj\,eV\p-mnLQ
%B@JBn6Df!)nMQ8X/d-u%VI0n>>jnUG_E`I<-r\,FCWKk6bZ9%ffnY*L!m+mhOe.=I;l')S%MWi<_=V-&1m;)F-T>+[QS2@-$Q$U=
%TtWK`0L#kTF]tioTW0i%4Kn6$R\<H&OsDO>;&bJ$iKQpNZN1Dug'C%N'J`PJN\a'[$T7581&AH;:G`HSR7)I";G>GSM"93@_W)jJ
%jZuQ&'I`$oC?FjLC'kY'C^feX<!8I9bN!5SG,_`A-oFg7qCca_!"$F&JV`_l<PU+/4mud%i8q4qm^Prook?<fVI(p"rMZ*rN_m4s
%l-1/Y@'<gkZlZ#(Q*TDtONfFO.haWR[U'cr6@rZFnihDpF/;rLX1_imV3Xm<!1KrXp.7gE;l4k(@ir-cUaUna$m>=Gb$Y60!eAXt
%Xg&-LO]3uO!/#)X#Y@Vp`/9rW'Sm%)\KZaA^]:T(RMLFB9S=<014'&LN!i*X,0)%?U]?i?&CO]TUp0\Yl;h;5IBSH*>@L2p3VZjY
%D`4G6PWQ"'fijfj_.MCu>'C(>UD:GkUQ,<UjU'l/dMKn9'9KllVg%X2PSo`s!"?+4^__TQP`@oJoJT%/PM$IL\Zp6Tbme2MT'ddF
%)6CM_<ol27BqpBA]$*"nNJK*l=E#$Xbq];FVR@e,9;2Sq@;t?/EE7uP=Xaq"Lk*F5=t-ciEUq$=(dsbi!Z[i[8^NSOdW$EO1F0IR
%R$n"1#7$Ab$$hRt&[-^6.PgJ#&Ci3P3E(bX[M(\d&KRsc$;2LT2>&s<ZMHYQ2uq)T`js>/@8Lqh__oMe+eU_-K8@Mml7i5e@^QX?
%6Uf)DEZ45Gop:R*]e;g%5g!n0BQ3P%GYH!KW(.7f6Z=4\5p.b@/Ef%A+Pg>P8/`'^&YDgq_@`Q2Tf.Tg/oMZ:Ylfk#,d/%$F.kd'
%,)0H,BQ1X/7Y)+2UFV87+p]A\&?6%i1+nnF4Ubn!"Zd;j9-oNQ-Lr,\VPLRa!4a9Z"?W5n0f\%4;P,,n^;NWuFMOpjA-<0>"qpBi
%.;4NkV8d;^<Y9#XBs^MFWM\ON<t?Ft4QJR8%a2e(>T/un.4p,#GoOjVmUm3O72Bo$BN%1%^iu`b&.!3LJsXq;:r6*@X*C'e];TY4
%bd)j)PL*.!Y6VS!L6bUXiXdNSFqG.5VkA=9\qHal:2`6!64ZJ<d/=&J]s4tS"U7kR.%s;n66fC[n8;2s#EnL]M`;9g-N`W[irV?f
%!1;QsnuAXYdWfQC=e0h%@gDD#6s;)X==p[AB+Aha3#/mt?5pCJa_^XMh=*!_K[]K@!r0DZSgI$c'H0dF?A_`jC";3W)1"gUIU_hn
%'R`FZkiTFJd&(IJ)Ci(Ci"ZZ#(\AU\1QoXj<(-IKWV8F75L>.:Yr=p>U)"0MdX^)2YR2[JV@m_X17D7W6O(4Z/D.i']ps[WpmjU:
%^dineF.Qrjiur$e_RjWoB3<#%S^YWR.=FfZ%EL*=kTRr:0LI(@R!o7C11VO;-S/i=E)ts)5/-n/!>q9BK?=iY7!`AeaIk@Ub"6=(
%[p4C5#@:puKd0Wajrask/#4:^[8C\_+#]Gp).ZNNX2cph<MokI*)NMEq22UZ?3+t]WQBb5Eo>ncN_#a"L!#fUj;I^m%*Ac:e]dCk
%+G0d%%(S^JU:Q-dbiR!lFQo.gmGth^pG$,K1O[du][7,2`0WZ4*[R79)ZX/0!,Q'5nIcpAbS??ME![?6h3-]M`eoMA2@\mqGSGjJ
%Mfe?QH=hIkZU&$<SgFG/PT"'l$c<'JBqgG>!%GD=.l,*)d1P.<AXZC7WG*6qFZ`$(__I'_M3*9(!#(k&n:d0aY9p)>,HK)T=.&Ks
%2GS^sR5=^7&Urot"IfgCiIcB"#_QraDa_DT*"1_7A6.35j%TsmBC\DRe"S&kpP*6BR_.s?:p#&R_/$X+;_&5H%A!A.L%WVh)*n72
%^kpDH#,K$L*^VU5#G5!$q]nf&*?^:79E==8Bh[AdC*>c8*(ajo!m6%"6B"#L"?E!6^>oF<q4M&+RCWu]l?s=29Wh(1;6@rbVal)3
%.H3UXOF2hudmjq)=j%(bP#jnOAh$.$Mh#ie$O!$O"c2W`!X\sp`T1bg:i8guI,YSHQ\Y`riscbh1^t!';5?VQ/MF\_ZWmn/2$Km=
%+`\m0j.&A^"g#f;3j#0k$$.[050*e]:HoHN"($Z?Zc<5Z!YD#lQ'rnV&@:]7/A)6\Luqr/Aai;9HY\5'1I0In#`-;C/j:aNM!?.W
%&EQVCKV"KE]HK]/[\H&?%1ja@!QAUC7!Yuld7TK\/I2C%nI^P04Xn741!*@12)oh$h.\L+dhuZ0SAH_nf7s>\PUFm?VSZ'EPBd=5
%NDWTB2[N?*+]R$]V:WX?XUIo,FS%Ze`97pE64>+C'XPReV>^YJ+p0PC>QJnf.2>kqh.(C>78ku!#g%oX>/M'%/aN!&p*F)!?j:s)
%EXC>7q-jQ2\-(:"*Vs)seQ2L;.\Fc.jM4eLImd0Q%ij'(d*P(V,C=(RVF&@>D0GK-*o@*Q4qElE*?f$:cGOE5L/3E['EuG,oT[j=
%OI;";>8-#@$UFQE*oHP2fTU8[1=GaINh[+.$+-4J8,kj6(#f>BJ7<CMU.e)`P]D`A9449]<&:`k@9.J8/r2#G\U#:`jk=8kSoIB'
%Y7KkJ@UK5D?5F>*]tTM-k;&.i6F:7&'Oqke@U7#Z.<3tf=d'N[4\6hSQ91r`,\=!m&.fYL:*E5<$ReG/6F^t>KRjP"aD`+SUUVkY
%897*kkcV\dL<[U^HpG>%!JiU$6=0*bWXfsJ.Uric/I\6BTlh36&!EKXN.=AePVAPo4pAiWenRul7RJp2f/.Y;RMP7^A$?c3&A[_T
%:P_8FF0q.#MN1i\!:lsK6Hj]U.-1?Dp`Yq(&/T_ieXYE?bgB<r%/JnV%fo-bkdLb,6hDEs#/1/hkJdKV7M(YN%M/[D#*d/0S:H>'
%MgU)[C]e/+AjCb?[bstD74L5;d(fWK(c.jP="ofukk<??H-2q/-EUtG8cbB[\MeYOeJ7p;,p>EIOR]-fi^c((K`mX6dY-h0"Jj@M
%'%5*[L6q^nQ3$SB25:kYYa`dsNhbP)Z-PBoit29U!`U54L*ac+)31oiAH<-0dpZT9-a^6s!7f,R$,PcfE())3:jMFWOEaoeW,cAn
%<!cc5D^>Ai7mJ,%^]]me;3o=V/e!tYh?Yi'%A4gKEJZr25iS%Sg?5He@:LGW9$.ikaI'l7#qkA2,)"Qd!LXdL<9,4c4&B.92SA=%
%7^j-V/j,q:.?_?<e@QPg[pjGE]nUJ.o"#]sE#n-AD=?;,,tY6ic$'6e&*H@]#n2T,k#[b<a<OE3N>+4rKgVT^-r_Q%'H<;`JYGcX
%Im<XTH^fe_';q!m/#n^s9*H':G(rMs\_C\&em8^kQGEg$'suhp)"[Nqm<dTRB2k6HMdS%+E84!'kNBhsFX0UEZHM$#R#_*oi02]+
%Gou@^j!0Rm9`ch&dI2TWaO%FtVZWt+GYS#PW\2>&4JLhhWSC7]KU?1*Goe<f=AASQ@G:>=Cr74D)L,Z7S+G8-Ds;j2H12;qR;neC
%)HKk/_URRd7r6L'4c1gieT#0,+`4!*.;BB/lD\3lZ0`eP&W9NQ\C0#!WtK`I@eqb*rtd#k"SLQq'<B+B6o1#Q@k867@5941ag_K&
%AMUZ<lWPSpd)<+rC?Np+`R^2DG`?UEgM"+FPV7snER%3O_/A!CVd`VBVU0#5p.7iMMd*ilUg,orW,l]/RQ9SM_Gb"AUCml[0dNJR
%F4qNU"Z[ldY*-0Y_IJSHCALOaR64oELKRR6/"fnokhFH&/7+D=YlX3g!D61O\NB=#cqF[<D+P&k@SqJF,!rknMVN]4B;Omb-c<+L
%=G`bOeC^E/$3EFq9aT)u-F+K!S1_eqC+VMt8h6.gNc;@L$Fa%C6NJ=OQ<NLhml$+qk/84u</#K^68VEBR.=ra#%"m<g^%rAL<0V0
%A2eI/!VtgUp8=!hOYeul4179cAF@I[+hP5;?oKFP\,OC18%e;\&8.JrPYb^Pp5Ek6,aa%'900bj&mT3`H&&Apai>$k.8B]rDV(13
%*:)6h1f69]`LkGZo*GsKlreoKCQ#EmNK8cd?:"]I9f5Wi:t%Jkd$6!iKk]9c!!tL22Fj(e#Uc<Lg>\VS_8Mh?[V$jBkEjk]VC@o8
%_V-cN$>1F/)I[!0,5Po/kD0Y.f(u]*/UM$^`$2d$;<<%hl]c(`+-a%DDFEi,L.o2\!Ck[V@R67]<9WPYp9p9DC^8V](lXY^V%"]&
%A'_!nT6Zf1k(CrI;.BOG.1+u00W`KrjrQJ3T^kNr2jdW5_QRmsD+Vlha)S3.a3[r[U1<DpAN_jbCIhISNiU'YaWL%N]En4c`[fu?
%.+7jm-AM7SJVrqKV/^VXe'3)l!<UX7^L`/f@T_2=oJjBiJ_&RjY("``pEb;WB!*5@M95&1=[7et\r?B.P`UuB"#K>PHh%V)bNl\2
%gQ?,cUKL(\OKZ!JO?63BGm(RDdY6(TdD]M>Bf2)GY4m1.RTa#j\qVV/X-p;rAE'K>r8\PDM%(Yah$.VB.iC<NG&uD.qE:W:O&Uf`
%C8P4*gJ;t<K&DtlNFQY*p'FM/7L>(>LS2sf/TGoH;boPoR3W7;ipDO7FP4r_R=1a*[lQsY)kYim1)TcZQjlUEML/tIThC7fYm(SC
%M'eHS'#!(%9;Y^DnP?BrbE[3PldIAB@Epcm7U\nkC-5oGe!A^T@7"l7QSdT$$%s0Cqe=ALfdsui6(b#;:$[)lC!$YAYhBG?IsfK#
%Q<!+`,k=/n8!of6kI!6a9SsHV@[^]BaBt=o(P[6:>&.5A@CTb:AX@4RMXaSffM]HT]GBRqeo`V.UM=4ph,dP3h/Y-"gLDk`P8tuL
%0sHTA:s'bRC(u9;Wf.6b0l`ZE2$T1uW%84$I/h=YX-M.9X166q!pUP.-Tj:\\DWf2SYf7=G)UT@Bkm/m$OL!'o,:P*aG2Y8HSH6H
%((u4&VK&RE/9m4R#E2;Mn7Z,!.BS0YRke9EBq*RNDD0&+0ZHr4h?%R-59[q2(3+T)Fgg%c3X)p3eAm`3)br;LDQ8i&d58YI>=l!!
%6]uU'IHh=4_/i%BePS&6X(T-n!+&EN3j<-oS:gqTK5Djj04iNSdDIe'r@,>[3NS5edorGK\u"U\R\ioiDX4h)1i?r.1Ih\HlIfW+
%c"nD9I&aVZ@`u8!j';;j<!]Y(V.?06;qQCXbP#A'.D)-bdcAqZmos2,VH?UCcH_).0M$n;+!7OlaQu^<'uMfIY5$FIPou!,V1$/S
%UuAiA_Vi`4=E&d2V8/u+[a-=3TqI)T3n4$HZh&!8k>[Ni[&B2o]H38W\6`@\P'YG+&h*a\I7bp2gI;-sCQgqXs68n3;fceR2XR=u
%;VmifMjol-.STQR9^-*$+4h!<!,KIT\.OpGq3>Z9CZ'/&J2Gean.-1F_63Rg.]0mKmgCK*kd/mTYi6k?1'Q1@L;mJcNqmkc$Yu3H
%,S/?Wo7J+[qm6fe8[&Y51+>J?G:Fn\\q72!CmbGV#MI):L-h5N,^7QFrgF@\YLo"E:G9?$bsCuY@cUusJnu`'Ye[F=+S]1Hjl/Ck
%-"%k)jT\WU7DQR!G=U#[:T'raS.%cJT1]Q!l?6Z\:9_G1^W*bK=VNMc&t7^CAQq(Y!q'T[ju3AF0+I0Ud&Y8II`C+,ODK+3/Q&T9
%;"u1);5Q^sNDORTp?]^\P/7HT-<iS.IjM;#6GV"&BmW%BcM^(/51-8n<@_`jaC%eea%rCL&<t1un@BCh&goF5Uo`ODc$)5@U@1_4
%NMR%u`uIsOI9Kd+_VI,j\<#W]gQ!Pj)J%E9gQG<B4EE+hOW2g.JXKoTQQ6WLI(Z.2R-Nk%>?iJKG7EW5&<t2pRHGmX#e0oVS>8'*
%KIa]7_@A(7+\at0`'S9J5+li&!+ec'Tt/ZV*2nuWR%05Q*k!MEiFV$*!]NfH?fH'Onb4p2V_Y#YFUnpQPeJNeS#DmhLTYVXZ3XtO
%(&b2Y1cudK`:ojKUaK.:;d,[eSTHZ\UH%Is',>o#.kYaU5).p&NQkXPmDoCS;-m'3S#jC8[OdOd(k[A[ZocrlclFD^DCrG-pl#J1
%U+Am8T&[\S`co>QL/G5F2&a!BdU1lbj'r_17G-2NhP,)oJ42C9rb8Tq=LOH'd3skPj/fiW)@WuVE02ssH!P.I-mOf)e?FcOZu\]p
%idP"Rf/9N;o!08W6qp?k/TZ<MrI#SD'"(tDbR]"50rjAp_.#0S3CV0h,`IioY?'[=`Q*(8;_pRS]WQ#URsRD6+\DDl[+9r<Bq2'Y
%N%r,f@V;bXOEXlGC@YtD1$Ng^S,;4>,,2)A[)QlAVD>;Q(f]N.?Z+>UL.N]V/J'1E4(ZNuS<):27I<[iib6t*es*#?@YJC-M9t^.
%M2rZE#WM#QD,<U(C!U"2AkS-kN>jb,!MpOU:)QS1*V!;=kd50d(%/nWVK$UqOP$L9=K5/=&%0\WNP;i\$\R^Oj.Lp!(GIC?6X0/O
%L;_S-VL]Yl7X#-*48'9hEa^$:T'Cg'?m*HLT:an8(]o_kKh)_IS)P=<R[;VL\Yft`\W<F+a78P?c!p2GdumrnLH1;35IcB^p^tVE
%%="j0TeK[$r4.RJOh\p[O!X@K@_7"=/c#mmZHV>q\P0p)D7)@^[(%=foNR%r.]LJ(aG!J7?dNY2hR]2c-UZR)?fb<L77&YV&V4r^
%O8@:t`_0ESWm)mlf9V@cF(u`6TL5-Xj@$4mM>K3Y5>^rM#.d7BSok>Q^6fnd8i(Bi)OL5d<K=;b@>Rlu>/IJ#51Zssd=N]Ia+nKE
%1`^e9BnTFMcAY7AZpU%'LLI2s3gO#["4jF$@aZqGV-mCr@C!#)bZl+ET2d(8?)Ee)4[6ANgFsX^MFo_&Z`R%1Q^h!:*ETP#g..NF
%R[b\%BjA92f00ES[T2\LMR)nRa?[jO)/V8=U9LkLYrZqUU=AnjjG=tUN-DO1jZ]fN!!Yn89M:g*Aqk"V>uU-mA)^_F<#F`<)iXEi
%;CH.M2.a?ijcbu@2(EO%R]O&BaR>p=m,EY66P5O\(ftVFWPI.k/[sUW?9/80AJlS*::ulZp9J.'Bq!(i3]#1g#:8PZ.#DUUPPo+Y
%LL`TmHHsL*^'Lc<ME3m?$Xmda3hPLrO#HSYZ-C1d8I^V[VIf\loif8KEsL,]o?b$FBfYmlBoIdO1,rbSO8PECI;GR./6#?CH"*:t
%dSN[V^VPc,ajgs"<l9%6<nC6qCZTP"X_Cu-9uhF,m=,&;N%:p.=Mi5Z:Q$rE*#<g.N<EnHS-##OQhK-TjL-aEOL1<32I^Y-R-a0(
%&#`^.HLAE61K#eV[u_mB$K`a^`<g>$9l[`+raGUNY$Jp/#cjEuVO$rrH?#<gEt6Y1^n<c.S($1!<X5p%H_*o.[)XH]iH/>ag-#N3
%Yf;p],G5<@9@LG$$r9Ep3BKANd7Zp"bBsGTDCuK$[[\2T4GK=VQ!k))#b']C:$RjT$5B#-P>S%XGFI*U7j/%(`.1E<0_,UVF77Lq
%4gGR8LNTJLL%K2KI*.h2h`d$q*7eBdHSRn[(dF$B^"it[];a&m$a4Eo0@]'&`B"7Y6;8h?O)e5lH,mG*iJ22+Br@_5b^]!,3Na[R
%Uj]em*m5t:C>H0:*R$NGN]'R$I[N2f9kPMV?R*KN_])>IE:%d@\nR'd(/1(=c8PBS<.k\/S>Ga]WWXkGIV'-Y@C2p7CC"/\>(3o=
%O'5)TUhD*KhF[FIV_D9kjX8aUiE.)IIMF37QC:\ikh`=7`_fDbD"`5s:Y-lM'St!mZA"E1I/!4Srnu+Op5AU%^\[(On%S_peaJ"Y
%P;N48X5EpE)bp8YT&QBAs24k;E[^RPp]"PS^AB!:r5"Hln5K;Ue%9PpGC8r0TDea"J,-_NJ,%haIIlRh5<f%V[U9"+]79Up?U"Ga
%;geG"qF15>a%q3ToV8&WU.eqd/,J0&q!%h<Z[]g+Ie\Q[l"Bq[=9$:TrrsZ-qBgRQdXTm/WAX^cp!'VBTh4t:'c+B/hZuu,od*\Z
%c1g]&aFF0?rhoeLD?'</VPh1XqJZC^HMYksqd9>>&Cgq1q*E3lC5_OpgpWFYrq^A_r"UDQdNDLL6u1^CIC-2qjK^VX&-@5RmWZ6>
%i2Z>GF_DHPI\'Vj9rH"&>\R.!f.e2g1;=u#U7VSKOW"%U2p>7i`eEk,iP#p4K''tlk0FgIeg3R5(g3h90dG/f]jY^ZG',OBk%p'O
%n20t,)uMT[J:B;J3N207:u1HWS[6b)FF.*c6I<6?s02c`)R^mV%9okV;UCDYdOBU-YK%\@jVX%9<l5;TgEKM)Q=Rbr7dA5'cMT/)
%:Z&3Z(ia+8(1TJ45-mkZgRf8Mc$luS"[Jm'KCAiN"kCOLSD9H3phj;`Zqss2;IK0fn6%8fSmoMh__3ju.DBgCIm4OrF>^L;pXL`V
%ON=o3FhfIc=R0.NU!dKsBH?e4S0Y3-PR4a?%fo=_CW`TgBbWa'OKFd,=C1tj;_fc*0<_sB6!O'0?*1/uRIUP5;7Os[?S1g,/luQ,
%TPeV_QFTS=)cIbN<j3eKD.ug@Bn_DehuU]*0\'@i<!IY_>t0Wr"B!=nM6='[Z(FLaauO$jP%Ra(2JNKlJQhe*o.)JqU(YDh?QPT:
%69;!q7jb*ZaX#kk&*.kc7;/,VG$Z]J`k9d^)fF./f<+=MmE6alYJ,I$X8CU<iBOfes4d\UEsqol/b&f(/[3:K,[0F_>JSr@HJ0Sq
%I*Hfrs6qn<Uk7T]FYc7qEF-)R\jUQ.qNR;1DnS?0/VMUTcbDHPUB]Q#0'ecUSj*0R#?W5>N_tpbUA(oO@q:KS-$XiGX[YEu>pO(n
%M%[F<VDB5s&4is?T[ZUh_M:CRm^c1F@.I"c>c-L1:GSUh.\p;8;JW3ufmG)("ri)X.IjFKafJ_9&8oN0EKcG2)*Y5C`3u!D!k`F(
%)msB9/JmG20VR*tFpo_UlOT,k(=[B<*4TEEJF9uS!@sU*mp?lmBoL,'[q!/?,#-&]Q7rGplt>aS[:CVT`p#?>;S_7Fj`=_pe(u:#
%IURrmb`'j$P$qZIQ)l#;]s<64D_Do<kcIS@]<%>X=!4&iOS<e%Po=LHF+#6#el$"=>S2.nm\7ool,?`ia<c%(3$f^!=p\i`:M?ST
%:<&u_e'U:P[6NXQZD(FOQ>'_\Rm<J!F&B!G`Gm&lOW0MT5jZfM:88PoX`_W"elj:!YYj9;_/#mP_/*kW"8AX7i&Y63Y%oPM&*Wb)
%UHf[jm.XYG'.Z!#(:ik")uQ#&lG^Zs?sFqknDZ0i%\P0Ail1tT\<FT#?J/[qH<_N&Z5u,LMDN;9gN1_m/has>9U`-?FaZgO(*n::
%]rK/BZ<@+?D-#KH+pmr%/8,_TJGNP1LXJ^GRsqrMSBJ'bh.LZ<4u9FfTAK4lITB4[@,L,_J!`eQD=76nhu1-9_2b]3Q")&hn8djX
%*Ku5mDZ/0'1EXHaJ$m[kcAo:V-SpH@ZL>%W^">hY!0(?ud^`sQ\n2H#=Tqc=CG/Em`%!?U]K@dTgt=<d\r'1ZdWtY^$;R]VT^*?p
%5n;*HfD3Jp(<(N@->0r9pAO*pi<Dngqs(E3</>P]YJqk9o48$?2.*<s>^q.?PI4ikEjDjMAe+QU^hja=Rrs1"3F+5%EpE>bC]Y;R
%1RIol*&pd3(H0'5TXV(>,BQ9ALb:'KJ-<l3?#VdnG*ZI*GaXg.cs,bFC9`S`Xf_Hc7l1`d'QO$8`9o90LtQ+9m"t]i)hY>Sij;DL
%ZS+5^8[A:rUB`Ib(VXji^Z4gGSmuUj2gQtWoT6aG4Q*Ik&:*4u<a][\LtCT$aHL.b\5'$kgR"SC?ZBXM7NJfdRnNc453H7qX0^ro
%m`I;]6I^/>h+ii-B)^S3(DX3`f@C$\\/Y#+7Gc=N(Q[N:cB%Qn\=U/K_@2+%0-5%m$$'an3#'Z5!e:%PGLo#6?e\2Rb+.>h3)#"V
%MZX*=.7:?V^F#&'fCgC<UqJG<cjM@X*5[j(d$e,N7-W>%Wn$(8>u/;FP^%&KXFo6e)SS)J\*D.nhBuo7oj6ET;e:6(\_l8(MX+3N
%=>048rGE])aM7:IH_6\UZ_J'!+ECRc3RD@/muNaPFW[%!"XhF1Ts>g1^0\+q27(i"40WN"OH0$HS^m5q"+PMl=aAJ@?N6%A5?Nh>
%>Hm,\]m-X]n1Xl"!1;$.>"<c\0gGiV\cNWR<`Ng;SX8BkhRMf_T?u>8Jc4i2^\Hq%:I"]f?iHBFrpClCr9(9_ro64mos,(s%tAn"
%iK"]f?If2Ss8JnanP;CGn^F]@^]1^!aILcll6>s;OlbJ#&R#+oElc"e'p7pmJ9(qolZO&:8uC3,6Al./G=RD"]?S"B\"LGhrgi/5
%"s]gG7E[Re!TP4K%m.$Y[K()[`EnBFkaVC6O"F4q>@gM/IQKu*`!V;'N8i(`=s3KB0#f1cF5#$[>-'D_;GI,bet!8RDXTBlm61t,
%0#aPpT3[5qMD)tZR@rjJgU*_L9:8@)O6:SE%o:s9pk+?8#q5%Pm=Et2@(92rS`&Si\&J)[6h25<Z;"jL&GEX0D1G&UAG<$:b?>-S
%N9t:M'I!@A4g=+'NTct[j5f^e>962m(5*hYMoF7K-*>8OGFu?n5K*<Vl1KREE=0OjVZ0k4aNGo5-/Ig3Cl<?UPRYp@\^/&0Zcf'$
%HEU/>[\3/"/iXRO!oXl.p>g4*[S0OTqsVTA9\BO>$l$=.?K%ae^s5oKZ_R6+a!0)n&@S!d4Ap!-)Pql3L1J!-]@D-5hmrR\LmcBb
%rV5WTJ+n`Us6cB655j^.5QBF6p](*KDu]&4?h2m:laMk%k$K48E/eU$8?=Wln.j0kKk<qV8I9?fJpSA@R`iuS>D&8^5lh%bAtbqP
%Z,@ieBn&gDUAt4%g4KOj^"3apif+ZH(DUg<\`F_l\f]hBa+l7jgIUks-U@'Z+5sNuC,P*6d@%P.%JA4SJDeo*Z;)c[,<_f!SgRT>
%%j1mG9i<n_[*elb+C[Ym@21/^OGsEH0&#T/f?Pp(OPftjN=ap1RNq!dGcKb5<M%U0OHT2o/q^YQmGet]c\rX_(#E#B0enkii,P;#
%q:37J#jQY@BCI9'b+]\GEWG"UfcdHu@U/(R\g/:0bNi(oHM1t%i,?Ek'k[QHBOHq5qk%ErpUC'gYLZ]S+5ZS<,/4&LFcS`H"_q'1
%j?*s(W@hko!^ch9%jpE0JubqWcoNG4Q9>E'YGNo(&Dqj%YT?`ANG0$n[+ZuKMtR&b+1G@uJ[41e#NtSbTp`(7Z76GZbR9smm=f,:
%\<XG\[,:^un`iPIXnJ,Fq.7Q?$UgdGlE>!sl`CLF,U/1,ckbO1b.5H88cHh<<,cgTds2m=8VVd%MKjYoI/AW@#k!HD\<Y2R"o#.a
%`[BM,KR&TJMC"g4CZ!<qfVMcm6T?@]raai5EmIdMjq*@,&,7Q%)_sjS)U\/tF2Hp%-q<YMY96gPes`U4DqsmW[SS@!TJ"B9ZkjhR
%YqAP"?W/P?lZV8b57'l?n7uXP<Zc9\',<rA,0?;DQ85gG%MXVg8o/E(G?DRJE#0+Vm:)U9H"M1DSHGVTj'+_[X)((pOn5#o=Vmt8
%2!9pYc?Qsa8hG-;_XMbQqG1$<PjI]mif-SOB'uC?4<NJWL%o4oNqS&VPWo-Y,!HOZPO?e[$4a"`Ra+)KrKlbs[9r;Xg-,]_$!XdP
%^Q3=37/Sk^A$UE%3lmMBJ#Mu^R719^&7L8/6`K(oo'Hs_+41"Bdon*.<t3I<)LA>(htiK1n\4/Zd&cp4?Ij.gHW"S9T8$G_S$';l
%e)[**P6(=L5rNZIa9s$&oBO&9s"e#s&t<$(=fs?qB!r6p@=\_l-ogaKoN/&sFF$G$A22Dp-6%kIM<=?_#EM%T`A]CphcYKEIZYSI
%;2m-H]/OZl>s'Q4">R%c#2Ue)YB^XeOnBPr$+pUDJu;3*+.,RW27\-Sg\5Ba_*rHuqY94AN$E$(*n8L"3q[H"[fB&>E=N!,_#5:9
%[`ADh3MT]7$b"ED4\r>Q'fmo)YoMh0X5$T)E^GmUWT7"2r[D>V\&sfLi)>FlJ@hE_:-Q3A]]]#kSD/Mg(i.Q0M,OWB_u5Qab%.>U
%PG;rjI3&^A&!Ts,.u8Ipd'1(m;>#qK;qo6;1?j,cCMt;if*[2KHpeFoXT?k9W0GWb#\eRPhseC(.Q-uJFcSq`4?<-p)?WgfO64oF
%4qhBfp(fOq#Y^PmL'70(Ekd_G@(0:Fm8_K1KK+l@^1=RKXNAOmM^iAnGOJGu!Rm9HME6aTE70Y/U?HoQV_J6?7=i`*ZNL@Tm85F^
%m(j5:X1Ua_-[%*$EVdH6be&9s9)JT'H+IT*Tf53ec,j?OqDgT\758k0gI)*sd'gQbVJ%cq^XF1>3b='gWKi5(iC;Gi=n<EVHU5V$
%aul<Kq'&_jK.Z'Q_%7=ArfX:h\CUfg>O]kfF?%ol/.=:nI>L+oBX'?jkE#Upq`E)s:o\8e<g)g&O_j&C@q(+I0[[d(io!a^P<PQ9
%&Bf37>*gLE?)rRmpeE\MYm>Ss'q`sS[<WF8Dutr,R5`DY=ik2tH%!^n&kbDM?9(oL0s(e'!#tS>;R*ZhPU<`dD?3.24OhI50P"m:
%[Qg5_hh+P'`st[HeJO^JfcN43)Od%oFij7)YkO:oLV;u73qN%C52Yqfs3^=L[5FG^"VrpW;`I!9*TtE>RCs:BTRI.peg($0^ZACn
%dm4;9_GI`^`!\:[XWZL07l8Mt(Clp=k7JZi^(PXAIN_trpssjV/0m8H#;gIU9@p:/V(k^i!AlPN'\>8kD]Q66U6ZK<U;#-PR/ShO
%fZcDbQJFSj=`0r&ER;I#;p:H'+:e\:bNhD`7XN0\",=?W>Vn%A45d\-*I[-gm(:TI^YS\`p`:1Tq34u,PeV#Yrt+ce)MtRaJsbA8
%T@\=3&ed$b`k_rkA;=cI_i<E?>*'IKrQAoTT]%9<nf5\h&%]Qb-Gq`Go4F>LP/OH]]0#u8dhJ\T`+$M!6NHIEZ#@H-i;P3W/KTF_
%I`?bGX\:3B%J!nW`CHqn"mCI?;*).%d^be8G1Mm\\6,)^e\i0?VF[-ELd/V!Nt4o6Nfe3mTQ)N1aJ,hh=/T':k#NU4QrlA=J2.V%
%$CFT)[Vi4`]W'4g?Qs2$!E!Ig-VrD6D54?TAM4k?V@@=-9>PcO4sci+GfW5JO1`uP&$J)-6kN&YQ_1bsiI7j=9IV#/85"5LTLr]4
%V*H"F%hcU12W2RF6k-/;7jLagPQFs5%>.EIN@O],q)6.D:Q<G2.0T*[AX"IR??"Dj!@ACO$f_+*J)2\u#C4EMXA]bSi`Mt@1U5D+
%ga7u1gXZjYcjE:MeF-)/=hed0`%GknZE7M3<qKj8!KY0Y5)o?p@.b+TC&METh74Behqco%(?[\=B"sbJ%mW$cJSM(l*Z'Arm(I-J
%*H_^c5#1^s4:!bkcc%c`dg.sR+'R#Fm2Q5/=g^9T:@A:N^Q:uK0AH5a.2p-AUd1[#'AUF6!Nt0D,a3>?KO!Q\chkEuh8<9gc\UGp
%'jXL@jr\%J/<EPV@gG4m65_P.l]eJaN'oEA;3Ah-Dr2d&Lk@1<#Xaa;o+OJ7G*AqoE(.?LW&Md'c>3_6dF2cKJ"rY1+p<0*/_98C
%:cc,28\E2>JqV`6DRM2qT7l,3N4c&76l&1.$[gBEN#2I7=Yrj9$"$C\O=.+!c&.%jm&%5PR7eAU)K>+_nUZJW)!G_:1!e!"V.,2,
%o1norOb74k2emBr!Q-J1?L4fu,m2GHeMP#MkRPX7E$6lMk"Im3=r@od$hfJ$V)?s+QXau80&Tri\^*?_T+S%2`P_mW@c)Xq2Mfsp
%IGe8M'4[I^CbC'L>qLrKi*!r_-9^gLehlRp?=h2'0d;#K_A@WRLp:1V(_B.U6nW7mIG[110*GV)bTX)#"IAo)d,EmuLR?Ti%=d6X
%F;]m:Jgo.``!\[>BXV!KZK-t,0;?/4@dao'JY5f:PrM=//QO%A3.oU(9KOioRp/^-?&VuaQ7`:\VQ7h1O;I`feu_(f^`3G%rio&4
%;6LP4m5H9HFQ&5*WJ&PpRjh1$"E)&F,hT@uD6)@$_#2jr&RoNh_6Es\hF1ndV@q>Z6BMW8m6Ztl$fM`c9b`FUQ:nZ+h?+Q\1:Vn5
%JbkiE`;0A@HbUNZ_cA&oWgHqZ\&c74L]j``[B!GOG&GBjX8t"Mg7/ug%uo?;oI%Wmo%WmZ+Aq]-g'2^?T,J'gWQh_:X=l.C0nBHS
%/+\oep$P".n$Q9lUmi]D-WH_&]R6]cK916Dc6df-!u5Yc[cX9t"b_mqaI\e@<5P[GClO/_HN(+6m'@o=Ii@iY@2c=_JsbnuBpBCu
%a1#sR@;GBQ+<Xpu(.Z&mR-\O_&CKiY,AXV9\65Qc\g`m_.[\VRK[%c:O'8I^N>Z95l!pgugLbdtr?b*2Q!e=>?3iC-kclE,V5bOA
%%FMZh/qePVn[PO^.IoL5s*!jT6[[NioKar$"/;qdWf5W(-8I"AKDq[H^]?TP-29PO`:b/"09fOQA4eBC#5]!'GBo&_M\uIiN.hXj
%KMNL"/mC>jBb:BkD!0jWSUTFr;4:+!^PRRpRh/IpF@I&_-U:a.^>b"G#sK0e!(t#Adhfg8/lnnP$f%#sQN/AX](i17%<89S]u#R.
%10u]s+*1!F"%XO*nZ@.bfQ')E80=!PL_%=lVfqQD9Wb_?eR:=%_*hp8\IkmkbM&S/'<uWn3>3hk=n8WPk>IVO`*juC1H`#`p2Ac*
%([dM9AeJFcRNf[NeZdlt_*FNqZ]JsZ@aOrL\!t,Oj5],jNcN:<a>?FXqB;_g4do;5));6I%#pC6aKq,GAl75b%[r$A,7G<(8c,dl
%kV3oc5;ADci#NN6"LTe'&brkQ^qoJ@:#YLu5OZQn:m?te/QYK&jD,t^->:c3BsEV\3`FO]3%l$#?;_I*Cd>@_6L#Z?dg@ea9X7MI
%!K"Bi#8nai.3X]Xg(n7uO)Nn7j2/oZT_joE\2!n,MES'c,XQZLjUdTYm78Y4Jfn!lIPa'`(3)tJ8"s[33gQ$K="Yrd8-2ek=g+>o
%>4-D[ZcGUZ&3OK)$bG-Y8";LNjg=A*faKE'F.PU:)8t?E*u@fNbb4:]h3fMdOM*FnN''OAFam8m-L^ag'rk/H>h2^71$20E2WfNh
%Eb`ZJ0d;kr5;aW<Kru!-('8?$jurtB`9=3Y5HR_"h!o$k<dBElgmZCrjGrK-^(X@A%VeQSP'4IhVBCZm2ESP]9&uWcJpY_U0K*rd
%b+\i^1SM@!Uep3m\gF7<G@5]\^S=EknW!EmgbKnF6lANuT,@D;(sUN5[[K-Gq-p)[8rXfL@b]%#Pn3ZCLc:AHBPIFRZHn(_OLDjT
%M!UFO/4!_4dl7tYFh8Db,G;/LWtRaejRq],"Fq1d"V:aJ,afUt+1[?iok5GV8pt;0[e!8a)F*<DLaEU8qBX5ui'CW(!`UN?<D)j?
%qHstu8cDaR=5$EYR"*doo8*K2HRj37_hrc)keIJo'hLa5m>"<Wh$nkjMfc*l!cXh#,jtO@oKgO;Z]j?p#OFl.e+U8hZ@h;@'S6!D
%2G"?7(M[ZCSj*eGh^gWA8`#(44)IJECh&l\I5#ttm/He2XZ^KOScaXq5hHjIVGk.U)a0-9)bg^)TmkLm`#V#AI9Xg[4d/g9amuM^
%n1Z(D5`[K'M]RMs4L?;SX,[I.VN&#)m<2K`2jiK8,8;\66.*LtJ)10V-?VD9'etE0p%.Kf2h!^"LFpVN4[SVC#'[TkAgTT>mIU"]
%b])sn^<mRrB!n!ma94^U*T%!Y%I0cQ?o@LWcFU%&hL>3,5T7qHr(sVnr^-%\0D<VXm3LG4jF2TZTD)O-_\?Oh>1be9kmNagHp:Tm
%<3edV6AYj1CE$MWhZedlr4NL6)aFY$kj1=,GU4ZT`Nf^\DM%8M2&U!A)p<!!?$`\c;?$@A]fiNHE/Y?";feZAHSI%chM_o7P<M34
%*W*FHngCN#1nmQ>Hhiu#4>L&eKM8)LEe'sFC*qXWc3BH@6]b9tNrrA$\8FY$N(hq\8%8NGR\EpI%1o,*;B`i;*2<iina2\?^)PqH
%emagk$R]X[EaU9=C-@2[Z8lR5P@?gY]ZWnBOsreBetI9tH?,/n/P(+SS@6/OQ3QODGE7Fc#PeK-,JKG'.V&SfE2fH(qE@.4Kd[8N
%!@8\QJ*FQS%`i_m:8Z*CiMQ]4k!:VW6'dVhj[nl^(7F><l?(_#:g.E'i@VU/GX"dmHaAkdVfo.5WAouQW\JsMo+iDbAWD<SC"SpM
%@6bssAfb"5Bq67/L[t0W'DJ-fNs%Z++eI5Y:*RVC,u_S'ed(,T_+*=Z6r#=i5V;6tp2I*Os*MFaMboe73gIp+;1$t``G0,DM:[p!
%`,,\%@dKRK@`%CM`SGJT(hW?cU,b&G4#)qb?r1#2s%G_8;[+l2B/&8EYh<+KJmK.N._)18$.,YDf9LI,c#d)k5<5Ho:lj]1'7]?n
%YK:Atd(m%P]lD*Mo4%)cd5_N=r/`k95LIWk?>6&$))Fk-D3=NV`8_ldE<$[&V;g_PZ'.[8;i5`d+\saTP;^l=>#Pu,JduL`UG&S<
%"f8H80"bZEVZf<b,aLZS7r$pU,k59HTsqZ]VVpmfcK.&2NVXn\9AbC>mk1^OS'h>YSREjLoBc:"mSYe%*1e?.\;?.^Z3`9OVm-YP
%+ae4*Q'Gg?gPQ_)Vee0rM5"DNRd0,s"B,V[k%ld,4;KB-[Dm7I^tb-cI9a5lKa?eopF"ZFPrLF0<h$((nU[H_OeR:6ADZ^^mm_N(
%74:EK9&!$OI.C)a5->rg2Q''LKNuTsk-NIS7msV%gQ"N'W!FeTg74.YW'a2LctfOTNe.J@&G4s1C@Wpp@/neH``:3="o=a'rT#Y7
%J2?@sX5^;s6%o*TND;5l5R$n+q*"EQG"68-kuC$)4J>>f9Kpm=T(%IeA<&k-E]Z@1VL]<5,S^t6:Bd+UBpl(PJO*Rc2e#sd"WMP6
%+IYupSYeC<Jq9bS6g:)sguBE+V3L-=UZn9DOs6p@N_UmgU.Fl+pj73Xh[[fO;UEVFoDNX:'riof$rEj=*gH"DP+shOE\>.'N`BAZ
%.Jn];/J6`6+F,tRnh;^dHmE\S,Mp;P79l*9UHRr%lJG4+6,bEicpkcJOm3:g*!@WP%@(\*pia&"WT4i'36B.&&;W$G&9\,k'@XYd
%YrZRLVF]B@pH$_t4n:Yl(A7ktq9\Q",Q."lAYG@+EYb<opT34Y)Bo)))u`SR$CkSK@P!F>blE>d4-m=Qcm/UD5QG0>/H[bVclE*)
%N9@`#.M[^3b&XH%C@5rk:-XFNH`Ot#AuF/![r1P@qu%?Po&d(\e_=^ZVr_ND*.$=ABJ&+k"g#8ojbl<-f$*k%bs\%3m(lGe3VpXh
%'1UBdoYn(j!iV/gMSnIt*>?q*L$O7n;3ZQ`qeFnQT^[2BdFr59@=8$!lh;WOfUgE!67J"TiE3E[K\E*.,#*C9]$q7A_$QkZ"u$r=
%5\+$>G)H34YWt^4Io1>'$8@V_T,<G9`l_2gXi[]mPf%*Y9VIo&J"rX@dtP<-KeUfe,p-m$_)i&B\qEffi2#d(".5C5fnSQ'g4l9a
%FK#UCQkO'dKs.lJBjhmWWqU3Ql3DQ<^q[b_)Sk)u;r$9b_j96u+MDO=3i2]Rfa%':0X:nA`ouMCl[i$:U-F1l`7Ql93D8/U&KIK*
%bQ*^>&F-Yu!R[PF;%FDF$fXRcji:rQP^'KJ*=B(M=HbopJ,d2eRF0)i?fZ3UoBi^L#5>>:87&,a6#f<Ppd<8W8ki@=2umaXRO7"V
%>6Kq4;L*:t*k@<h6E7E]5sceZb*8DsT,7k"Y>2&h"ZHdZM5^2e!;`A=;sa;P?%0N2mtL4<1ZjGu<DD=)H_gR+[,-2dPgW(:^/Ee7
%<shCS]=5NCh1M$;q9=Rbek&)2Iu^rFC0K!O73Ai_K(s*!*LnAj=D5CS%M_RY3S=b0jK>p4N)5\H:^4&^rGOnbBL]c3As6jL?9DBf
%[\X>8>Vs(\eJ+J6!t)tdr4sIqd[eO<F*_*!KRs<%q9VeIZhoLGJ,f>NSZ@;<gC^TBbLn41Pi$5+5B3tu-!\Z4SeIDhW,]o8gV)=&
%qqfQMqWr*S,D<q$(;mR3mVd/)"5q6+IJil[/NrBL(up5Dp-?-Z?<&n`X3E?%7;oFNVinDjfM-2a[d+eL^EnCW,b!ZoPa)H?]A*IE
%?4lT<JB*t5*TNU&&Va)6[_V6TRB;,%Vr,,S>+:-XV,f&Jq8MM+hi6nu#K*!nYZ.IdDA.:)+OKm.&=S9EnB]N`D7j,8$V?DFhlrtN
%jPCNH8tHS>;uP2_qGi>J.T#QYcNt)?3-srPn[Z9HcT)KME0Z@nq?71?`nCQ`!.tCYdpEaPSVF(*KW`qB\j.I=nDBrM]'4+tOgnZ%
%>p's[`Xb9u-JX&mo*!?N:-nnG1:OX_A[kMN"W3=)So38g6>!)F]l62,7g?UjMTj5&#ShP;L.t`Yeh](2Ie-n&4XQc6I.K=\A!A;9
%JE>X_[I@I*GM8EtlNt8CRgHQNbPK-$\AV8uE,jO6]nkr3cO2A"O3auLK]*^AY[dH]]o2,dW5:[$fim\3l5?]q9)$=r*p#ms\a+0o
%KK#2+W^fUpKW-6ape"VY-Hfep.E8n&pWMZNli=F_M`O7]_'pY`4c$WQ'a0RentTo`B]'o=9j(d[Z`*%?/.+&%cZ]atF\AssU4!Pa
%NPcpnkN`3k519%l:Z:,^p>VEG4a`]G^kpPV6B_p>]dap=hful]q0[=`0@(FA^;DR^-,A_.hbXgb2d#dB1`]6U,l0t">,PI+Mq,*3
%`36L!*3Qn$j=oG=[]U4=#hq:g8r=YcJ8pWBO$nEkikV.N\d&IQI/#98RhHS>:X^3h'U@Z865@lnIp2[_#(H(`T)W4%:(lsfd[P-;
%RoCgHn*fR>%am?sg1,hW1Lc16VZ%m>OWq\BkG5<s8%SbDdg)Ir:@C@"2HpeeeSne^F;6JX8B9"K^oX[,PE-V>#lLClQnB2<fK0-"
%Tb<)@0o]o1/TB\&;R3eb_&sTPhrik`hX?3o.!LNqM/FIH:l+m6b_%Z1mIZctga=5Yik"4ePg?,^[JW,4TbSj%m"UJ2&lTA=6A"]`
%TfdB47l554orR<^P.\p#7n.!gJWkM-Vk:<Y[$Jc9:h<`bX0]r*QMBnTi#*Zm@.Ms2?pK5e!!T@>?E5YD]k`5&cYm;ZNGE/EU"1>d
%Hh!R9W_hWsL>"t"h5+go0?-88=?Be35%SRJ8l,>cGPe8g^qTSEH.DP-/iCFC<]AE7VF_H"A]+>UIjuu_8g:cJ"=l6FH8cV([l&se
%TWj@@QWepuORjpLl`t&`KEWnSa13I;c(;!pg*5\[+gDV5R:XBEP4`V"qS8[ocNpUXG>I?ejbP>>O`[LqM$qS.4Fhq2LiCW#,4HD%
%B(HVF4Z7:Y^'%g7;#2kkN4T)pl11IiFNR-]N(`6a2e=uBGV;sJIsgS%*k$ufd@k_Bp]<BW03J.i\<kF49,U4iD27!E:htZHX9Ibh
%OrYJiAseCSqW^ujhZXf+:gLI_9;n=j'*-S1?"i,@h7@4C#Lt>><GZPMn/8^NKh/Sqg]_\Z]&!2TkH3X&n6qeGO(fbs"^Nd'gJ/Qp
%VJ>T$J[k-ABSe8n0/&4!X.YO089dqc'k0;S,l2aY=r)flfSmRl/2$=)KpJO86niQ\+$l$-b^4i3T5Qb)Gi%R+:Tn&;$DMCdJCT:K
%OiE)$UeKhn62l$1,qN%[$!__<eSN^A&7!X>`3[!Wp?ZU(M`ZoMcImO%)3`pW6HTlOXh-ZAe.Om!\#k"uVgaGMQYO]Xj5!_r?>[WH
%ZQ4XR2?u9ifqZ8QO$n3:X**SH'edrm/\1/R#@R`AG?[1^RO.\'>+@abbN&q:`KQ+G8D_HMZX*!LlO\*(iI[K(p2ti]mFL_1popjK
%E[6,tRRneDr^f41^`Fb5ob5/Bp%'faYec5^aYLM_XNM7+QW=JFJKi#jB5&Om,en[W>R9V,R7#M%r0P@]PKX8%W"e(FlK>bb2elU(
%\_K3Bb_Hc(Q**`!!T"SU]B!lURR"<$%)Vj1=Z?[CkNio>i>Ma\$mahE=lp"7fu\0P,J2D)/lV\#]&`"&]tUn0SV1L#36s1G#W>+U
%kAi?[:ks-s(ggbSJ<5q>/!r)Q3=[CW8SSpf-p*[+JKcA5:\$LG=Pa%N>'LO4TMEmtHb5:no=>,SZXqbF>e"V*!S7A!5=CXc'G2>B
%I_59b&O,P,j=sNAJVWEUkEmpG5`PnK,mGe*S!>*n;36K+`hXk+FFtJ.q2Z*;BF;kud_<mDopt.$\g8RsU-k+qp]g<b.\4$pFlSD7
%r-Xi=+hY$0O<&U@pKqK.n]%GQ.A7J[-gXWo`FR\s20S-Lj!8X<<N%%jJ$X6IW<l/0R<JIeUGdV,Apd]og/+(T)%W%da#@r,@Fb0p
%SCDfF066\A9S:8IX^rQHK%9?)`7V^KPZefb2*B>C9+'4$\.-ILr]s^]/.TaaL55i35']Dd0G2sY69gZqRbO[gk7>5XmKVFbM3MTp
%jN]jW;Rk[;&P:eR450KLQVlNIpMhlYqOBpT,UK[)*oS(+6TK`L4(R57Ih,P6O<?BskInm[>D<daW+6%mWjr;NP!^F#qPb'P.68/X
%0@qXPc+?Qh`o,?,?obm7j3Mt<<]]XXCZ`iP#%W"?ZA+NuK^%="#1/7Ui07r-!Xj<b;>7k+Q3tc[QLR&eMCp5Xc:YM\goP@uOX9'6
%=%)!`fRmCASD<#\"/3mub[[).!S"q1JAX`8XegUfT!pZ^O-sNuh+"Q)/-XsW#6k+SPV5:+ECX##GUZ@%ODFUJSRPC$h)l!i$NN22
%U"cu*iEV8M.ajf.;[FB6o2\81$][/&Rt?Y[Ifr6%gG&'8qljYS-psbG8O#8u&]krFW(XSt(HQ"+T]6@OGVOta57THk`^e?!FgeBL
%ln)ud%&l[`qR_M._If,2$:]q*^f[E??p,4HQ>lJU>Q1-KK7/hs()Eg4A/;`Z$L(+X2_!kcqs$t`"`qD[qOXThMF,He9:f9LmSMdY
%?g)MLQd:IUgK&FrbE'Loc_bJF]V=l)d4[e\X]R^V:=aGPqN]'-[VW!CKl16.H/`"YGHnWTf$^Q<Sa5p(PlXaIlgTl]j:\c^A(%r"
%5Q>9*@LMos.f]K!p;fh"Q*Nn+Q]J]>YXKG0aG;T?X=99sU?oloKO=lhk;K%K2sJ9`8t&*@Wqohu/37Ws\pmJ9_CnuVSreu^P]bN>
%\_DYMaH6MV6/@/f<6-+PF>n]4IiBh=kqdjm6HH!Y_:^48rF/(lIET=l['DEj]=Z*5'd^i90m<TK2u'o-IuKQIMKOa&<F>RPg)Z)C
%p^T#u'OpU(PW1KI>_>#:</Zl@QTZ<k^J0:mP:na1(\jl%,9NqdICW&SJOPo@qdrB&I%>luZp96YC/Eq[]Q/SSMdILlNOPOiNT#>j
%O5'JurGZ%E&qjWHk=?MY<Wo_RE]"VDb"ZNAFTK"n+^#6sWP9dQ^TKp-po#@qm'eDls/?TUm?)E'1_h%&):8*.B_)_Y`;:MQN;YR%
%rg#^h57=%okI^*^k?buR6Ts'rCF]3HVE_QBp6"`+OWlQXp#f)6.-W#t0E>u,;bb\,2oM2.9*fJ;5t3LG:K(fAa#EJWE@C!)d%0B2
%Mi't)19VXG>5Ra!KOU^.5d:QH?"^@H^7:Q>1rdG*B,0[#'QEZ\3a$7lG4sfFJW_.@FtD%b?,5FB/9JFGSl2u:C(c(snbcQD\)OeX
%7%h>9IKXt5r5`^lpZ$ZAnek%7V:Kotj?[9&Ta!d`B2,1)+4:`NL;$F"CjPRr"RXBO0.C60ApiQ*-]=ZH,gFQ<0n!e%?FqTMCY*@n
%WM(M,.YT!2Wj+MNpbQ6TKIK!pRp#h\No9tN#"!?D=@`$dqgQ8$dhJJN#c(@A!_LiMYaF9bUs_e&arPjcoj'Emn#s__dReaEk5Cto
%5#TnsrXL"e8EDNo6;Hdd<Q_'&4i>p]p10I5JQ7V`(#;V#>'C\$Eg:Z!.0$@2AK(j2AsGV4(ga/gkIN&"E[c?AgV"3\RW$f`(!HgD
%1_J&h/R`K(`Lug'@WtpRCOfL?;Z#i?/u,oqm/t8)fn(pHc"QuAc4(KS9miWuN@S`&<1`Lr@206GV91:$::4Z26(]'q\C#l@l9t]c
%fM]6=]>jH4@BaX:>!=jqomJ$LMVICG^:rRPG_siPCZ593&hS@$"Osn,>$Oq#I]lD/Xpc&JDbIIqTbFH^QKZS8=eZ_m=JE0WaImod
%UA&m,^j_ssk)1NXkK1(=\K8)N=HZ]ECTLBZlVq;?Yso*@/-PI/F[lBpVsnP_dYti$H@)ndMjhh>U!IL%(c'igM,$Pjik8Hg'Bo82
%R6K3cq&>Ytg^X!t#:[uXlIq.bC;U`Oj]J<WPGNW>/CNe(hQ%HNF;":/Xd;IK+1Tf6T,Ndr.FM,!FN5RW+J2:WQUQ4Ma.MlOSa.!h
%r3BitX%<>B6g.4:M7H082YW!6_Gl5(S^Z%U#;%m_Cb,6io%tEGV]cJ3bH\`7-)j`%abQ-RcYP@\C>n9QEAL*dhu,,jY&H)7.7N]u
%"X)K,ioRQ@[p4!#+^6=5*p,-!$g]WAc1ODg^nrA81Pr[@\n/:F\Y\lP4;]iQE[kl;g&Ia5I9oS=e@9GY/1A&ZiTrj3\_N(_YW]hN
%c6IeKba0E^%-)6<O/j6/h'&U<g6"601)O%%5W-Za!JQq)Btd?-o;]*R^@k85Sd6s0d#2ER4<XRfhmR'@r"C;10m-(q+qhD&;>6MY
%%Gut<UR_#RN^)QHMAFDjDaAHGUL5>A'_Jhg6]H1'Pf]e_P`2-m/4E_hg4,cb;rC7'UZi'[csSN>R6\P7$09'M6si7572#(:FCPsY
%j-r"&YZ3_R\YB2_;@)j_B:r*Cepah(>.1iH`!Ou3S2JRu0X58$#nukL3*4m5S.NCe'[-d1>!_Vuq?]\sSN%^IE5$%s>e=p)?c3KX
%k(=C<Fm*<c[p/B+CQ3,;k-2!$62;a5k&/(]4ktgp;4j8$3M!3*LR+>+Per-Q(/Vae>eE^&6dV?WNWYYU$0%Nsck3t0&Eds`+.A%K
%:Q4Ji>A4Zon6:Lu$>_/.(/;GsL=H/2J(?IZd#0Z6,2$e3;s%/nDodd;W;mkJ$%FL>-2-7BP!`?fQ$nP`cdHRHFQXIOd`0h%']cBA
%j-Lif1H:JQOD2.T=O"K1Zs8e$)imT@AUMk7(ibbt;<Z?-miAb`bUJb;Rg80p#smkJ*2NlW=69M[Qsc7>*g$h$3qp]B$-6W)p"*\M
%R]>EPD7aMEWD-Jpr2^tk6B.Y:msAi$/NrC%,t6Dn`:98\C]3D$/C/cR8-hCP$j.2bh7;;C-PmKApQ+T:Fb<%R1rrK"%Ak[G*Fp+g
%-qP=%NPM53U>g3?oJ=&V9-Q/^J$Pmf@Y"I7E-Wnd;rbBV>4<.do[CqeWlp;Lcj],Tjd`uq_oM0DA!heBG'\mQn=VXH(*D,q(G$_\
%"i*m;=+;Okpf;s388^GbrpE*3&pRMp_rSH5?;Oue`Hsjd6NJ'Xi**JJHiu6$]j?Wh/Zp`aL+#,'OH6D35AhdEd1kIi?fXoVnGJEl
%0^csX\G`%T`eao4E8FKSm-(@18.I,V;S]LXM_`/^c-=LY7W3a:El*Pui*)`62[`&PHP.4C@K$-<"7jl'1W.tI3roZE*f4D)&$)UH
%h!jLnU9V:/S?jXfHWCY7YDA\15p:_C4W^TB1,L?dC(QMd!09DA+5K2q2D"9M(XnnFYi2@J<[n.^;.6cI[>]8!n]a.CTT>DVPaH\L
%l5tP4WKWrT(P*i7aq(h<PXEt.\rsN[k^6Yf+=_t$E_8?CE,HQW8h_/ZjA9\*_<&L7fR:+Y31XrRiau:5J60b-B/e'nOe"GjV.^k-
%%=tGdTni.OQSI8)p2N`Ib19BtGB4$53B=1n.<m.&D[1`?,c`7UR,\LP45fCF#tGBNase_tk1k%qOLa1CNT`ACDo"?]->GNZAIYip
%S/K*8`[u\[Mq#JCI2%?uQ(mWLqUQrM=kU0*aA"sd7^$\B)!su]cn$cJ.8#YX\lT-.[j=&ReT@Ra\6/nan"iO9(9l$nMMa@\n8VuJ
%3D<UF#"qDb]epf+e*?cA)TE(*4llLs6I(i'oAHWfaq]'&kJ99sf@<^f9>6;_ZN40/0/"E%%;G]c]oZP%>6:*V>-XP?=t]R.[=)'[
%89.GaMXqW:6[1cDLTOCFf4)qVNP*,r&^K%!r"V%pod=kb(LPZ7D1`JeZ!KC@BN^6WJ3@$d*)O^"IJ8Q1FPS0+[-^Fr;35/r^u[Ih
%N;'gZ)6Zk7NZ67K\F3p&a]Pt33CNrZ+!cIS.B@I[i@\I^L0@it%H9q2.S0Kac@cQb_lupLb0=HHF.SPZla5*XWXA&#$\lSl8&2P#
%md4FUo,Q[`o.FRH%\)f#e+L'\U^jr_ga<GA?R/PHr7SM)jl2UO.KGST<t#h?KiM0^&hpFOl6Bk\d/Z<"!:?t'a=3-bB.!.Z"bg`)
%1S?Ue0B]H^m0jb(P]YESq$@)sQU0Ddp0l..0t&LMDBV7eo;<jj^tM\GB/YL7I?brs&)PrL2_\m.*Te"3IN3M#V<A0V!G-fRW<$uf
%']A,::rH;eR<nfsT[*qs]t`URG]i`A&mB1[93Lm&(KhE@[\1hE`3u/$XFJj[k6_F/r^;DTdHG@BeL+_`6%'5fG8F1PMEOU0Vq#jP
%/Tq3%0<0I'IK/i^)gp9V4\*%UGE^05PPG>:Gf+99NSKXL=`K&]WuiRtmQ8pioU$<a.om&5I#-"EGn4hXH)W;Ld/cD6ftil33"8S,
%eW7b9%D<u0RX"XQfM-hb>&UmdKn'47g)'gRK94;!=KVb9)sP8k-]`&t1X0=^A5"+Td,O13"X&C-ZN@&G"1)XJ%KD<G$0Dfl[:b;o
%8R&ULNesjdUpB(ShVT01PsG/3qcqtAl;Q/E,247KmQAdFqtp>>=6HY]-_73klPsZ)1\5'R?[3Af1aA.+WCOIsp^qO1k\nlIZ4NYU
%:rg;J\cks2r&6RXP*@Nr;-]'8D12#=gK?@DbV%*94+#JW4GW+F]1"sN]ZY;8RRiA12)6Nc-4sd.ilDb:V@3`\C[!Y*<e2r]n*.//
%E#u;OoJtUf-&'.KmTRaIW(03*kj:\DRF+7+7F#BiG+IB6]*0hRTg8)TM\E(*IX`rYHbUZ\UXnEU.IqjrS`\&AM0Ogog-]U_VUp%:
%K"3u/4=)>i/S'`V*G]^HD\rL"Zu]k/]1`+P:q2TNG=[R7#sDkf1EGg+S8$*W]@"rK#o<@b@!WM@@>JD*J1)CmMfTEKnnsSG)#(EA
%\brpcXou?M%Z?CVCg3i2=AOuOo?C5IfZdiFZU/eiX&`oK0Sr)7.^&'sS%&0s,Oui;%]85V!,[dl"*S]g,8t.p6?(\oRjb,U9k"3C
%D1Oo&>QM.$S45B'Oh!_[q(4=m"VqY"=#e6\fB7^3\k8iK?;%W\@e8uQls6udP/k5kLtAq]lOmL^,g,[:QKoCU#Q(`(Os_%4e,>fg
%To)u0)<TqZRo_!r0<(BAfL8:nfRK\i>u"70Pm-R1>8<"(BS=IB7bc397MM\_5+`Tn4IB73C3LPNK1s'mff/?oF0=&a4K:4,FJ:$/
%'Ce!6K:t]_20Zj:#JlP6hC$S#9ZJ1KU$!4+N&36JmE4*PT@a`.E7C*ko^f[Acm/<*.]JRbTq>nqaTP6kBbq^kcP.^A(oY\aU*$u(
%T#\m#1HB[42AO:n5KGYnGJ$bkTgpoW&A_"1_irAS=blK5r%.).g@"@>5cVoNoeI1E_CP?>>.RbYX;[K_"8fMlWG%3;FgZi8/6\RZ
%9@Y'1%osdVMSrnF5[pZafD1mF<$lVbq+^h!rbA1JJZ)2gV18OG)C`d-^S;Ep@i-Et-AB1+,C$OCdNg7BLotFqZpdi-Q=K*6GCR0N
%<O#bdL^=[Q$*ZY`5,B]d;f@.?^:qqnhhWqR[hbK'kFsP/i-P6Z0<f=PA[QD#I)4,;EoWNofZq#H7!J*KhUflqI^+@l=5Wr<h3T4u
%qYa3=P(oTYp"SAPUT$KDVtaois-0FqVAhJSs%e'dkl5u'5CWB[+8P0!rPq_&^A4o8r6o$Oot,_K`Eth-q,;\;MuMtUGl#h6ISlsq
%qT&J?]j/>$e'Ig@YPsN2s%OK?o,`\11**Y>G:.n2kX?A4od&fqG#H"hW)hHkL)J/o#L^B[,QIFDqk*k#\,BP*gRnKAl+d2kl01,k
%m!ni?f;F?og`FS`Rh<>68pC4ZUrS7Y5RPVLak&Le.#,/VK%/_t,<)pY3S)?AA9ibSQTdd>=,SN\2L(/3W-rk7L^N>?get'8lO6BJ
%ECk7Hm&X;X.+4k_0#dH!egaFm^AM0dX8(ZlVB6`NYr6p2WE3H/Qd+l;[hn@T<+!E5r4X6&D/#k4e'Ft8/HO3Aqm`?Lc4Bc\OZDR^
%Ak/P?K7)k5N#g?`g>p1PnSB%NYM3=Y$$_*UKDh!VUEfiYD5a!$:P9")XHV#<al^#7WK6sLW1cjM_pYaH!,eDXRDXF`^Dj/ZbIrL6
%WD$35(7boK^6Lt2K&UL-^k!TkpY*<WmU0#U611Akn@/7;3N5R$*KJrsm-+H"iAoJ!d0'-9^MYA9:1u81)8oBCN6-U(*"dP#>7?Ra
%[chQ7fSF*AII]G\^1H/LY5u1ai)dKp[^Ul&BT>r6f4>F[dj,InSf"B>,PUSNGK3pO;ipT^ff?/W]V-L<hAr*d=_MeAd)T;u/1C'T
%\F;]'W%&1-,*q<f]>k"8J)AukW_.pJ8jrD@4>J/Z?p>%nK>7o*,J3ea0Y:L3A)#!".gth!KbUeH1sm!q(82g%H+1F`0UJkkqa^ML
%gO_o?[M[GB,2He^6Ob"W'2Z%g0"XI/)9tl#h)U&_T!J/0j6^LAf9Ys8?eabj54>e9gqN%@#NJ;388-P=[HLB.T>IWmC1OM"RnD?m
%AROA<GVJn6*'WrM6W[]kI1`[GG2^XHFA1*4GQ3<A_mOh33;j*Vo8=\ZfA_r+5Q1$IJ'^9ZSd\ps"8bJe(5GOjXL-N"MYV_a-%rY]
%psc`99gW=A0rK0-IZW1^]j?f-iqi/gX?,>=8T4FAeXM\iAbj&eo>]ZNC5lT7)ce@@fKPNEALj.Yl5XqF#p#,(mO8[&>abR<T%]cY
%?1d6R-B-!g@jjmh9!Q27Yo$8:/su6$$&Rnl01r>N*_WDs+&`GDWWe\lnk0(9P,Nj<_%qND&G&@\$-*_t=4os.I6(?uN/+J]Hp&^'
%Of]S4aC6O;+B]Iu`AV@Go'1rWS\aoecS+/"jY'67l,SE^,LTeh/tmJ_<as&)4DAfGS:G,PEPeUOa9PB0!LIijkuUJ>*WcmL6,Vu7
%q,nVjmR)eM1[i&U<Q:RS)oDk=FHIE5B/=**OEK`A!*0)36bcC<;:5kg@eb5?#,G2eIaU2Oon2)T7e7E+XR"mAl:YBJ:dMA/;j&++
%_'R)IpNbR1A!qTLPSY3"2$]m\-ktsmja9#,?U&?eQCuRcT\5@Ln''0\M+rdR^MX[VGQ_[Dp)M'l]KV*l\iSp)cU@\PUh3?IAu8_6
%j$%@q.3I3KJdVI](S_ep9?RsHT1&tJ4qmAP3hg[.$Mth2D[SloNb91c.;;Wh/]LL`S=-+,BQ.)\O_j3RQ.L-S&PsQMNJ%XU$>dNQ
%U=[0QS8Vq#K?G1G)93'jM7dLd"L:SE`4Q=@js$:_A9m]RQC?m>VAJ4;M1BOm^S9-thIJ38r4Tjtn*P@PD3Y#'B'#+j[MQ?=Gt5;u
%D2d#P&CuKt+kimSIgdGm<0l/kGegZMl8^iQai/I2BGJnJ]nUuFdf?XH!HMr&`\^U`RNMtTTAg"<46[`]'u"!-$4Rbb_N9h)-FW0R
%F/WLLXV^X^fQMF"k\tC?G`h2SS?2na/'um7F9sE^i.BO\8P:I^;?Z1&N#GOiqks+s,B^28F>+Ys#r5U+fJDY@QZ38Nd\7a2BNcN%
%?Tc2?J=]G_qq.BbV4#LE!hj>RZlDSl72Jbc/W!&hS(,\3boB$=5jc54A3onD0TbY5*3Sg+6"!"3TMB<I3$t;_BcYnT+`rntLprEr
%U%H-RTnUg!BV!KKWG4b^*!_lGeELi]+g9op:m7hN'OL0A+FR*4>D+I0'\`L!NCCct/m0tDE(XS#JEmte!EY[<ZHpbeU`*WF`%LH0
%!hm9OO^lgZBHYpJL$uVM;ihMgO,<!J#$3%FOEm:_9/s4!p%CQLNV%1e7^dRt]oIeGN__$1WdmEZqJ"5nRo)nhWHpiKUD2<^A3T<!
%;CYp"J7ja'=#FCQ(L+?82?WB>9ft4m8t*X?WMon%iQo[9StG-#f-6"1'Va2iY^n^NO90Sp[Aer7+m=;I7khjIL*L)t6\#33HWID:
%_)3XOTp45uY]Q$X&AqPQq,Mbi!T2^HgqTnX-<jDV4DfAo,o);BS\eIHN-1-V@Ke1R9A!@uN6[8=)1uV,8Mkp'Vt;7nag`t4R!ps[
%5n_>X!,OPNO5Lqlp&!L$1CtY9]:b![J7jH_$8M/;(T(*QA.YAc2\"N&g3oN1CPR`Nk,\&rcBg(,MOWrPh%9=qpO/Sk4i5m(L5!5N
%6>WoT)KLg[NdO6e7O@`;!,EfC,PRB!l*aGc$h9IJfUXu&@_*c&$/;:>'@ot@g/tf9.$u1Kl#:L53WguL>blh$rUDpB>jGmZ:3\]d
%::#M6WtMR'^[`T#"U.ED&41\nVYA+>Y'u;)q)/Ka8Q_)D@`oNn,G[h1<mtc)&)*<4g*L`[CfB=Lm[dc*6/PPep^%9B4Xr%5C.[Fd
%7p1=a8$j@W9^Z+/L8SV*o7kb@;c/]a!uG@'gl0M6;'(C:C<G[1)o8*(1q'FD9Y5H47^:qb[\P#DBXY\D2mLi;Q@L-Id'6ffQGgO*
%s$[j#+Po*^6h_M?(8(9),k/d;$l+j&p4H-nY\^t`$,P?[#[2c*`XtY7B>!I%dZZBd(gSB"cM$W.he2M6i]30DB;-nU-Q>6XLH<9?
%D3:rZL<'0=r;=oEi)9^t6*qbXeeWIM)1#qBVLN.J$i1*9oo_:dI8oTjY2HT59,1SYiE5Sp-(bEV;O.MdD+,'Zp0'>YkZ_3PjE.-2
%Y9%]C)1"ji,6V1Ef$HOW[='fY\4??O(3k]5ibYt^ZQOV_*T0m;L\sZ<\D9KuME2Blaug:'O-n`U%mo.p9pbDD"]O2@W!C'Cpb`+/
%$&Y(H]jOm?=aO=A63(bcOPHW;*>Fc8!k.;QO9s>od<DC7Fu,V?Fg7G4`&6LUj$;1)G!U'i;6)@EPplA-"1MVHW\1:IfN!?=DqsiW
%T1FkM+$m/QC.$rb!_!=)+R2g^H63?(I55f0pFWt2Iueq8mngdM.9P+[:8@1i!^?:RE56:l)S:1Z&W3`.8N@`MLk4cS:[Z3X]moOg
%ghT7F7[IJd3))sq0jE[#10q7.+[OPSne$rn<ekWaB/n]IVS@(aUuLGhAI;91orNT%(E`N@^Q33Z&qcR4<+7YS<2+aA:4U5%#l98p
%Cq^k\*p"'fdAM'e(HgXs7#G/_Yg\n<nCS59\J9W@\Jf/bb'Lr;8V(eW#Tij\[8Kb:Re=VY9-6/s39i.>"/ESug@oRMNsY][8MHS[
%abPVD,bf-Dfki15*k[9Z<<'Br@E&-jpBUeF'1TjI%G7YWr&gq-F"_;PIE`-H?BJ0/=VJK;>R-0rSCM+2R?i+hL.6Wcl=k<5rFim6
%TU-d.9DV"dr5Z;'cI\\W:Zb!Ts7a:UJY@c@iigSbI0asAMsr\QP&0L33tRU>1D!Qr6X:de,hXG6=U!Uh78cbcaR"079F?XpGU.LJ
%QfT79cH9@O%rraS[&?Ej[mU0op6!lRK/0,7.PN#pK\5d&(W\]mQMl3(L!+<Trr]OWq]Cb93E-i"_DtUN^>DHlD3E"hN%8LebuD01
%!q&[ETQEbh9BSe6SEr+<Vb#OpTiof(3;TA!U*$flP-B]t!DF?_XXk]-ZLOnC#=PK_\?:r!PZ;CVC*A,_F3?e_SI1pgQVMF="Z-TW
%#Xq`6n"1PQRESZ5BNob6%A<.dS0R1%]*Au[XAT!'>^4"rSlPsXC2lu<gqLjuDefmH;PZhs'IM(+=r9,=/+\/a(`9nV4B#tD<tpI.
%VA&;c-IpJqgl+l(=J(QQX\JbK6dVE2h.PS,@f^+2a<D@uhE04=S(3lTaEIFFL.8XAr%(VdDJ9Kk+-Ba$hBp>WfkJISkpG0b0/G2g
%RQ5`JC'&SIn)]lj,>ltK'Vc4RabL`?I`Qhc)SE^)[-O&08=;f)ahTACMq/b$#N@YI#JQ^k/&BgpDdpD^2TO/gS(&j%a'q0GT=&OE
%TE\Z'KkbR+I5gYL>R5m35mt^5V9X-Ik6&7:@P5ZsL$SVF0eu`lI0`,Ae@131[udP5o*^UB406cALYce[ruCe38F?.ppP[p5G!HKc
%p*KcXB.'2<0maNE2398">7q?AQ6>]0Wk'W0bSuFQ&l#^r3A+7G4TfL]de3rg8)l2Reg'34l]Cg@K#2^tH:/C>i'gc#'6CG!(P3WD
%E3$9M"Zn;+60o?,&Qooc]JSSC;QI2J@'X-f0br':[G)CTB-R'nbji-V6X"6c[:Z".H4INNf2+l$8Z&jDV8X2rQ23(\'PWb).09LJ
%\WhgQN`ek+-VKufCe8@MgP$sV:ErlU`[t#_-NDWpC\hO2G[L19rkC5o+V-b'oh=)9V+*,dSbcc4&Oj8@fU'tJk-,9*4&j@MSt$"+
%SqDIFbb5DU6'>bg;&`I=FeX^=nBJ.dpQ'XDI0%h^q:UR=Xl<#n10WZLR-A2l85`%t:1L19p`fX)4fSCQY62Ti9/>OZF%!d'/SbMW
%.:7qQP==kjV*;T_ZO\)nfTJkI0f#!6@"JCH)GjBkmZf?]%KOu=18&ZWY&')0&ODgaP0RJ`RLR;[NQ#bdWON)0=[H'l&CkIc;6esr
%Z5ldgMFc,i#<Pc#KR85)aoPT(G!n:L]X?.[^?=;)PNSqFC)t@<*bS7$ca!t-I;R*/gHH$]c__l(T@ZbW!=<C>^%%I2r#UkYI2^NT
%28[OH:?jHa)]!n=LJkuEWpr97XTd(=Y]J^.+o@ome,B@Tn1oEs91;,_%Lk9oRK2/$(imXglJ#W>b#a4q<LOd"_N)_,bPH4&a,bZl
%6tPLIKO1kP8D80Ed(]_&4)SQlL2[,q2PmsuD\[LR`8=.HdFK5>d%s-0jQ@_Y<#_mW3Ij'C)X]DHiae:!I5AWcn1k+hc4XT8SR@%T
%rKAPU-:1$+EH-+!U6DF6#;L1J05>YE`em;^!E5lD>95K7Y6d?g^!?Ef(d9_GRG'k2\cV=VB>;@cfLM)2KGEjO4p]AJQJi&u9nJ6n
%9pP&mG&6,[d4SDlj6;Q^5'gFcr]XA/eg*G<Q#>YX<sPF^O*L2+K:>dFim!sViCm6"W]!a]p$H;3<!KqUnf,7@e]/0cHZ8poV+[Io
%6'C(eVd[Fh[7B`T-uuDV,@AN#]a%t%6".3U_Y2d2i>+P880ZOpK%`nEb"b4e90O,Ceu3YYUGbTr[d\p2OU2R!!%^*Dl^$6-+9tAp
%-7kgYA6qV"Qhke7PcD-O#r:=tHu-#F'Ba=B:u\ad;5@^F^.4#UlJ_V?IH:;aOBi*mf_sR'(_T$lK'@T'([NMG&^VpQ.tHI324=XO
%#9Z#&XnWRaD1*0C!#Tt`2^pim&]+Q.0R+jW_22-NR-iEI+go.-9D6);7H'Y9Dt%`HVj\1ZQ?jf%69s8+iJh^PR\I,?2WUXdVafUP
%7AuRBYdt@f[IeF3YR'[h.:O7(jmX2@B_GPLlSLkc>?7oh5t9TQ\@]Aj9]7O"YW6W"8]K_Bm3+\g<C;1&JmoeE%cJ41-+1IOb<e4)
%j_P*/:MuNAqC8%6)@FRl?I9VDF"X+G/&K],*kgO=WPub-[l)>^i"\XLL'pDiG(_^2:r4l\)W?e3P:PJKl.X@m`0MG?4I"ts<h^V=
%LqdAeaTk/R1RH0&>q.]4Y!-d]Vi^_S_WH(:0Jd'U!9(1(3g+#qcHPTtH\W5%X5&MKgb.9s'W"kHUJ'^^SI4?4E2F5,+ePH+[QV]3
%f9j&s:)1*-gcNPZBi3QRBPFt>pQ@t2f6@%\GYe/7g22qEI_[sG<#b;@P!/tGDJK8e&1V7rU$YGNcf?EL?[2?>@`$:qf%mt=N,#"7
%l^#J@kA4YkK6Y7,cKuFA:YTcnli'Y#"KS=:Mimdc-B>U4O[H'?pt>0$<[\9oK;=fD<sjtHf`g>"j&7r.e5R.dU9@B]X`0rF+,h/D
%cFZLpcFu9`&"$nh=<D=\:3]Z0]f[K"a)rf.AGaKDTE^iuXE_kGb*G[AC;\Xfpq:6-:h:4F^gV@t7FpEHM8*I%73,`,\W.m<+]ik(
%-L=SRf>g!\q[)NT/qpG;X&B?t'.kY(`Qb7Rh)A.j+Uiup:moS'X\A@2gpJ,7KLU<sVPa,;?@"\rLIF@F"D*m=7=f2,_Bi$)I*hcm
%>p"YppAeM=O_,T#.8(=2rMVQ@WggmHhS'QJ]Hp`aE_+rhK?k6#3:l?!U&ZncQq^fIPpH?p4hTncPf(O%^TRBO\=rC(106([VnW>-
%.U/+d"'>rp*(\]aGB+rX&-X,5NfYHcmWAJl+*N%SqVndb/:NI=g2etrO=1IpiYj$p]1)OrLn9MiVoiB-5$>@:3,8nm%`s,/+%U?c
%($ClgRY8Uq3R9m_.7j>Ad)JdDF7hRZ]6`&`hf(4=7FJho^"p">fs3HrfoJW3<+*,GS^K]1$HtD2pkIO>)4X)SAbMq$F-,DXEqZoL
%MeP&rT3)*6q`Ip;A/s?eU(]Rg5=ak`)89;0=@*4"m*pG.Rj9s:&YV]bWZ[PlE3[@>Q.>N7:)NkB``&p`>XE!)^Y!c<e?C+q6"P[%
%j+ptsDbr2H!N=9FpZ87I9Ye?i=MdAo`Y0DS*]YO(aWM.#,<gEuI\?p,hf8bCQO0*EF^uR'$8QWJKZ8(Rbs6ik7I'82V#mH]U*5.!
%*tfe%rkC^AP'99@_SLa&[:TPY%ks3jl]BuVja;9u3LJ%or,EUa=Z!/]CV<FSMA1X4_V^^7MJVok'A.Vg@??Q\1s`-S8S0];nX=G9
%*W%`#S?pWae[!Cr?Ms(,%C`eqG^mbD-u8NF'2)N'E@=jA,\4uLMS#lfDms@P+2,@@lidma3Odo@+H:,b%U>rLG\Di6Oo'P)Zf<%n
%k@/$gF8EmJ]Z*4^-+]42OELTs`2H0\0dZ$Ef(6[S3qTjjXN&Djk)L$Dhs4YJ^5c].a;t]941PM:$"2C8ZN>FCQ?*t"ahrh_2Wr*4
%kB=I?^^p/U*"L*d0a'"N4Q4]+9=.3Reb07]"I)27@\JVaL;:9j.kIXuHm>mS"h0)];j8sZ-p0^[MD5FcGao@=N-eY;2uUhlXQ8L<
%G&RSl75_ga'/n#'D%DFH$i&adcf\`MV&h]sbPjjE.Z^0af3Eo`08*a^I`tGAe;>:Ws)/:<cCUbgT'EaEe:\js87YG\ZCHfDkZ"]X
%JB0>#!iauh#VO\5R%JC2/KBF)"fGCOUVU%SM0uI)[P.\XjS%9:kM>Qn.DQ':9hblCC(_13YXeHmF^jmb$(5+a+fu'$(LD&+&=kA>
%FUIQ$ZQuP]ap?aj3,K8L.]n$s8/!^@Mf,Jb^a:Kr9ERR@Ua]9Xk(u:]mT,*ad*F7")fZD?fS#S0lS.tc"B9qKY9EEYQg+:>]:VaS
%3@mleC,U%e/Dg.kC-CO%ibNB181Fgdq,HD24U\.F=##Yhm_2r/oD#FMcbBG(Mh&[r5PVq&oe\(!NL58qm[<U.%?PIUkhHV-;;I,A
%26X*qgE%j<Ve%"JjF=ah%Y1"=9tJsCR*+$B^5/$O'W=^)#D96`#5)*fKpNrU#SYckX0B9,-#s@HJ]ii@`e0;QYgC7j3c>3Mgm45E
%4E9r\$&5(5321QXK+sK4!Rf!jK$99o4g'QW/#@.:I3PV9T2Pt78>k"l.@Yat.@Yn4aP2n^@Gu4geG3A668*1aG+HbO3T\c?[r!9T
%["YN3*McZk`#4kP0TDka?=k#WV+8C4g-]C7bA`1]"!*EEo8s;lnQ(@!(#G-3*&VMF-SEEu<#q]=U!WT[f$PL,D=&2j&pUa9%+.hG
%N/_4h'4%ggHL3QK,DCZm42UXQq#lJsY%$_Q;biC)r];2KIh88"V"<5*N0=^q>'f]Ah37BE3]C;*M1fHpC[6uBnlTZa>:q*=A'L45
%3PY"]GK10WpAgJODe03nc0T+@Uk-k5Vb=hM[KdEt3Y?'KQ.4@2,m"62FQ-iB>mUemi]Y'bRMk#XeMjrYGG":c/eA;22d>O*#.Mq[
%n&S3ZK8leo5hq/eC(c_8HH$7=JE;9*P@rq3><Ek..:9ae*=$)9]q74$\,5/Ud$aD@`*7dtT-EIj*mOg"p,HsrLecrCE855Fb`Scm
%5i@m^]a*GTo#JRq#GLC"BT<E7#b;jREg<TED?6V^s&Jl?b]03WZE.[4W4&"B3S]@.s.hhY9A,qdqMT:knFWKjqrN>'ipZm:bCBNV
%mm$gC=*MWI5EW[Wp4*&YK?['#RJst9q;DjmPF!b$D>sL?A[[#4$Rghj?$%2$fdkc8B:K)8%:HrLZ`Og>?j$t2eJ256Z%4V[M,?$,
%s)mrQL0,HrI6`2tR7B-^4h"54M<)^8JqV!:QA"I)5G$lTn*^/?>h2hs\'5ZiZPEf"gYurjK=<.I6Y-W8?BR^^?"jJBCCYnbI(4j;
%Z7/\_"!k4m'.D4/L9^i_+FC@oMD&M:?@F_l#$]6&[ASM;;*^tQX&j%<mtQp6UFp:iL)E0fd"MscphqB@P#$JG_20^5'p2]09m$j0
%I=Xj&^&+8g(k<uZnE[#mU1on[9b\:IV<.DRoeSTIB$,!u^NF%+_dI:k'B:pLiQ7;E'/qu,2RrNl(hZEsBG+'<,%)R`Gcf/9-Q=Hi
%RZPW[m7b;>96BMqU#"j4-Ij/aosD\7mqsNqlo$5YT&7$.'9KRQ/(6J</L7OYg(37#q8d^#l!\=7:[_@6Up+_;gZ>:+kE;HkITKF(
%Bg7s:jg.IS*56mncMe(VX2&Inr9;!%]dt8G&M9UV/[f>B[\PMd<D_+'jCF%OR;J!qmF6/R*s$uPF0^hs3SM4@Lm8/<5Z`Zn"-fBo
%%6@qT:!=!kN"VX_MmHiMKeuo2?JY0"T>s`<N1K_>-U/.BY@Q1NSoS'CN2<,DQUkeHa!5:6#eAsm3$NF<oiQ8n''5*U1VjQ4!u]e'
%)O!0bdWFtl8=T`.DuWu*<oSYT>EX!2/$-Qi@ZNj'2ETjQJ`bmF^E:DGG>?04Zu(<ds*jduYQ"Oq?iKJ/8DAUj0402*e^KlBI)D`U
%lC[r\4oP*K?iA.iros/a4oNPgrmSVjiM,pq5Pqe%qO@NJLHkS6!NGS`bQ~>
%AI9_PrivateDataEnd
