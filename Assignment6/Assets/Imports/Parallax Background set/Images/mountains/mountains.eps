%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: mountains.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Ленка
%%CreationDate: 2/22/2015
%%BoundingBox: 0 0 2000 684
%%HiResBoundingBox: 0 0 2000 683.1329
%%CropBox: 0 0 2000 683.1329
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:ModifyDate>2015-02-22T11:47:42+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-02-22T11:47:42+03:00</xmp:MetadataDate>
         <xmp:CreateDate>2015-02-22T11:47:40+03:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>88</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAyADIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAyAAAAAEA&#xA;AQDIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAWAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6L6GbjjdPTvQx41p3oY8&#xA;a070MeNad6GPGtO9DHjWnehjxrTvQx41p3oY8a070MeNad6GPGtO9DHjWnehjxrTvQx41p3oY8a0&#xA;70MeNad6GPGtO9DHjWnehjxrTvQx41p3oY8a070MeNad6GPGtO9DHjWnehjxrTvQx41p3oY8a070&#xA;MeNad6GPGtO9DHjWnehjxrTvQx41pH+jmLxtlO9HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9&#xA;HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9HH&#xA;jWnejjxrTvRx41p3o48a070ceNad6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9HHjW&#xA;kf6OYvG2U70ceNad6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9HHjWnejjxrTvRx41&#xA;p3o48a070ceNad6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9HHjWnejjxrTvRx41p3&#xA;o48a070ceNad6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNaRvo5i8bZTvRx41p3o48a070ceNad&#xA;6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNad6O&#xA;PGtO9HHjWnejjxrTvRx41p3o48a070ceNad6OPGtO9HHjWnejjxrTvRx41p3o48a070ceNad6OPG&#xA;tO9HHjWnejjxrTvRx41pGGMjsTmPxM6a4H+U/hhtadxA6gj6MbVr4P8AMY7odWPx/DDRVrkmNFXc&#xA;k98aKt/CegOKt8G7Kfppg4vNNLhEfDI8S070seJad6WPEtLTCP5slxrTvQ/yjjxrTvQ9zj4i070g&#xA;P2v1YONab9MeIx4lp3pjxGPEtO4L4jGytOCKehBxtab9LBxLTvSx4lp3pY8S070seJad6WPEtOMV&#xA;OuPEtNcV8R9+GyruC+IxsrThGD0IOPEtN+lg4lp3pY8S070seJaRX7v+YZRuya/d+Iw7q0fRPUjH&#xA;ddnVh8fww0V2arD/AJjGpLs2Gh8fwxoq2TGehH04N1a4V6Oo+Q/tw35K36Ld3/AYOMdy00Y3AqGD&#xA;e1MPEFpZwmP7P3HDcUbuMEh6p+Iw8Y71pr6q38n4jD4g714XG0bsv4jHxQvC19Tk8Bj4oXhd9Tk9&#xA;sfFC8Lvqcntj4wXhbFtIP2FODxB3rwrhA38i4OMd6020caLylCIo6sTQfjg4yeSaY/5g8ypbFINP&#xA;dJJahpJBRlAB+zt3PfMnBpzLeTCUu5OtMvrXULZZoWBNB6kdQWQnsR9GY+SJgaLMG0UUA7H6BXIA&#xA;pWFkHUEfRhoodzj9/uw0Vto+ieq1+jCLXZbxt/5fww3JGy5YoT0X8DkTKSaC76rH/Lg8QrwrxEB0&#xA;GR4k00UUdSB88bVr93/MMO6ER9XbsV/4HKvEDOlKJo5k5wypKvigDD8MmbHMUhzQEj4iaf6uIn+L&#xA;RSD026s9Rjke3ZmETmNtvDoevQjpluXigd0CijBaLXqw+jKvFTwqnoMB9s0+WQ8QdyaQ9/eQWFnL&#xA;dT8mSMVpxpUnYAbdzk4RM5ABSaVrae3uLeOeGrRyqGUgHochIGJopC70YT+wf+BOPGe9FNG1U/ZH&#xA;0EU/hhGXvXhQl7LaWfpi5lSL1m4R8j1P3dPfLcZMuQukEUrmyk9sj4wXhb+pSeI/HB4wXhcLRxuS&#xA;KfM4+KE8KWWmuaZcSXChwPQbiDU/GKdV+muZBwT2rqw4gj7SexuY2dTxK/bVjQgePXKssJwNFMSC&#xA;g73UrVAUt/3jEH46kAH+OZGHTyO8tmEpjokR81PbzpbIQ0Qqryb1U9B7bZlS00ZG2AmQEVBrwtEQ&#xA;mZDFK4VORqGduwPiccmmjP3rGZCQa3rs+oP6ZP7pGNKHY+G2W48UYDZBJKU5YqN0zVrzTZHktiAX&#xA;FGBFRsajK8mKMxukEhm1j5q02aySa5kFvISFZevxdDTvTNbk0cgdtw2jIE3UswDIxKkVDBagg9wc&#xA;xjQZrQ0jV4HlxNGoBsR22w7Dmjdx+sAEkUA3JI2xHCu62N5ZUDxkMp6MKEYZARNFRZX8Z6bhvw/p&#xA;kbindsRzHxHzp/TEyitFd6Ex/bpg449y0ULeX0FswSSjvtVV6geJy7DglPcbBjKQCJh9KZA8fBlP&#xA;QjKZ3E0bZDd5/wCY/PjPKQtwLS14kCNiAzA9yBufozb6fRxgOVlolMlKfKvnm2FyLaOYw1JCc/hr&#xA;XpTcgj2zIy4BIeoWxBI5KXnT8zrme1fSbIqwBAluRUk8T060/D+mVYNDGMuNkchIpJ/L/n+Wwure&#xA;R1ZHUj1pAfgYD+ZR45fm0wmCGMZU9PX8y9Dkuoo4fjhdas4deQYioAUVqPHNOOzZ1ud2/wAYIa/8&#xA;+QtC8tvcRmIVDCJgeNOvJuxzLx6CEeYstZyEsD1rz+J7hIvUknth1UMeCDtxB+0czYacDcCiw4iy&#xA;Lyp5+it0W1hdbi2D83Q1EiqftcQad98xNTohPfkWcMlJ9rnn+yCyWNiwF1KlUkLAMqnqePUGnTMf&#xA;D2fVGRZSy9zEL/8AN/ULa2WGzkW4uEdQ0rLVSimrCpG5alKjsflmX/J2M9KYeKUFfecLe+Jurq5M&#xA;kxi9RUJ6Df4F7A17ZdjwCAoBiZWg9L/MvUra4mjuGkl01wBFb8qmPieor498mdLG7ocS8Reiv+Zu&#xA;l2elR3k5WYOtYlVgJHIp0B+ea2fZvEfSabRm72P+afzGstQtI3hdotPehWHb1XYdeQB/ZPvl2l0X&#xA;h895MZ5LS2zv4ZCstrMrEUYFTUjwqMyyGtkEWu25KiRWSoHJuor+vI0qlqmvQW8bBHULx+KYmgFR&#xA;298QFYXa+bLKSRkmUxAvSN+o49i3hlpxlUj1XW7u7uTwlZbaKTnboNgCuwb55ZGNBU1XzfH9ULND&#xA;/pQIHpg/CR/NWn4ZDw91Se612/nu0uefAxmsSL9lf6175MQFKynR9bh1FSvH050ALp2PuvtlUoUq&#xA;Jk1Gyju0tHlAnfov6gfAntkeE1apra6vqdojJb3MkaMKFQxp9A7ZVLFGXMAshIhV0vzDf6S0ksUg&#xA;Mb/FMku6Gn7R3FD75HNp45OaYyITjT/NS6/ZCaOfmisVeOgUq3uAB9GMNNHGdgxlMnmiBqxsOk/p&#xA;VHLjXrT2xnhjPmFEiOSH0z8zLQaq9pqUqBZd4ljFShG3E08fvrmHm7O9NwbY5e9OG8/aK1vJPARM&#xA;kbcW4utR1+0BXidsrHZsupT4wYav5pnUdbjsSypYz1CSLUUdqcFJ2qOx9zmfi0MYC+Za5ZCU4vNS&#xA;t7diJGLSEV4jc/TloDBKrHzFLp9/9emb90WHqLWgoTQAffTI5cQnExTE0XiN95ktluRydrlm3klB&#xA;5U+k9czbAXhRVve2s8ZkilVlAq29CPmD0w2iktv/ADFDFxFoVmap5kg0A/DAZJEVWx1+0nT98RBK&#xA;OoP2T8jiCpisvfMdvCeNr+9kH7fRR9PfEyURW2fmuBLdlu3MJP8AeFa8GA3FQMHEOqeFDw+cbKS8&#xA;KFlFsaBGr8Q9yMAyBeAoi781xWknKzYM8YqJw1FU+1OuEyCiKAtvP9rI5N6WLsfimUEk+5ByAzRS&#xA;cZXy+dbJ2ZLUBh0V5Dx38eJ7YfFBXwyibDzRbS8Y7iivT4pFNV+4bjJCQQYq48x6eZuB5LH/AL9I&#xA;2+7rTDxI4W28z2DSpCrtJEtR6g+ytfAdceILwlHm6thxrKg5iqVYbjxGFFKMXme0tLmNoJyHrQyI&#xA;DxH+tXqMBIKaKaax5qaf0WnnWFRQxqhO7fz7b/0wCICFl9rE91Gr3VwGjiFAxICj3PucIACpbDq1&#xA;hNcGCOQF+x7MfAHvhtabbVbFbr6sZQH3q37II7E+ONrSne6zZ2kixycmLKGBQAih6dxiSkBUg1Ww&#xA;nkWOOUF2FQu4+jfvjaKR9tczW0wmgfhItaMPfY4kWhD3F/AknOecB5CfiZtyR13xTSe6P5pNsjm7&#xA;ka4gYApJyDEGtPtE9MhKF8lQ+o+Y5b57iKGcG1ZxRFINANgDT+brhjEBUFFeT2pMsMzQFfiLoxX7&#xA;O9ajwyRCExv/ADTquoiORpyP3YRmjNA/+Vt4+2REAEpTzXc8h8P2jXp88mhfDfm3WSSOYIjqY5Gq&#xA;OJVhQg4CEpdc65Y284iZizVHJlFQtfE/0wWmk9t/M1+sUUouvUhjJfmxqGB7Mx6jAYBDtU8wXF67&#xA;K8gih2cQgjYDuT1OMYgK8mnttdl2EPpL3o6frrmulrYnq2CcVFLDWIQT6oQdd5Bv398gNWOhKTli&#xA;io7LWpArLLFSnWtQfnQHE64DvY+JFedM1llINxGtf5a/r45E68ea+LFR/QGo8q/WV5eNWr+rI/nR&#xA;5r4w7lN/Ld+f92xt8y39MfzkfNPjBTPl3UR0CH5N/UYfzUE+NFTOg6oOkVfky/xOS/Mw70+LFTfS&#xA;dRQVaEgeNR/XJDPA9U+JHvUxYXpFRA7DpVVJ/Vh8WPenjHetNndr1gkFOtVYfww+JHvCeINFLgCh&#xA;VwD2IOS4h3rYWK8kZPFih70JGEFKIi1O8jAXnyUdA2/49cmMhCOEKn6Yuqg0WncUP9cPilHCHPrF&#xA;23TivhtWn34+KV4Q0uq6jRkWU8XpyUAUNOm1MHiFeENQ3t/F0JYDswJwDKR1UgIv9MAJ8cLB+w7f&#xA;jlgzBHCoHWrovUgFegU12A7VweKU8KoutuDUxdOlGof1YfFRwIiHzHdI5aASBiamjHcnx23x8ekc&#xA;Ci17q0rFktmIP+QzHfuTlZ1I7wvp72pxr08HpSJIIFPL0/srXxplctTE9V4ohUtn1uJKei8ida9z&#xA;3G4wx1cR1QZR70Zca1q0oQTQXBCjiRQ0pT2G+W/m4nqgAd6yPX7m3Ro41njRq1FKCv8ADJDURTwh&#xA;DNrkqhgsbqrfbqSARXvj4wZcKidY1DgUVKIxqVo1CR02rkfGXhDku9WavGFmr0oh2+7IHUAdQvpR&#xA;CzeYGi9IQsFJqQdgTTwJpkTrI94Y3HvXqNfZgWtw1BQ1Kj27tg/Ox70cUe9mz/l15xc1by3qZP8A&#xA;zCXP/NOagcTR4cu5YPy182/9SzqX/SJc/wDNOG5L4cu5Uj/LzzlGap5b1JT7Wdx/zRgNlfDl3LJP&#xA;If5iH7Hl7UEHvZ3JP/JvCI+9eCXchB+W/wCY6yeoNC1IuerfVLn+MeTsdyPDl3Kq+QvzNHXy/qJ+&#xA;dnP/AATBQ7k8Eu5WXyN+YlPi8tagT7WtyP8AmXkeH3rwS7l7eQfPUiivl/VYz3C2c/6+GCj3LwS7&#xA;ih2/LHzm3XQtWI672k5/5l5LiPcvhy7iqQflv5ygbknl7Va9DW0uN/8AhMBJK+HLuK6fyP8AmAop&#xA;D5Z1Nm/mNpOAP+FxEe9eCXchT5I/M2v/ACjep7dhZTf805PhC8Eu5o+SvzM5VHlnUwP5fqU//NGP&#xA;AEcEu5avkT8yu/lnUjXxspv+aMNBPBLuKvF5F/MOv7zyrqFPa0mH/GpyJHvXgl3FFf4C88Bfg8ua&#xA;krHxsp/4JkKK8Eu4oab8uvzCl+1ompgfyrZXAH/EckNui+HLubH5d/mJUV0fU9v+XGf/AJox+C+H&#xA;LuVU8g+fkFW0HVJfb6jOD/xEZEjyXgl3KM3kT8wWPw+VdQI/yrOYn/iGTA968Mu4qUXkD8xlap8r&#xA;X5Hh9SlH4hMJ+K8Mu4o3/Annv0/h8t6krfymzuKD7kOV8JXgl3KL+QfzHYUGgX6e4srn+KZIAdxX&#xA;gl3KL/lx+Y0go+iakQeo+p3H8EwggdF8OXcvg/Ln8woRRdE1Lj/KbG4I/wCI4Dv0Xw5dyL/wJ564&#xA;/wDKO6kW/wCYO4A/4hkOErwS7kFJ5D/M3lVfL2o0/lWzmp+KZYIheCXcvTyR+ZO3LyxqNNq/6JPU&#xA;/wDC4DELwS7kQPIvnxlP/Ouamjdq2c5H4LkeFeCXch5vy48/ynfRdUA7KLG4A/4jkga6L4cu5sfl&#xA;1+YNanR9VPb/AHhn/wCacfgvhy7irx+QPPaj4tB1R/nZT/wTIkHuXgl3P//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:DocumentID>xmp.did:EB7598766FBAE411B42FCA47A68AA8E1</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>8B8DD7391EDD03CDA492FED7B367EA1C</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:EB7598766FBAE411B42FCA47A68AA8E1</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>derived</stEvt:action>
                  <stEvt:parameters>saved to new location</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:cec17209-9d87-c942-b28e-d6165dbe6360</stEvt:instanceID>
                  <stEvt:when>2014-09-12T20:16:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Photoshop Lightroom 4.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:48C161B2FB46E411A079EDD19787321A</stEvt:instanceID>
                  <stEvt:when>2014-09-28T13:39:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E0F1073BD147E4119123A78646423316</stEvt:instanceID>
                  <stEvt:when>2014-09-29T20:35:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EB7598766FBAE411B42FCA47A68AA8E1</stEvt:instanceID>
                  <stEvt:when>2015-02-22T11:47:42+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:2a3db2a9-1ca4-44c7-baac-67f5a6453994</stRef:instanceID>
            <stRef:documentID>xmp.did:E0F1073BD147E4119123A78646423316</stRef:documentID>
            <stRef:originalDocumentID>8B8DD7391EDD03CDA492FED7B367EA1C</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:crs="http://ns.adobe.com/camera-raw-settings/1.0/">
         <crs:Version>7.3</crs:Version>
         <crs:ProcessVersion>6.7</crs:ProcessVersion>
         <crs:WhiteBalance>Custom</crs:WhiteBalance>
         <crs:IncrementalTemperature>-20</crs:IncrementalTemperature>
         <crs:IncrementalTint>-17</crs:IncrementalTint>
         <crs:Saturation>0</crs:Saturation>
         <crs:Sharpness>0</crs:Sharpness>
         <crs:LuminanceSmoothing>0</crs:LuminanceSmoothing>
         <crs:ColorNoiseReduction>0</crs:ColorNoiseReduction>
         <crs:VignetteAmount>0</crs:VignetteAmount>
         <crs:ShadowTint>0</crs:ShadowTint>
         <crs:RedHue>0</crs:RedHue>
         <crs:RedSaturation>0</crs:RedSaturation>
         <crs:GreenHue>0</crs:GreenHue>
         <crs:GreenSaturation>0</crs:GreenSaturation>
         <crs:BlueHue>0</crs:BlueHue>
         <crs:BlueSaturation>0</crs:BlueSaturation>
         <crs:Vibrance>0</crs:Vibrance>
         <crs:HueAdjustmentRed>0</crs:HueAdjustmentRed>
         <crs:HueAdjustmentOrange>0</crs:HueAdjustmentOrange>
         <crs:HueAdjustmentYellow>0</crs:HueAdjustmentYellow>
         <crs:HueAdjustmentGreen>0</crs:HueAdjustmentGreen>
         <crs:HueAdjustmentAqua>0</crs:HueAdjustmentAqua>
         <crs:HueAdjustmentBlue>0</crs:HueAdjustmentBlue>
         <crs:HueAdjustmentPurple>0</crs:HueAdjustmentPurple>
         <crs:HueAdjustmentMagenta>0</crs:HueAdjustmentMagenta>
         <crs:SaturationAdjustmentRed>0</crs:SaturationAdjustmentRed>
         <crs:SaturationAdjustmentOrange>0</crs:SaturationAdjustmentOrange>
         <crs:SaturationAdjustmentYellow>0</crs:SaturationAdjustmentYellow>
         <crs:SaturationAdjustmentGreen>0</crs:SaturationAdjustmentGreen>
         <crs:SaturationAdjustmentAqua>0</crs:SaturationAdjustmentAqua>
         <crs:SaturationAdjustmentBlue>0</crs:SaturationAdjustmentBlue>
         <crs:SaturationAdjustmentPurple>0</crs:SaturationAdjustmentPurple>
         <crs:SaturationAdjustmentMagenta>0</crs:SaturationAdjustmentMagenta>
         <crs:LuminanceAdjustmentRed>0</crs:LuminanceAdjustmentRed>
         <crs:LuminanceAdjustmentOrange>0</crs:LuminanceAdjustmentOrange>
         <crs:LuminanceAdjustmentYellow>0</crs:LuminanceAdjustmentYellow>
         <crs:LuminanceAdjustmentGreen>0</crs:LuminanceAdjustmentGreen>
         <crs:LuminanceAdjustmentAqua>0</crs:LuminanceAdjustmentAqua>
         <crs:LuminanceAdjustmentBlue>0</crs:LuminanceAdjustmentBlue>
         <crs:LuminanceAdjustmentPurple>0</crs:LuminanceAdjustmentPurple>
         <crs:LuminanceAdjustmentMagenta>0</crs:LuminanceAdjustmentMagenta>
         <crs:SplitToningShadowHue>0</crs:SplitToningShadowHue>
         <crs:SplitToningShadowSaturation>0</crs:SplitToningShadowSaturation>
         <crs:SplitToningHighlightHue>0</crs:SplitToningHighlightHue>
         <crs:SplitToningHighlightSaturation>0</crs:SplitToningHighlightSaturation>
         <crs:SplitToningBalance>0</crs:SplitToningBalance>
         <crs:ParametricShadows>0</crs:ParametricShadows>
         <crs:ParametricDarks>0</crs:ParametricDarks>
         <crs:ParametricLights>0</crs:ParametricLights>
         <crs:ParametricHighlights>0</crs:ParametricHighlights>
         <crs:ParametricShadowSplit>25</crs:ParametricShadowSplit>
         <crs:ParametricMidtoneSplit>50</crs:ParametricMidtoneSplit>
         <crs:ParametricHighlightSplit>75</crs:ParametricHighlightSplit>
         <crs:SharpenRadius>+1.0</crs:SharpenRadius>
         <crs:SharpenDetail>25</crs:SharpenDetail>
         <crs:SharpenEdgeMasking>0</crs:SharpenEdgeMasking>
         <crs:PostCropVignetteAmount>0</crs:PostCropVignetteAmount>
         <crs:GrainAmount>0</crs:GrainAmount>
         <crs:LensProfileEnable>0</crs:LensProfileEnable>
         <crs:LensManualDistortionAmount>0</crs:LensManualDistortionAmount>
         <crs:PerspectiveVertical>0</crs:PerspectiveVertical>
         <crs:PerspectiveHorizontal>0</crs:PerspectiveHorizontal>
         <crs:PerspectiveRotate>0.0</crs:PerspectiveRotate>
         <crs:PerspectiveScale>100</crs:PerspectiveScale>
         <crs:AutoLateralCA>0</crs:AutoLateralCA>
         <crs:Exposure2012>0.00</crs:Exposure2012>
         <crs:Contrast2012>0</crs:Contrast2012>
         <crs:Highlights2012>+53</crs:Highlights2012>
         <crs:Shadows2012>0</crs:Shadows2012>
         <crs:Whites2012>0</crs:Whites2012>
         <crs:Blacks2012>-74</crs:Blacks2012>
         <crs:Clarity2012>0</crs:Clarity2012>
         <crs:DefringePurpleAmount>0</crs:DefringePurpleAmount>
         <crs:DefringePurpleHueLo>30</crs:DefringePurpleHueLo>
         <crs:DefringePurpleHueHi>70</crs:DefringePurpleHueHi>
         <crs:DefringeGreenAmount>0</crs:DefringeGreenAmount>
         <crs:DefringeGreenHueLo>40</crs:DefringeGreenHueLo>
         <crs:DefringeGreenHueHi>60</crs:DefringeGreenHueHi>
         <crs:ConvertToGrayscale>False</crs:ConvertToGrayscale>
         <crs:ToneCurveName2012>Linear</crs:ToneCurveName2012>
         <crs:CameraProfile>Embedded</crs:CameraProfile>
         <crs:LensProfileSetup>LensDefaults</crs:LensProfileSetup>
         <crs:HasSettings>True</crs:HasSettings>
         <crs:CropTop>0.075248</crs:CropTop>
         <crs:CropLeft>0.053512</crs:CropLeft>
         <crs:CropBottom>1</crs:CropBottom>
         <crs:CropRight>0.879599</crs:CropRight>
         <crs:CropAngle>0</crs:CropAngle>
         <crs:CropConstrainToWarp>0</crs:CropConstrainToWarp>
         <crs:CropWidth>3807</crs:CropWidth>
         <crs:CropHeight>2397</crs:CropHeight>
         <crs:CropUnit>0</crs:CropUnit>
         <crs:HasCrop>True</crs:HasCrop>
         <crs:AlreadyApplied>True</crs:AlreadyApplied>
         <crs:ToneCurvePV2012>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012>
         <crs:ToneCurvePV2012Red>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012Red>
         <crs:ToneCurvePV2012Green>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012Green>
         <crs:ToneCurvePV2012Blue>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012Blue>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -683.133 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 683.133 li
2000 683.133 li
2000 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2e3 683.133 mo
.000500679 683.133 li
.000500679 0 li
2e3 0 li
2e3 365.955 li
1991.96 365.755 1983.95 365.602 1976.02 365.602 cv
1948.45 365.602 1921.83 367.444 1898.19 375.506 cv
1917.25 379.447 1937.4 379.973 1957.82 379.973 cv
1965.25 379.973 1972.72 379.903 1980.19 379.903 cv
1982.12 379.917 1984.05 379.924 1985.98 379.924 cv
1990.63 379.924 1995.3 379.886 2e3 379.819 cv
2e3 396.896 li
1986.2 397.481 1972.78 398.812 1960.19 401.889 cv
1963.25 402.06 1966.31 402.24 1969.36 402.424 cv
1954.35 403.267 1939.38 404.137 1924.8 404.137 cv
1908.05 404.137 1891.82 402.991 1876.61 399.341 cv
1869.84 397.898 1876.61 392.85 1875.1 388.882 cv
1874.35 387.8 1872.1 387.44 1870.43 386.938 cv
1869.82 386.874 1869.15 386.841 1868.4 386.841 cv
1867.29 386.841 1866.02 386.917 1864.58 387.079 cv
1861.68 387.414 1858.79 387.728 1855.9 388.024 cv
1842.44 388.563 1829.01 389.064 1815.6 389.513 cv
1812.8 389.617 1810 389.719 1807.01 389.835 cv
1789.12 390.365 1771.29 390.318 1753.49 390.4 cv
1750.95 390.411 1748.4 390.425 1745.86 390.444 cv
1720.9 390.783 1696.18 391.387 1671.44 392.365 cv
1668.64 392.474 1665.85 392.587 1663 392.705 cv
1643.18 393.042 1623.23 393.466 1603.23 393.858 cv
1600.25 393.914 1597.26 393.966 1594.07 394.006 cv
1589.26 394.154 1584.39 394.214 1579.49 394.214 cv
1578.74 394.214 1577.98 394.213 1577.23 394.21 cv
1574.39 394.2 1571.55 394.171 1568.69 394.129 cv
1554.99 393.842 1541.16 393.433 1527.32 393.183 cv
1524.53 393.133 1521.74 393.089 1518.89 393.054 cv
1510.44 392.925 1501.99 392.844 1493.55 392.844 cv
1465.16 392.844 1436.91 393.759 1409.09 396.817 cv
1440.66 405.832 1479.75 403.669 1514.26 407.286 cv
1517 407.521 1519.67 407.758 1522.34 408.004 cv
1530.26 408.742 1538.12 409.556 1545.84 410.572 cv
1533.11 413.767 1519.58 415.57 1505.3 415.931 cv
1485.01 417.013 1465.47 417.013 1445.17 418.095 cv
1437.74 418.419 1430.47 418.597 1423.2 418.597 cv
1414.3 418.597 1405.42 418.329 1396.3 417.733 cv
1396.07 419.056 1396.48 420.209 1397.41 421.215 cv
1402.04 426.249 1419.37 427.652 1429.39 428.553 cv
1435.37 429.168 1441.17 429.405 1446.88 429.405 cv
1461.25 429.405 1475.05 427.906 1489.72 427.182 cv
1491.93 427.117 1494.1 427.079 1496.19 427.079 cv
1496.47 427.079 1496.75 427.079 1497.02 427.081 cv
1499.37 427.092 1501.62 427.156 1503.75 427.292 cv
1506.4 427.242 1509.04 427.2 1511.68 427.163 cv
1520.5 427.041 1529.32 426.985 1538.13 426.985 cv
1552.96 426.985 1567.77 427.143 1582.55 427.409 cv
1585.26 427.355 1587.94 427.268 1590.62 427.136 cv
1593.53 426.976 1596.32 426.794 1599.11 426.617 cv
1625.05 424.925 1651 423.772 1677.21 423.772 cv
1687.46 423.772 1697.75 423.948 1708.09 424.337 cv
1710.21 424.428 1712.35 424.541 1714.5 424.668 cv
1717.37 424.837 1720.27 425.029 1723.17 425.225 cv
1731.21 425.973 1739.49 426.432 1747.71 426.432 cv
1749.36 426.432 1751.02 426.413 1752.67 426.374 cv
1755.13 426.317 1757.57 426.215 1760.01 426.066 cv
1780.4 424.225 1801.44 422.422 1821.74 420.259 cv
1819.24 420.176 1816.74 420.141 1814.23 420.141 cv
1806.76 420.141 1799.23 420.453 1791.69 420.765 cv
1784.15 421.077 1776.6 421.389 1769.1 421.389 cv
1764.57 421.389 1760.07 421.276 1755.59 420.979 cv
1780.72 412.015 1814.13 415.769 1844.93 413.845 cv
1847.5 413.684 1850.05 413.485 1852.45 413.235 cv
1855.56 412.685 1860.07 412.685 1860.82 410.882 cv
1856.31 410.521 1851.05 410.161 1846.5 409.987 cv
1843.91 409.867 1841.28 409.761 1838.65 409.667 cv
1823.06 409.11 1807.46 408.982 1791.86 408.982 cv
1785.25 408.982 1778.64 409.005 1772.03 409.028 cv
1765.35 409.051 1758.67 409.074 1752 409.074 cv
1751.92 409.074 1751.85 409.074 1751.78 409.074 cv
1749.16 409.155 1746.55 409.254 1743.95 409.368 cv
1741.03 409.464 1738.2 409.553 1735.37 409.62 cv
1731.9 409.71 1728.44 409.765 1724.97 409.765 cv
1720.11 409.765 1715.25 409.656 1710.41 409.385 cv
1708.05 409.217 1705.72 409.004 1703.4 408.755 cv
1691.81 407.506 1680.71 405.337 1669.91 403.308 cv
1683.06 402.406 1696.51 402.21 1709.86 402.055 cv
1712.54 402.024 1715.21 401.994 1717.89 401.961 cv
1726.23 401.943 1734.56 401.879 1742.9 401.81 cv
1745.75 401.796 1748.6 401.781 1751.57 401.774 cv
1753.4 401.779 1755.24 401.78 1757.07 401.78 cv
1758.06 401.78 1759.04 401.78 1760.02 401.779 cv
1767.46 401.736 1774.89 401.7 1782.31 401.7 cv
1800.55 401.7 1818.74 401.918 1836.8 402.792 cv
1839.63 402.929 1842.45 403.082 1845.17 403.252 cv
1850.3 403.308 1856.31 403.669 1861.57 404.75 cv
1882.05 409.734 1904.06 411.738 1926.28 411.738 cv
1951.18 411.738 1976.35 409.226 2e3 405.574 cv
2e3 683.133 li
458.988 428.73 mo
488.045 428.81 516.865 429.056 546.105 429.364 cv
547.451 429.337 548.824 429.295 550.188 429.241 cv
557.01 428.971 563.612 428.401 570.179 427.993 cv
571.623 427.903 573.048 427.81 574.463 427.713 cv
581.539 427.223 588.375 426.602 594.85 425.848 cv
592.837 425.697 590.781 425.564 588.691 425.448 cv
587.647 425.389 586.593 425.334 585.526 425.284 cv
580.759 425.199 576.122 425.053 571.579 424.862 cv
570.064 424.798 568.561 424.73 567.066 424.657 cv
564.794 424.543 562.585 424.412 560.44 424.259 cv
559.367 424.183 558.31 424.102 557.267 424.014 cv
556.225 423.927 555.198 423.834 554.186 423.735 cv
553.173 423.636 552.175 423.531 551.193 423.419 cv
548.241 423.084 545.421 422.691 542.719 422.229 cv
538.81 421.534 533.649 421.372 528.391 421.372 cv
526.808 421.372 525.216 421.387 523.646 421.406 cv
512.767 421.438 501.954 421.594 491.153 421.772 cv
489.611 421.797 488.068 421.823 486.525 421.848 cv
485.055 421.875 483.583 421.894 482.107 421.909 cv
480.613 421.923 479.116 421.933 477.601 421.938 cv
474.913 421.966 472.208 421.978 469.492 421.978 cv
467.281 421.978 465.063 421.97 462.838 421.956 cv
461.144 421.945 459.448 421.931 457.708 421.914 cv
442.463 421.907 425.689 421.274 409.763 421.274 cv
393.622 421.274 378.352 421.923 366.405 424.532 cv
365.558 424.614 364.286 424.614 362.897 424.721 cv
361.674 424.764 360.421 424.793 359.151 424.818 cv
357.881 424.842 356.594 424.864 355.301 424.892 cv
355.302 424.892 li
353.69 425.19 351.571 425.108 349.855 425.36 cv
348.074 425.54 346.909 425.724 347.757 425.848 cv
368.99 428.424 393.097 428.969 417.404 428.969 cv
426.443 428.969 435.508 428.893 444.465 428.819 cv
446.039 428.806 447.611 428.794 449.179 428.781 cv
450.819 428.773 452.458 428.765 454.092 428.757 cv
455.728 428.748 457.358 428.739 458.988 428.73 cv
192.941 426.147 mo
221.998 426.227 250.818 426.473 280.058 426.781 cv
281.404 426.754 282.778 426.712 284.141 426.658 cv
290.964 426.388 297.566 425.818 304.132 425.41 cv
305.576 425.32 307.001 425.227 308.416 425.13 cv
315.492 424.64 322.328 424.019 328.803 423.265 cv
326.79 423.114 324.734 422.981 322.645 422.865 cv
321.6 422.806 320.546 422.751 319.479 422.701 cv
314.712 422.616 310.075 422.47 305.532 422.279 cv
304.017 422.215 302.514 422.147 301.019 422.074 cv
298.747 421.96 296.538 421.829 294.393 421.676 cv
293.32 421.6 292.263 421.519 291.22 421.431 cv
290.179 421.344 289.151 421.251 288.139 421.152 cv
287.126 421.053 286.128 420.948 285.145 420.836 cv
282.194 420.501 279.374 420.108 276.672 419.646 cv
272.766 418.951 267.609 418.789 262.355 418.789 cv
260.768 418.789 259.172 418.804 257.599 418.823 cv
246.721 418.855 235.907 419.011 225.106 419.189 cv
223.563 419.214 222.021 419.24 220.479 419.265 cv
219.009 419.292 217.536 419.311 216.061 419.326 cv
214.567 419.34 213.07 419.35 211.554 419.355 cv
208.866 419.383 206.162 419.395 203.445 419.395 cv
201.235 419.395 199.016 419.387 196.791 419.373 cv
195.098 419.362 193.401 419.348 191.661 419.331 cv
176.416 419.324 159.642 418.691 143.717 418.691 cv
127.575 418.691 112.305 419.34 100.359 421.949 cv
99.511 422.031 98.2392 422.031 96.8504 422.138 cv
95.6267 422.181 94.374 422.21 93.1043 422.235 cv
91.8341 422.259 90.5468 422.281 89.2541 422.309 cv
89.2551 422.309 li
87.6434 422.607 85.5245 422.525 83.8077 422.777 cv
82.0273 422.957 80.8622 423.141 81.7098 423.265 cv
102.943 425.841 127.05 426.385 151.357 426.385 cv
160.396 426.385 169.461 426.31 178.418 426.236 cv
179.992 426.223 181.564 426.211 183.132 426.198 cv
184.773 426.19 186.411 426.182 188.045 426.174 cv
189.681 426.165 191.311 426.156 192.941 426.147 cv
682.365 413.43 mo
693.029 413.43 703.318 413.76 712.533 414.967 cv
715.092 415.025 717.607 415.07 720.046 415.111 cv
723.023 415.076 726.049 415.006 729.1 414.913 cv
744.356 414.446 760.214 413.406 773.356 413.385 cv
775.663 413.266 777.959 413.143 780.239 413.019 cv
781.679 413 783.111 412.989 784.529 412.989 cv
785.741 412.989 786.943 412.997 788.134 413.014 cv
790.718 413.052 793.243 413.135 795.688 413.282 cv
799.568 413.189 803.502 413.152 807.474 413.152 cv
811.898 413.152 816.368 413.197 820.866 413.262 cv
823.769 413.303 826.683 413.352 829.69 413.402 cv
840.449 413.566 851.346 413.728 862.228 413.728 cv
889.227 413.728 916.162 412.734 940.857 408.324 cv
919.478 400.792 885.567 402.944 857.554 400.522 cv
854.235 400.253 850.919 400.051 847.665 399.762 cv
846.038 399.617 844.427 399.45 842.851 399.241 cv
839.124 398.639 833.226 397.832 833.639 396.005 cv
835.011 395.721 836.37 395.458 837.753 395.211 cv
871.196 391.446 905.682 390.775 940.54 390.775 cv
942.126 390.775 943.707 390.776 945.294 390.779 cv
948.098 390.783 950.907 390.791 953.718 390.802 cv
956.282 390.736 958.866 390.688 961.47 390.657 cv
964.087 390.624 966.722 390.608 969.384 390.605 cv
974.196 390.478 979.051 390.424 983.935 390.424 cv
998.286 390.424 1012.9 390.891 1027.52 391.357 cv
1042.13 391.824 1056.75 392.291 1071.09 392.291 cv
1090.84 392.291 1110.08 391.406 1128.11 388.415 cv
1091.12 379.336 1044.94 377.867 1001.53 377.867 cv
997.348 377.867 993.192 377.881 989.071 377.903 cv
986.313 377.914 983.603 377.927 980.899 377.94 cv
975.109 377.967 969.351 377.992 963.65 377.992 cv
961.416 377.992 959.192 377.988 956.977 377.979 cv
954.075 377.998 951.185 378.017 948.296 378.035 cv
931.531 378.14 914.757 378.221 897.978 378.221 cv
877.335 378.221 856.681 378.098 836.001 377.745 cv
833.128 377.707 830.289 377.668 827.448 377.628 cv
798.517 377.191 769.549 376.733 740.373 376.733 cv
738.41 376.733 736.45 376.735 734.484 376.739 cv
731.283 376.698 728.286 376.657 725.275 376.617 cv
710.949 376.417 696.563 376.221 682.028 375.936 cv
679.486 375.854 676.945 375.771 674.407 375.69 cv
661.711 375.286 649.063 374.935 636.669 374.905 cv
635.236 374.922 633.798 374.931 632.351 374.931 cv
631.03 374.931 629.702 374.924 628.363 374.911 cv
604.402 374.677 577.113 372.431 552.884 372.431 cv
529.532 372.431 509.022 374.516 497.063 382.497 cv
492.64 385.726 525.076 385.187 540.558 385.726 cv
547.634 385.96 554.676 386.041 561.688 386.041 cv
569.52 386.041 577.315 385.94 585.084 385.839 cv
592.842 385.738 600.574 385.637 608.284 385.637 cv
609.703 385.637 611.119 385.641 612.537 385.648 cv
615.174 385.662 617.809 385.689 620.443 385.735 cv
640.08 386.802 664.407 385.456 681.363 390.299 cv
672.326 391.732 662.869 392.02 653.296 392.02 cv
650.09 392.02 646.872 391.988 643.651 391.956 cv
640.432 391.923 637.209 391.891 633.997 391.891 cv
632.015 391.891 630.036 391.904 628.063 391.936 cv
626.442 391.922 624.819 391.91 623.195 391.902 cv
621.96 391.895 620.724 391.892 619.488 391.892 cv
619.098 391.892 618.709 391.892 618.319 391.893 cv
615.881 391.898 613.441 391.919 611.001 391.963 cv
606.906 392.451 601.008 391.913 596.431 392.594 cv
594.016 392.771 591.608 392.989 589.213 393.258 cv
586.448 393.561 583.788 393.977 581.269 394.493 cv
578.751 395.008 576.375 395.623 574.181 396.323 cv
572.994 396.756 571.52 397.294 570.045 397.832 cv
583.217 398.818 596.391 399.013 609.563 399.013 cv
613.891 399.013 618.218 398.992 622.546 398.971 cv
626.871 398.95 631.198 398.929 635.522 398.929 cv
642.448 398.929 649.372 398.983 656.298 399.177 cv
671.779 399.715 685.786 401.06 699.056 403.751 cv
665.882 407.248 630.496 405.365 596.585 408.055 cv
608.275 412.914 625.119 413.91 643.409 413.91 cv
649.76 413.91 656.283 413.79 662.829 413.67 cv
669.372 413.55 675.938 413.43 682.365 413.43 cv
64.3403 406.613 mo
68.2641 406.651 72.0107 406.679 75.7357 406.7 cv
83.2485 406.742 90.7493 406.753 98.2321 406.753 cv
101.741 406.753 105.244 406.75 108.745 406.748 cv
112.642 406.725 116.517 406.692 120.383 406.649 cv
145.516 406.372 170.77 405.842 195.985 404.86 cv
199.587 404.719 203.188 404.57 206.762 404.414 cv
217.391 403.47 228.062 403.171 238.764 403.171 cv
241.294 403.171 243.825 403.188 246.358 403.216 cv
249.67 403.254 253.003 403.313 256.373 403.381 cv
258.867 403.356 261.38 403.345 263.906 403.345 cv
275.111 403.345 286.604 403.564 298.207 403.784 cv
309.809 404.003 321.529 404.222 333.175 404.222 cv
361.792 404.222 390.001 402.9 415.188 397.003 cv
404.188 394.072 391.188 392.607 378.774 390.294 cv
353.188 386.255 321.188 392.607 301.188 381.858 cv
298.188 380.392 306.188 378.926 309.761 377.844 cv
312.585 377.292 315.54 376.84 318.561 376.469 cv
328.463 375.251 338.962 374.891 349.643 374.891 cv
357.371 374.891 365.194 375.079 372.959 375.268 cv
380.727 375.457 388.436 375.645 395.93 375.645 cv
399.013 375.645 402.06 375.613 405.06 375.536 cv
408.191 375.619 411.304 375.713 414.409 375.807 cv
425.378 376.142 436.367 376.529 447.384 376.529 cv
455.08 376.529 462.788 376.341 470.519 375.814 cv
473.298 375.585 476.065 375.324 478.819 375.023 cv
487.08 374.119 495.219 372.865 503.188 371.109 cv
480.855 369.643 458.521 367.852 436.146 366.093 cv
432.417 365.8 428.686 365.507 424.951 365.217 cv
413.99 364.245 402.996 363.367 391.978 362.599 cv
388.298 362.341 384.612 362.096 380.89 361.862 cv
352.158 360.075 323.317 358.832 294.479 358.832 cv
289.119 358.832 283.76 358.875 278.401 358.965 cv
274.982 359.023 271.563 359.1 268.136 359.197 cv
251.368 359.961 234.468 360.329 217.48 360.795 cv
214.057 360.883 210.629 360.974 207.113 361.055 cv
165.188 362.315 122.188 362.315 79.1879 365.735 cv
68.4576 366.609 57.4676 366.905 46.3575 366.905 cv
31.0254 366.905 15.4607 366.341 .000500679 365.955 cv
.000500679 379.819 li
32.8662 379.358 66.7986 377.502 100.089 377.502 cv
128.969 377.502 157.365 378.898 184.188 383.812 cv
172.188 386.744 161.188 390.164 147.163 390.836 cv
143.909 391.187 140.625 391.492 137.336 391.768 cv
134.044 392.043 130.748 392.289 127.461 392.518 cv
123.909 392.785 120.379 393.026 116.87 393.251 cv
114.521 393.4 112.182 393.54 109.827 393.677 cv
100.917 394.63 91.2973 395.04 81.4264 395.302 cv
78.1285 395.389 74.803 395.46 71.4584 395.529 cv
47.9946 397.072 23.4498 395.903 .000500679 396.896 cv
.000500679 401.023 li
.000500679 401.023 li
.000500679 401.023 li
.000500679 404.33 li
.000500679 404.33 li
.000500679 405.574 li
1.90558 405.28 3.80266 404.98 5.68721 404.672 cv
5.68721 404.672 li
5.68721 404.672 li
24.2083 405.761 42.7159 406.619 61.5345 406.619 cv
62.4701 406.619 63.403 406.617 64.3403 406.613 cv
1575.9 372.27 mo
1579.07 372.27 1582.26 372.288 1585.45 372.319 cv
1587.88 372.345 1590.32 372.378 1592.82 372.417 cv
1614.7 372.433 1638.78 373.879 1661.64 373.879 cv
1684.81 373.879 1706.73 372.395 1723.88 366.432 cv
1725.1 366.245 1726.93 366.245 1728.92 366.001 cv
1730.68 365.903 1732.47 365.837 1734.3 365.78 cv
1736.12 365.723 1737.97 365.675 1739.83 365.61 cv
1739.82 365.61 li
1742.14 364.928 1745.18 365.116 1747.64 364.539 cv
1750.2 364.129 1751.87 363.706 1750.65 363.425 cv
1720.17 357.536 1685.56 356.292 1650.66 356.292 cv
1637.69 356.292 1624.68 356.464 1611.83 356.633 cv
1609.57 356.663 1607.31 356.692 1605.06 356.721 cv
1602.7 356.738 1600.35 356.756 1598.01 356.776 cv
1595.66 356.795 1593.32 356.816 1590.98 356.836 cv
1549.27 356.655 1507.89 356.091 1465.92 355.387 cv
1463.99 355.449 1462.02 355.545 1460.06 355.668 cv
1450.26 356.286 1440.79 357.59 1431.36 358.52 cv
1429.29 358.728 1427.24 358.939 1425.21 359.163 cv
1415.05 360.282 1405.24 361.701 1395.94 363.425 cv
1398.83 363.769 1401.78 364.072 1404.78 364.339 cv
1406.28 364.473 1407.8 364.598 1409.33 364.714 cv
1416.17 364.908 1422.83 365.243 1429.35 365.678 cv
1431.52 365.823 1433.68 365.979 1435.83 366.146 cv
1439.09 366.406 1442.26 366.706 1445.34 367.056 cv
1446.88 367.229 1448.4 367.415 1449.89 367.616 cv
1451.39 367.815 1452.87 368.027 1454.32 368.253 cv
1455.77 368.48 1457.2 368.72 1458.62 368.975 cv
1462.85 369.741 1466.9 370.64 1470.78 371.697 cv
1476.39 373.286 1483.8 373.655 1491.34 373.655 cv
1493.62 373.655 1495.9 373.621 1498.16 373.578 cv
1513.78 373.505 1529.3 373.147 1544.8 372.742 cv
1547.02 372.684 1549.23 372.625 1551.45 372.567 cv
1553.56 372.507 1555.67 372.462 1557.79 372.429 cv
1559.93 372.396 1562.08 372.374 1564.26 372.362 cv
1568.12 372.298 1572 372.27 1575.9 372.27 cv
548.645 339.586 mo
570.922 339.586 592.523 341.112 612.761 345.967 cv
621.761 347.886 612.761 354.603 614.761 359.882 cv
615.761 361.321 618.761 361.801 620.972 362.469 cv
621.789 362.553 622.687 362.597 623.674 362.597 cv
625.159 362.597 626.845 362.497 628.761 362.281 cv
632.618 361.835 636.465 361.417 640.314 361.024 cv
658.216 360.307 676.083 359.641 693.926 359.042 cv
697.653 358.904 701.382 358.769 705.351 358.614 cv
729.155 357.909 752.881 357.972 776.562 357.863 cv
779.946 357.848 783.328 357.829 786.71 357.804 cv
819.926 357.354 852.81 356.549 885.725 355.248 cv
889.445 355.104 893.165 354.952 896.948 354.796 cv
923.319 354.348 949.871 353.784 976.472 353.262 cv
980.435 353.187 984.411 353.118 988.663 353.065 cv
995.053 352.868 1001.51 352.788 1008.02 352.788 cv
1009.04 352.788 1010.05 352.79 1011.07 352.794 cv
1014.84 352.807 1018.63 352.845 1022.43 352.901 cv
1040.66 353.283 1059.05 353.827 1077.46 354.16 cv
1081.18 354.226 1084.9 354.285 1088.68 354.332 cv
1099.92 354.504 1111.17 354.612 1122.4 354.612 cv
1160.17 354.612 1197.76 353.394 1234.76 349.326 cv
1192.76 337.33 1140.76 340.209 1094.85 335.395 cv
1091.2 335.085 1087.64 334.769 1084.09 334.442 cv
1073.55 333.459 1063.09 332.375 1052.82 331.024 cv
1069.76 326.774 1087.76 324.375 1106.76 323.895 cv
1133.76 322.455 1159.76 322.455 1186.76 321.016 cv
1196.64 320.585 1206.33 320.348 1215.99 320.348 cv
1227.84 320.348 1239.65 320.704 1251.78 321.498 cv
1252.09 319.737 1251.54 318.204 1250.31 316.864 cv
1244.15 310.167 1221.09 308.301 1207.76 307.102 cv
1199.8 306.283 1192.09 305.969 1184.49 305.969 cv
1165.37 305.969 1147.01 307.963 1127.5 308.926 cv
1124.54 309.012 1121.65 309.064 1118.86 309.064 cv
1118.5 309.064 1118.14 309.063 1117.77 309.061 cv
1114.65 309.045 1111.66 308.961 1108.83 308.78 cv
1105.3 308.845 1101.78 308.902 1098.27 308.951 cv
1086.54 309.114 1074.81 309.188 1063.09 309.188 cv
1043.36 309.188 1023.66 308.977 1003.99 308.624 cv
1000.39 308.695 996.81 308.811 993.245 308.987 cv
989.375 309.201 985.661 309.442 981.956 309.677 cv
947.447 311.929 912.917 313.462 878.039 313.462 cv
864.404 313.462 850.721 313.228 836.957 312.711 cv
834.139 312.59 831.295 312.439 828.432 312.271 cv
824.614 312.046 820.76 311.79 816.896 311.53 cv
806.197 310.534 795.179 309.924 784.246 309.924 cv
782.044 309.924 779.846 309.949 777.654 310 cv
774.385 310.077 771.126 310.212 767.88 310.411 cv
740.761 312.859 712.761 315.258 685.761 318.137 cv
689.077 318.247 692.407 318.294 695.746 318.294 cv
705.681 318.294 715.704 317.878 725.737 317.463 cv
735.769 317.047 745.812 316.632 755.786 316.632 cv
761.808 316.632 767.805 316.783 773.76 317.178 cv
740.332 329.104 695.883 324.11 654.898 326.671 cv
651.483 326.884 648.091 327.149 644.903 327.482 cv
640.761 328.213 634.761 328.213 633.761 330.612 cv
639.761 331.092 646.761 331.572 652.811 331.803 cv
656.261 331.962 659.761 332.103 663.262 332.229 cv
684.005 332.97 704.753 333.14 725.508 333.14 cv
734.32 333.14 743.131 333.109 751.946 333.079 cv
760.765 333.048 769.588 333.018 778.412 333.018 cv
778.554 333.018 778.694 333.018 778.835 333.018 cv
782.326 332.91 785.793 332.779 789.25 332.627 cv
793.134 332.499 796.901 332.38 800.668 332.292 cv
805.283 332.172 809.896 332.098 814.504 332.098 cv
820.974 332.098 827.433 332.243 833.874 332.604 cv
837.012 332.826 840.121 333.11 843.204 333.442 cv
858.62 335.104 873.386 337.99 887.761 340.689 cv
870.261 341.889 852.37 342.151 834.607 342.356 cv
831.044 342.397 827.486 342.437 823.927 342.481 cv
812.833 342.505 801.745 342.591 790.656 342.682 cv
786.857 342.7 783.071 342.721 779.112 342.73 cv
776.682 342.724 774.247 342.722 771.809 342.722 cv
770.496 342.722 769.183 342.723 767.867 342.724 cv
757.986 342.781 748.105 342.829 738.237 342.829 cv
713.966 342.829 689.757 342.538 665.714 341.375 cv
661.956 341.193 658.203 340.99 654.578 340.764 cv
647.761 340.689 639.761 340.209 632.761 338.77 cv
605.513 332.138 576.23 329.471 546.652 329.471 cv
501.329 329.471 455.303 335.729 414.761 343.568 cv
420.856 343.834 427.004 343.948 433.188 343.948 cv
452.283 343.948 471.73 342.858 491.113 341.767 cv
510.494 340.677 529.811 339.586 548.645 339.586 cv
1695.04 323.354 mo
1724.1 323.535 1752.92 324.098 1782.16 324.802 cv
1783.51 324.74 1784.88 324.644 1786.24 324.521 cv
1793.06 323.903 1799.67 322.6 1806.23 321.669 cv
1807.68 321.462 1809.1 321.25 1810.52 321.026 cv
1817.59 319.908 1824.43 318.489 1830.9 316.765 cv
1828.89 316.42 1826.83 316.117 1824.74 315.85 cv
1823.7 315.717 1822.65 315.591 1821.58 315.475 cv
1816.81 315.281 1812.18 314.947 1807.63 314.511 cv
1806.12 314.366 1804.61 314.21 1803.12 314.043 cv
1800.85 313.784 1798.64 313.483 1796.49 313.134 cv
1795.42 312.96 1794.36 312.774 1793.32 312.574 cv
1792.28 312.375 1791.25 312.162 1790.24 311.936 cv
1789.23 311.709 1788.23 311.469 1787.25 311.214 cv
1784.29 310.449 1781.47 309.55 1778.77 308.492 cv
1774.86 306.903 1769.71 306.535 1764.45 306.535 cv
1762.87 306.535 1761.27 306.568 1759.7 306.612 cv
1748.82 306.685 1738.01 307.042 1727.21 307.447 cv
1725.66 307.506 1724.12 307.564 1722.58 307.623 cv
1721.11 307.682 1719.64 307.727 1718.16 307.761 cv
1716.67 307.794 1715.17 307.815 1713.65 307.828 cv
1710.96 307.892 1708.25 307.919 1705.53 307.919 cv
1703.33 307.919 1701.11 307.901 1698.89 307.87 cv
1697.2 307.845 1695.5 307.812 1693.76 307.772 cv
1678.52 307.757 1661.74 306.31 1645.82 306.31 cv
1629.68 306.31 1614.41 307.795 1602.46 313.757 cv
1601.61 313.945 1600.34 313.945 1598.95 314.189 cv
1597.73 314.287 1596.47 314.352 1595.21 314.409 cv
1593.93 314.467 1592.65 314.515 1591.35 314.58 cv
1591.36 314.58 li
1589.74 315.261 1587.62 315.073 1585.91 315.65 cv
1584.13 316.06 1582.96 316.483 1583.81 316.765 cv
1605.05 322.654 1629.16 323.897 1653.47 323.897 cv
1662.51 323.897 1671.57 323.726 1680.52 323.557 cv
1682.09 323.527 1683.67 323.497 1685.23 323.469 cv
1686.87 323.451 1688.51 323.433 1690.15 323.413 cv
1691.78 323.394 1693.41 323.374 1695.04 323.354 cv
224.08 307.071 mo
199.821 307.071 176.12 312.045 152.419 313.679 cv
160.267 315.248 168.183 315.791 176.131 315.791 cv
185.064 315.791 194.038 315.105 203.003 314.419 cv
211.967 313.734 220.922 313.048 229.815 313.048 cv
234.369 313.048 238.905 313.227 243.42 313.679 cv
246.419 313.929 249.404 314.148 252.377 314.336 cv
261.71 314.926 270.938 315.213 280.196 315.213 cv
291.584 315.213 303.019 314.779 314.773 313.939 cv
318.54 313.792 322.279 313.642 326.002 313.494 cv
348.338 312.608 370.658 311.781 392.857 311.63 cv
395.227 311.614 397.597 311.606 399.967 311.606 cv
401.297 311.606 402.626 311.608 403.957 311.614 cv
420.141 311.652 436.166 313.404 452.123 313.405 cv
463.244 313.405 474.33 312.554 485.419 309.679 cv
457.419 309.679 430.419 309.679 402.419 306.679 cv
414.085 305.679 425.864 305.457 437.678 305.457 cv
442.405 305.457 447.136 305.492 451.869 305.528 cv
456.601 305.563 461.334 305.599 466.063 305.599 cv
469.612 305.599 473.16 305.579 476.704 305.524 cv
480.245 305.469 483.784 305.379 487.315 305.239 cv
494.42 303.679 502.419 304.679 509.419 303.679 cv
506.513 302.849 503.779 302.708 501.103 302.708 cv
500.415 302.708 499.731 302.717 499.049 302.727 cv
498.364 302.736 497.681 302.745 496.998 302.745 cv
494.633 302.745 492.268 302.632 489.819 302.015 cv
487.582 301.949 485.345 301.921 483.108 301.921 cv
482.245 301.921 481.383 301.925 480.52 301.933 cv
469.466 302.033 458.409 302.718 447.355 302.718 cv
436.709 302.718 426.065 302.083 415.419 299.679 cv
437.819 299.679 459.73 298.699 481.705 298.104 cv
484.844 298.019 487.985 297.942 491.129 297.877 cv
518.169 297.694 544.963 292.567 572.523 292.567 cv
574.817 292.567 577.114 292.602 579.419 292.679 cv
579.419 292.679 li
579.419 292.679 li
569.978 287.621 560.079 285.974 549.968 285.974 cv
540.53 285.974 530.908 287.408 521.289 288.842 cv
511.671 290.276 502.06 291.711 492.651 291.711 cv
491.653 291.711 490.658 291.695 489.664 291.661 cv
486.039 291.861 482.408 292.049 478.772 292.218 cv
467.099 292.76 455.379 293.114 443.692 293.114 cv
429.898 293.114 416.149 292.622 402.561 291.367 cv
399.2 291.402 395.937 291.51 392.679 291.635 cv
370.005 292.513 347.452 294.088 324.952 295.426 cv
321.397 295.634 317.843 295.837 314.172 296.031 cv
308.098 296.666 302.137 296.908 296.186 296.908 cv
286.704 296.908 277.25 296.294 267.419 295.679 cv
263.67 295.492 259.924 295.304 256.18 295.118 cv
252.431 294.931 248.685 294.746 244.934 294.562 cv
242.211 294.361 239.493 294.273 236.78 294.273 cv
226.857 294.273 216.988 295.455 207.083 296.637 cv
197.177 297.82 187.234 299.003 177.165 299.003 cv
174.261 299.003 171.347 298.904 168.419 298.679 cv
151.215 297.774 134.008 290.308 116.201 290.308 cv
114.343 290.308 112.479 290.389 110.608 290.568 cv
106.852 290.578 103.092 290.602 99.3277 290.641 cv
95.5631 290.68 91.793 290.734 88.0179 290.804 cv
84.6003 290.942 81.1055 291.031 77.6223 291.137 cv
56.7229 291.773 36.5135 293.112 18.7204 295.718 cv
36.5752 297.686 55.8018 298.192 75.5026 298.192 cv
75.9615 298.192 76.4193 298.191 76.8788 298.191 cv
80.2428 298.187 83.6189 298.169 86.9835 298.128 cv
90.8232 298.1 94.6609 298.07 98.4976 298.041 cv
102.333 298.011 106.168 297.982 110.001 297.958 cv
112.28 297.703 114.544 297.589 116.791 297.589 cv
134.676 297.589 151.652 304.791 169.419 305.679 cv
171.187 305.747 172.953 305.778 174.713 305.778 cv
183.703 305.778 192.59 304.971 201.48 304.164 cv
210.368 303.356 219.26 302.549 228.252 302.549 cv
234.393 302.549 240.58 302.925 246.851 303.935 cv
250.615 304.436 254.375 304.977 258.13 305.561 cv
261.886 306.145 265.638 306.772 269.386 307.445 cv
264.33 308.269 259.311 308.592 254.314 308.592 cv
252.895 308.592 251.478 308.566 250.062 308.518 cv
246.861 308.409 243.66 308.189 240.443 307.91 cv
234.957 307.319 229.504 307.071 224.08 307.071 cv
862.555 269.56 mo
891.612 269.639 920.432 269.886 949.672 270.194 cv
951.018 270.167 952.392 270.124 953.756 270.071 cv
960.578 269.801 967.18 269.231 973.746 268.823 cv
975.19 268.732 976.615 268.64 978.03 268.542 cv
985.107 268.053 991.942 267.432 998.417 266.678 cv
996.404 266.527 994.349 266.394 992.259 266.277 cv
991.214 266.219 990.16 266.164 989.094 266.113 cv
984.326 266.028 979.689 265.882 975.147 265.691 cv
973.632 265.628 972.128 265.56 970.633 265.487 cv
968.361 265.373 966.152 265.242 964.007 265.089 cv
962.935 265.013 961.877 264.932 960.835 264.844 cv
959.793 264.757 958.765 264.664 957.753 264.565 cv
956.74 264.466 955.742 264.361 954.759 264.249 cv
951.808 263.914 948.988 263.521 946.286 263.059 cv
942.38 262.363 937.223 262.202 931.969 262.202 cv
930.382 262.202 928.787 262.217 927.214 262.236 cv
916.335 262.268 905.521 262.424 894.721 262.601 cv
893.177 262.626 891.635 262.652 890.093 262.678 cv
888.623 262.704 887.15 262.724 885.675 262.738 cv
884.181 262.753 882.684 262.762 881.168 262.767 cv
878.48 262.796 875.776 262.808 873.059 262.808 cv
870.849 262.808 868.63 262.8 866.405 262.786 cv
864.712 262.775 863.016 262.761 861.275 262.743 cv
846.031 262.736 829.257 262.104 813.331 262.104 cv
797.19 262.104 781.92 262.753 769.973 265.361 cv
769.125 265.444 767.853 265.444 766.465 265.55 cv
765.241 265.593 763.988 265.622 762.719 265.647 cv
761.448 265.672 760.161 265.693 758.868 265.722 cv
758.869 265.722 li
757.258 266.019 755.139 265.938 753.422 266.19 cv
751.641 266.369 750.476 266.554 751.324 266.678 cv
772.557 269.254 796.664 269.798 820.971 269.798 cv
830.01 269.798 839.075 269.723 848.032 269.649 cv
849.606 269.636 851.178 269.623 852.746 269.61 cv
854.387 269.603 856.026 269.595 857.659 269.586 cv
859.295 269.578 860.926 269.569 862.555 269.56 cv
24.3951 401.101 mo
24.3373 401.099 24.2805 401.096 24.2227 401.094 cv
24.2805 401.096 24.3373 401.099 24.3951 401.101 cv
23.8766 401.081 mo
19.8442 400.928 15.7811 400.861 11.698 400.861 cv
15.7816 400.861 19.8437 400.928 23.8766 401.081 cv
11.6635 400.861 mo
11.6692 400.861 11.6743 400.861 11.68 400.861 cv
11.68 400.861 li
11.6743 400.861 11.6692 400.861 11.6635 400.861 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.94902 1 .741176 ]
/C1 [.537255 .694118 .870588 ]
/N 1.25828 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~o'u8?naZ/=nF5r9n*f`6mdBN2mHs<-m-O*)lg*j$lK[Wul0.?pkND$jk2tdejlGL`j5]1Zio8qUiS`YP
hr!;IhVI#Dgt^Z=gY1B8g"G$1f[na+f%/C%e^W*te'landF$@gd*L%`cHa\Zbfn;SbK@uLaiVWFa2c3>
`l5p8`5BL1_SX.*^qd_"^V7Fq]tD"i]=YYc\[f5[\$rfS[^ENM['R*EZE^[=Yct=7Y-+n/XK8J'WiE%t
W2QVlVP^5eV50o^US=KVTqJ'NT:VXFSXc4>S!oe6R@'A.Q^3r&Q'@MsPEM)kOcYZcO,f6[NJrgSMi*CK
~>
<~s8N#srr2orrr)forVcZlr;?Kjqtp9fqtg0cqYBs_q>'g\q"XUXp\4CTp@e4Qp%A"Mo^qbHoCMPDo()>@
naZ,<nF5o8n*]W3md9E/m-O**lg*m%lK[[!l07Eqki_-lkN:phjlPUbjQ,C^j5].Yio/kTi8EPNhr!>J
hVR)Eh;$f@gY:K:g=k65g"=s0f@SX*f%/C%e^W*ue'ldodaHOjdEp7ecd0q_cHXVYbfn;SbKJ&Nb/qcI
aN2EBa2Z-=`Pog7`5KR2_SX1+_83q&^q[Xu^:q:o]tD"i]=YYc]",A]\@B#W\$i`Q[C*BK['R*EZEga?
~>
<~]tM+m]tM+m]tM+m]tM+m^:q=q^:q=q^:q=q^V@Ou^V@Ou^V@P!^qdb$^qdb$_83t(_83t(_84"*_SX1,
_SX1-_o'C0_o'C1`5KU4`5KU4`Pog8`Pog8`l?$<`l?$<a2c6@a2c6AaN2HDaN2HEaiVZHaiVZIb0%lL
b0%oNbKJ)PbKS2Sbfn;Tbg"DWc-=MXcHa_\cHa_]cd0q`cd0tbd*U.ddF$@hdF$@idaHRldaHUne'ldp
e'umseC<!ue^`4#e^`7%f%/F'f@SX+f@SX,f\"j/f\+s2g"G'3g=k97g=k<9gY:K;gt^]?gt^`Ah;-oC
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
546.105 429.364 mo
516.865 429.056 488.045 428.81 458.988 428.73 cv
457.358 428.739 455.728 428.748 454.092 428.757 cv
452.458 428.765 450.819 428.773 449.179 428.781 cv
447.611 428.794 446.039 428.806 444.465 428.819 cv
435.508 428.893 426.443 428.969 417.404 428.969 cv
393.097 428.969 368.99 428.424 347.757 425.848 cv
346.909 425.724 348.074 425.54 349.855 425.36 cv
351.571 425.108 353.69 425.19 355.302 424.892 cv
355.301 424.892 li
356.594 424.864 357.881 424.842 359.151 424.818 cv
360.421 424.793 361.674 424.764 362.897 424.721 cv
364.286 424.614 365.558 424.614 366.405 424.532 cv
378.352 421.923 393.622 421.274 409.763 421.274 cv
425.689 421.274 442.463 421.907 457.708 421.914 cv
459.448 421.931 461.144 421.945 462.838 421.956 cv
465.063 421.97 467.281 421.978 469.492 421.978 cv
472.208 421.978 474.913 421.966 477.601 421.938 cv
479.116 421.933 480.613 421.923 482.107 421.909 cv
483.583 421.894 485.055 421.875 486.525 421.848 cv
488.068 421.823 489.611 421.797 491.153 421.772 cv
501.954 421.594 512.767 421.438 523.646 421.406 cv
525.216 421.387 526.808 421.372 528.391 421.372 cv
533.649 421.372 538.81 421.534 542.719 422.229 cv
545.421 422.691 548.241 423.084 551.193 423.419 cv
552.175 423.531 553.173 423.636 554.186 423.735 cv
555.198 423.834 556.225 423.927 557.267 424.014 cv
558.31 424.102 559.367 424.183 560.44 424.259 cv
562.585 424.412 564.794 424.543 567.066 424.657 cv
568.561 424.73 570.064 424.798 571.579 424.862 cv
576.122 425.053 580.759 425.199 585.526 425.284 cv
586.593 425.334 587.647 425.389 588.691 425.448 cv
590.781 425.564 592.837 425.697 594.85 425.848 cv
588.375 426.602 581.539 427.223 574.463 427.713 cv
573.048 427.81 571.623 427.903 570.179 427.993 cv
563.612 428.401 557.01 428.971 550.188 429.241 cv
548.824 429.295 547.451 429.337 546.105 429.364 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.878431 .94902 .764706 ]
/C1 [.537255 .694118 .870588 ]
/N 1.25828 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~hr!>Khr!>KhVR,GhVI#Dh;-lAgt^]>gY:K:g=k96g"G'2f\"j.f@SX*f%/C%e^`1!eC;sre'c[mdF$@h
d*U.ccd0n^cHa\Zc-4DUbKJ)Ob0%iJaiMQEa2c6@`l?$;`Pod6_o'C/_SX.*_8*k%^V@Ot^:q:o]tD"i
]=YYc]",A^\@B&X\$i`R[C*EL['R*FZEgd@Z*:I:YHP.4Y-"h.XK8M(X/`2"WMuhpW2HPjVP^2dV50o^
USFQXTqS0QTV%jKSt;LDSXc4>S!oe7R@0G0R$X/*QBmf$Pa%AqPEM)kOcb`eO,o<]NfB$WN/NUPMMd7I
~>
<~naZ/>naZ/>naZ,<nF5r:nF,i7n*f`5mdBN2mHs<.mHs9,m-O*)lg*m&lK[["lKRQtl07Eqkih3mkND$j
k2tgfjlPUcjQ,C_j5]1[io8tWio/kTiS`YPi8<GLhqm5HhVI#Dh;$f@gtUT<gY1B8g"G'3f\"j/f@SX+
f%/F'e^`4"eC<!se'ldodaHOjdF$=fd*L%acd'h]cHXVYbfn;TbKJ)Ob0%lKaiVWFaN)?Aa2Z-=`Pog8
`5KU3_o'@._SX.*_8*k%^V@Ou^:q=p]tM(k]Xtef]=PSb\[f8\\@B#W\$rfS[^ENN['[3HZa6sCZE^[>
~>
<~_Sa:/_o'C0_o'C0_o'C0_o'C1`5KU4`5KU4`5KU4`5T^7`Pog8`Pog8`Q#p;`l?$<`l?$<`lH-?a2c6@
a2c6@aN2HDaN2HDaN2KFaiVZHaiVZHb0%lLb0%lLb0%oNbKJ)PbKJ)Qbfn;Tbfn;Tbg"DWc-=MXc-=PZ
cHa_\cHa_]cd0q`cd0q`d*U.dd*U.ddF$@hdF$@hdF-IkdaHRldaQ[oe'ldpe'lgreC<!teC<%!e^`4#
e^`7%f%/F'f%/I)f@SX+f@S[-f\"j/f\"m1g"G'3g"G*5g=k97g=k<9gY:K;gYCT>gt^]?gtgfBh;-oC
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
280.058 426.781 mo
250.818 426.473 221.998 426.227 192.941 426.147 cv
191.311 426.156 189.681 426.165 188.045 426.174 cv
186.411 426.182 184.773 426.19 183.132 426.198 cv
181.564 426.211 179.992 426.223 178.418 426.236 cv
169.461 426.31 160.396 426.385 151.357 426.385 cv
127.05 426.385 102.943 425.841 81.7098 423.265 cv
80.8622 423.141 82.0273 422.957 83.8077 422.777 cv
85.5245 422.525 87.6434 422.607 89.2551 422.309 cv
89.2541 422.309 li
90.5468 422.281 91.8341 422.259 93.1043 422.235 cv
94.374 422.21 95.6267 422.181 96.8504 422.138 cv
98.2392 422.031 99.511 422.031 100.359 421.949 cv
112.305 419.34 127.575 418.691 143.717 418.691 cv
159.642 418.691 176.416 419.324 191.661 419.331 cv
193.401 419.348 195.098 419.362 196.791 419.373 cv
199.016 419.387 201.235 419.395 203.445 419.395 cv
206.162 419.395 208.866 419.383 211.554 419.355 cv
213.07 419.35 214.567 419.34 216.061 419.326 cv
217.536 419.311 219.009 419.292 220.479 419.265 cv
222.021 419.24 223.563 419.214 225.106 419.189 cv
235.907 419.011 246.721 418.855 257.599 418.823 cv
259.172 418.804 260.768 418.789 262.355 418.789 cv
267.609 418.789 272.766 418.951 276.672 419.646 cv
279.374 420.108 282.194 420.501 285.145 420.836 cv
286.128 420.948 287.126 421.053 288.139 421.152 cv
289.151 421.251 290.179 421.344 291.22 421.431 cv
292.263 421.519 293.32 421.6 294.393 421.676 cv
296.538 421.829 298.747 421.96 301.019 422.074 cv
302.514 422.147 304.017 422.215 305.532 422.279 cv
310.075 422.47 314.712 422.616 319.479 422.701 cv
320.546 422.751 321.6 422.806 322.645 422.865 cv
324.734 422.981 326.79 423.114 328.803 423.265 cv
322.328 424.019 315.492 424.64 308.416 425.13 cv
307.001 425.227 305.576 425.32 304.132 425.41 cv
297.566 425.818 290.964 426.388 284.141 426.658 cv
282.778 426.712 281.404 426.754 280.058 426.781 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
623.674 362.597 mo
622.687 362.597 621.789 362.553 620.972 362.469 cv
618.761 361.801 615.761 361.321 614.761 359.882 cv
612.761 354.603 621.761 347.886 612.761 345.967 cv
592.523 341.112 570.922 339.586 548.645 339.586 cv
529.811 339.586 510.494 340.677 491.113 341.767 cv
471.73 342.858 452.283 343.948 433.188 343.948 cv
427.004 343.948 420.856 343.834 414.761 343.568 cv
455.303 335.729 501.329 329.471 546.652 329.471 cv
576.23 329.471 605.513 332.138 632.761 338.77 cv
639.761 340.209 647.761 340.689 654.578 340.764 cv
658.203 340.99 661.956 341.193 665.714 341.375 cv
689.757 342.538 713.966 342.829 738.237 342.829 cv
748.105 342.829 757.986 342.781 767.867 342.724 cv
769.183 342.723 770.496 342.722 771.809 342.722 cv
774.247 342.722 776.682 342.724 779.112 342.73 cv
783.071 342.721 786.857 342.7 790.656 342.682 cv
801.745 342.591 812.833 342.505 823.927 342.481 cv
827.486 342.437 831.044 342.397 834.607 342.356 cv
852.37 342.151 870.261 341.889 887.761 340.689 cv
873.386 337.99 858.62 335.104 843.204 333.442 cv
840.121 333.11 837.012 332.826 833.874 332.604 cv
827.433 332.243 820.974 332.098 814.504 332.098 cv
809.896 332.098 805.283 332.172 800.668 332.292 cv
796.901 332.38 793.134 332.499 789.25 332.627 cv
785.793 332.779 782.326 332.91 778.835 333.018 cv
778.694 333.018 778.554 333.018 778.412 333.018 cv
769.588 333.018 760.765 333.048 751.946 333.079 cv
743.131 333.109 734.32 333.14 725.508 333.14 cv
704.753 333.14 684.005 332.97 663.262 332.229 cv
659.761 332.103 656.261 331.962 652.811 331.803 cv
646.761 331.572 639.761 331.092 633.761 330.612 cv
634.761 328.213 640.761 328.213 644.903 327.482 cv
648.091 327.149 651.483 326.884 654.898 326.671 cv
695.883 324.11 740.332 329.104 773.76 317.178 cv
767.805 316.783 761.808 316.632 755.786 316.632 cv
745.812 316.632 735.769 317.047 725.737 317.463 cv
715.704 317.878 705.681 318.294 695.746 318.294 cv
692.407 318.294 689.077 318.247 685.761 318.137 cv
712.761 315.258 740.761 312.859 767.88 310.411 cv
771.126 310.212 774.385 310.077 777.654 310 cv
779.846 309.949 782.044 309.924 784.246 309.924 cv
795.179 309.924 806.197 310.534 816.896 311.53 cv
820.76 311.79 824.614 312.046 828.432 312.271 cv
831.295 312.439 834.139 312.59 836.957 312.711 cv
850.721 313.228 864.404 313.462 878.039 313.462 cv
912.917 313.462 947.447 311.929 981.956 309.677 cv
985.661 309.442 989.375 309.201 993.245 308.987 cv
996.81 308.811 1000.39 308.695 1003.99 308.624 cv
1023.66 308.977 1043.36 309.188 1063.09 309.188 cv
1074.81 309.188 1086.54 309.114 1098.27 308.951 cv
1101.78 308.902 1105.3 308.845 1108.83 308.78 cv
1111.66 308.961 1114.65 309.045 1117.77 309.061 cv
1118.14 309.063 1118.5 309.064 1118.86 309.064 cv
1121.65 309.064 1124.54 309.012 1127.5 308.926 cv
1147.01 307.963 1165.37 305.969 1184.49 305.969 cv
1192.09 305.969 1199.8 306.283 1207.76 307.102 cv
1221.09 308.301 1244.15 310.167 1250.31 316.864 cv
1251.54 318.204 1252.09 319.737 1251.78 321.498 cv
1239.65 320.704 1227.84 320.348 1215.99 320.348 cv
1206.33 320.348 1196.64 320.585 1186.76 321.016 cv
1159.76 322.455 1133.76 322.455 1106.76 323.895 cv
1087.76 324.375 1069.76 326.774 1052.82 331.024 cv
1063.09 332.375 1073.55 333.459 1084.09 334.442 cv
1087.64 334.769 1091.2 335.085 1094.85 335.395 cv
1140.76 340.209 1192.76 337.33 1234.76 349.326 cv
1197.76 353.394 1160.17 354.612 1122.4 354.612 cv
1111.17 354.612 1099.92 354.504 1088.68 354.332 cv
1084.9 354.285 1081.18 354.226 1077.46 354.16 cv
1059.05 353.827 1040.66 353.283 1022.43 352.901 cv
1018.63 352.845 1014.84 352.807 1011.07 352.794 cv
1010.05 352.79 1009.04 352.788 1008.02 352.788 cv
1001.51 352.788 995.053 352.868 988.663 353.065 cv
984.411 353.118 980.435 353.187 976.472 353.262 cv
949.871 353.784 923.319 354.348 896.948 354.796 cv
893.165 354.952 889.445 355.104 885.725 355.248 cv
852.81 356.549 819.926 357.354 786.71 357.804 cv
783.328 357.829 779.946 357.848 776.562 357.863 cv
752.881 357.972 729.155 357.909 705.351 358.614 cv
701.382 358.769 697.653 358.904 693.926 359.042 cv
676.083 359.641 658.216 360.307 640.314 361.024 cv
636.465 361.417 632.618 361.835 628.761 362.281 cv
626.845 362.497 625.159 362.597 623.674 362.597 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1446.88 429.405 mo
1441.17 429.405 1435.37 429.168 1429.39 428.553 cv
1419.37 427.652 1402.04 426.249 1397.41 421.215 cv
1396.48 420.209 1396.07 419.056 1396.3 417.733 cv
1405.42 418.329 1414.3 418.597 1423.2 418.597 cv
1430.47 418.597 1437.74 418.419 1445.17 418.095 cv
1465.47 417.013 1485.01 417.013 1505.3 415.931 cv
1519.58 415.57 1533.11 413.767 1545.84 410.572 cv
1538.12 409.556 1530.26 408.742 1522.34 408.004 cv
1519.67 407.758 1517 407.521 1514.26 407.286 cv
1479.75 403.669 1440.66 405.832 1409.09 396.817 cv
1436.91 393.759 1465.16 392.844 1493.55 392.844 cv
1501.99 392.844 1510.44 392.925 1518.89 393.054 cv
1521.74 393.089 1524.53 393.133 1527.32 393.183 cv
1541.16 393.433 1554.99 393.842 1568.69 394.129 cv
1571.55 394.171 1574.39 394.2 1577.23 394.21 cv
1577.98 394.213 1578.74 394.214 1579.49 394.214 cv
1584.39 394.214 1589.26 394.154 1594.07 394.006 cv
1597.26 393.966 1600.25 393.914 1603.23 393.858 cv
1623.23 393.466 1643.18 393.042 1663 392.705 cv
1665.85 392.587 1668.64 392.474 1671.44 392.365 cv
1696.18 391.387 1720.9 390.783 1745.86 390.444 cv
1748.4 390.425 1750.95 390.411 1753.49 390.4 cv
1771.29 390.318 1789.12 390.365 1807.01 389.835 cv
1810 389.719 1812.8 389.617 1815.6 389.513 cv
1829.01 389.064 1842.44 388.563 1855.9 388.024 cv
1858.79 387.728 1861.68 387.414 1864.58 387.079 cv
1866.02 386.917 1867.29 386.841 1868.4 386.841 cv
1869.15 386.841 1869.82 386.874 1870.43 386.938 cv
1872.1 387.44 1874.35 387.8 1875.1 388.882 cv
1876.61 392.85 1869.84 397.898 1876.61 399.341 cv
1891.82 402.991 1908.05 404.137 1924.8 404.137 cv
1939.38 404.137 1954.35 403.267 1969.36 402.424 cv
1969.36 402.424 li
1969.36 402.424 li
1969.36 402.424 li
1969.36 402.424 li
1969.36 402.424 li
1969.36 402.424 li
1979.62 403.041 1989.82 403.709 2e3 404.33 cv
2e3 405.574 li
1976.35 409.226 1951.18 411.738 1926.28 411.738 cv
1904.06 411.738 1882.05 409.734 1861.57 404.75 cv
1856.31 403.669 1850.3 403.308 1845.17 403.252 cv
1842.45 403.082 1839.63 402.929 1836.8 402.792 cv
1818.74 401.918 1800.55 401.7 1782.31 401.7 cv
1774.89 401.7 1767.46 401.736 1760.02 401.779 cv
1759.04 401.78 1758.06 401.78 1757.07 401.78 cv
1755.24 401.78 1753.4 401.779 1751.57 401.774 cv
1748.6 401.781 1745.75 401.796 1742.9 401.81 cv
1734.56 401.879 1726.23 401.943 1717.89 401.961 cv
1715.21 401.994 1712.54 402.024 1709.86 402.055 cv
1696.51 402.21 1683.06 402.406 1669.91 403.308 cv
1680.71 405.337 1691.81 407.506 1703.4 408.755 cv
1705.72 409.004 1708.05 409.217 1710.41 409.385 cv
1715.25 409.656 1720.11 409.765 1724.97 409.765 cv
1728.44 409.765 1731.9 409.71 1735.37 409.62 cv
1738.2 409.553 1741.03 409.464 1743.95 409.368 cv
1746.55 409.254 1749.16 409.155 1751.78 409.074 cv
1751.85 409.074 1751.92 409.074 1752 409.074 cv
1758.67 409.074 1765.35 409.051 1772.03 409.028 cv
1778.64 409.005 1785.25 408.982 1791.86 408.982 cv
1807.46 408.982 1823.06 409.11 1838.65 409.667 cv
1841.28 409.761 1843.91 409.867 1846.5 409.987 cv
1851.05 410.161 1856.31 410.521 1860.82 410.882 cv
1860.07 412.685 1855.56 412.685 1852.45 413.235 cv
1850.05 413.485 1847.5 413.684 1844.93 413.845 cv
1814.13 415.769 1780.72 412.015 1755.59 420.979 cv
1760.07 421.276 1764.57 421.389 1769.1 421.389 cv
1776.6 421.389 1784.15 421.077 1791.69 420.765 cv
1799.23 420.453 1806.76 420.141 1814.23 420.141 cv
1816.74 420.141 1819.24 420.176 1821.74 420.259 cv
1801.44 422.422 1780.4 424.225 1760.01 426.066 cv
1757.57 426.215 1755.13 426.317 1752.67 426.374 cv
1751.02 426.413 1749.36 426.432 1747.71 426.432 cv
1739.49 426.432 1731.21 425.973 1723.17 425.225 cv
1720.27 425.029 1717.37 424.837 1714.5 424.668 cv
1712.35 424.541 1710.21 424.428 1708.09 424.337 cv
1697.75 423.948 1687.46 423.772 1677.21 423.772 cv
1651 423.772 1625.05 424.925 1599.11 426.617 cv
1596.32 426.794 1593.53 426.976 1590.62 427.136 cv
1587.94 427.268 1585.26 427.355 1582.55 427.409 cv
1567.77 427.143 1552.96 426.985 1538.13 426.985 cv
1529.32 426.985 1520.5 427.041 1511.68 427.163 cv
1509.04 427.2 1506.4 427.242 1503.75 427.292 cv
1501.62 427.156 1499.37 427.092 1497.02 427.081 cv
1496.75 427.079 1496.47 427.079 1496.19 427.079 cv
1494.1 427.079 1491.93 427.117 1489.72 427.182 cv
1475.05 427.906 1461.25 429.405 1446.88 429.405 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
.000500679 405.574 mo
.000500679 404.33 li
.000500679 404.33 li
.000500679 404.33 li
1.89657 404.445 3.79214 404.56 5.68721 404.672 cv
3.80266 404.98 1.90558 405.28 .000500679 405.574 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
720.046 415.111 mo
717.607 415.07 715.092 415.025 712.533 414.967 cv
703.318 413.76 693.029 413.43 682.365 413.43 cv
675.938 413.43 669.372 413.55 662.829 413.67 cv
656.283 413.79 649.76 413.91 643.409 413.91 cv
625.119 413.91 608.275 412.914 596.585 408.055 cv
630.496 405.365 665.882 407.248 699.056 403.751 cv
685.786 401.06 671.779 399.715 656.298 399.177 cv
649.372 398.983 642.448 398.929 635.522 398.929 cv
631.198 398.929 626.871 398.95 622.546 398.971 cv
618.218 398.992 613.891 399.013 609.563 399.013 cv
596.391 399.013 583.217 398.818 570.045 397.832 cv
571.52 397.294 572.994 396.756 574.181 396.323 cv
576.375 395.623 578.751 395.008 581.269 394.493 cv
583.788 393.977 586.448 393.561 589.213 393.258 cv
591.608 392.989 594.016 392.771 596.431 392.594 cv
601.008 391.913 606.906 392.451 611.001 391.963 cv
613.441 391.919 615.881 391.898 618.319 391.893 cv
618.709 391.892 619.098 391.892 619.488 391.892 cv
620.724 391.892 621.96 391.895 623.195 391.902 cv
624.819 391.91 626.442 391.922 628.063 391.936 cv
630.036 391.904 632.015 391.891 633.997 391.891 cv
637.209 391.891 640.432 391.923 643.651 391.956 cv
646.872 391.988 650.09 392.02 653.296 392.02 cv
662.869 392.02 672.326 391.732 681.363 390.299 cv
664.407 385.456 640.08 386.802 620.443 385.735 cv
617.809 385.689 615.174 385.662 612.537 385.648 cv
611.119 385.641 609.703 385.637 608.284 385.637 cv
600.574 385.637 592.842 385.738 585.084 385.839 cv
577.315 385.94 569.52 386.041 561.688 386.041 cv
554.676 386.041 547.634 385.96 540.558 385.726 cv
525.076 385.187 492.64 385.726 497.063 382.497 cv
509.022 374.516 529.532 372.431 552.884 372.431 cv
577.113 372.431 604.402 374.677 628.363 374.911 cv
629.702 374.924 631.03 374.931 632.351 374.931 cv
633.798 374.931 635.236 374.922 636.669 374.905 cv
649.063 374.935 661.711 375.286 674.407 375.69 cv
676.945 375.771 679.486 375.854 682.028 375.936 cv
696.563 376.221 710.949 376.417 725.275 376.617 cv
728.286 376.657 731.283 376.698 734.484 376.739 cv
736.45 376.735 738.41 376.733 740.373 376.733 cv
769.549 376.733 798.517 377.191 827.448 377.628 cv
830.289 377.668 833.128 377.707 836.001 377.745 cv
856.681 378.098 877.335 378.221 897.978 378.221 cv
914.757 378.221 931.531 378.14 948.296 378.035 cv
951.185 378.017 954.075 377.998 956.977 377.979 cv
959.192 377.988 961.416 377.992 963.65 377.992 cv
969.351 377.992 975.109 377.967 980.899 377.94 cv
983.603 377.927 986.313 377.914 989.071 377.903 cv
993.192 377.881 997.348 377.867 1001.53 377.867 cv
1044.94 377.867 1091.12 379.336 1128.11 388.415 cv
1110.08 391.406 1090.84 392.291 1071.09 392.291 cv
1056.75 392.291 1042.13 391.824 1027.52 391.357 cv
1012.9 390.891 998.286 390.424 983.935 390.424 cv
979.051 390.424 974.196 390.478 969.384 390.605 cv
966.722 390.608 964.087 390.624 961.47 390.657 cv
958.866 390.688 956.282 390.736 953.718 390.802 cv
950.907 390.791 948.098 390.783 945.294 390.779 cv
943.707 390.776 942.126 390.775 940.54 390.775 cv
905.682 390.775 871.196 391.446 837.753 395.211 cv
836.37 395.458 835.011 395.721 833.639 396.005 cv
833.226 397.832 839.124 398.639 842.851 399.241 cv
844.427 399.45 846.038 399.617 847.665 399.762 cv
850.919 400.051 854.235 400.253 857.554 400.522 cv
885.567 402.944 919.478 400.792 940.857 408.324 cv
916.162 412.734 889.227 413.728 862.228 413.728 cv
851.346 413.728 840.449 413.566 829.69 413.402 cv
826.683 413.352 823.769 413.303 820.866 413.262 cv
816.368 413.197 811.898 413.152 807.474 413.152 cv
803.502 413.152 799.568 413.189 795.688 413.282 cv
793.243 413.135 790.718 413.052 788.134 413.014 cv
786.943 412.997 785.741 412.989 784.529 412.989 cv
783.111 412.989 781.679 413 780.239 413.019 cv
777.959 413.143 775.663 413.266 773.356 413.385 cv
760.214 413.406 744.356 414.446 729.1 414.913 cv
726.049 415.006 723.023 415.076 720.046 415.111 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
176.131 315.791 mo
168.183 315.791 160.267 315.248 152.419 313.679 cv
176.12 312.045 199.821 307.071 224.08 307.071 cv
229.504 307.071 234.957 307.319 240.443 307.91 cv
243.66 308.189 246.861 308.409 250.062 308.518 cv
251.478 308.566 252.895 308.592 254.314 308.592 cv
259.311 308.592 264.33 308.269 269.386 307.445 cv
265.638 306.772 261.886 306.145 258.13 305.561 cv
254.375 304.977 250.615 304.436 246.851 303.935 cv
240.58 302.925 234.393 302.549 228.252 302.549 cv
219.26 302.549 210.368 303.356 201.48 304.164 cv
192.59 304.971 183.703 305.778 174.713 305.778 cv
172.953 305.778 171.187 305.747 169.419 305.679 cv
151.652 304.791 134.676 297.589 116.791 297.589 cv
114.544 297.589 112.28 297.703 110.001 297.958 cv
106.168 297.982 102.333 298.011 98.4976 298.041 cv
94.6609 298.07 90.8232 298.1 86.9835 298.128 cv
83.6189 298.169 80.2428 298.187 76.8788 298.191 cv
76.4193 298.191 75.9615 298.192 75.5026 298.192 cv
55.8018 298.192 36.5752 297.686 18.7204 295.718 cv
36.5135 293.112 56.7229 291.773 77.6223 291.137 cv
81.1055 291.031 84.6003 290.942 88.0179 290.804 cv
91.793 290.734 95.5631 290.68 99.3277 290.641 cv
103.092 290.602 106.852 290.578 110.608 290.568 cv
112.479 290.389 114.343 290.308 116.201 290.308 cv
134.008 290.308 151.215 297.774 168.419 298.679 cv
171.347 298.904 174.261 299.003 177.165 299.003 cv
187.234 299.003 197.177 297.82 207.083 296.637 cv
216.988 295.455 226.857 294.273 236.78 294.273 cv
239.493 294.273 242.211 294.361 244.934 294.562 cv
248.685 294.746 252.431 294.931 256.18 295.118 cv
259.924 295.304 263.67 295.492 267.419 295.679 cv
277.25 296.294 286.704 296.908 296.186 296.908 cv
302.137 296.908 308.098 296.666 314.172 296.031 cv
317.843 295.837 321.397 295.634 324.952 295.426 cv
347.452 294.088 370.005 292.513 392.679 291.635 cv
395.937 291.51 399.2 291.402 402.561 291.367 cv
416.149 292.622 429.898 293.114 443.692 293.114 cv
455.379 293.114 467.099 292.76 478.772 292.218 cv
482.408 292.049 486.039 291.861 489.664 291.661 cv
490.658 291.695 491.653 291.711 492.651 291.711 cv
502.06 291.711 511.671 290.276 521.289 288.842 cv
530.908 287.408 540.53 285.974 549.968 285.974 cv
560.079 285.974 569.978 287.621 579.419 292.679 cv
577.114 292.602 574.817 292.567 572.523 292.567 cv
544.963 292.567 518.169 297.694 491.129 297.877 cv
487.985 297.942 484.844 298.019 481.705 298.104 cv
459.73 298.699 437.819 299.679 415.419 299.679 cv
426.065 302.083 436.709 302.718 447.355 302.718 cv
458.409 302.718 469.466 302.033 480.52 301.933 cv
481.383 301.925 482.245 301.921 483.108 301.921 cv
485.345 301.921 487.582 301.949 489.819 302.015 cv
492.268 302.632 494.633 302.745 496.998 302.745 cv
497.681 302.745 498.364 302.736 499.049 302.727 cv
499.731 302.717 500.415 302.708 501.103 302.708 cv
503.779 302.708 506.513 302.849 509.419 303.679 cv
502.419 304.679 494.42 303.679 487.315 305.239 cv
483.784 305.379 480.245 305.469 476.704 305.524 cv
473.16 305.579 469.612 305.599 466.063 305.599 cv
461.334 305.599 456.601 305.563 451.869 305.528 cv
447.136 305.492 442.405 305.457 437.678 305.457 cv
425.864 305.457 414.085 305.679 402.419 306.679 cv
430.419 309.679 457.419 309.679 485.419 309.679 cv
474.33 312.554 463.244 313.405 452.123 313.405 cv
436.166 313.404 420.141 311.652 403.957 311.614 cv
402.626 311.608 401.297 311.606 399.967 311.606 cv
397.597 311.606 395.227 311.614 392.857 311.63 cv
370.658 311.781 348.338 312.608 326.002 313.494 cv
322.279 313.642 318.54 313.792 314.773 313.939 cv
303.019 314.779 291.584 315.213 280.196 315.213 cv
270.938 315.213 261.71 314.926 252.377 314.336 cv
249.404 314.148 246.419 313.929 243.42 313.679 cv
238.905 313.227 234.369 313.048 229.815 313.048 cv
220.922 313.048 211.967 313.734 203.003 314.419 cv
194.038 315.105 185.064 315.791 176.131 315.791 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
98.2321 406.753 mo
90.7493 406.753 83.2485 406.742 75.7357 406.7 cv
72.0107 406.679 68.2641 406.651 64.3403 406.613 cv
63.403 406.617 62.4701 406.619 61.5345 406.619 cv
42.7159 406.619 24.2083 405.761 5.68721 404.672 cv
12.4203 403.57 19.0168 402.384 25.4275 401.144 cv
25.4275 401.144 li
25.4275 401.144 li
25.4275 401.144 li
25.4275 401.144 li
25.4275 401.144 li
25.0837 401.129 24.7393 401.115 24.3951 401.101 cv
24.3373 401.099 24.2805 401.096 24.2227 401.094 cv
24.1076 401.09 23.9918 401.085 23.8766 401.081 cv
19.8437 400.928 15.7816 400.861 11.698 400.861 cv
11.6918 400.861 11.6862 400.861 11.68 400.861 cv
11.68 400.861 li
11.68 400.861 li
11.6743 400.861 11.6692 400.861 11.6635 400.861 cv
7.79275 400.861 3.90333 400.921 .000500679 401.023 cv
.000500679 401.023 li
.000500679 396.896 li
23.4498 395.903 47.9946 397.072 71.4584 395.529 cv
74.803 395.46 78.1285 395.389 81.4264 395.302 cv
91.2973 395.04 100.917 394.63 109.827 393.677 cv
112.182 393.54 114.521 393.4 116.87 393.251 cv
120.379 393.026 123.909 392.785 127.461 392.518 cv
130.748 392.289 134.044 392.043 137.336 391.768 cv
140.625 391.492 143.909 391.187 147.163 390.836 cv
161.188 390.164 172.188 386.744 184.188 383.812 cv
157.365 378.898 128.969 377.502 100.089 377.502 cv
66.7986 377.502 32.8662 379.358 .000500679 379.819 cv
.000500679 365.955 li
15.4607 366.341 31.0254 366.905 46.3575 366.905 cv
57.4676 366.905 68.4576 366.609 79.1879 365.735 cv
122.188 362.315 165.188 362.315 207.113 361.055 cv
210.629 360.974 214.057 360.883 217.48 360.795 cv
234.468 360.329 251.368 359.961 268.136 359.197 cv
271.563 359.1 274.982 359.023 278.401 358.965 cv
283.76 358.875 289.119 358.832 294.479 358.832 cv
323.317 358.832 352.158 360.075 380.89 361.862 cv
384.612 362.096 388.298 362.341 391.978 362.599 cv
402.996 363.367 413.99 364.245 424.951 365.217 cv
428.686 365.507 432.417 365.8 436.146 366.093 cv
458.521 367.852 480.855 369.643 503.188 371.109 cv
495.219 372.865 487.08 374.119 478.819 375.023 cv
476.065 375.324 473.298 375.585 470.519 375.814 cv
462.788 376.341 455.08 376.529 447.384 376.529 cv
436.367 376.529 425.378 376.142 414.409 375.807 cv
411.304 375.713 408.191 375.619 405.06 375.536 cv
402.06 375.613 399.013 375.645 395.93 375.645 cv
388.436 375.645 380.727 375.457 372.959 375.268 cv
365.194 375.079 357.371 374.891 349.643 374.891 cv
338.962 374.891 328.463 375.251 318.561 376.469 cv
315.54 376.84 312.585 377.292 309.761 377.844 cv
306.188 378.926 298.188 380.392 301.188 381.858 cv
321.188 392.607 353.188 386.255 378.774 390.294 cv
391.188 392.607 404.188 394.072 415.188 397.003 cv
390.001 402.9 361.792 404.222 333.175 404.222 cv
321.529 404.222 309.809 404.003 298.207 403.784 cv
286.604 403.564 275.111 403.345 263.906 403.345 cv
261.38 403.345 258.867 403.356 256.373 403.381 cv
253.003 403.313 249.67 403.254 246.358 403.216 cv
243.825 403.188 241.294 403.171 238.764 403.171 cv
228.062 403.171 217.391 403.47 206.762 404.414 cv
203.188 404.57 199.587 404.719 195.985 404.86 cv
170.77 405.842 145.516 406.372 120.383 406.649 cv
116.517 406.692 112.642 406.725 108.745 406.748 cv
105.244 406.75 101.741 406.753 98.2321 406.753 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
5.68721 404.672 mo
5.68721 404.672 li
3.79214 404.56 1.89657 404.445 .000500679 404.33 cv
.000500679 404.33 li
.000500679 401.023 li
3.90908 400.921 7.80363 400.861 11.68 400.861 cv
16.2932 400.861 20.8802 400.946 25.4275 401.144 cv
25.4275 401.144 li
19.0168 402.384 12.4203 403.57 5.68721 404.672 cv
5.68721 404.672 li
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1969.36 402.424 mo
1966.31 402.24 1963.25 402.06 1960.19 401.889 cv
1972.78 398.812 1986.2 397.481 2e3 396.896 cv
2e3 401.023 li
1989.84 401.29 1979.59 401.849 1969.36 402.424 cv
1969.36 402.424 li
1969.36 402.424 li
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~o)HPrs2"7)_=7E?n,:,kr5.ju_s@0:lM8?^pr)Cj`9-d4jn6URoYoh]`SpC,hsn_CnAa8Qa4p('g$Zr6
m)[cDajfUte*5$&kfV97bKf4mbiI!jj35X(c,\bf`S\tYh9WsncbS;^^=glGf[7:^dCIfU\(&m7e'kYN
e?RBMYKtb$cIT&?eu?jEVomVfaOd6.fV?F<Tu>WV_V1Qsg7#e2R(h=@]\Ja`h3,>)OLX/-[bm%Ohhnbu
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~naZ/>naQ&;nF5r:nF,i7n*]W3md9E/mHj3*lg!d#lKRQtl0.?pki_-kk2k^djlGL`jQ#:[io/kTiS`YO
hr!;IhVR)Egt^Z=gY:H9g"G$1f\"g-f%/C%eC;sre'landF$=fd*U+bcHa\Zbfn8Rb0%iJaiVWFa2c3>
`Pog7`5BL0_SX1+_8*k$^V7Fq]tD"i]=PSa\[f8\\@8rU[^ENM['R*EZE^[=Yck75Y-"h-XK/D%Wi;tr
W2QVlVP^2dUnjf^USFTZU8"?TTV.pLSt;LDS=?":R@0G0Q^=#(Q'ISuPEV/mOcb`eO,o<]NK&mUMi3IM
~>
<~s8W-!s8N#srr)forVZTkr;?Kjr;6Bgqtg0cqYBs_q=sa[q"OOWp\+=Sp@\+Op%7nKo^h\GoCDJCo'u8?
naZ,<nF5o8n*f`6n*f]4mdBK0m-O'(lg*j$lK[Wul07Eqkih3mk2tdejlPRajQ,@]j5].YiSi_Qi8EMM
hr!>JhVI#Cgt^]>gY:K:g=b03f\"j.f@SX*f%&=#eC<!se'ldoda?Ihd*U.ccd0q_cHa_[c-4DTbKJ)O
b0%lLaiVWFa2c6@`l?!:`5KU4_o'@._83t(^qd_"^:q=q]tM(k]=Y\e]"5G_\@B&Y\$rfS[C*EM['[0G
~>
<~^qdb$^qdb$^qmk'_83t(_83t(_8=(+_SX1,_SX1,_Sa:/_o'C0_o0L3`5KU4`5KU4`5KU4`5KU4`5T^7
`Pog8`Poj:`l?$<`l?'>a2c6@a2c9BaN2HDaN2KFaiVZHaiV]Jb0%lLb0%oNbKJ)PbKJ,Rbfn>Vc-=MX
c-=MYcHa_\cHa_]cd0q`cd0qad*U.dd*U.edF$@idaHRldaHRme'ldpe'ldqeC<!ue^`4#e^`4$f%/F'
f%/F'f%/F'f@SX+f@SX+f\"j/g"G'3g"G'3g=k97g=k97gY:K;gt^]?gt^]?h;-oChVR,GhVR,Ghr!>K
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
1957.82 379.973 mo
1937.4 379.973 1917.25 379.447 1898.19 375.506 cv
1921.83 367.444 1948.45 365.602 1976.02 365.602 cv
1983.95 365.602 1991.96 365.755 2e3 365.955 cv
2e3 379.819 li
1995.3 379.886 1990.63 379.924 1985.98 379.924 cv
1984.05 379.924 1982.12 379.917 1980.19 379.903 cv
1972.72 379.903 1965.25 379.973 1957.82 379.973 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
2e3 404.33 mo
1989.82 403.709 1979.62 403.041 1969.36 402.424 cv
1979.59 401.849 1989.84 401.29 2e3 401.023 cv
2e3 404.33 li
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~o)HVts24C+_smWCn,:2mr5A""`U!B>lM8E`pr;Ol`od!8jn6[ToZ6%aaPla3ht"nGn]BSUb1lC-g$[&9
m*!uGbgbq%e*5*(kfhE9c-GIrbiR-mjNbm,cc>"k`o,4^hU06sdD=Vd^Y7,Lg!dRce%4,[\CK-<eCCqT
f!<`TYgCt(ce#8Cf;d'IW6<hjak<K2g7u[ATuGcY_q^g"gmZ(8R)%OD^>>*fhNGM-OLj>0\DW=Ti/4r$
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~naZ/>naQ&;nF5r:nF,i7n*]W3md9E/mHj3*lg!d#lKRQtl0.?pki_-kk2k^djlGL`jQ#:[io/kTiS`YO
hr!;IhVR)Egt^Z=gY:H9g"G$1f\"g-f%/C%eC;sre'landF$=fd*U+bcHa\Zbfn8Rb0%iJaiVWFa2c3>
`l?$;`Pf^4_o'C/_SO((^q[Xu^:h4m]Xtee]"5J`\[]/Y\$i`Q[C!<IZa-mAZ*:I9YHG%1XfSV)X/`2!
WMuhpVl-DhV59u`USFTZU8"?TTV.pLSt;LDS=?":R@0G0Q^=#(Q'ISuPEV/mOcb`eO,o<]NK&mUMi3IM
~>
<~s8W-!s8N#srr)forVZTkr;?Kjr;6Bgqtg0cqYBs_q=sa[q"OOWp\+=Sp@\+Op%7nKo^h\GoCMSFoCDJC
o()>@naZ,<nF5o8n*f]4mdBK0m-O'(lg*j$lK[Wul07Eqkih3mk2tdejlPUcjlPRajQ,@]io8qUiSi_Q
i8EPNhqm5Gh;-oBgt^]>gY1B7g"G'2f\"j.f@JO'e^`4"eC<!se'ldodaHRkdEp7dcd0q_cHXVXbfn;S
bKJ)Pb0%iJaN2HDa2c3>`Pog8`5KR2_SX1,_83t(^qdb$^V@Ls]tM+m]Y(kg]"5Ja\[f5[\$riU[^NTO
~>
<~_SX1,_SX1,_Sa:/_o'C0_o'C0_o0L3`5KU4`5KU4`5T^7`Pog8`Q#p;`l?$<`lH-?a2c6@a2c6@a2l?C
aN2HDaN2KFaiVZHaiV]Jb0%lLb0%oNbKJ)PbKJ)PbKJ)PbKJ,Rbfn;Tbfn>Vc-=MXc-=PZcHab^cd0q`
cd0qad*U.dd*U.edF$@hdF$@idaHRldaHRme'ldqeC<!teC<!ue^`4#e^`4#e^`4$f%/F'f%/F(f@SX+
f@SX+f\"j/g"G'3g"G'3g=k97gY:K;gY:K;gt^]?gt^]?h;-oCh;-oCh;-oChVR,Ghr!>Khr!>Ki8EPO
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
1661.64 373.879 mo
1638.78 373.879 1614.7 372.433 1592.82 372.417 cv
1590.32 372.378 1587.88 372.345 1585.45 372.319 cv
1582.26 372.288 1579.07 372.27 1575.9 372.27 cv
1572 372.27 1568.12 372.298 1564.26 372.362 cv
1562.08 372.374 1559.93 372.396 1557.79 372.429 cv
1555.67 372.462 1553.56 372.507 1551.45 372.567 cv
1549.23 372.625 1547.02 372.684 1544.8 372.742 cv
1529.3 373.147 1513.78 373.505 1498.16 373.578 cv
1495.9 373.621 1493.62 373.655 1491.34 373.655 cv
1483.8 373.655 1476.39 373.286 1470.78 371.697 cv
1466.9 370.64 1462.85 369.741 1458.62 368.975 cv
1457.2 368.72 1455.77 368.48 1454.32 368.253 cv
1452.87 368.027 1451.39 367.815 1449.89 367.616 cv
1448.4 367.415 1446.88 367.229 1445.34 367.056 cv
1442.26 366.706 1439.09 366.406 1435.83 366.146 cv
1433.68 365.979 1431.52 365.823 1429.35 365.678 cv
1422.83 365.243 1416.17 364.908 1409.33 364.714 cv
1407.8 364.598 1406.28 364.473 1404.78 364.339 cv
1401.78 364.072 1398.83 363.769 1395.94 363.425 cv
1405.24 361.701 1415.05 360.282 1425.21 359.163 cv
1427.24 358.939 1429.29 358.728 1431.36 358.52 cv
1440.79 357.59 1450.26 356.286 1460.06 355.668 cv
1462.02 355.545 1463.99 355.449 1465.92 355.387 cv
1507.89 356.091 1549.27 356.655 1590.98 356.836 cv
1593.32 356.816 1595.66 356.795 1598.01 356.776 cv
1600.35 356.756 1602.7 356.738 1605.06 356.721 cv
1607.31 356.692 1609.57 356.663 1611.83 356.633 cv
1624.68 356.464 1637.69 356.292 1650.66 356.292 cv
1685.56 356.292 1720.17 357.536 1750.65 363.425 cv
1751.87 363.706 1750.2 364.129 1747.64 364.539 cv
1745.18 365.116 1742.14 364.928 1739.82 365.61 cv
1739.83 365.61 li
1737.97 365.675 1736.12 365.723 1734.3 365.78 cv
1732.47 365.837 1730.68 365.903 1728.92 366.001 cv
1726.93 366.245 1725.1 366.245 1723.88 366.432 cv
1706.73 372.395 1684.81 373.879 1661.64 373.879 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1782.16 324.802 mo
1752.92 324.098 1724.1 323.535 1695.04 323.354 cv
1693.41 323.374 1691.78 323.394 1690.15 323.413 cv
1688.51 323.433 1686.87 323.451 1685.23 323.469 cv
1683.67 323.497 1682.09 323.527 1680.52 323.557 cv
1671.57 323.726 1662.51 323.897 1653.47 323.897 cv
1629.16 323.897 1605.05 322.654 1583.81 316.765 cv
1582.96 316.483 1584.13 316.06 1585.91 315.65 cv
1587.62 315.073 1589.74 315.261 1591.36 314.58 cv
1591.35 314.58 li
1592.65 314.515 1593.93 314.467 1595.21 314.409 cv
1596.47 314.352 1597.73 314.287 1598.95 314.189 cv
1600.34 313.945 1601.61 313.945 1602.46 313.757 cv
1614.41 307.795 1629.68 306.31 1645.82 306.31 cv
1661.74 306.31 1678.52 307.757 1693.76 307.772 cv
1695.5 307.812 1697.2 307.845 1698.89 307.87 cv
1701.11 307.901 1703.33 307.919 1705.53 307.919 cv
1708.25 307.919 1710.96 307.892 1713.65 307.828 cv
1715.17 307.815 1716.67 307.794 1718.16 307.761 cv
1719.64 307.727 1721.11 307.682 1722.58 307.623 cv
1724.12 307.564 1725.66 307.506 1727.21 307.447 cv
1738.01 307.042 1748.82 306.685 1759.7 306.612 cv
1761.27 306.568 1762.87 306.535 1764.45 306.535 cv
1769.71 306.535 1774.86 306.903 1778.77 308.492 cv
1781.47 309.55 1784.29 310.449 1787.25 311.214 cv
1788.23 311.469 1789.23 311.709 1790.24 311.936 cv
1791.25 312.162 1792.28 312.375 1793.32 312.574 cv
1794.36 312.774 1795.42 312.96 1796.49 313.134 cv
1798.64 313.483 1800.85 313.784 1803.12 314.043 cv
1804.61 314.21 1806.12 314.366 1807.63 314.511 cv
1812.18 314.947 1816.81 315.281 1821.58 315.475 cv
1822.65 315.591 1823.7 315.717 1824.74 315.85 cv
1826.83 316.117 1828.89 316.42 1830.9 316.765 cv
1824.43 318.489 1817.59 319.908 1810.52 321.026 cv
1809.1 321.25 1807.68 321.462 1806.23 321.669 cv
1799.67 322.6 1793.06 323.903 1786.24 324.521 cv
1784.88 324.644 1783.51 324.74 1782.16 324.802 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
949.672 270.194 mo
920.432 269.886 891.612 269.639 862.555 269.56 cv
860.926 269.569 859.295 269.578 857.659 269.586 cv
856.026 269.595 854.387 269.603 852.746 269.61 cv
851.178 269.623 849.606 269.636 848.032 269.649 cv
839.075 269.723 830.01 269.798 820.971 269.798 cv
796.664 269.798 772.557 269.254 751.324 266.678 cv
750.476 266.554 751.641 266.369 753.422 266.19 cv
755.139 265.938 757.258 266.019 758.869 265.722 cv
758.868 265.722 li
760.161 265.693 761.448 265.672 762.719 265.647 cv
763.988 265.622 765.241 265.593 766.465 265.55 cv
767.853 265.444 769.125 265.444 769.973 265.361 cv
781.92 262.753 797.19 262.104 813.331 262.104 cv
829.257 262.104 846.031 262.736 861.275 262.743 cv
863.016 262.761 864.712 262.775 866.405 262.786 cv
868.63 262.8 870.849 262.808 873.059 262.808 cv
875.776 262.808 878.48 262.796 881.168 262.767 cv
882.684 262.762 884.181 262.753 885.675 262.738 cv
887.15 262.724 888.623 262.704 890.093 262.678 cv
891.635 262.652 893.177 262.626 894.721 262.601 cv
905.521 262.424 916.335 262.268 927.214 262.236 cv
928.787 262.217 930.382 262.202 931.969 262.202 cv
937.223 262.202 942.38 262.363 946.286 263.059 cv
948.988 263.521 951.808 263.914 954.759 264.249 cv
955.742 264.361 956.74 264.466 957.753 264.565 cv
958.765 264.664 959.793 264.757 960.835 264.844 cv
961.877 264.932 962.935 265.013 964.007 265.089 cv
966.152 265.242 968.361 265.373 970.633 265.487 cv
972.128 265.56 973.632 265.628 975.147 265.691 cv
979.689 265.882 984.326 266.028 989.094 266.113 cv
990.16 266.164 991.214 266.219 992.259 266.277 cv
994.349 266.394 996.404 266.527 998.417 266.678 cv
991.942 267.432 985.107 268.053 978.03 268.542 cv
976.615 268.64 975.19 268.732 973.746 268.823 cv
967.18 269.231 960.578 269.801 953.756 270.071 cv
952.392 270.124 951.018 270.167 949.672 270.194 cv
level3{
gsave
clp
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.13124e-5 -487.57 487.57 -2.13124e-5 1000 462.412 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
.000488281 678.967 mo
.000488281 478.351 li
33.5977 448.957 li
66.1763 439.159 li
77.3901 428.185 li
117.23 455.779 li
127.261 448.14 li
146.604 471.819 li
226.015 502.03 li
285.234 480.923 li
298.298 479.984 li
343.093 454.672 li
357.346 456.305 li
380.714 440.53 li
392.485 450.697 li
404.178 452.223 li
414.359 461.205 li
421.485 460.388 li
481.552 496.314 li
524.68 468.125 li
533.734 473.208 li
569.952 449.97 li
585.345 457.232 li
597.116 453.601 li
619.433 474.293 li
644.445 457.122 li
653.607 463.654 li
661.752 462.837 li
676.006 484.067 li
701.32 462.313 li
716.729 449.773 li
727.5 451.422 li
742.181 435.893 li
764.578 465.287 li
798.175 470.186 li
819.555 483.25 li
829.735 471.002 li
842.97 471.002 li
870.554 454.326 li
906.091 425.278 li
920.344 428.544 li
945.705 411.481 li
961.098 424.552 li
981.017 441.981 li
1004.85 426.911 li
1021.76 423.1 li
1036.41 408.131 li
1053.71 403.232 li
1065.93 375.471 li
1078.15 395.067 li
1091.48 397.684 li
1106.65 412.213 li
1115.82 395.067 li
1122.94 393.434 li
1134.94 372.268 li
1152.15 392.6 li
1179.96 400.782 li
1184.74 407.85 li
1197.27 391.801 li
1212.54 387.719 li
1228.21 371.542 li
1236.97 383.636 li
1247.15 384.452 li
1253.59 391.325 li
1272.61 395.067 li
1304.88 432.812 li
1332.67 404.865 li
1342.16 402.74 li
1359.49 386.791 li
1371.36 399.966 li
1402.04 416.563 li
1418.19 441.608 li
1434.64 427.457 li
1448.22 443.433 li
1462.99 443.241 li
1469.05 459.386 li
1487.42 446.507 li
1499.64 446.507 li
1509.82 432.626 li
1523.05 447.324 li
1534.25 450.59 li
1547.49 467.736 li
1569.54 454.923 li
1593.3 453.04 li
1605.52 441.608 li
1614.68 438.342 li
1633.01 426.094 li
1655.4 447.324 li
1677.8 451.406 li
1716.49 477.534 li
1747.03 484.067 li
1768.89 470.656 li
1785.72 477.534 li
1795.9 469.37 li
1817.1 470.338 li
1868.18 439.975 li
1881.92 444.114 li
1901.78 426.094 li
1910.94 422.829 li
1923.16 408.948 li
1955.74 435.076 li
1980.17 440.792 li
2000 478.351 li
2000 678.967 li
.000488281 678.967 li
cp
.713726 .823529 .815686 rgb
f
0 678.967 mo
0 480.113 li
14.1958 478.956 li
37.5005 452.334 li
52.2188 461.593 li
69.1318 427.638 li
87.7886 460.437 li
98.5688 462.363 li
120.905 497.475 li
147.889 463.909 li
163.834 461.593 li
174.873 439.602 li
185.912 437.287 li
201.106 410.613 li
217.802 440.76 li
231.036 443.843 li
258.278 484.743 li
287.715 466.223 li
303.66 484.743 li
318.12 487.826 li
334.324 499.791 li
357.628 474.326 li
383.385 469.696 li
397.845 448.473 li
417.729 441.917 li
433.415 409.119 li
469.243 467.381 li
481.509 460.437 li
514.625 499.791 li
527.038 478.296 li
540.383 477.799 li
560.976 445 li
574.726 463.909 li
586.733 465.834 li
607.584 485.511 li
633.6 451.177 li
645.865 447.705 li
671.623 419.925 li
690.021 440.76 li
700.801 442.685 li
728.043 469.696 li
741.296 465.445 li
782.012 500.948 li
801.378 475.094 li
824.682 478.566 li
861.479 439.212 li
872.776 438.445 li
895.637 407.186 li
912.025 445.39 li
918.158 434.972 li
952.501 481.27 li
965.993 472.011 li
1012.6 494.002 li
1033.45 467.381 li
1050.62 465.066 li
1072.44 426.481 li
1082.51 423.397 li
1100.65 395.229 li
1120.54 429.183 li
1132.81 430.34 li
1173.29 458.12 li
1202.72 407.192 li
1214.99 407.192 li
1237.07 372.468 li
1267.73 367.838 li
1301.46 326.649 li
1330.28 367.838 li
1340.09 368.995 li
1355.78 406.805 li
1373.21 395.617 li
1401.16 439.213 li
1425.95 421.081 li
1449 442.686 li
1469.41 445.739 li
1485.79 458.89 li
1518.76 432.938 li
1536.08 455.418 li
1565.52 467.328 li
1607.48 521.781 li
1620.97 509.048 li
1638.14 520.623 li
1657.51 488.984 li
1675.91 493.614 li
1708.06 452.333 li
1736.01 483.197 li
1755.89 482.426 li
1781.65 522.938 li
1795.33 481.722 li
1809.6 480.882 li
1830.45 455.418 li
1877.32 512.521 li
1911.4 480.882 li
1928.84 481.269 li
1961.69 438.056 li
1986.48 470.852 li
2000 480.113 li
2000 678.967 li
0 678.967 li
cp
.580392 .678431 .686275 rgb
f
0 678.967 mo
0 512.525 li
38.2529 492.827 li
54.625 491.087 li
75.9805 474.754 li
124.173 503.722 li
186.604 451.133 li
206.836 474.255 li
227.067 471.365 li
254.523 494.486 li
294.619 495.171 li
305.961 506.445 li
327.161 490.066 li
352.584 511.504 li
374.956 490.066 li
391.228 488.025 li
416.65 466.588 li
440.719 484.656 li
465.138 489.195 li
499.021 513.545 li
531.563 490.066 li
555.969 504.358 li
574.273 485.983 li
597.18 480.12 li
613.934 453.317 li
642.407 500.275 li
653.594 480.879 li
673.932 497.212 li
685.16 472.81 li
693.83 475.7 li
712.616 448.243 li
729.863 474.754 li
744.1 477.817 li
774.445 512.804 li
784.777 492.108 li
797.997 492.108 li
810.2 472.712 li
835.623 503.337 li
868.165 476.796 li
886.594 494.646 li
902.74 495.171 li
952.569 531.92 li
984.094 499.254 li
1015.92 522.792 li
1044.86 496.464 li
1055.72 495.556 li
1078.67 462.504 li
1092.9 480.88 li
1109.17 478.838 li
1123.55 494.647 li
1146.14 451.133 li
1157.7 454.023 li
1172.15 425.122 li
1190.53 465.567 li
1204.94 469.232 li
1222.05 489.046 li
1235.27 468.63 li
1254.59 467.609 li
1291.2 438.005 li
1323.89 474.255 li
1335.45 475.7 li
1366.83 520.982 li
1411.2 480.88 li
1438.66 508.442 li
1459 510.484 li
1478.98 540.048 li
1496.62 538.046 li
1500.69 552.337 li
1521.03 511.505 li
1535.27 523.754 li
1571.87 478.838 li
1595.65 505.548 li
1614.58 504.359 li
1644.48 534.601 li
1655.26 511.505 li
1672.55 512.525 li
1723.93 484.354 li
1746.31 504.361 li
1761.75 491.596 li
1780.54 497.376 li
1800.77 523.388 li
1813.9 484.963 li
1826.27 491.022 li
1846.44 461.484 li
1873.3 505.549 li
1889.15 508.442 li
1899.53 526.43 li
1915.59 508.442 li
1942.03 534.984 li
1961.36 515.588 li
1975.59 515.588 li
1992.36 487.004 li
2000 512.525 li
2000 678.967 li
0 678.967 li
cp
.352941 .447059 .529412 rgb
f
567.688 597.083 mo
568.291 598.324 569.137 597.978 569.962 597.056 cv
569.18 597.202 568.418 597.229 567.688 597.083 cv
cp
.196078 .258824 .321569 rgb
f
0 678.967 mo
0 556.625 li
14.6167 553.734 li
39.2363 533.124 li
109.846 568.186 li
132.605 549.465 li
152.548 547.65 li
167.561 524.833 li
195.153 528.584 li
220.947 549.399 li
251.17 555.579 li
319.579 520.498 li
336.894 540.729 li
375.333 547.954 li
401.305 521.942 li
443.148 556.625 li
471.633 532.215 li
484.991 532.058 li
502.454 520.414 li
566.815 549.465 li
594.01 529.492 li
609.078 533.503 li
626.392 519.052 li
648.035 537.838 li
658.368 534.939 li
679.778 552.29 li
719.102 534.939 li
749.017 553.096 li
788.902 534.031 li
831.279 568.186 li
850.544 553.096 li
866.86 562.175 li
884.665 549.399 li
900.536 550.844 li
916.408 537.838 li
952.071 567.622 li
988.551 546.509 li
1004.42 560.96 li
1024.62 560.96 li
1040.49 576.856 li
1050.59 555.18 li
1070.79 553.734 li
1088.11 540.729 li
1122.74 566.74 li
1160.56 539.478 li
1173.24 556.625 li
1189.57 556.728 li
1203.54 575.411 li
1216.52 540.729 li
1239.61 539.284 li
1267.02 553.734 li
1281.45 545.064 li
1314.64 572.521 li
1323.73 562.174 li
1372.68 576.701 li
1386.78 559.515 li
1401.21 563.85 li
1413.47 551.28 li
1446.11 557.636 li
1464.7 575.411 li
1487.78 560.96 li
1525.88 556.727 li
1539.73 572.521 li
1549.45 560.358 li
1578.46 582.146 li
1598.88 566.74 li
1613.31 569.63 li
1622.87 554.002 li
1667.29 579.423 li
1705.36 558.542 li
1730.75 573.068 li
1746.06 559.515 li
1767.7 559.515 li
1789.34 575.411 li
1796.56 559.515 li
1810.99 556.625 li
1821.08 566.74 li
1832.63 547.954 li
1857.16 537.838 li
1907.66 573.966 li
1932.19 556.625 li
1949.45 569.637 li
1968.5 557.362 li
1985.57 565.295 li
2000 556.625 li
2000 678.967 li
0 678.967 li
cp
f
1999.89 591.926 mo
1997.63 590.697 1994.26 590.217 1990.66 590.14 cv
1984.9 590.56 li
1983.94 590.072 1983.09 589.494 1982.65 588.843 cv
1981.79 587.551 1981.2 584.617 1980.54 583.185 cv
1980.49 583.092 1980.43 583.001 1980.39 582.89 cv
1980.06 582.301 1979.7 582.133 1979.28 582.771 cv
1977.93 584.794 1973.88 588.844 1972.53 586.819 cv
1971.18 584.794 1967.81 581.422 1967.13 583.446 cv
1966.46 585.47 1959.04 591.542 1959.04 591.542 cv
1952.29 584.12 li
1952.29 584.12 1946.89 588.168 1944.87 587.493 cv
1943.72 587.109 1941.9 584.313 1940.18 582.479 cv
1938.89 581.097 1937.64 580.261 1936.77 581.421 cv
1934.75 584.12 1927.33 587.493 1927.33 587.493 cv
1927.33 587.493 1922.61 577.374 1919.91 580.072 cv
1917.21 582.771 1912.48 590.868 1909.11 590.192 cv
1905.74 589.517 1901.69 594.24 1899.67 592.216 cv
1897.64 590.192 1892.92 580.072 1890.9 583.446 cv
1888.87 586.819 1884.82 587.493 1881.45 585.47 cv
1878.08 583.446 1873.36 580.747 1873.36 580.747 cv
1873.36 580.747 1867.28 588.843 1865.26 590.192 cv
1863.23 591.542 1861.21 581.421 1859.86 584.12 cv
1858.51 586.819 1849.07 590.192 1849.07 590.192 cv
1849.07 590.192 1841.65 578.723 1838.95 578.723 cv
1836.25 578.723 1833.55 586.819 1829.5 585.47 cv
1825.45 584.12 1820.73 581.421 1820.73 581.421 cv
1820.73 581.421 1816.01 584.795 1813.98 586.819 cv
1811.96 588.843 1808.59 582.096 1808.59 582.096 cv
1802.51 589.517 li
1792.39 584.12 li
1792.39 584.12 1784.3 589.518 1782.27 590.192 cv
1780.25 590.867 1776.2 584.794 1773.5 587.493 cv
1770.81 590.192 1765.41 591.542 1765.41 591.542 cv
1765.41 591.542 1759.34 584.121 1757.31 586.819 cv
1755.29 589.517 1749.89 596.939 1747.87 595.59 cv
1745.84 594.24 1743.14 599.638 1740.44 596.939 cv
1737.75 594.24 1736.4 585.47 1735.05 587.493 cv
1733.7 589.517 1730.33 601.662 1728.3 601.662 cv
1726.28 601.662 1722.23 592.891 1718.18 592.891 cv
1714.13 592.891 1712.78 598.963 1712.78 598.963 cv
1712.78 598.963 1703.34 593.565 1702.66 595.59 cv
1701.99 597.613 1695.24 601.662 1695.24 601.662 cv
1695.24 601.662 1685.8 596.264 1683.77 597.613 cv
1681.75 598.963 1675.68 605.709 1675.68 605.709 cv
1675.68 605.709 1665.56 598.963 1663.53 598.963 cv
1661.51 598.963 1658.81 602.336 1658.81 602.336 cv
1652.06 598.289 li
1652.06 598.289 1649.36 603.011 1647.34 603.011 cv
1645.32 603.011 1639.25 598.964 1637.22 598.289 cv
1635.2 597.613 1631.15 601.662 1631.15 601.662 cv
1627.1 607.733 li
1627.1 607.733 1623.05 600.313 1621.03 600.313 cv
1620.31 600.313 1618.92 600.059 1617.43 599.731 cv
1615.47 599.305 1613.33 598.753 1612.26 598.471 cv
1611.84 598.358 1611.58 598.289 1611.58 598.289 cv
1611.53 598.338 li
1609.65 597.996 li
1606.95 588.551 li
1598.18 602.044 li
1598.18 602.044 1594.81 597.321 1592.11 599.345 cv
1589.41 601.369 1584.01 602.044 1584.01 602.044 cv
1584.01 602.044 1579.96 597.996 1577.94 597.996 cv
1575.92 597.996 1571.87 600.02 1571.87 600.02 cv
1571.87 600.02 1565.8 596.647 1562.42 593.273 cv
1559.05 589.9 1557.03 593.948 1555 595.297 cv
1552.98 596.647 1545.56 588.551 1544.21 586.527 cv
1542.86 584.503 1539.49 591.924 1539.49 591.924 cv
1539.49 591.924 1534.09 586.527 1532.74 585.177 cv
1531.39 583.828 1528.02 589.225 1528.02 589.225 cv
1528.02 589.225 1524.64 585.852 1521.94 581.129 cv
1519.24 576.406 1517.22 581.129 1517.22 581.129 cv
1511.82 573.033 li
1511.82 573.033 1508.45 577.756 1507.1 575.732 cv
1505.75 573.708 1504.4 569.659 1501.7 570.334 cv
1499 571.01 1495.54 566.714 1495.54 566.714 cv
1490.23 562.238 li
1490.23 562.238 1486.86 570.334 1484.84 567.636 cv
1483.86 566.332 1482.41 568.178 1481.17 570.434 cv
1479.85 572.849 1478.76 575.732 1478.76 575.732 cv
1478.76 575.732 1470.67 577.756 1469.32 577.756 cv
1467.97 577.756 1466.62 583.153 1463.92 585.177 cv
1461.22 587.202 1459.2 580.455 1457.17 579.105 cv
1455.15 577.756 1449.08 585.852 1449.08 585.852 cv
1449.08 585.852 1447.05 580.455 1445.03 581.804 cv
1443.01 583.153 1436.26 587.201 1434.24 584.502 cv
1432.21 581.803 1428.17 583.153 1424.12 584.502 cv
1420.07 585.852 1416.02 589.225 1413.32 587.201 cv
1410.62 585.177 1409.27 582.479 1406.58 583.828 cv
1403.88 585.177 1401.85 588.551 1399.15 587.201 cv
1396.45 585.852 1391.73 588.551 1389.71 590.575 cv
1387.69 592.599 1385.66 591.924 1382.96 591.924 cv
1380.26 591.924 1377.56 596.647 1375.54 597.996 cv
1373.52 599.344 1370.14 593.273 1368.12 591.924 cv
1366.09 590.575 1364.07 597.996 1360.02 598.671 cv
1355.98 599.346 1352.6 596.647 1350.58 594.622 cv
1348.55 592.598 1347.88 600.694 1345.18 600.02 cv
1342.48 599.346 1337.76 594.622 1337.76 594.622 cv
1337.76 594.622 1332.36 598.671 1330.34 600.02 cv
1328.31 601.37 1323.59 598.671 1322.24 596.647 cv
1320.89 594.623 1314.15 599.345 1314.15 599.345 cv
1314.15 599.345 1306.72 596.647 1305.38 594.622 cv
1304.03 592.598 1297.95 597.996 1295.25 597.996 cv
1292.56 597.996 1291.21 592.599 1291.21 592.599 cv
1282.44 595.972 li
1282.44 595.972 1276.36 590.575 1274.34 587.875 cv
1272.32 585.177 1268.94 595.297 1268.94 595.297 cv
1268.94 595.297 1262.87 591.924 1260.85 589.9 cv
1258.82 587.876 1256.8 593.948 1256.8 593.948 cv
1256.8 593.948 1250.73 591.924 1248.7 589.9 cv
1246.68 587.876 1241.28 591.924 1241.28 591.924 cv
1241.28 591.924 1233.86 586.527 1231.84 584.502 cv
1229.81 582.478 1226.44 589.225 1226.44 589.225 cv
1226.44 589.225 1219.69 583.153 1218.34 580.455 cv
1216.99 577.756 1212.27 587.875 1212.27 587.875 cv
1212.27 587.875 1208.9 582.479 1207.55 580.455 cv
1206.2 578.431 1204.85 584.502 1203.5 587.201 cv
1202.15 589.9 1196.75 591.25 1194.73 589.227 cv
1192.7 587.203 1189.33 595.974 1189.33 595.974 cv
1189.33 595.974 1182.58 597.322 1181.24 595.298 cv
1179.89 593.274 1175.84 600.696 1175.84 600.696 cv
1175.84 600.696 1170.44 600.021 1167.74 597.997 cv
1165.04 595.974 1161 605.418 1161 605.418 cv
1161 605.418 1153.57 600.696 1151.55 597.997 cv
1149.53 595.298 1142.1 599.347 1142.1 599.347 cv
1142.1 599.347 1138.73 593.274 1136.03 589.901 cv
1133.33 586.528 1127.94 593.949 1127.94 593.949 cv
1127.94 593.949 1122.54 587.877 1120.51 584.504 cv
1118.49 581.131 1112.42 587.202 1112.42 587.202 cv
1112.42 587.202 1103.65 581.131 1102.97 577.757 cv
1102.3 574.384 1096.23 583.829 1096.23 583.829 cv
1096.23 583.829 1092.18 577.757 1090.16 575.059 cv
1088.13 572.359 1080.03 577.082 1080.03 577.082 cv
1080.03 577.082 1070.59 568.312 1069.24 565.613 cv
1067.89 562.914 1063.84 577.082 1063.84 577.082 cv
1063.84 577.082 1061.14 577.757 1059.12 575.732 cv
1057.09 573.708 1051.7 583.829 1051.7 583.829 cv
1051.7 583.829 1046.98 581.805 1044.28 579.107 cv
1041.58 576.409 1036.86 582.48 1036.86 582.48 cv
1028.08 574.384 li
1019.31 583.154 li
1019.31 583.154 1017.96 579.107 1015.94 578.432 cv
1013.92 577.756 1010.54 583.829 1010.54 583.829 cv
1003.12 578.432 li
997.724 583.829 li
991.652 578.432 li
986.255 584.504 li
986.255 584.504 982.207 583.154 980.183 582.48 cv
978.159 581.806 972.762 589.901 972.762 589.901 cv
972.762 589.901 969.389 587.202 967.365 584.504 cv
965.341 581.806 960.618 587.877 960.618 587.877 cv
960.618 587.877 957.244 584.504 955.221 583.829 cv
953.196 583.153 949.149 589.227 949.149 589.227 cv
949.149 589.227 946.45 586.528 944.426 587.202 cv
942.402 587.876 939.028 592.599 939.028 592.599 cv
935.654 587.877 li
928.907 589.901 li
924.859 582.479 li
920.137 588.552 li
920.137 588.552 917.438 585.178 916.089 582.479 cv
914.74 579.78 910.691 585.853 910.691 585.853 cv
907.318 580.456 li
901.245 587.202 li
901.245 587.202 897.873 587.877 895.85 585.853 cv
893.825 583.828 891.126 592.599 891.126 592.599 cv
891.126 592.599 885.729 587.877 883.705 584.504 cv
881.681 581.131 881.681 587.877 879.657 589.226 cv
877.634 590.575 876.283 587.202 873.584 584.504 cv
870.885 581.806 867.513 589.226 867.513 589.226 cv
867.513 589.226 860.766 584.504 858.742 581.13 cv
856.718 577.756 855.368 582.479 851.995 584.504 cv
848.623 586.528 847.272 582.479 845.924 579.781 cv
844.575 577.083 843.225 582.479 843.225 582.479 cv
843.225 582.479 839.178 580.456 836.479 578.432 cv
833.779 576.408 832.429 579.781 832.429 579.781 cv
832.429 579.781 829.057 574.383 827.033 571.685 cv
825.009 568.987 821.635 573.709 821.635 573.709 cv
821.635 573.709 820.286 569.661 817.587 568.312 cv
814.888 566.962 810.84 573.709 810.84 573.709 cv
810.84 573.709 805.442 567.637 804.094 566.962 cv
802.745 566.288 800.046 573.709 800.046 573.709 cv
800.046 573.709 795.999 572.359 793.973 569.661 cv
791.947 566.963 788.577 571.01 788.577 571.01 cv
788.577 571.01 783.854 562.914 781.83 561.565 cv
779.806 560.216 776.432 565.613 776.432 565.613 cv
776.432 565.613 771.034 560.89 769.686 558.191 cv
768.337 555.494 765.638 563.589 765.638 563.589 cv
765.638 563.589 761.59 559.541 759.566 558.866 cv
757.542 558.191 755.517 564.263 753.493 562.914 cv
751.469 561.564 749.445 556.842 748.097 558.866 cv
746.748 560.89 744.047 566.962 742.024 563.589 cv
740 560.216 735.952 566.962 735.952 566.962 cv
735.952 566.962 735.952 566.962 733.253 565.613 cv
730.554 564.263 727.855 571.01 727.855 571.01 cv
721.108 565.613 li
721.108 565.613 716.388 568.986 714.362 570.335 cv
712.336 571.685 708.289 564.938 706.264 563.589 cv
704.24 562.239 698.843 568.986 698.843 568.986 cv
693.446 563.589 li
690.073 567.637 li
690.073 567.637 686.699 565.613 685.35 562.915 cv
684 560.216 679.953 566.962 679.953 566.962 cv
679.953 566.962 673.88 563.589 673.206 561.565 cv
672.532 559.541 669.158 565.613 669.158 565.613 cv
669.158 565.613 663.085 562.239 661.737 559.541 cv
660.388 556.843 654.315 561.565 654.315 561.565 cv
654.315 561.565 653.641 556.842 650.941 556.168 cv
648.243 555.494 644.869 563.589 644.869 563.589 cv
644.869 563.589 640.822 558.866 638.798 557.517 cv
636.774 556.167 632.051 562.915 632.051 562.915 cv
632.051 562.915 628.678 559.541 626.653 558.191 cv
624.628 556.842 619.907 561.565 619.907 561.565 cv
619.907 561.565 617.208 554.143 614.51 554.143 cv
611.811 554.143 609.112 559.541 609.112 559.541 cv
609.112 559.541 605.064 555.493 603.04 554.143 cv
601.016 552.794 600.342 556.842 598.317 555.493 cv
596.292 554.143 596.293 550.77 596.293 550.77 cv
596.293 550.77 592.92 554.143 590.896 554.818 cv
588.873 555.494 583.475 545.373 582.126 543.349 cv
580.777 541.325 579.427 549.421 577.403 548.072 cv
576.789 547.663 576.114 547.191 575.471 546.733 cv
573.991 545.681 572.68 544.698 572.68 544.698 cv
572.68 544.698 571.352 547.885 569.962 549.438 cv
569.137 550.359 568.291 550.705 567.688 549.465 cv
566.068 546.136 563.234 544.698 563.234 544.698 cv
563.234 544.698 562.379 545.895 561.272 546.997 cv
560.18 548.085 558.843 549.082 557.837 548.746 cv
555.813 548.071 549.741 543.349 549.741 543.349 cv
544.344 548.746 li
544.344 548.746 539.621 543.349 537.598 544.023 cv
535.574 544.698 537.598 544.023 534.898 546.048 cv
532.2 548.073 530.851 547.396 528.826 544.698 cv
526.802 542 524.779 550.096 524.779 550.096 cv
524.779 550.096 518.706 546.722 516.683 544.698 cv
514.659 542.675 512.635 548.746 512.635 548.746 cv
512.635 548.746 510.61 545.373 509.936 542.675 cv
509.262 539.977 504.539 550.096 504.539 550.096 cv
501.166 546.048 li
498.466 554.143 li
495.093 553.469 li
493.744 555.493 490.37 561.565 490.37 561.565 cv
490.37 561.565 486.997 558.191 485.647 560.216 cv
484.298 562.239 480.925 566.962 480.925 566.962 cv
480.925 566.962 476.877 564.938 474.853 562.239 cv
472.829 559.541 467.432 566.288 467.432 566.288 cv
467.432 566.288 464.058 562.239 462.709 560.216 cv
461.361 558.191 457.986 564.264 457.986 564.264 cv
453.938 558.866 li
453.938 558.866 449.891 564.938 447.867 564.938 cv
445.843 564.938 441.794 556.842 441.794 556.842 cv
437.747 563.589 li
433.698 560.216 li
428.301 562.239 li
428.301 562.239 426.277 557.517 424.928 554.818 cv
423.578 552.12 416.832 559.541 416.832 559.541 cv
412.784 554.818 li
410.084 558.867 li
406.037 550.771 li
398.615 556.169 li
398.615 556.169 397.266 552.12 393.893 552.12 cv
390.52 552.12 387.82 556.169 387.82 556.169 cv
387.82 556.169 383.098 551.446 381.074 550.097 cv
379.05 548.747 375.001 554.144 375.001 554.144 cv
370.954 550.771 li
365.556 562.24 li
365.556 562.24 361.508 556.169 359.484 558.192 cv
357.46 560.216 352.738 565.613 352.738 565.613 cv
347.34 558.192 li
345.316 564.264 li
341.269 563.59 li
338.57 564.939 335.871 568.313 335.871 568.313 cv
328.449 561.566 li
325.75 563.59 321.703 570.336 321.703 570.336 cv
316.306 565.613 li
309.559 572.36 li
309.559 572.36 305.511 567.637 302.813 567.637 cv
300.114 567.637 298.089 573.035 298.089 573.035 cv
298.089 573.035 294.041 566.963 292.692 566.963 cv
291.344 566.963 288.644 570.336 288.644 570.336 cv
285.271 564.939 li
281.223 568.313 li
281.223 568.313 278.524 563.59 277.174 564.264 cv
275.825 564.938 269.753 572.36 267.729 572.36 cv
265.704 572.36 263.681 566.289 261.657 566.963 cv
259.634 567.637 250.862 575.733 250.862 575.733 cv
243.441 571.012 li
243.441 571.012 240.742 581.806 238.718 582.48 cv
236.695 583.154 228.599 577.758 228.599 577.758 cv
225.899 580.457 215.78 584.505 215.78 584.505 cv
215.78 584.505 211.057 580.456 210.382 580.456 cv
209.708 580.456 206.334 584.505 206.334 584.505 cv
203.635 583.831 200.263 579.107 200.263 579.107 cv
200.263 579.107 196.889 587.878 193.516 587.878 cv
190.143 587.878 187.443 581.131 187.443 581.131 cv
187.443 581.131 186.094 586.528 182.046 585.854 cv
177.999 585.178 175.974 579.107 175.974 579.107 cv
175.974 579.107 172.601 585.854 169.903 584.505 cv
167.205 583.156 164.505 578.433 163.155 573.709 cv
161.806 568.987 161.131 571.012 159.782 575.059 cv
158.433 579.107 158.433 581.131 155.734 584.505 cv
153.035 587.878 149.662 581.806 149.662 581.806 cv
147.637 585.854 141.566 587.203 141.566 587.203 cv
141.566 587.203 138.868 585.179 136.844 582.48 cv
134.82 579.781 130.771 577.758 130.771 577.758 cv
130.771 577.758 128.072 581.806 124.699 581.806 cv
121.326 581.806 116.603 573.709 116.603 573.709 cv
111.881 577.083 li
107.158 573.035 li
107.158 573.035 103.11 577.758 99.7363 577.758 cv
96.3633 577.758 95.689 575.059 95.689 575.059 cv
95.689 575.059 95.689 575.059 93.665 575.059 cv
91.6411 575.059 88.2671 569.662 88.2671 569.662 cv
88.2671 569.662 85.5688 571.012 83.5444 573.035 cv
81.5195 575.059 76.123 564.939 76.123 564.939 cv
76.123 564.939 72.0757 568.987 68.7021 570.336 cv
65.3291 571.686 61.2803 566.963 61.2803 566.963 cv
61.2803 566.963 55.8833 573.709 53.1846 575.733 cv
50.4854 577.757 45.0884 573.035 45.0884 573.035 cv
39.6909 581.806 li
34.2939 578.433 li
34.2939 578.433 28.897 588.552 26.8721 586.528 cv
24.8477 584.505 23.499 588.552 20.8008 591.251 cv
18.1162 593.937 7.41748 595.948 .000488281 591.981 cv
.000488281 678.967 li
1603.91 678.967 li
1998.89 678.967 li
2000 678.967 li
2000 591.981 li
1999.89 591.926 li
cp
.105882 .141176 .129412 rgb
f
2000 610.759 mo
2000 678.967 li
0 678.967 li
0 610.759 li
86.7051 610.759 234.104 596.309 317.919 600.644 cv
401.734 604.979 742.774 628.1 881.503 628.1 cv
1020.23 628.1 1091.04 619.43 1213.87 628.1 cv
1336.71 636.771 1433.53 604.978 1567.92 616.539 cv
1702.31 628.1 1790.46 626.655 1851.16 619.43 cv
1911.85 612.204 1986.99 610.759 2000 610.759 cv
cp
.207843 .388235 .141176 rgb
f
456.416 667.362 mo
439.459 659.849 li
437.436 658.499 432.039 654.45 432.039 654.45 cv
432.039 654.45 427.316 659.174 424.617 659.849 cv
421.918 660.522 421.243 652.426 419.219 654.45 cv
417.195 656.476 413.821 659.174 409.773 658.499 cv
405.726 657.823 403.702 650.403 401.678 651.752 cv
399.654 653.102 396.28 659.173 394.257 657.823 cv
392.232 656.476 389.532 651.752 386.835 651.752 cv
384.138 651.752 382.111 652.427 380.088 650.403 cv
378.064 648.379 373.343 645.68 370.644 647.029 cv
367.945 648.379 365.921 645.005 363.222 643.656 cv
360.523 642.307 359.175 645.005 356.476 647.029 cv
353.776 649.053 349.73 645.68 345.682 644.33 cv
341.632 642.981 337.584 641.631 335.561 644.33 cv
333.536 647.029 326.79 642.981 324.767 641.632 cv
322.742 640.283 320.719 645.68 320.719 645.68 cv
320.719 645.68 314.646 637.584 312.622 638.933 cv
310.598 640.283 308.574 647.03 305.875 645.005 cv
303.176 642.981 301.825 637.584 300.477 637.584 cv
299.128 637.584 291.033 635.56 291.033 635.56 cv
291.033 635.56 289.95 632.677 288.625 630.262 cv
287.387 628.006 285.938 626.16 284.96 627.464 cv
282.937 630.163 279.563 622.066 279.563 622.066 cv
274.253 626.542 li
274.253 626.542 270.793 630.838 268.094 630.163 cv
265.396 629.487 264.045 633.536 262.696 635.56 cv
261.348 637.584 257.974 632.861 257.974 632.861 cv
252.577 640.957 li
252.577 640.957 250.554 636.234 247.854 640.957 cv
245.155 645.68 241.781 649.053 241.781 649.053 cv
241.781 649.053 238.407 643.656 237.059 645.005 cv
235.71 646.355 230.312 651.752 230.312 651.752 cv
230.312 651.752 226.938 644.331 225.589 646.355 cv
224.24 648.379 216.818 656.476 214.795 655.126 cv
212.771 653.776 210.745 649.729 207.373 653.102 cv
204 656.476 197.929 659.849 197.929 659.849 cv
197.929 659.849 193.88 657.823 191.855 657.823 cv
190.799 657.823 189.195 658.926 187.899 659.98 cv
196.106 664.3 232.009 659.52 269.605 663.279 cv
310.438 667.363 347.188 666.342 381.896 665.321 cv
409.465 664.51 448.907 666.105 456.416 667.362 cv
cp
.101961 .278431 .0980392 rgb
f
174.319 634.567 mo
164.693 632.963 158.497 626.375 157.371 628.064 cv
156.022 630.088 149.276 628.74 149.276 628.74 cv
149.276 628.74 145.902 619.969 143.878 621.993 cv
141.854 624.017 136.458 622.667 135.107 619.967 cv
133.757 617.268 132.407 611.197 131.059 613.221 cv
129.71 615.245 126.336 620.642 126.336 620.642 cv
126.336 620.642 121.612 610.522 120.264 613.221 cv
118.915 615.919 112.169 621.991 112.169 621.991 cv
112.169 621.991 108.795 615.244 106.771 617.268 cv
104.747 619.293 97.3252 624.69 97.3252 624.69 cv
97.3252 624.69 91.9268 620.643 89.9033 622.667 cv
87.8799 624.69 81.8076 626.714 81.8076 626.714 cv
81.8076 626.714 79.7842 620.643 77.7607 622.667 cv
75.7363 624.69 69.6631 628.064 69.6631 628.064 cv
69.6631 628.064 66.291 617.943 64.2676 620.642 cv
62.2432 623.341 56.1699 628.738 56.1699 628.738 cv
47.3994 625.365 li
47.3994 625.365 46.0508 630.761 43.3516 630.761 cv
40.6533 630.761 34.5801 625.364 33.2314 627.388 cv
31.8828 629.414 24.4609 632.111 24.4609 632.111 cv
24.4609 632.111 17.7158 627.389 16.3652 629.414 cv
15.4844 630.734 7.92725 634.787 5.86084 635.37 cv
18.1816 635.626 52.9751 639.6 87.6831 638.579 cv
122.391 637.558 157.17 634.311 174.319 634.567 cv
cp
f
948.883 669.487 mo
940.059 667.882 928.41 659.863 927.355 658.282 cv
926.005 656.258 922.176 658.21 919.477 660.908 cv
916.777 663.607 911.721 654.517 909.697 655.867 cv
907.673 657.215 902.275 649.794 900.251 647.096 cv
898.228 644.398 892.156 651.819 892.156 651.819 cv
892.156 651.819 886.758 650.469 884.059 647.77 cv
881.36 645.071 877.313 651.143 875.289 650.469 cv
873.265 649.795 865.17 644.397 865.17 644.397 cv
855.049 649.794 li
848.978 642.373 li
848.978 642.373 845.604 649.12 843.579 647.096 cv
841.556 645.072 836.833 641.698 836.833 641.698 cv
836.833 641.698 832.109 644.397 828.063 645.747 cv
824.015 647.096 821.315 639 818.616 639 cv
815.918 639 808.497 650.469 808.497 650.469 cv
808.497 650.469 799.052 647.096 797.701 644.397 cv
796.352 641.698 794.329 651.819 792.305 650.469 cv
790.281 649.12 784.208 641.024 784.208 641.024 cv
784.208 641.024 779.485 643.723 776.113 645.747 cv
772.74 647.77 768.691 647.096 766.667 643.723 cv
764.644 640.349 759.921 650.469 757.896 652.493 cv
755.873 654.517 751.824 649.794 748.451 650.469 cv
745.079 651.145 740.355 643.047 737.657 640.349 cv
734.958 637.651 730.235 647.77 730.235 647.77 cv
730.235 647.77 722.813 644.397 720.789 641.698 cv
719.92 640.538 718.676 641.374 717.38 642.755 cv
715.66 644.589 713.848 647.386 712.694 647.77 cv
710.67 648.445 705.272 644.397 705.272 644.397 cv
698.525 651.819 li
698.525 651.819 691.104 645.747 690.429 643.723 cv
689.754 641.699 686.381 645.071 685.032 647.096 cv
683.684 649.121 679.203 651.902 677.854 649.878 cv
677.429 649.241 677.072 649.408 676.738 649.997 cv
676.703 650.108 676.646 650.199 676.591 650.292 cv
675.929 651.725 675.341 654.658 674.48 655.95 cv
674.045 656.601 672.862 659.225 671.905 659.713 cv
665.513 657.582 li
660.097 667.08 636.673 669.487 639.24 669.487 cv
655.573 669.487 757.902 675.649 799.756 674.628 cv
841.609 673.607 934.592 667.445 948.883 669.487 cv
cp
f
607.814 642.612 mo
599.118 630.817 li
599.118 630.817 596.419 624.071 593.72 625.42 cv
591.022 626.77 591.022 626.77 591.022 626.77 cv
591.022 626.77 586.974 620.023 584.95 623.396 cv
582.927 626.77 580.226 620.697 578.878 618.674 cv
577.528 616.65 575.505 621.372 573.481 622.721 cv
571.456 624.071 569.431 617.999 567.407 618.674 cv
565.384 619.348 561.337 623.396 561.337 623.396 cv
561.337 623.396 558.638 615.301 557.288 617.999 cv
555.94 620.697 550.542 625.42 550.542 625.42 cv
550.542 625.42 547.167 620.024 545.144 621.373 cv
543.12 622.721 538.397 630.817 538.397 630.817 cv
538.397 630.817 535.026 626.771 533.001 629.469 cv
530.976 632.167 526.929 633.517 526.929 633.517 cv
526.929 633.517 524.229 626.096 522.88 626.77 cv
521.532 627.444 516.134 633.517 516.134 633.517 cv
516.134 633.517 512.085 626.77 509.388 628.119 cv
506.688 629.469 505.339 633.517 505.339 633.517 cv
505.339 633.517 501.966 628.794 499.94 631.493 cv
497.917 634.191 494.546 639.589 494.546 639.589 cv
494.546 639.589 493.194 636.215 490.495 638.239 cv
487.796 640.263 482.399 636.891 481.05 639.589 cv
480.576 640.539 463.969 646.571 463.406 647.532 cv
489.644 642.612 527.361 650.811 548.68 649.171 cv
569.998 647.532 591.515 642.612 607.814 642.612 cv
cp
f
1354.69 662.443 mo
1368.6 654.929 li
1370.27 653.58 1374.69 649.531 1374.69 649.531 cv
1374.69 649.531 1378.57 654.254 1380.79 654.929 cv
1383 655.603 1383.55 647.506 1385.22 649.531 cv
1386.88 651.556 1389.65 654.254 1392.97 653.58 cv
1396.29 652.904 1397.95 645.484 1399.61 646.833 cv
1401.27 648.182 1404.04 654.253 1405.7 652.904 cv
1407.36 651.556 1409.58 646.833 1411.79 646.833 cv
1414.01 646.833 1415.67 647.507 1417.33 645.484 cv
1418.99 643.459 1422.87 640.76 1425.08 642.11 cv
1427.3 643.459 1428.96 640.086 1431.17 638.737 cv
1433.39 637.387 1434.49 640.086 1436.71 642.11 cv
1438.92 644.134 1442.24 640.76 1445.57 639.411 cv
1448.89 638.062 1452.21 636.712 1453.87 639.411 cv
1455.54 642.11 1461.07 638.062 1462.73 636.713 cv
1464.39 635.363 1466.05 640.76 1466.05 640.76 cv
1466.05 640.76 1471.04 632.665 1472.7 634.014 cv
1474.36 635.363 1476.02 642.111 1478.24 640.086 cv
1480.45 638.062 1481.56 632.665 1482.67 632.665 cv
1483.77 632.665 1490.42 630.641 1490.42 630.641 cv
1490.42 630.641 1491.31 627.757 1492.39 625.343 cv
1493.41 623.087 1494.6 621.241 1495.4 622.544 cv
1497.06 625.243 1499.83 617.147 1499.83 617.147 cv
1504.19 621.623 li
1504.19 621.623 1507.03 625.918 1509.24 625.243 cv
1511.46 624.568 1512.57 628.617 1513.67 630.641 cv
1514.78 632.665 1517.55 627.941 1517.55 627.941 cv
1521.98 636.038 li
1521.98 636.038 1523.64 631.315 1525.85 636.038 cv
1528.07 640.76 1530.84 644.134 1530.84 644.134 cv
1530.84 644.134 1533.61 638.737 1534.71 640.086 cv
1535.82 641.436 1540.25 646.833 1540.25 646.833 cv
1540.25 646.833 1543.02 639.412 1544.13 641.436 cv
1545.23 643.459 1551.33 651.556 1552.99 650.207 cv
1554.65 648.857 1556.31 644.809 1559.08 648.182 cv
1561.84 651.556 1566.83 654.929 1566.83 654.929 cv
1566.83 654.929 1570.15 652.904 1571.81 652.904 cv
1572.68 652.904 1574 654.006 1575.06 655.061 cv
1568.32 659.38 1538.86 654.6 1508 658.36 cv
1474.49 662.443 1444.33 661.422 1415.85 660.401 cv
1393.22 659.59 1360.85 661.186 1354.69 662.443 cv
cp
f
1619.09 664.206 mo
1628.79 652.059 li
1628.79 652.059 1631.81 645.11 1634.82 646.5 cv
1637.83 647.89 1637.83 647.89 1637.83 647.89 cv
1637.83 647.89 1642.35 640.942 1644.6 644.416 cv
1646.86 647.89 1649.88 641.636 1651.38 639.552 cv
1652.89 637.468 1655.14 642.331 1657.4 643.721 cv
1659.66 645.11 1661.92 638.857 1664.18 639.552 cv
1666.44 640.247 1670.96 644.416 1670.96 644.416 cv
1670.96 644.416 1673.97 636.079 1675.47 638.857 cv
1676.98 641.636 1683 646.5 1683 646.5 cv
1683 646.5 1686.77 640.942 1689.03 642.332 cv
1691.28 643.721 1696.55 652.059 1696.55 652.059 cv
1696.55 652.059 1700.32 647.891 1702.58 650.67 cv
1704.84 653.448 1709.35 654.838 1709.35 654.838 cv
1709.35 654.838 1712.37 647.195 1713.87 647.89 cv
1715.38 648.584 1721.4 654.838 1721.4 654.838 cv
1721.4 654.838 1725.92 647.89 1728.93 649.279 cv
1731.94 650.67 1733.45 654.838 1733.45 654.838 cv
1733.45 654.838 1737.21 649.975 1739.47 652.754 cv
1741.73 655.533 1745.49 661.092 1745.49 661.092 cv
1745.49 661.092 1747 657.617 1750.01 659.702 cv
1753.02 661.786 1759.04 658.313 1760.55 661.092 cv
1761.08 662.07 1779.61 668.283 1780.24 669.272 cv
1750.96 664.206 1708.87 672.649 1685.08 670.961 cv
1661.29 669.272 1637.28 664.206 1619.09 664.206 cv
cp
f
1329.6 667.892 mo
1323.99 667.892 1316.35 661.63 1315.15 662.837 cv
1313.12 664.861 1307.73 654.742 1307.73 654.742 cv
1302.33 658.115 li
1296.93 649.344 li
1296.93 649.344 1291.53 654.066 1288.83 652.042 cv
1286.14 650.019 1280.74 643.272 1280.74 643.272 cv
1280.74 643.272 1276.69 647.995 1273.32 646.646 cv
1269.94 645.296 1265.9 641.249 1265.9 641.249 cv
1265.9 641.249 1260.5 651.368 1258.47 649.344 cv
1256.45 647.321 1253.75 645.971 1253.75 645.971 cv
1253.75 645.971 1250.38 651.368 1248.35 651.368 cv
1246.33 651.368 1246.33 651.368 1246.33 651.368 cv
1246.33 651.368 1245.66 654.067 1242.28 654.067 cv
1238.91 654.067 1234.86 649.344 1234.86 649.344 cv
1230.14 653.392 li
1225.42 650.019 li
1225.42 650.019 1220.69 658.115 1217.32 658.115 cv
1213.95 658.115 1211.25 654.067 1211.25 654.067 cv
1211.25 654.067 1207.2 656.09 1205.17 658.789 cv
1203.15 661.488 1200.45 663.512 1200.45 663.512 cv
1200.45 663.512 1194.45 665.522 1192.43 661.475 cv
1192.43 661.475 1185.21 667.09 1172.37 670.298 cv
1172.37 670.298 1198.85 669.309 1218.1 669.497 cv
1241.6 669.726 1265.79 672.859 1283.08 670.298 cv
1304.73 667.09 1314.36 668.694 1329.6 667.892 cv
cp
f
1174.93 650.023 mo
1160.17 651.366 1154.37 642.431 1152.89 642.923 cv
1150.68 643.661 1146.25 645.138 1146.25 645.138 cv
1140.34 638.494 li
1133.7 644.399 li
1127.79 638.494 li
1119.67 644.399 li
1119.67 644.399 1115.98 637.755 1113.77 638.494 cv
1111.55 639.232 1110.08 643.661 1110.08 643.661 cv
1100.48 634.064 li
1090.88 642.923 li
1090.88 642.923 1085.72 636.28 1082.76 639.232 cv
1079.81 642.184 1074.64 644.399 1074.64 644.399 cv
1074.64 644.399 1068.74 633.325 1066.52 635.541 cv
1064.31 637.756 1061.36 637.017 1061.36 637.017 cv
1061.36 637.017 1056.93 621.514 1055.45 624.468 cv
1053.97 627.42 1043.64 637.017 1043.64 637.017 cv
1043.64 637.017 1034.78 631.85 1032.57 634.803 cv
1030.35 637.756 1025.92 644.399 1025.92 644.399 cv
1025.92 644.399 1018.87 637.185 1018.13 640.876 cv
1017.39 644.567 1009.51 651.221 1009.51 651.221 cv
1009.51 651.221 1002.53 645.232 1000.31 648.922 cv
999.688 649.967 989.533 655.202 984.36 658.076 cv
1011.92 654.004 1035.05 658.723 1064.11 658.118 cv
1091.69 657.543 1127.02 653.223 1174.93 650.023 cv
cp
f
1980.11 648.001 mo
1965.98 649.286 1960.44 640.736 1959.02 641.207 cv
1956.9 641.912 1952.66 643.326 1952.66 643.326 cv
1947.01 636.968 li
1940.66 642.619 li
1935 636.968 li
1927.23 642.619 li
1927.23 642.619 1923.7 636.261 1921.58 636.968 cv
1919.46 637.675 1918.05 641.912 1918.05 641.912 cv
1908.87 632.729 li
1899.68 641.207 li
1899.68 641.207 1894.74 634.85 1891.91 637.675 cv
1889.08 640.499 1884.14 642.619 1884.14 642.619 cv
1884.14 642.619 1878.49 632.021 1876.37 634.142 cv
1874.25 636.262 1871.42 635.555 1871.42 635.555 cv
1871.42 635.555 1867.19 620.719 1865.77 623.545 cv
1864.36 626.371 1854.47 635.555 1854.47 635.555 cv
1854.47 635.555 1845.99 630.609 1843.87 633.436 cv
1841.75 636.262 1837.52 642.619 1837.52 642.619 cv
1837.52 642.619 1830.77 635.715 1830.06 639.248 cv
1829.35 642.779 1821.81 649.147 1821.81 649.147 cv
1821.81 649.147 1815.13 643.416 1813.01 646.948 cv
1812.41 647.947 1802.69 652.957 1797.74 655.707 cv
1824.12 651.811 1846.25 656.327 1874.06 655.747 cv
1900.46 655.197 1934.27 651.063 1980.11 648.001 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (\713\745\755\752\740) ()
%%Title: (mountains.eps)
%%CreationDate: 2/22/2015 11:47 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.Bj4f`Z7ae%lZqb[aQ3^=a=D>nRK2)U5W1O/Z,-#[5[`7H@0*c[SIb\R45Mo*/P40ocagNcDd-chKQ<$qN/Td#?Z-F8p9sgE
%43ca!kA!l=`@e:g.#RfGn%W/Crj`!.GAp0RHCe_t\nHH#H*l>\4'Wd82gYc7Xl3YI3gctUrp&q%Soo8<Rr7VAD_N%-X4A842h+Gj
%`cCXXdi\3C_pNArYa3ib!opJcr;&Zn8H\b@i6-J:K;5R*WmpKS/apjV#Q,qGb$W_GLPIW[l.'31Y9#PK#D9;A1\:-:Dl8)(39hRY
%LO5Y3TkIpreP=_Bqd'.e)O#@*1F$8Xg:cnAdGRhk;]D'd*tN;?d);L/Mg[i#==XQLpke@4^U^uYPb2*6s2N#Qre-nl/Zo9EB6CVA
%5.hY%UKU4LCMssCM%0NRi?3]hp"o-9TR5>OC-#M1H;Z8N6N3PRV(=0u_h)%PlZ$1j[3R9f;5cK^AG%d=Ut=P"HBDBbnLj&(g$elT
%Y4fBWh<Ku9YoBIU[JkZtU/(+rI.?K8cl9[TlQ6K-4CNrHa0X`*DkQE1%<Me[XRIKqpofrbmuDR;LU(]NK-Mqf>V3.*H%*-4df$5%
%D4+KR0D9a>lbbY$l>2t[ooNdjN%>G24=%Wf#k;%Eb>s:"&`r-N\[^d,0sRlm(MF>]Q2P7gK4S8PrV9pPhs'USQ%R>q4rX+'-8o]t
%nK6Jfk7`?'nun$Xn8NX)gFI:(r7BN+EEf`3cdpJ3db\#?\;MZL;7YPJXhQ6]@PHTBDo]W^4)*\fh^1_+fB5N#d,.4.^]4"4^WXBp
%%Z]Vn8#,%jrpnq>nFtgP)I(+=?>Y,?h3=)1(E5SbRrU>t$o%ZpmAPNeX*=I<[k;>dAiT)+oNS<??fh=Bq#=pjbF'*^12]@N97)0^
%#/gCrL+>f=Dl`T?45.GCj$JCl\t^1YW7kSBs!ciI"^0m:a082o/%]D#&B@BoF0(:@$;>hiWNNgfhh;d=p9kI2f(IX)K3-uBRU#`*
%G@NVr+7*#;:-ttQ00-V]hIuAsSdog`FRZuP4rb'PLsQ4seTd3HLK`j_dn*R7Zju0?Ir=;KmU4E!)0P\gpGYl`s-2uQNm=SMWEll&
%XIn)(oN,%*-YrW9q>m>"qg3>aek#JRQlGJ]K<)#SIIHS+N09`gP2g_LY<o$4M=Blun%ZD:F)R4458n[RqEj6*C,<'fp:@lLXkJed
%C.TTYSI1ZE`n-Y`^]4#tpYQa^d7?Ita7HJN<\JV^5)FYbq.)+e:Z35_C!!8)T8r74L`bgM-hbC"($cO*qTS-n.=B#ljjWd;^Z7KO
%8E2nRT+EAib"if9E=k.hVL2Qe4'mf266lZK?Q\:bIg[DF+Ur_<64k-0)-W^SQK6Ld,5Jae-ZL>!OsEV_/BO)"BdCs!Q*c`$q/k$j
%dn%/o(=FHC[O'2H4>#!9I%"b2?'7u2M_^V*+7ar,M>i;1SC&P.:F*sX"F_!ZS'&K[PjrZ5(&Tn_VYk:"D>]Y74404nSuu;.Af94%
%_=_Qc8(VOu<_QRfek5p:Y#Id>%VrJ*eWRa.q<PRhZ;r8X"P;bU&c;EETi6B*-9gh^e$;cUq@r_Gl5$\2=PHO#33`uUQ.:*6#EeA0
%%ebVCNg>&2r"QGT14HTTXCIQ!/D6r?:IA`L)5c2W0mBW&aorm&$hcAq<H,Dp`2&oWBF4GK9Xb/R9u292T9O+)\7/4b<U^V52;I)L
%+4TYu#CkIuC!!8%T>jbPT3OPtp71JE?n(5Oh3.E]m\"g:h/9Wi^]2l&[N"V.S]`BrVet,5K#tOi0l#AD*GJO][T]eFX3iEXPIIhu
%g.I1c=Q]$T;6tn8S*agg.4mFsc(^Ub1\mik6rkIsoBBdeFW*$F7_@&_1`MEDdE!8pS;sBW"Og[PI8k=LZW+<.RqC%ZGp+gr8,u(&
%Wu)XZn/(1,R9D[jjitH#(ZgtIkT;"Ee)mRINsr/>i!567j\@.p<'H.dYa8nN/$)c2rVa24X,>@=X4]5/`l..!?AVh&CI,T?Ad-X0
%DLl)3fU]tL,_d&SM;ah(2E\G`cP)\k%FZW+"kt>0=B[p^;kHh\6+b[f<?KuIXgn5sAGuLsr0u=dXZi/$Er-REC%0TY:\go*+)Y4q
%d?^dQn`/urq2+L6-TnY0b"p#QDP)M&fj99pL/#8G9)lut&20`#rG-JmgI^J3O9s#Eq8Z!n:aq\0l:INA,`s1s+ui(i.>s?OQ[:<8
%*#5.Ra?a25o+mc"k[3b;]MPRYp-MVdr[@Y,U>T>'Uir&uQH7#gT_WTZs$:5gg2)g1JF\H0:c(8!?aub(U#/-u5Q#9sV96KLHc(@#
%n[I5BYR_gM!V6%emG;nm,\hP"bZ]L?J'b5'7C<s,B2[RUXp`<$+>?G4BIrGJOGZ0_&!>4Fi$!,C(Ok3u:ncBI]_`)O4cu@c#jbn0
%N1\WaIZA/I^WVtI^^!FQ_SFr*TkjZ%heMmrV"fMi&l_Oul=0+]FpB3XpN.=S)j_Z@EMX:&nF"&A\`;D@eP5ko*06u^oC"9ZMDRB%
%0INd"7K11fi?J4uV)C1'J!Ftelo=X=*c03">,^7?m,CRk.fn9]ppIjCoQ3TQ);s>WQ06&ehAK\Hf4P#q44o_uZbhfbqAVq[4V;/l
%Z>a;1lMb^=k's=rM/o*Cqh)"JDpM&Og:_&`<V86K3W'8*"2CG<Z$5^1cgL")?4Q.eoWYe\?1uV4i2A,a0+Q8U#SFnqfk:kmJ,TC0
%WqM0o]uset0\lTZgU\)fb+a+[&JNs`;ciE?1J-7UCV@XKSBW?,3a)B1E`;o1OlFYVb2lIImqrP[QT?"N=m>t<2ZefPk0_$(E;+i*
%=nkM2o'_^T\N_`399fBZ48jZn(7dPNK&=Ec.d-<l48"*D\Y0o-T/E5?Z]=Ump:pV&fD@ekQlHP2S,_Z5E=k4r/f&0ohQ't,E6bi*
%p\Hu/06IK"UAkK+:.t(FPP\F2lgXeJk%5q>&Q?;d?N7ap62cS_BC,D5dCfIie@beWVp)2bY;mSo2kQ)gU$to0^$S0EiEp>G-S,.*
%=:*Es[GfMHZUa2MIg.PL=56#L*4ro%mZoP0rr[m&rnE(9\n.=n9C99HdTZV0Zeea_BX]mCM"s0\:h/1h>,@+MlUT4t8p[8dlDSpR
%402-^Hr5/e)TtQd^Ul.Q%f3e-"7!=Ti?(M"UVi("GI1B)KJ--3ac@P53%YHZIWoSnGZVN5K:g0plG<Jhn9DM3TO/b8(fq%LZ*iJm
%)_`+"L,'YlXKc#G*$#N)YIXso]i"gE.[lI=H!JUi6rC"spLj5.D-Uns-$<:M-;aQFZ.q>X%*BK,HD:R%P9#s;-@'_c9_`D=&a8O2
%>g#e?4rc653JBb#VTQL?g:4)i?*3*M<cRbEY;Z<b2qj%1mbi[8_kY+8J$2p83#iBW<jX<eT_)[]h\Q`5F3rg2XT0O,hmH="#MsK%
%,tf^u:K89P?"X,$R1DfqNUEIO[or5j8J3C`m^ARbD2cdQ%%R.HAc6/m$el]p:@(lMV"4$*qJt6"LHT@Y7r?KGV17nB2h)/QCHLh&
%UGtrIV8jFEoa\];RoDN]a%(GrgQ/DJ3',i]7PC]^+_&HTob5:S8):k2rN8u.c+dfEr@K/qs)i$dmu2Q-M7aDSPD.g,#$9!M]e4Z8
%[^=RLlu)G#rPQCipb)<j#r9!<h:jsTmdt7p_u0r,o>'8GE4"0M3e^VbmQDX5:4M^ZHWXHWX1^LaO<$R$CO=n9PP\gkqe,BNdGV5^
%B;At'3:4BTRS^.'G4aA24K)2teu)8V3GpEhI+ZnPPqtMTb!jr3nUGK$khQ%igo/E=iclF^bOJIM:NnKPEEA_[.*F$nETa&#%t=6H
%2hZ_Z]QO5C7QnT-5n=VH?#kn[@nUt<@*=^s".l^i1Q5F3L)Y(RWWBXX=2(X#%EG9Wf&%]<*?Oi'HsV3`F32b?k>1HO(+=CM./0bu
%.6#F"_7B;08To04A5?&[/RB>Rl$]OAmTdW+[8sLHiSTAn4T6^C\J&3BS6;@5I/;g5$q#a&k@&QI@p8a".+@a:)eW@A&kMmqNqE>M
%W32TOF&!)MD5jM?]HrH2*`oZ.nZn@1HlcP+34%\13b,&CgQku[eMdE,[7<Q!8%25XMl=0F`S$i!IIm5!c7Ut3LsqI(;S4k?,SAMC
%3n_qh<8SG9s4f>g[d(cX:At*A>G4s:m@lCp*Gfm(]rJIJ$iYG.n6'LUYkcm2]1!*EmN%gU;CQ]9p\c@eF`QC,m/F(.^`%Z!+^rqK
%q7>#_D2sAJkDXb7n$'M`QsQ=^$QU4(<-*snlg19.ODANKhMF:lDtJ$GcPuIAIBU-/"k.I?WQjDY+\e`p'cK'e2;Q06,j&4FKC9*B
%kY2W?;i?4Ohs2;Q\4J$*rHl:Cc1R]`$7Q,2igeChM;eHrn=gO#k@&le[Z2ta'-+&t_3l'f5gXMX[s9TG@&`SN?7#N@;sZi&]X^*q
%7:o^jiQ/HBSJR>n21/I%1pajgU?6hAZ<9ETUF:N$FiNdDU&EAX]3h*_IsQ%MY4VQ(RY_?3U/RNr-F(V'BUUY9dIb96TY+FK'3.`\
%l0Y4TQ((m?F3<oh!De?]bE$+^lbZ\FH,_.+5=om,oF]_&Zs`e#E[;5HqK2`8Whi3!\(:AaXHlqYk/DQ,E-qJTGOC:[ei[:,<$lsm
%GL57#S('0`[_jS<I)@e0kI/KqPFM:$K&)'=ro%bh49C/@>%i#JV`O,V(RclPaWZmOk7&4r.u&NUTp$;JM8KpM_sTr<OHS?b1qsPk
%s&JKS1Q#&BQtl!sAjSsIkjDf0l`c!(nHljGH[@I/Sq!:&?KQO%=O2'2b#08R&'$2-pW9DH*bFG(6OGfm"J.eZaJ"$Egb('8RW&PF
%OPbR$A>;4I3;<&Hm#.C3MeU.0kqTl]7,cNMPC$0s.;G!:=amhAqK[$rjHh8X*r.)h:QG>c`MZ1S.e>MTdA)>#HaqbIYNMHejUV#T
%gV^^G:H\HX>nE0O$atkq>.qg`Ct)SaI>eCKSY/Z@/Pdn.F"&:;[S(>eiCVSJklk(bHk@__II'a@+-g=k.Jr%.q?d-h'nsQCn)p]m
%-Al^/r`.D"C%Y/p/3^&+R8fM!@o_Q(s51N+C2^K8X%Hu,0qjp*d.W]Tj0_IrK#Jh?4/P7CeJ`25j3!n6-73u6Hd.!g`])IPbKG1Z
%(/]O=Y1qRG_\Y6qhH>)Ms5n_'h;'IKN>JqG`R1I:mrLR;=.XN:gmu"/l?DP!f@&93QdVpUMm"3cGSV@GXaI_UCiOR(R<=hnZi%BB
%iG'&I["#H,mRGeDkJ,Mb0.u&95?L$mlL.;'Mt8H#7V/PHLWuC1038o*6>s!V^].]J?*E/@3RQI$epHX8CNlr-AKMs6[XW[BL(CV7
%)nX"QK?!K9iV,DEd]5m/G.@7Sq."C8X`W%KNh1'Wg=is9fZr?dr:m7rhQ"=N]@Y/FF.X6bIWdn.c5kDYn$MOi5O-HTg=hj1Lp,+5
%Y:kpigRmA8c,&Dth;!2FqdJf;p;'I3jP,[fVH`l(\FB"M>AZn8IF.hro49=7h>#N,hHIYASBZOgCTPceh:"[&lY[_72oUiG4.Am4
%aig+'p[E<STlE60EMrX1m^G99XdcLUXkqIm#B-2=rBA!,g&6c"qKJ76=2&J%0"TZZ7f@,[k5&GVCc)IL+5WM.h>)0B=BW9+$PU%X
%3</&d/D[,nDa#g4p,6jWhRWZ&ra*&1l$bk?mN$,aNR?mo]CU*h<D@A>T,bKUb[i_[g"SL?Rd7HNF_-]kZhlPbGC.S#[^rM\Ge\9I
%Z*h5`p$L2`,(\'gHhh/tog..II^ufSB'\KIhmiNNm6917/lR(XhS+kYq3\lj?g[qp&"5_$V6dTrhe]D_mdntAm<dZC)kAL'5)di_
%MD)]J'c)pLU5_C'"+RlQTX/#j/\GA8Wo[H/QbI0Lrk2[)*W.P$oAII5?/L+@F5Im^H[fIQlc8TM>g7$%db]mo;Ka:]RSTq,Hl`g7
%c.mf&;S>=tEi%Ig8p%Oh#7j2u+oS\!=E"5Le)%h5o[d!MHh1Dsh0Am=iGnb\K?!c^c,7Qd[EW?DFWY*$1pYHrY=bXn%nlB*4ZoaK
%UmlRC[sn-5DCls[7uth^HTu=bY:XT'V:'8Uet!%IkMPPSTk3J#l)VGfVA\5Rkq%iahd;/LB5\l4Q1C_88nA0Ehn@JY(13)3F*d,8
%W%V#EMi4I.S,#/?O(LH?JSR_NOu`@$;:O3P*i'am`VK2E58ri`%Za@oo@ReQTY=\0GG?[=Xb3MLWqRIQ;0DN2k]LKTm,)Q+:LANP
%g5$M^[sOmth5If/J%chX@\c?2b+lu.-]WOk@J3n18+pZ1^&0,@)AUV!c.@F35&It-dX9V[D*Q,epN0oGe(WN(:J,rU3]q-ededt'
%NMhO^pHLJVY@"tmC_5$SN2--ArTNG;T(M\r!Q6=F[ccKW:QG0o\P;nambsr>5;nDYc?skc$n(Yi_W/$"#Q9m_F8"Xo^NF\pnT\C3
%]t#)oEi*4"_BsVQkPgYU:Wd!f4parAjkK)O[iZW>h:c_II='DVf=sQ!d0@$t5#*'_c\=N>Dq:8eSYc8G46^A9::0Ym_T;`)h;NG4
%\WP1NPD)4NQ8X6l\l&1:K/2X?RD/4]k).O.q_oIt#5bkWbJ!7+(/fB5A?W`)XuDrd?UI*N"@XsOHsL"'DS0Ybr*";C=30bJmHqp<
%02krhX%qjDXXi9h&L"r:4ZQ]f`j'I*/V!meVf&)_lF5kYI5G3?]=rPt&Gbn!*:\7)mQA"O`r*9MG'@r0eaL9._W7kmaEmaJe&Sec
%Kr*iG^ZB9TDXV<8ok037RtE(c*UEB<Hr.0I@K1LQI'[fG>CHG9Q.u*)\e3i0Ec&qU](Vu^*jo#an^@Tnl0a#MgR*?Om`r0\<j2hW
%c#b6`8f3"oJjQnJPJ<u1/,gj/^!GtD%kYScg/MQj[Z`#Dm8s;QL]&M5=TF.FGsL(`?VQc25&Np'6&3p+/69Z<:t:qG&I`<;A)\Ub
%)el7EK>C6(c57<.Zjt_N>8qe(2ND8RK0HD=r`UKT9s.28Pa1D$/LU+.N(km_d4$:6G33.486@*/X)8\"B/<l1#Nr8YV&/1E8k:n]
%(.0SQ?fT-d&Ya"Y,PO4%nZQc/lMAnQ&CShqJj)/2j.3e53b\LlbtEC(s(XX_eEq74]n+$Ne\&p!jnR-/fpmo&q`7fMTFrLDa0S7o
%(T66bfTDG:.Q$!H2U`!bF44tgS/tF@>aO=hla9uenH#042cEBH@(^bf(s$B\Eb+=5+g+jV7(92@VF+Uoh92O>@M%^?)Ia^k!4]*K
%IrH;`jQ*<sqY)lmf>NcZ;"_V$^.NHjlNMdd-)fspV/PYR6I()!FqGLL]uI,?SYs>D52AGHIl,a64Pf<S3ep+;O01_D.VMCcdKtrq
%kiMJkcI]u,gPb[NlBOG(Dr*W0n$^nb'0O8;Vf5n"ROj4'%Cncm)S).%9F,R>&:rtX1VG5"iN8/RMHed3LQtUZrd!l;V1e(^h4aTd
%h;lI$;78<.G<<1(55Z-B]4l`]2.#[P]l'nl0(1FK=h-IIrU$8a=Bs`:AWBj$`o<E[Yl&M>=5u`M\Ot/e\?=X:gk_=)mVI3P'-'P$
%^\R_+,Q%,o<Vso%p:&KhBI&X'0/oK:I0gtK`qK9*cUS3nH6_GV=43sNje(h'BMh!$ZoDEq+NmW>(2,;C?@VB+D/[0O=M*0lr?s5i
%d]\rlj0AXEj8%-ORA,jd1FXo82_$/PK(ustMba/igTRaYO7_<,p?qSo@=<&U6-Fn!=nZTGLsaJ-fd>`uf*7kf9jpCnC]A#R*pN&a
%EU]X71OJG]p@'hdn4ab0(H5RUn%<SplT_mDBBqF7W[Ug,VsOD/B.PWeVG452l=2GtoGV(jQ=35V^?s=)Odm_=gj#LHI=)N**tKK=
%N5^E`fjJ9f`R!DiQ:u#Y:?UB`#=\O;qeTK4p*CgV8)`.kG$eRdp$%hP@lnP,m.f>Yp@df6O+_7lgA][SOrd&LZa^VT-":3sDYuW_
%HtAj%T5S*(/F=I+o@JoV]\EPrGH]j"QtMm=:RWq<(M,MnGFt?Ki9:.4`lmO\D`[8i>NH[]4[6RkANu56<hkqX)uF,:qRCR_J,"l.
%Bmp#'Aa[ir7pj#sqs/</QEgFrq=E8[@Jj39a+njK>+%%gTDnhTnJ@J-+I_'=*CRD9Scdpn`d/4&Kr=SB5M`_%:sUL"nUCGuSVM-p
%^WIVKZc2a<n,Eq2oD=g;`a:RR*c:k;[CJNmMm';u>R)murL"nf_oCHn(SGIQ^E4G8V2L[,@\oPI?"mgI@-R!kgK9tqIBu,2<:e5i
%O881<eK9eDfA62L_qZC"Hs2J?30.]&>('Z+!I`[p1Yb00hmf]MH?kGs>J&rNNi/,'kF^hVVi;Y_NR1nAn/+r["NP`l)nL*+FYM]e
%-Qi8W#Oan752#!CZiLj-Y"Thqk/u<E6n-^L62KZ@?%97>]/]Q_a3X%r>#51^m'TNV-sLY6s4=L4^@uMoYsdj$hS&Bk0Ah<.!up'k
%p3e0`Dso'`q0d>Y`<58\S7G-]LZXMipk,7:e\T\)gZeFM'fOosfMLh?X2"5E\[T?Mo@o<bFr'8tFXESUqQ1rjYlR!EDXiFmn'f<n
%I,[?!U="pUo7rg@L*,R4^&8`tj>#)`/)_sc^AW0PfcT8RZT!N%Fh.;h?<d7Em<rkjYIC2J?Fi4GG19%u)]tD)<sQ3pED`UXgq!D_
%W,(onG&ZpGS&Y<I,0j[QHZJlh1Q/$]ii'-YlJC^7rg/":<rME&XN^n"U\E79Ha7QjD@>4il#l1Tr:bQYHh@numE/&i>Zq!tE3hM&
%!pb!Ya>`g:lL+23]*=I1#+r>QmFQ/eAm!hLp79r?=n^l6W[em<IQlL+lpfa8BmtM%+3_EC^Gru8\<E,_Ea0P4RcQ2X\'HVE,'-sm
%)o#,`q(UQ`M@VX-X^:k1Z/4o[jrhF-8,hq[ro2^kQNJko,dBA7QY>3b^\R;m*1ll1`iJdO?RIeReUpp&rj.6r\^'kcqCm?lW:dgr
%k$c4eVWE5i/bCtd[[/p[XZ"($Is>Gq^KeGrQV$hT1\9\d9(D[TkKk&V>KFBl\#8Kgdqas1p<M47+e.5i[tI?<h]=_Qll]KdmL?Gq
%4tbX%G5WpLq81S"]at"hCq5QX?b^StXn25NNA[-_SPMmcIN36'D0ZbjNt.L7R^Zq*S%30UifB)loc$u0[`lYNWneCgC>%HG;3G2`
%qWWrEo(ZstebC].j5Mi$K:V_loqYJAl?J5ZNMZ;;<kR-8_RJ[19X>V-=TnIc(UDPmftG#`(#('UgA7:o58P+Wm))NH*:-*Q:2-KT
%r-@o'8Me$Zj7VI0T>JiGc.2U(WE*WrT@hE7jl[hZ/.Es;@(J>9rV-L&;OMJ:?PNn,6SWIgcK/-!GAb*$4`!6/n$XQh^&Ra#<dSVk
%\3"9lOKm%9d=:\-B2";M,S.Y<:F;*<Ac#<pHft4o7shjm12(U]mU%VJ^5WmhNPXHne=dr<1tVj`#gPSOh>>]NqK1\fno4Tig2(ED
%D9m=d)R',g=7ts>>QjBedefTTK4]FX5A;cp#M2b5U;?+H_9V4F+KY80e)`fekW3mM(@E6G^@*UBLL4WOpGP'6DVoR\kIsE^_TN7C
%^WCbKQqt(.hk%BT!bf$6I4<EJMq=#Xn-fj!SXJTq7e-H+o;eGUlEdnDp&-"Tk&#$L0lDFGj$RP9Oo.&u]4_IdA8>7N%JfmGEFH;)
%lh#'klGb%sR6O9BV>0+[]DAiGAt#oiAe$^_K;Q0=pkfRLIc)Ek$(cQpFuO1e9n-r*rR<a\bpQ^,XIhD*hd>01'WoYBZJ>DD:jDC/
%W:]d*BgKO\q0$uLdAKLd++;FGe,2=s."&PQq(,`XnJ_3:RQAPXVi/mTobZL%-8t=Fo^8r)qpsS&\>+"K,`TbDD3je,@e5T4n^8eg
%-g*OiX*Ehio6:3ObP<N0g>l8J^U;mcH2=J,>\S*/Q_1G?Ma:ii@t.\d8tZ*fe(jmHs"V>T/O&%k<?9EUID]sZ`XCU=roK'g`nJgU
%J+A1_7d]<nrdij7c!;4H+ROQ'G.fl).sNeX!(BuTg"+<re(;6C2"G+#Df]W&piuLaEpG[@IU;;g>Q1D.HfrDeSR(Wi$(g5:o67Lq
%r<Y]=A$&HF^_:e."ge/-(@q"_?c%gV5Hc\R'%7qtS*rBsNqRhEE7>S!8-JJid@E^LB6#/noqatGa,ecip@?eX_tK:^R1AS_bA)<;
%%(a(3R$J5#/70j<IKK-+.=CO*C!<]!\>-*/fR7r_05l?*4*,Jp9bQV:7u,L_a%$NXN^YrI@9YYAkFR1V39kngichZVilX1Z@<+`k
%mklJ1".XVT`:`?W8%C/,c*XrulsEHtT,ukXHl^`*9m>(dEd(#SjPY2>pZ9[=/4t,HY>'C[0,>lXF;s3$c!fSf5/#Rh*uu?<%m_&G
%jmKb"K3RgDBKpq9q,b2;nE#`$U8^QM/]b?5]e>W2e%Kj@j2I#$<_(t4Up%h"4'rL_cZU(Bp=?,nH7@0u&Xu[9=I%WeEV=`3*Su5:
%kX3)`Bk_(jn[?,pguoiTA/,\,kuW"I/'5).=lOJ;qZ3S<f(Y45^H.A)`Vm>[#=l[GD.8t5ElG*QAukg8ICjuI1L#[%H:o?gQ^91e
%-B"tIfjF('Y3Iq9g%lf;RQMbt;l$OEaO\*h^=R'@2/(io.;[)Mflh#3nP!iMoio\5o*_nE[N'('7u6!TdJDGH)+5pK2>Zm)AoapS
%5F\LO\b=;Ol*LNX<t3W5^=S?G_j,0)K3u*::(#Q;F7\P2b0o+lbpu]DmuCDZ`0]9!TDCh,K3u*[Zo?k7?HKI!nG(E.YP[3J0WS]*
%#55)$1<ng,+m62&X6Jj0j+kJ_4VWMHoN.5dW`6"tjielkeO'+YFmGV=g"1F0fA2BVf.ULeD*PS:*DOgF$h(_"c*-L=Dhu^3Q#,kj
%j&KOS[*FXA4+$A^iTE:%1nCZA2Tjq$TiGEKFB%/tdWkWI<^,@AE%/<-[!D;aQi+h_GeJq%5+1ke^&)F0phZsbesD-3Y4Ch3^9r-u
%GAb9PSkfg,C1'8Se/80G\-J@_([]QIpK+7dhd]P<pS@]Kfbalk_Y-X]NLt?25.]Tr]N`KP,!ioU<c:45F#BBPH>n+GBli>&(>TV[
%qM,:3rSn)_s!nqsKde&<kA5/;bNr)9]p4!\a`L/YnU%Uu`j!kVN(9eJ`&!DK`VIi`S(ZZh\ncfPq90(/ecq',b1;5fXDZ-Gln?GM
%Vmt6QcAb=EqdW^*qNW#=Rl#QAhauF4hgb,g=([rr^@,o]Y8'-;7l&`;1X/4hl!"$9+)g/ogpt,oWuYK8h;acm>\W#;+u8Na+i;%\
%NCQgS??br>rF"sr3:1V8At"NK7F%IdD[<hheTU+k)9BHQ(`^pZGW8#HF+8,+e_SiEk'lb]+%H_J%D=shd7\J-1+__'Sf]+FZ$Y,-
%s*h>eZ.J@R0'J"S3o,G+\%N6`F)m*ipl8!opochT?hUkA<s=g9ksb:7!6p1$jLJ2,FoOM1S+A[,V:O;Np<nR\]tZ;1ZAZ`d]O6N#
%o_PN$q[BXKQRMa2[r^5s6tgYaQi-1jg"kmETC9rehRj8o_'mk^Orp7R<I]CVDgN;rPa=8k?G1B1F8Jqq=+@:8p%(?*VognNndh?6
%FFWcBq.0ZNQ7h6^;3kiQ]QUZ%co^S&pC:OROPga=WFGcYF2HJ4H@7!\_tg\mc3SG;c!!3q$@s78?)":=Q9l9'33bLaoW(9K*pdl=
%XlgKhI$Jh2Gt)SZ[l#'!Edf$%o_d>4o4.aAie#tarG&`Qf"]BK:rA2]LYmG9$RMhofS`M4IspeQeIK0?UA+(^%6)6Xf!G7JL=hhr
%pAeQ\IE0MN,P@M\$trcB4j\LR%KA:JWpL=ml>WrXe!l-1cpi5jrOlBa:[?OX/ucH?l*tJ9:\J\nE/96,HaQ&$'6J#BY1EIX),=_^
%Z>>tejPX_C3sN@1f4KQb\2!C(qNGuF,blDuNsF0!W#b:(7"Y"+)8Uq=9><LPmn^sB?U1H!Cf<>^Aj/u6\+Uo_/=mbjEQ7Bj+s>e?
%e"X.nW6JE5)B6RDg@rJ]p%5lb_WuTDg<68Z"M2mNm.;%k2s35-q8?5c@L^U(ni7GW%JPUHhabT?hPm$al(L#u<B`/#E%]#S`&VlK
%Qg4PA2*Nl)Wk'\tQe@MT_Qj#S3;U1+6"ni;'q6#ZJ=Tj9eO;2sB@\&0jaSLIqq0^PheV;t`)/]Cir/H$Q6qc?*,jaj)4jT_OT-7;
%Zd.4gQd!j"M;"l*%_I\`e(>WL2nFe@DW2sEJQ3.>kDPu<a8(;X.N87P1tpieV[G%_lPlbc*'<2!n0)GOn=T1pb?NCaJ%OU-87a0f
%FMkPe>H%DhUc:F*6H6:N)=T'8M,th10)FFZX'XV(2*@Fm(&0H!F"'t'A`NOBAluS*Dq.n^-lL4-4>!c)lfGQGb$+YBPZ@fH_BY]D
%eZJ@$^Z%Bd4q.#M?Pl.?^Ns_WdP$;.cg3WDkq:k8M5$*p'@<!N-nDB$`Mm4Aau;75U,/BBX2dDI&]Rr2_3`BbREqbeBl3;9rnB"$
%`%*&Ucg"(;i;q@TXqsNXLM?7KN+^]R+BVEK.?t:dhsH_pj#!t$_'Scu8(lS',@?p7o.8LX_Tg@*7c2J*gUG]+O\b6paZ[8m`er`#
%Ua%M\rdXF[&"]+Znt_k%WT93n#`@(JMjrdP\HRm!BHF^oQ=O^cH1)GH85B;-1?X63)-JL8PCX#Ul;8H4L&/l%[3X#_8K*j:!&?!e
%"9l`bGDDWdN1bt7Kn^jIUnANW=[cdP_(2j3@A#.WdSMeMl7quHTfHGF8Wp_-7n%0c!d0^.maKBF7@n2%8Qtl8=#eDYb%*1t,4d7(
%Y99/=qN<,R?(N;K&r`Yj2m0d:(CH/N(j3NB6EZuCjo@DUc3FLZEj]f+lTR;oUi>NCaLlr>jt[g&SdNQ^ZKP1sodk0c.f1X5-59io
%QPmnS`.Aet:4[dta#e\V8r?`Kl_Hg6!gX!C29?V,Jl>4%]ho/kN&ZZ("aMao+B:d8e5I.eK17ThI4d%<)9?Bp"<j*lqP46?Y0aaO
%4d#t&.!B.B@mPkBi<1SQ(Xtlb@o4E(N\tD6\oK?aN4g"4U@):O%>=_5?mgr.ZikA%L.p`E9.N7Ta:>NK12I-s`;o^[*`o!GlXWp[
%5mW4Y-je>(m'72nW`rVk+Bp=R%-t3*JQ9C"Ds,<S7RG#P,*EVVh2(;@K#BWCJaD$t4.\rWrVg#kb!o1L4W<L80fd^*T;QQ6jKYP^
%'3/.?-S$;%#*nRXj.ji,UMq-J8h@<1<O'I)EmH<Pb=(p6/;VOt"]O57G.n-XYoF0\j%<,n841.F\k2)mTX+NRa@Jr68ff@Q(bR^C
%+^N-^W99#33QS'5'VWKrPn%,o+U,H/*0R6SOO"Pi"SkW(A?+F!Z(.[Rf:@Ye,O6XtYJL?ISs%3LJ9LUQb!P8`7tPgq`CeQtAnCO"
%<2C0IZP*biGmZ<=QfXWdjCkl;,*Z*-(t?`+%71Fh@XWKhW^$VDFpSM\G+4$]lZ*=hn_@2cOp?W8&U%M61b166:CB7JfWq2!7kC$"
%Gek``AfF""A6s:q'>oYX[SiblL?GXGRX1'b]Uo".+Lrki:bUM5H#@bM/WfO3O%4qWaFh^5ZJa$_!0]arL`.S:]\I17XB1)A;_9B4
%,/_T@Z-5OqT[85%&7Wn<pBL26VF35,Q>M36ChK^]'F_p;]=8oGc51_T>Y2]t$e\HMJRb8e$B6:c6ZOZ_]\JQgn.W6r(=%**&9GP7
%nuO%3!AmVb$Ske.gO(I=Lm+1)hUJeD_NF)Z-!*o?n<T%S$Fu>Rk<Y-/PKPc2V%ZlQ(5=#nUs[g6..`H$MBgeE:<A/SF.l>aUO"+H
%P(N6-<Fo`HDM8G$pRNsX\Ml;hpCU/j04Z\TmRer]-cHH'j2)c"'M^4.\q4B7r!"a1+9c>!dZW5dBuCh?r_Z_Q0Y)<fh?njD\XmS#
%+&aAB8bSP<,B+8r8uAH@$Mn$gQ9n-=PQO"A)l=23li7[P'D.$FG1/G$Wj88X$n*qHkX0fTop-3D;`L2[OGl$V8dKR"'2ih29q3R6
%i_[dlakBA3@L=CD5dl!=+B];IXIQan;#mO74<Gpn4C5X]F"@Ct58S=Oj<,J'#MRA'/LMuEBEl':]c7\-Q(Sh-VAHh8jWt2."a+CK
%O_Id.KZQ:A,@2G$G]Hqi+V.FR[O-32XAri@Vr_=7U_%.fae;C"d)nGn$R$7V-SnTG&P'WCDEp40??fHtPer[sgsiXKPZL7AT<b=E
%&tK!-\JRQQ%L\E"`dpR@rKIWq2NY/JX=H56OX>?60k!PA#BAjf'\:.AEPN6P'ck7FmW_SEKq+CK:.g'H.VHW=9"R`P&CDc/Z]g#H
%Tjgp/Xe$uDa!oE<"L^XY.`3nGX[$Fp(op=QO3:F/=lh1?8[ahTi<#.:i02e9Ec$tM&JujGEj(W?`ATCfZ`B5T"D^4%mkT=%dB&:C
%T8]m\(M,KpZ8pQ\7Yid'6'LY9V$q(GWLV>24O+<\Yd1R?R)5cTZt6WP?kR*ZYI.K0Xjk50q'l^t?*P#X#Pr;cJUhb\*'VeKf$,G9
%\1STW.(l$8_*&&MP<QJe#f>hu\GZOUbe;RB4uLsb'e%@jX?_^HV@[!hJoi.^c6eY]a/Z$Ji`8&M6%L"pSB]j3$$hjN,^>6+7h^h@
%,B,EG&1OFfW5pVL&>(Ms8l-#W.._Jq=ksoS1ZDN4Z-=MIR-"c:\0`F(A^`p:92*HAc1N4KK#gi"N+Ce^VF@f+Oi_>Uj:dY%lIKa$
%r(#HXMqAn`I:PWtN7I!`&H\RDY?ApWnf&>jS(JE_cod>pD&dSlEq\QegP!4^crM(-Zf$KYA>e:L";=V9=E:1XECao<He\_$gmEDQ
%3h`PrJMNf2(O@5TZ\qO-H`[DuL3+fef!qZO>'c9'6fqVRjHRXE(AGZ+SJ3T:V(#$Z_W-ALR)c\aNO0]u=DS41BICos6KMaQUr+Jp
%>=W6&Kl)o7MXq"=&8N=[!=NO8OX-dU"fBe#JEGe-=Ih9(!g1Vj\-WP#'=gDN.F>OZW_j1u)I,=2\\fkj@NeNa4Mi<jloP8s,dU1K
%n6iX*P`LDPLBGgtd#SWQ"/ff7Wg4IDGbLH49-h!I;/1XBMK],RE1%V8[KQ>O&^+i#2MeCS>c[KA8-UlBb"m&TKdOgVnoJVFaQ!_;
%W@ESN3!;L!Mbm0Q=b$hZK[+VkZm!G<#=K%%&%=7$Jg$X\5Ul9dhC_b.$$HIPk*_F"ha80!J)oOr\/:kiZ8j\a(p3)),(MqQP?<s-
%8f>._S3&uNEW9QWd=&$V%-0[L=bp?L6,J"i8')cKDHrh^aDoHQ[OWcaalBH,4I%#o6Cq[Y1KSF>0H(P7%H2QfN+?*XEf.M9Ds0-?
%1!^8T?[+">-BU;B$#!1d)50X%:(\&I_1K$^DE;5*T]6$:_KcJ3Y2D2P?CdF^O96A`2iquq%c+#Bl"8TAK$?+^-UH:E;qZD@`mZ/#
%Z\%<hg8/2k.Zaqr!YRdMkIqXdS@_mY$q1Z/1I*0F'2f=B.4E(t&.F@o,Gd.!R0"_QnP$J<jRgF,'QE5\`;q5S/Jf\q\:$[Mntal?
%%MG77+-BC(>)&:FpAp'TMkBP)k?/TtX96b`>f>E,!_e9_B*Ert(DN#>P9kE6GU+dAeHGTL_f3;3=U9G>N@u+TBfUGTE/`j!bcIqV
%:_kXD6-[U;]1fY"/i.WVZ&-@Bj,b3[3.kT]*dlHPM)Fr<Tg>rOA'6:68Nd2IBeHRp3ja-l>=,J@Q$NT^.gE:+=0s*%X[-##$EuO2
%TZKKtM/bs(18lEM;aM]PIlXGkoR-iKHS(>h,WC65UC[nj@][?fFA't0W)M+L:aC]!LS+,F5r!Td/h:&&bf8WM/up\Q<-Jn,(!`bg
%neF\%7D]ct:nEkGO@Pn@M#BjRVh.ms,g.>i540@T,;@b!Qs2_l8ZIAs#cH%@(Q-F93?=gB-"0Pf_rHCrd-?`W,nM>4$97Bm!um%G
%,p(_!9/^buEJ-$+\0>$(PTLJj*9[[NF"Q,V>\a>c3IS'JR"i^&K!5Z^)tJk[,Vd4K:M&k^UHU#hd'WieR'!PQJUUWPONE)^B6i(K
%rF1gTFbJGZMU'5P8iirp-U:FogmW&$@2sMgT]M57dLbj#6uYDFX-%iopbaZ85U%ifB\]-"!uS@P:^BkM$-!dZVR-C-\l4PDL3uRK
%*,Hq"=@gKU?IhP539^LUD6h$[_Hr.&Pl_*17B?<[i&uh+!M"q,#Z/,mGI`=<oHtb8N"D$MiebZuoFU53jTVip56L#D?BHA&is_a1
%4!tAUEGDC:0$0c]nZ&t4q,(ag+K-T*b2iS6h'+TM<`CmFWi,s+0J5h.'=D*'0N9!MCC")Z<6_,ceKL89$=oHX:\KK]7)GFDbYms=
%&.'AE(g5U\$9pde?U5Y_KS5LFasFtP-t!4OiJR@B*l]Dm'WJg':oL%?OYuBX&>6Xc/h2hi<5^+Wb$]nuj(*if6Yf3[NnP\o4S`ri
%g-QB$=C`VbOEr(A;-CT*OR."QCC)0e.UlN%5m^4U6)q<pPlolTj$5jS&.9FRC?CT`P%a+f`D%Bi\Q5Vg,e#R"q+>%LGD/&Y7?lOm
%;q.[ZIun/Ed2anR>U2joa,[FOf.m4X'aGWD@SA@9'FBj+`k7'=0&a-f+eI@$pId3YJK$4$oe`V\7`L:#LW:N3oOMo)`qE5q?XbXG
%9m+<'&pIn4`)&M$]/B7@`Y%pHO6p7+Z6WF64g!ou,Y8NX*K;_t/0S.4Z(XJg$s-;_[P?/EdM/oI>Z.)FNDU!F>AiG[O"0G51Q"Wm
%^,QEl^o8d[.+B[inJ!B"!L]5nG<3H.8_#bOEtp$V[D>E*VP-=A.>eCCOI$>bOEicP7^j/,)<-gL+r-QZQp\?\49@L;6oGe@`EWsh
%`uoua#s3R@.*_kGnsgI)&h>t<c7.?oi)%id#<F-)SA6i-1fIM>;Iu!LSF_?02GJ08bb;>oKTb:-=K9P=R%k!L:EekajcL;d=>6]1
%J=VJl%<b,[-$ZO#+qe<*N'a*]<A1Md)h_LZP8u&l^at'XREK?F1-]mmCN5)L\b4IF#$ArHZ0B%IAHc%l!66cL4/'!t<0ELXR*R"o
%8fJUTcA3"`>%8SL:(!8:"1(AFLr,hKE1'u#J[Q'*,1Ta#)"rp,^f5j"e1,9;>f&69V[PD;MCl[X[0?tLMFrO-fK8Y/79WS7g#dlJ
%asOnsT'/@/9l[uO.JHK8?rcjZL^X6J.4dFkCE2XG<"LaG&ku^^pQ2&/eKNPMI34sG)6bB`6kRD\/eKFh\MJA@7*?.8Om8bNfX".I
%!+Tlu5,'ms*Ys=<d&Y=*XH>L0."T$$,q2S]Cp:!?7ga5b6+Ylc/h($//BiF:.N<5cRU+i!-Qr^'f-%+%)ePNDbU9+_<1!lf2]LnM
%Z>\^L@ioNA\LaIU(SRDTP_.H,%rO!PRk,Q0ZnAOoP:@r2lED_\@b@,0.PG@WkUeYUk!:nYOl?Yi'^Jm.\F)=Oi"^?7MF,dfp(Q+@
%ED2(^>cL!821`G)[^!FYc5R*JFdB6]Att(=,Z+@BV423q$`>A/[H#=R:OmkVT`@&<C2=:QHVg]#bta71!a`kcKb>.2HnMi$_MZ:=
%UcFq`lIKD3!a63jEiS!6]p5$aM<9,j,REMREE%UnOukgtL/ka:TqdEq@9j`('TAU:5B>P&!O>]lNG\o`lWQ_'2G)d7N#giT1.LKp
%!a*NrR;I1G`s!`o_X-eLK!BA?k`K#S@PpLU2tda_Y46)mO>]]]D?r_i@)c3(S]DQ)F.al<-Vp*D(".j%:uOAkmX!DQZT;.;X5Xc4
%$bJd/03RnPBG#;!b1Iq;g'c,m;'Qd/b(>:91lXm7#-FO@J;]/-.>1_C/pIMKK$p`h-#<b>3Z'9+BXi\(1=s(`+DP,G3lAmXjpiXZ
%Ttr`Ic+!2%W@h,46oL;5C_$?.mGcA'n*@"2LPd[JI:k::CQP'eWMF9S&nl(o/,N2>i+SN!)QErZYQQmmc:iAPX"$uf85e-='9EBm
%i'(48#&G;>R=Zhs)c2QmR[4)Y/Eb:J6.T*E5hQp.dW[+$<(!jT7&@%K[N!1O3TE^J-rLE-1-WrWf3W!pNd1=*\Y@TpRq5$a^j:^m
%*'.5rH=#991M6fSGh)$)2?;&@]aL%8/+"QrrlUnUa@`8u4?-c,i8nG6.bqb_)KsEKJOEMl:j!UH!D>t_5:<;Pb^<%5@>fj\0R]'(
%d(hN`BT@,tA9A<dF<N*_L=rlh1T8'2QfN^P+X+(]AgSZh*qRLijQfZr\Mpd?=QX0F+jejjpB-<^[jB8h%VHgq+?\Wt7T1;[*t698
%T9..I2ipF)Bc8>)O-Qf4\cA_$QBn>:-44kUWm8GT@Y`),_\d7:QPsoM4de=8cln5#'4gAZ2k'/E&D\=`L;;o%IQ:Gq,ViO@h,p>O
%-U#X&V+<p'"]kba3;&+8;a1E<>*.$."6T^/7##^HfV-_'3;49pRF'Ipk;DsEFf4L=K%6_L(R\D/ofg5Fbs4k!VrQF'gfEQ1%O1@]
%:0infe0qu#$0+a=o4V/g)DmDOoCOBdk*_>_6O@0H)"WEl:1-%=]]3sF#5-H?UlaoJi@6HhduUP5%%"R4g-Y&I"\R_Z6>IB+P)'_d
%Gcnu<%kKH=aMNnN:f.L(dn+/oW[aG+V1/Za),VdZ[F(O3VA>:^3EQASoDskEFNf,I>T(?a(F]jU2D2cX\C>0sq-1_o7AC6Wk\X2D
%BeNJX3MC#<0^,"9C!8LD0Q0WUQ3>\89GYlFpW,&t8'"5FXs/kRRDcH8!66PU^!8H(KE[g+@-YjBI8Zq#b&"s_IH:jsFX)4d;1?pa
%&%.>uER)[\d$kDl"sLI^.d*ePo81GV4MMX*#'ifuEd79#LI.u)E&2GG20MR"J;dd<><3,,e-,M3okMJ^$;a$r8j?sq7308Qg&bh^
%k:j2(dVFtRDVk00!pa2Y!Lf,=_)BJ1>a4%o"Gg,.Cn%dnaEB)iC^\n*3KKAuXpW!TBC0G1]@0Rq4GG?_?Z"O!Pe5/kBU$iEGPPNJ
%aR+@&Wh4o0(bD(-<!!;1q$C5q@!sBkT0-[%/WL@o0h&YIC@0d['MCl[-(o4['QukZq?hhX/i79SV?I6'2j@k6PpkM<Gt+eJYX&Dt
%pb;8+0j[+4Sn2JS.VTVo)q,%M5acSROC(`*RW<'L3:Cn4#YOc_(Qb6QdRejC>Vk:\OV\3F28`ImE?<BJD'%2=&XtuuT`o6J@/j6$
%LO:4+NE-Hf6NWG8G[U\H<6kf=:+WbJ0"]R,ltN282:)_BT.+iYH9O,e:/tkXK(-GbS=6o961E.EI%h+;$8TU/KNc`a.?qtgN$OBW
%Y0C@r81UU%'[A_<?=_D#"Vh>PGSeRj?"K245_O\(L^Z8;A1\>s!gqM)poU2ciQ4D<Q"qtW?5%H3LRpV^YEOQq`:W<@G>k-ZJmQS[
%'C%''#F2#A!>'=WJA=KiCdJeO@>LS-S@mQ%j\1i6=1u&co_+'j6LGf([5qD+4?0GG:"*SS+PQ"B&=M9k<GGGqic?t#45!+QSF/h-
%=8uhG%(Jp."H$-Y)^i3K@'sqf1^V.0^p&KGE!CpI#&[tf>AN)?,a\\.XJf)qZK%VK%!5iD_$&%N:u0)>od+-A,.5IO$V'8%$GC8<
%dHs4PEM7<hZ7QrsFn6hNjdMCL"G:;H$3h`E";S5cZ*f5n=!51$EOtf9!gI#6W@KH0&O8["@((omk+G[*0kD[=69S-`QT?mDOuq<N
%S/kg!J8WRHWeQ=a#H/HC0iBu:7Tj%uKnh-G=4O-78JJ-9NLCd+K*F2q7l__);'%''#ED]m"E[*3S,4ol#m#^n(f%;CpbUBJ6u4HQ
%Q`t47Osi-<gKZ&a'UN$Ti!]`@n-DGOA]niRDA8Kg,_\lU7LOLKTS43YW=YT>IrGgX6<!RN'j3%8#e*!qR@ApIQP([9HJj[X;TcFM
%);*qk>=Xh@Var1-7[Da]#W-XL:hP#e\A1N8Ml27Ei,5sgS!l?I>Wf,O.7,;;e<Dsml_/pMQU('RP],Iio;2#OUeX,5<=PoLe6,p8
%ndJ?[i27?(,014)n/Sa+?lD.5)Pne4'MuA+6B"6GN('>=\IUG>0.JP%Jj9d(+8pR$"SC0]VK!+02chRK4?VVVS6sRb<]Weqf93bB
%V_UN!.$_IWODK7aF"%R!S.nU2LiPpn<J=q7h(>Z%*a"\]!k6[E_78She$T@sQNYk&5f4c)A4E3J3%sTtAr\K#/h<V]I`gkd'UrV\
%pH<?[i&9*22:_7LpuB<XMkY?&MLf*fFE+B4=$M(Znhg%$`%n_8ibD'nCJh5c'MP3E[cUHnFjPqKn,fk-%LmB.Lt,iIV[OP:KWU@e
%ii04!\JR:^$&!Vs(0CZ0MopbjW0,FJR:tpqD@WoD3@&kBY:WRW8";gc-6HD*.\hR$/a1NH:_K+!(fG@Rb#_2t4RP5i)-"'T=cD2V
%_#f;ji_k?&<aSpYZ:&hci4Y\j6Q-W3nQ9"tk8TL^SZs$AVUhbP,X=.56pWsS_"=#c7YLZVJ\OMCL6B!<[L:T=ZH/<l1P=,XJD6Sm
%Z3$"j"<><jNZJW0GpSA;YR=m@h_1/6go^qr+tm"feNomq)k"DS]"YHiPj/G-,.N%$U<Fau6Z1j,1Jimml]Wi[FC(YDJqELlG%EsQ
%7EF6HEF+7@W!MgR_@4X6l670u4&Qp>\r\Y:o6.1^BHu$Bh"MqE,_^68#m<_Ds-[@%ou_<t:Z8KW0S#TN\C/DP`^\fR3(e?6)F-BF
%JKeHP@Kh>=nYp7Zl%dBRRufn4+P$lUN<ZnU;A9:j>g0'+GgLApcm2(HhJ9CH'm:m7W+E'bTeJ8UfrS#0-IpKh'*Cp#:iX,^Y,I2/
%\P3Q8p2n,IM/[ErT[F2GOt>!1>a3WM&5o#Z;!)Lm^s)"PUnC[)%n-&K>GP><TW"c29D#c8NNsrNj#K".oJ%'=C$LpRLQ.+"FrJ:d
%:p-sI+V1G?"q[R^:^`Vo$eZV@hdQ^2eStRLYDdhfUM;@::`>2uAB88VKn6NaQJj!c:g_dr-OMWK0Fc<rK/1]UXDqBndesi6SNm?=
%l5"@.#[hPK'SA8&pD0'Kc0:(`<25TfT-jlu.>[CJfZZH6BO<`FNMe"tNk@]($-9ZZ;gAM%N&;9)nFp'oL#Q))<A@UL-kn]X>#/Xf
%[PGNriS`'7ltp1(TW6a@ooN51/>-timqQh0&B+pLcNg2""Hu,O?:%qBR3T6)fE-nW=+T_.qD>6<5s`r&8,QCk6B`ffFGkFI&sU8h
%7d.UlLB-GHC'S2/(E-_G@q_YK\JZ:cnqi/Z?5:%H5sYTNrQ.dl-4Y**TQE:N<t3hWCd+>kX!h!1X<8](;T=tg5?GF[_,hgVF;M`1
%##n'sZ#:Lo['8QVT;l]m&sW]qcq)>X#_sn"qJTuY4Q(_uT?>sCY2#9"9bJ>*V[S<a-qSOLE"1bpm(I8S4OkAt_/0f(OHG6:C9_*t
%_0HMf+BNChQc8-fW.tItiOkn?k-`-P*hlN![Bp,Kr_*j6;t1Dd"XR1iX.t$)d^51!`'UKFbJgn4\LAbr=JkhMd[L<,&p"@,YlX`[
%/QsPpEVWTnU$B1J-p^K/F0Q5*>HjTl$7R]+n9PJ&=1m>5j*adeIefrENV>OZOH*UUIY,QWAOSR[Su?!X/<^idQ'd#hSUfbl$,_<,
%Khr-JE*r8VE"FFtnYA/Q;+7[E.eh<BOL#&mif>J%OI/OrnFh1B)>MD63X@Mjc_JKO18k0s49d/'Qj!i<*MAr-j,45?kt[U_=e*Q<
%rS\md6YTRjY8"Kl7&(FZbY)[\7sP7aeMWeV03=L$Td;a*>_.bF_t!9.2WQTWl<fU;NFE8/i;*%f%*fR(])u&A`@TND5,cF:_2BIr
%%7Ffb+dhO%OBY[(#dBhq6rc-jWk:B%=hIA$(n]T&22&cDB)s7\kjLGfE&hM]3B[%G7Q;X$2UV&_[N'Jq`@=;_VRe?]\.^@d#q^*H
%77oNs)?GlT!Q71,`afF&a2KDA"2%&/MT`'n"LG#k=.cGG!(CXa"?8rg,=kN=E%D55m(naMD3iHLV^d91e>QulJf,6_]!XM$C9"6i
%72TU/\IF<hBEs7i*,-.h=:Frlba0Kmjk6G\<t.>i=6f2V#H$o+YmNZKa(1U'U8e9W2sS@V:njQV_GuN$7uJ[dYf]!3_HOCF3^7PG
%PCaEgCCpjuEN'[HWObNCFCl2aRnJm.#)!&_WOg:`%bc2?:jPc[qOFL'Lp]M;,sD(Rq'/`YYEn%1722)3NWeldcl>QUGu+*V`NeA;
%eP`rsmY8T+*n<`3pp>^G9"(TG7K@HAB9\)NEb[s,pm<R+?'OG\Lr-^5XAEF1T1TBB_kKs2=TH(.5_Smmf__h)0RQ_-+ka;%R%l!B
%;pttb3M@3n47G\ZC.9L;:+SQ)N!1sZ>fUe]EKLe6cbV/%XE<R<ke1/cEEfG%SXC*UD%IkWKZH"(R!jt4Ti@*%0o<pl\ObrOk&Hs7
%4Vkp;<`Oe!3+/]e=X-rF#:2f,&Nn.6IY=F7p/9s%LniUEhi)u=9>(,4:h<sXPosPSc.cW(0^0.WPRkPLk`?H5$6N;Ioq_[q'rl2i
%:nZm$9ZF,m+D)/c6_,1YK'I;(5@gU:fI%TN'X3d$$M"ttQUKs3+b6e9Pmb?=H[ml3\gS+>U#H3s;F($jifln5Wn&W4F/l`?kR8Pt
%/#SSnqO>=2;$d"#)=#:8d7T@t%_;u+,_da)$0:j2?qac*(k-;FJpMu-;d,*5"j&C\LkqQO0WE$!j.*H-"l*m&g7Ys[EF*4nM1`@D
%dD+PU+br.<$msclR7G&*7bQ>L5$%Kq_f\AbWSj6VbVL<22Nn\$CZQ/P'IO[!^`Z@W,uE4S#,MnLrm8"nBKSQB!oq-TO8q%r>0.?Y
%Y1@/LSOaPSh#,#o"9h4<&(KNPldS]C+U=j'4"X5mn-$&cE3c>`Lj`-Nfc%Z[,"E*q,HSVb6;U2+lGqgVa*'i"N8UblRP\BgMF!A8
%"j24pULtSeU8(jW%jG\%7aI6\6muV[dE4YM2dR)%d@3HCV&UND@rkY(]=W@qQ;/GL2-"URMp._2OG)0b`-TA$=VQ7b4II__6^l#A
%4cV?4![2=DK%Vf:b[7Vck8XPjU>.k,4l,7?;e92bfHi;mTn;MZbUu`g*PmE(7h26ie0`(k\T1FS@*0L%XjO/1P.bV?&PuiEba^e0
%cj/<.W&?jg57cVtX*Z1h7TEqRm8%W=\Fl7ob+"i]$l9oRe1ik5>0'Z)#[%P4Fef&a_`C^u7Cl`"C^/7W-r-YK#`SunlU:e:*@E=2
%/B&jepP$/F0m1GAQKT;`ksXWs*LnmHeu<8,)W6\2btm'E:Z]5a12&&'\Gr2G.nleL43bNlXDVXD\*>oiN$NMtd%jJl?m4U0FR'c>
%<$BeP;b)ns<0T-[$bSNndT.SSq%Xm@,-@$nTM&q';N[,(21LsEmXNS01W!8mN"XcD:3RE*5+^6LjiRrWG0NBq`<h_?+P7F+D_)N.
%'oac)!PT;h@%0'p/68YQ=L,0Z"dsNkO[lD]2scdIH&SqikRh/uShmh^^]hut"YOt`RH%\(Of-FaZm@ouHF#\fN6hN<CO>n!35Zd"
%'ZZaXmQJSp@`RgW4h>-M-W%?BgJOK>9*k5dE+OtE^eE0'S2Z%cZtM/FA%GajLDDT&h+_;o4%iTU0_=D9^aRddMX#'bE>_dW2B]IG
%M?"tkA#f`)US\F8Q_D:#:DM5"_(FIu+N.UBOBJ-:FcgY_'H.&VG5;RJ7)OmLI]pBi`f`)3P=g5Lb>MQ=]F(Y`>`6/$i(Ht`ji8Ob
%Q['Ie:@31-4gBqmBrm&1fNC>Eo72W&$!\T>Qf9o2oVc82k^=*#cYs8D]Hsd3p`$_<)92^p1fn=_>TN]ES_<8+^k+3_irbE(9TE=@
%"lo#K5!Du;kU,=,i6J*L;6"W`:8jDfmSi1T*]lbdRb3d;^]J;,XGh`'R5sWNC7klZ#c#\(#(iM^6Ghp(E>^tRQ``'eh*E,Z_5/Jp
%U+_)/<[&8c$-A_5Q:$5*nQ/Q`CM"VUT'+Z6_^FDUitGuM&b)Rn]@1;,R=V\4^%HG>OT83+biBhD87l^3,tIiVcM/f>l&J2n==06Z
%^/`JPV0N_!c]+KM6R5T)&XoX*]Wc2nF>*74WPE9l=0j)G"O,!1bU2I!5kh(-[N1at1eMomQCB%cZBio?Qc5'j/FYn?[&H=ib(:X3
%oA9]r?_g/i]oUD%'CqV^Gl^U6AenTW,pNY:5*!HflJY$b;<4hQ_K+"'i"`i.>-P4D*d,u1he-itT&LoG+^Dpli^@hm[OcSqSQ5cg
%Z&LrN(9SUS7QO?u9pd1/9(ksOY,[Lp(*nR)b)+/4&/&o$Z]m-]mH.$D=^^mLk&MXUN=d`Fa-j41Z/a@>R)V<V7?EaBbLALdFm('%
%[;+qSR+f\eFf#dnl:Ob15%%\1+t0.oW81Rp4]Q*^F;e@C%c+(O<K+/h$m#e`C=o1m;0F/5Pi5Z:'LWKTU^S8`j>8$:J?.0U<!Dj4
%@.o@2(-=3]:4N_WMP"j#M)?@n"*,s8/]?eUNOZ&@cR^h60E;M?M\8;]dYtVDFjMQf$6fk2_#UF5="/4>NB4ksOej6r'?J>ck=M2c
%ag1"VgQaD,OFN[eaO)OU:2H@9bUA;f[MSCeEF'`Sl,g48\j)E5lJpPV4A./C679nUREuFK!jt<k47/Wjqj^g9Ent-ILR)VR,fZ"1
%[7nbCT+(;!e'/$,V!Bj@PAVV"4]kN">ri@QP=0(G`F5-hW/8X=\-FGB7:lr41IW1Hjbt0(<$aHB-9;N<emLaVW&9tb@C`KFbS6MM
%0i_TD)XSieETI2KX;S7V&9@i*1AI*uiMu^L$pIC58cOn@M?no;PNm(CT-?)i!7KEGU^OD5_&5r2=_=n*!=05:(tJpgYcogk2Q=;H
%'/>T\7M(QN.Rq_AguM=9+Y?cFVG5'YA5LA/$J+MQYojsnSC4;G()a2TC(T>mF<BU`7b./uhD/i<O9m@\9qp]"//%s%Ka,tk]1't'
%:u=\WQ^ptA#DXbQ-%R)60u.bKeN>;)E+Z?[oX6M*8MF6+gfodC_O+5TECL`.%,6^OeiD4rHK-/i&N,O:oQ#7<0rH^pN66gpWOcM@
%YVHp-N[kFb&:MprBUf3_+g)=3A<+)m5`-g=K5Df,5cId,VUH(lXn6h[91&aXY=0Ke6P)D8FN)F.cEIFc!jE*!8+eL[1Q18=B\RJ1
%$WXE+0fD"&)YGC1B-G&u/U3%]7Hp/*1)%"5g;%LRQ^/o#TddMuEn9gdk8N-GZ<+$LL0JY(`dD0n/>#sO"?V627gT;BIH[8eWP=/?
%)6)b-FU"Z+3K,OI?%un1Gr,t'MK3X^$tNUE`Y>dJ#d5X;;8dbE</\,3$(W;'"%?s:+#Qe0N0!gr0]sDJ7QC1_Nr[0*(tjP1],[J'
%bK:qRB-E!41W<`+1P50<>SE`Ci0$aV(:aFHm\%0C91EK[O%\%&lRduZm]_kn!%]oY)_?_h]>F91&4c53<5'G.c(gS?el&X;Mioo_
%5rf'PlFB;-jg=J];6"4S%aeLN%7A^34TRMkfm6@'6D():2nr[YqBhI`Pp!bbSMT;>Pc.M7in!`?.:Ep3R;\J$>BnZ*aIQk-rKnt\
%`MKS)[i8([-uEH@0#;VWCsup*N5Z#]<^+T/-)Cj'H"4j/HcQlN-u&.q>\>SV$L^a"=p?3B=e(sOCK_>q9caJp?^Mq1DfK5;/DPA"
%S0O*F93HnEePHcCW^b!l2mhGti(Q$-'e,a<^U+@`.ZU))R50=u>!pr<Aq^H</k6&d\DX#TiIFB5]gQn.s6)a>."Z@L\>\1=5sjiJ
%1RSE+m"<he*QE->J>Hg;\0`AX.UnQbJ=+=r^8oCe''+Z+!%X"o&.47,Od.DO&;20`4Jds'<e>EhkO>*T[(?fN86,cSN7b$8@SdbZ
%m\hZBUu[j<*AKW*F:oM0("?H8.Nro_9IL-Ke\\@32KX"3Q5^I(ntfa^Zbj^PpYc/s[YCf%ino>-"614Ad_k)L$%V5T9b9>7Jr,hh
%=@&7Q!6GnF/WeEt((,Aae&Mj=M3S!1\XL@7IF6K-5am!5:pOV#&PO:e*+<l;(HgArY)pk3&k?Q.N!k7n'+s7\,MRQccPPk3b,@g^
%o$e:;#0UN^.$J"8qioP7&Q0h$V%=rcmK'%RSVVm\0P*4/iB@B-W?)r^.g7+HZ?r/4N\7aDJtj?),p\#)M*OSr&oWj?68TF8;/0)=
%Vl)ciTFhPuiKjeI?H-4oE0[CYYQ;i%!5aOpDQ(F"]YJ*2oYEgQ9?HcKjHXs^8tT^G6CG(br`_Z#RV7ut`"?Ut)b>ViJ:_KZ1Kl55
%\W-2OQdO61^rs8NnL5@"!kG1Kh280Y[7+)O46jKb?Vr't@G4E[EK!2n7;_uZNFP:\LY0\dJ7(n[Dl>Q=J9ZY.)BbCr88,[W>(jJ"
%,o!4qT&Vfk"p.Sc(Qf"9"F9Yab`VTj=#!WL&L7Ug\DZ#fhSF%mc-"Tc$aXRc[6c;4EsP-AC.3a4s.@3f/hO-DHLW1qdMLIbNF3q_
%_XGp>TGZO'j_G=,lI:q($$nF^4/!^pQZ8;%V!:qu7XV2TcOlBiW;s]8/?_f#8f.Q%q#[JrJVag*aNP^FXU`o\c9%][MKp\e-nmel
%&l4/&A8upc$EKV_kY!<*lnZ`HH!DCZ4@td'YDs0)acSBh^GG54:s]'9OYK1K\<.&^Ie.,"7^f(!645^Q>liIIKM"PG+>U,dSD/u?
%:WI9:hAM;^0'JU-Om9VI$5XpK*--76WI\aT4lmmDj:1u)$?)`9T6^T2rkJ.'DeX(N<pe_thg\jEg+uJsHWtl3Bm03bq6!Zo\))7b
%0E&&;^??hQJF4oF"<7O^9G%3JeH8EXN?4O];+M.d+Ai:`!r<js5tsK?"<2^SZX_D$Lia(m%0jTI7P-djEX@qM!X;i!0b"0ICiBMT
%"P/gfn3d\dNHEA#'[*jK!X=7Q#nK9?OgKF",u^AGT*0]X\JFl-d%_gW@+`0>69qN;Lb0VW4n]-G25H6Rn8W(h'8@Ue&5:t7=;9[!
%4OCQ8@cgE[i'8^oRF#q7!PB(U]tr5P0Ymq"BQE8L9"1`m1Eg=uXVt#jD_f.#N1`2)(k<gY<&n&?DntrI:rr%h<JMtc3)0n?T+B6g
%-J"!Dni20ZB%Phn9\\qL$IV9(F1guSalEcQ@6%a=5$f:&F5hag?]H:Qn1?/4EFCt/Adf9R));U%$ADfZTbh];,"rUV7h:%&#GFE(
%1c)@T?A\rlV(r/b)A;1"80#;0@h+'-hpb<hoqS&M+`M!,C,#sN]RXaWDa9HK+Oa>cr`HMD$e=B$6\$B")O\8AS-))0!JMO^o*KqK
%F=`;#PI+OMY7l'YJ:\HdkUbrG$ge?G<SVQB:j?FqoPk:rjs;"_B0%n3)O&&]C^<isF(i!(H:@%P7,V"@qHI^Z3*L8T;,JZW%gX*V
%1^=7Z.3jC&\t5)k:A\%_T.&"pbl"E.-72a],(dX>7%,mL.K(T\0iYl/-+$AjbUZY]Kt4<3\5N]gkD/>Li#lLpaaAuC&qKF0bX+G_
%E(NX6AQW@&B7c\flS[K(S;]:_^EsRD)kejo1bUTZ&AbSjLGHY'/n`:M$Bh3,F`<4&a!V-L5o7K&:mN`V=2Yq.%.SjYM#j;M!kqp]
%RZ&mQKi[7[LN<j>ETs+u(F20a7^2%4V!eltc)hSF_",?oi_m;tN=lSN'.([2)`'+!Bk#R`;nJ!N:0)EI_&G8?7Uft69eBq57kSn8
%6,WIU!<&Uc_AWGfPc0L;UabItIHcbf.Yh]$==JBCQ:0WY_..;#L*db-9Sb5%'k>>l7S3iff"G$7=Tc!XWq?@"HC?<#RB7<,)u)Ua
%+tuiK`^tbrJ?b3oU=A-qJIrB(D`ac7WtL@^>Wq:A]nF"T?na2Y<fAY-qG%*pW="jAX.b.'Zm["G65E_VRKo^kYQqOsdM5j7J/T,H
%'5-Pa9HhtNV,p]LP`O0_'+D'?-'644"=I-"PGESV@WL,J0'CesXu>m&l)JRT8G/ET,I!bBR[siF$h;fT^^9E)AKt1,kbUMs#dVHc
%&ft-fA"+c$dIu?'_J<`G.i</_2TnY!$3VTI*21G`RHoPMZF-a)Cmp_Q1N-7'X2+<T(gahRk))Hf-Ek<fl&4KL6ELQK]8Ph69.WPV
%:q:750K&QaA]aiY:1]7dQ?adlCDVqspC+KAJkQT+D_pMf6pFdXo,t!O6T-Am@E+I)0j)T&jD^IKT%:CqNf<B_i&6[@Jk:M1%@enD
%TMLf6W?B*>41;(o'(M'[F1n/EVaO",M*-$BkS$^;mDd_f0,'m!G#Gg[A&:!\B'11157QGOQK2kVJ&c1mN!JF=?!ME.Mkc-C]Sl<G
%;#*d_TmA+PREL3#)/BtG[tE!0bqL7U37W[+*OZ.T+R)dug_LrrP't38g$:K1@)S-D5@#%"hi=,k'3ZK"_o.dkG\J?u_e:=*6]D<N
%=&`MsE?<kM&3(;EmO!.F=X#IPZ[?#4Hsfup2*"qW#3tIoS7MgJGm=n;#rQ1`ahj;n,&aEJW?rAn3@`R>0KIj?Bt;;HJ-CI_):24B
%G/_"hWuj@AaAUOI82:_a:bjV]KU>ka%CmjE5^*7jm#WKFA-(QR\WZNJqC1EiRXaF\R5S4jZ,6c(?8uM*I#ZX2N"^"`7s3)%0X2?(
%]Z$41knq9f@BtX]_W0-$+LRVMNf&M<F.t8%cq1i[@"nt6*lsL7)4?maMb'fuT,(l#>"oF#BS>;^YB6V'556k:&GM.E)i:Jo[i@;P
%]qX^%_VrXOJ.E3pZ_25T&t5<C<YumRf26umn<E,P(#_G=9/'oA0]OquW[$\\\/1SD'BY*Nk#@_]fX/hcRn9!\1215l-Gp1'^.K.X
%Q].l$O<.:57FFB#P(n$Tj\l1aG?49Pa?Q>Y*^LQ99AZepgl=I\09I]IL)6*HqK3^!TS1Ce/lU.5)(Xu&[J2R</g$Zb^EL3"&.`R&
%\\PO%od(jEbhBnO),Y-r<)i!RROS_YHd*Z@+qtnd`7p[EOG0a-M//?:_S]6rOrs1l.3IZY7GBN9r5(Cdd$9/n(GT/@a!@_Kat6pT
%9SFc:`h$V9-fp;Mno`dH1h)7L#r[^=QK=mSc<)3()i8C,TQ]VUMX@9DKXjHX\6:'M6FV'JT36gdkrrHBLaddC.Ve6kOP@[QJIh8g
%'U^TuMK_UuK2.YV.IAWVD]4sIJ7\m/^Vl$_dns%6We:n;@hZ;=Keh8h$t0OiN(&@j;kIpDj0>g-Pe7AEdsr>$WH^4aBrH:^e##em
%X;.0RZ,@<l=_>u*Orqr-GqN@p6J,fnE-J.Eh+k-@-O=jo4rTBH3^Uf\J8O?AO9m84FDX._"FG(pO)fh4q+nA%8ZCP*S'i\6>M7n3
%De4E"]p/rf-7cr\jPXr",0.cl"IEUfX3r@&.W.G*%44*8'B&o!Rd1+RV2Lb?Agf;Q[1Nn4.BAU7[1=U?k'!cLi%o+Yal$P@Cg['I
%::*PK1#?JUl(T#^HUPE2-nVn5Zn+N?pUI[iGmnaG.pYF@EoOVk-rDC^Njh,.GWUIikZ*M\]5\"l8ch]WM;G'`ij\Qb7:^O"EZZZ8
%05`h1(8`'=N"SM:VMas;:YKTPF^Bh2Y@0S08SnAeJAR:=GuL&/;?bjs/B\Np*fP2K]RspK5V`UkMuhsXV)=d(`rPg$SIH0u7O>;o
%.R&cMrJ6C[Tk[5#Air8'Y<_;_CR!;8?C+?B\)_-<:$-S9I#UUZgu;H5aL#&_5qcBE\[_]oO\aY'D\&J&JH:\Q],MoDOilTQ0r;%g
%?k3"ZnNbu6@:"J`%>=p]OhRj9YUe1j+bq+;TERNcVS#O@V\M'PFJc2DJ/2:5R7om);kul.N7Zf8OPkn;)XQ>1e92PdpdD9oa.NFV
%X#HjM@Z9k25_t;)'Dmpi9<+#s\HWl\eAc0)S"iL`Y0+UHeO9-jUoZLH,D$$'ie@u<P_G;N:M`GTjB+(3H'Mldm"nOuQtRCT>tng0
%i,5Bs+ac[MfbI@dp6$fd=#)mhRJYItP7.mMdb^?hJ0+a5gA's@oh]?rKf];!;U%O)7B:Gk@)I"p@JQ-L_8tu<$$%0s-cW(Ch-'DR
%_,4X>3PcgPMH76s(WP5!l!>AQ/tF1'b<mXe(#4cOXcO2gb4j9+D+cQh"f(BI/pJ^\+9UUqHfPlM"&^-eHD[2nH4u7uirr`TiIb\;
%GVU-44<q/f0M=.:fSB+g$)p(":G)j!-`uod`S3;N9$B])P-`)!"')_k+r%I0eMKfFTq,;1]$sWWaim,oKZ8`ICdrXX)Tq-1TP]'7
%H!gsup#V__#G9"G$8oM9C_>UiD$7g\hZQ:i:DXXe)&q0;>9*h"E>Jeb]J*Qs9[bLh!`uSL%JEY6';rkS_4ZAU'JJ6LA)",)rpuO.
%Y;oOI,1BZ@FRQIt25-O:WUE_A))I`Qjl[0s>P+G(Q]Z3<:luNiEX2"r+Zi`9^k5O4oE&,H9f?OP1bL-E8L7RY\07dij>7^&?@90j
%P'pb<5e3f7qu2'[5F%PIeEQm1rjV[%r6kMm;8lGp%^mZIrsnR^cUrhe6jt8o^'_\kquPY!*^sVraBnBq)(Gn/bV;A*0jekQ"gmnu
%K^_@3/tmHG,U'JS]eibe$>!L^__!`S3BVOZ.+=n;WBEXC#`S&HFPA8s^dVu$4b_RAX1QIg@%SR0,CYF_Jp`SBLW;(g`i/.h@BV/t
%)a/u<<U$FGl/Bh2o;?+)=YL3m,,4CjSpnlK*Vc@ZBg!-A+9H@F8qN/&L2Wcl<=1)UNW)Bg*"3TH^+'iV3F-cO"A)?44npa@9^'A)
%@`gK$[P"gY4;\ml:&t/+g%2Ed94VZH89-`r72K1D+;n'1\?X*=#F]g0@jD$hNa,_!H5(B.N,_KNZ33.`kN=,1Qnaj],#]CJ8pV%P
%&b370X9<V($oFA'p#n$t#n\[\f/V&"obB4%F*TK'(.^u\NZ^isAeDl8OdYJ<cCiAm4'<8Sp!qKF%8n%JKu:#RPVXp9<N2@(eRi>d
%-[#dd3U.PgP:aT5,hK7Q\EeCY,<T8qCHoAr79$/F&'XUJC2pcRBTBIAl%7=2<9hQ(5[>-CXh9V;8F02lDJ3u_SrsFin+=JQT^<s'
%2ZZ;.+SliW.,BMAPGfb_i6?XKZ<iYB,:8HcT7'Z4gW9mr,9J#QA#(6\;[J2N*e!;c3Kj0#pW>#rbg`5+GSFE8$j2\>;JmsBLO/$A
%i0.%A,7b4#'W4F[@=d#269jMS_ufn"-GQ1A%UT?7b)jEU3&9P7;BKq4TiB/8n5pPMOOM0,9h,U2+,qL1/#,fEL3f-\.Nq1,4^_[o
%,9c)PX`SBb6ir=?R[@Js_?^@49$KD+.-V@:E6=jPq#@>\>]qsUXXcLEi-4CAV[&qeM:=4=84Eb.K>9_]%giP:JG93#W4[TOXgL+,
%^Ub$0K?U@K^F2_6ARF"plcUem8e9GMjf;l%\kL@e[755N6>H&P)3m0[KcaTr?`'Js406mE0IE8k,>,OR5!,p8)>ot#TiXX>W'Tfs
%Q6iCW6!Z5YNF68BjFaB=A:?Aq0@_Q;"YF46j_B_a"3^>R0<Z;4Q*od]S&nP&!*W`9TA30p^W*rB6dX"]V&Eg,'tHO'i#(/=^rVMG
%J@fq*G?s:=o)Kb3c27<IC9OGdGeN.60;C*q0=BB8V8Unb4@<'bWFg\3?;#eq[^I)KcailGfM(:o<SZ^^&D!*S,Kg="l!@GF5ONBA
%l2XG.8s*sgSrh67_Hk!Tf#/NaU8n79RLiIi&I^4`@Z>r8c*R5OS8WP>!(Eo_Q7SlWL<G\>2`92`^7e\g7V]7R>GD<kG_lgtU$B#T
%HUtJ3l$Q@Q$"@#b3*2"E""6'KdY1)b-ABTLU(BhXTd-$I'NLXfGZm_!>uLCD=tbDL[c_BA(=MQ+$WsmYXh28G[I";2d'e^MqVBqV
%]&H1GiPQKTd3>]@4e`u:haQd>p7.;RYSY1>@TZqh5C:?E_$Ls2,Fl0'U-+L01:g^e7N,M+#G?(-[c3d_K&:,dmFKkH/fL0B=ds"5
%`L6Sb$5E9%A5-qll;PI!&L``CRDc^fdCLld:2NNgnLRY<?BS^$)J1#K-M'X>#ji*.;bMbeFThG@6?:1DIK_BlTZbO:b9]`mYms]n
%\PIR8^NclILr$IPV1j7,64[$8*-j_[+f,me-m9&LI:/ZS<GF)d.T&&GoQ=,<e0G'O'gVa]>\a7>GibVc2Qa_Xl,N/BXM^U"hJIU=
%LsBEETYT-.IJN#5J]0,7bbTjT@sZ8m4p2O<3RXE<]"APT6Ti'9)-*X@G?=S5>uB2pgs:&@hJL<=;/#HkqJ"2Hq3Z=<O)ZLZI`t.+
%KCpVT\($e*/9G,<8a7%'>Ag5k5nDNDM+]D@+hAtlbL*1A;-U%HZi%*uD<5f5rGm5Roef%*EjTu2'R8*="=WFHBh7?E)D&(#(8O8"
%SkODS%>i0pq=6`.6&I8"S&.pKDOE/J1[OKf/q1u,Cg"i^9ClY1-:1V8k2'>>ntF!'08i/\>R\%bnZQN[K.'`@:$8$CY$`LBlk:\C
%0#6_-r@U/A2/GVYa%41EWaqXbN7XC_(<S\9cYD`SRS`Z4e?abr[iVp:J4'PsE`Lm,%)C3#lghd^R]*YU>nOh?*%$#S7=L<_biS,9
%#4og?Xf;Mup$^`B.=0O1/ORQR:n]sNcK;e+igaBnZcuKmVkNu@5M`(SO\N__^T-QU=_F5)l<<BVX?TES*DG=lG0a#?*32]H8JoA3
%_g>>cc53M,+duPNDSQe')*G()h44YE<u6bZ,9sj7iDGEQ>tgiVJ*NpDG+6CT33rr9.b4iu%Ws7@BN^#7:XA=%o[B[4cbslU56Xid
%dh<.HSkm%/)+n%#Q0-GK]dWr,Ku"/=W#qLlDf__u2Vee7F7I;>5:+rjb?+jC)57HZ[$g$HbZf'HdBL>c$D[g:I!r,-5a51N,V=TK
%NE,2S?17*:"'9#N].<9D9k+>OM[R5tPbV:iCR$`.Yb@07WT$U1Wb:OqJ['$(O66%+Tq,p;!aeP1/O8LPi_p08lH;gs67?lN;?X>t
%fB&jAa"NML<LhT>>Kn$:3qD2,`^CE$PU?+3[7mit;*)gj.a.?6>U6KiAq?+bDMEtdF)):0F^\D>\o(sGnd;4&.*P[kD6jBV>A,tA
%?JjkA&VFk/)4JoqI`Jch]or'\gj"9NU+A^i`S2bj!qR;6Z6TYaoW.@cm=;fEDs0H5bf%:4'WJ71>D,@.h2I()1+@CmHg(b9#%dei
%]1q.[c1REAe9(t"*1JFQ1]7L44*ksA)!B!*Q,^=]NdJOlo@0"VQouk6'%%*:T&=eC"-JT]4seMh#6gYDHps5;7.W_WWaF55*k[Y,
%7^t::6Wt`^lEql[N,V'p,q2s-qXRSX.]*jY'I[^?p."k0As[cRp0?^h[8M!ZGOXJ#REguZ5[LniCR]qn>O4!+f/i0HK_c,U;WVsY
%Kn+i<f/KI2=bn1\^*=t2;iuEdd"oi2h\;0>iN_`OZ$im$34?elpSje9r.H&$$CZj=HHT.PY,Oj8R(`\d$;GF3UanjIM.W-'93ME!
%bg0@bTi/*Cjg""9!QYR(8@E5+6p\F#an!oKa27Lb1,gW-EiLqYNu=W`^nk7lfXG<i`A%Z#^62rWABL_Wc1:%]N%,n0\N-O#R*7;0
%oLL*VKn`np"k2g+NA04Ek;9ofCG%bt]e[f1ea'Rk*Db0-K'-<78I`+`es/<s5C4Z@QhLN(6M7]=(K7_O4*n%AXpI"k>Y\IhVH]G*
%1""/[XD.8PbP!_u@![+PBF`Aa>d`^/OaccbeKl^>TDaJ70B2cmbp@3I7X1CMAT?\jHMIjB=%+D.+C;1F]Db=_O]Pm18bb*N-Wk*O
%<GogDB_1??4P]'p&b'pR27H5a!lqmslWQUSc?#R+(__=UeG%b59*H51Y4D8:k8BAlq*9..$`TTXkbs)elU+5?+oGoEFbZ["M(]"1
%@VFdXnfu>gZ$dATf%#<0-+2gcL:;n*LM_:M<0[\b758rXH#EH;4_e&a>>*;@O6&PVT;m=<e7J-$&D@PQ5$9u_j#N'd@F2Z=_IDe;
%0@k`?.1hQ=&SZ7>P;l6k080u7OEoi$5l*&)jV@$C@i;f]"M&7eYPEor)$FP,b0RD$P4uK#9TK(oRf;uX`LIriW\U;sLm@#iTrlO$
%qto6r?qYdB#JA,dhugoPA,#RRY(X&,O;B%;)XPNt$(.T?D?c;r3(BP9^8hfB6VZT-]jbL?Hd/$g^ql'QRonAalLie=XtRI$CCc2A
%m1hl`^\UU,!0DgnGVLT>3fgCW:&o8Ue)P7!H$5IPBnt,C-/N.AqYXJtCB>"Ao-tVae=O5rN+hZ8pNZA2TV?KgHVfYukG2SKk6n4i
%psC:CPFLYd9uML/m1iYCT2Mom#kG=&/F>KjVc%-(?.YFV'"i/NmV)nAET+rMB2618g@R+l4h.Q8PrrgL'LRGi:p!sDflqa?U0D'I
%RnRK2'UfgR@e5O.pA$*Y'.$!3GjIs)(+n2_hF[,oVbXkV/](rDR8(QM<G#Pa],)Q:g9.BCUJetPQl%qWWe&YIn2%$[cWf4B,p=Ne
%S_balZ+iE:h1f:`jt9NE9,&jP'eil6$@$CjGP1B@a:nu^*L(&sngG4:?M-9uQ'CKS:EAehqVM\_Q]d=mr#'nu&eC#fA`5TgeZFcj
%,@Z9o[)ZE)b>67PX)-W+GE4D2$B?\a8i).&gTD7BNYC6@IhOWa=F7R4[NO-5cTH(U]ddf#FY6&HW62PcCl(m>`A$FL8R%+m'q<[`
%L)VEY%^Ju-!dn(?&fp^q%VD9Ept\uMQQBKpKr3W1mPE;Oaob_rBgfou*$uc;BsDSUd77k_I=0Ji5$Mm^h;\TC(T@EU2V"Gb?;>d[
%lEk#L:cCEZd`QIc54NO1Z+PI-q5mnAm!1ZRH8NMUC%i`fB$d/k0A8BT]RPNpANi>"Be*=inG6*<IG)cd%c3jDl$4E6O5EWii]>SU
%hnja$ZS&/V>5(#-ne'*9][$ue",6EejJm[,E7[nn@K]f9W-?BBW,ilXBhr3VN"kS5Tt\E>f$iYN->i+q&u.g-(0X1QFgZnHkEtqh
%FGT.8UGlo&P8OM9[Hs^]#i$r)m]kuZehY=0US^OIAm`j191f6qP$eH0>/qGH;FA<1i4N/s6O-ogrM[-KA!*+i*H'\b+4M(td/5'i
%P)!GORg1EPo.%u-)(8BJ!i7[2j=aG2QmX2W<7aukM71k\ct1]2pJJ<].*L)S;:O'#k*F=]Pu!umdH.8d;bVj*]o"!3^%:n;6%+oo
%>4b<%E]_G0]HASB3foe7in>*56Ig/<]Bpb%:$KM4_:C<O`/cZ/l_6loPN'J7n+u#.p+b8^)bI.OAadf*GRUei#$U0NUdj>X</b;X
%Eu^nLqKT"6Y*)nXr-6Rj"]TRa9a`Qk:XER)eDU@sQ\#rkYXopbKMG`E-VsUjQboWRcK3LK:e9ue0/I$mP%Pc<>LZK#U%W_JOh?,+
%FIc7Q4277Y^_E`P7s9a'.pjo9=EJf[LkPPh0VY[?*BmVL]X\i&\-4aO!]!m'ie)?3.M![`A9A:_!3/tuJ.kE,l>).\pGqXe`s+uc
%/Krj>;E>N5>@3)^-US*`<3V(a6gANkCE1O^#n9X+C$2-Rq-hD;QYt91P_B;+G[a593(t1gS=ERT(gdg-=L:bDfRkeMBGBP[aUq)d
%n2ZHlYa7JrV2KAd5VV\\e(oVLM&mh;EqG2;6pA%T@5e62XZ6([3`iNj_a2Yn+Hp>j@!Yedj3n,kLK$t0IE3Y$4V!MEIP1m=jBRH%
%`$9c!+K(bkDuA,Z9a(&I!X,><_Cj5@UDr7->h`Yr)!_i6@3Etcq3>C<\@;0IGrAs>jVpX0>&(Ek=YAb1^MiLk\i@e*fKj&9S@j7k
%G40-LX<1`lNFT["c28^7)0meI"pE&*2[2\[S%kKSU\4>%Pt>b2>k+Cc)2Hk=29K5H(r=0@LJHf",k$::27]l8hfkE4[&2;007SoF
%e\3CNn%A[p<T;O-Gk!nlTrM&$qT<uZi#T0Oigducpak]sG>:G]b$1ILdq"oiF^:NWE$X?J]f'i<LL9)J/4:C:(Rgs8e9P'P/hWtb
%9"_jFGgbE/,)Uc9;0h3ri/!Nk4D3i6I^AVRXU;]1Bb[K4gptYS#LK_,1N>E:ZC>q4'XNf3X1KnHkY[.pHKB#3%dS#Ija#O$8?J/$
%r-UBC'fi)!C]mY_P1\%N,XuJ>099q"L=Z*-9gFsT)!.2\oLQ@G0`Usd#IP.rTgNOQ[<sk+G)8?'f"UcG)Qsu1g-#U-fP0LmLJ2m5
%']HC)%oBcV*S-@_aheF11CW>hTH;G*-IRO>)Q:YO.`DS`31$ft&eVCD[)3#rOD!8e3`JYI(`kQm/nC,[!rJ7YL\Cp?hepR3m>qmK
%eea(XDOO_nPIjmTk\J7]BbI2:<?3u'HWZ"nTNJ$=F_qRj<D,I`mL)]eeftCAB&Dqd>KS!G.;4Df5^!?&l.TbMfo:5pQg7*V>^Qnd
%blu4\W9=b%V=/\PH&RB?a76rEf$U"7a?q[ul-:@5UdV[+i8r@&$*36Kh&@Fu"G&b@niTXg6-PDXS_Kci;VP[MGVPs?T[3%NAUZ]F
%"3%n9NTT>@Pk/1Ks2a(qS7N&4G!sRh6\J"8f:Gc_>E1rC+mCuXORRKUE#9f2a@lE<`n7hF$\?p,!:p'gjPkp8/a#4V>*uLIDu]o*
%@]gZoh(HURGr2OG]rNo&^lVKTI+fUbc9?lCiK+KSA-<-f,*Xe@o!PF:c,K_/H;M$0\Qh^U;BOK0SItI'$`2>(&ZX(Q30s=07YTs;
%0:b.qElG'O#RWEH_SZ#G(&$*;\);TFP,55X`Q3A7Eq^:Sdb#YrAFuEn_PbQZ+uYX_M3.TAql]*aP@/B;No`a\gejCgl*'PYKpF&$
%)7QIMWbIXE*uTiDPkE&CO%=NYAV=\N$17:37h9VaRjUZ/l(uu(eDZBM:nKc9QDi![`,-QkcgsM#UMW.hhCSa]FdX%eU-2VL*':8l
%k,e#BX_1+Fnh=$RbH_8o*\Fk?0cm/^/nF2q930",3ITs2%]f0=e_CAdI6<gtB+TX1HH+/C2Xud,RLu"25)B/2<QnG*HM`TCI/29J
%VGDXhWQSfM+^F9W^1NGpVIM=q;,\P"*c`8E%N8!:.WnuF@<<bp$hE-t8VM"cGn*)^fJhD&^-7QB5"D&ri3(R5/?f$]8T\/@dV3SZ
%?jDrjMZT!Em7;3hg..T@VksNP/$j*=bMTBnC:Tlq44RLCJVe*IBnB<apA.g2f%gR,Ptm2p76-58IupN7I"7N.o,",RoWT&KSQ>:&
%3%fJZdZM_Xa:58pnT-_].#6iJ`#gUm?T%12IFBscGPVjRQqb5kD9J,)>Bb(Ql`_&6TkS(9$1IA5\r^I%%*4i2TDYk-/25Ws_G/e=
%ldLY_ZDV#ohV&pNUuq">ib1cl@I]ZO=1!mdWib"\2^`h-BM`RHLk0b38,7UcZXdeG5T]jEr5S=ikTS,52nep%(R\C_Q`&ltj3#Hh
%I#7T++#m;TO\\1u>2?X/pRi_mnYkQA&KF5hG&2#2VT^/2`-5\7Ht&pKj;l\1E0R869(,`F>h9Cjh;&eK[&sD%Wa(kI5o1.nT$'E,
%6qcjuldE_B,q_=2ha&\hgR%n1-VOe,WpQa]L!J#'714iu#2>CfC7'8X.0P)IRY8PL)=dMi.SH>%<.JlY5U$l5T0_!OfIf")1B_ta
%h[/T5RYVO64u%?\iKk^F+E0E/WseX!Xl4Y@+mF:qHMpj>-e/hJX%8P@K'LR0S2O-%K1iFbL8(K6l9nLpO90k(."R_qRP";d8pU(N
%O\pQb3GTP:VGP$GF#M(?CRMfTbPRXEoj3qEBMa_GbEfV&cJgru.d;ms4Z@IFYF0m.Pa>at1PI!=ZpN%Hh+>"S2::_(/gNPa-Bl>u
%p`nSjCiZ6b,He47`+%NQ=05_/$"h3d9Ia&j6`t%hFD=NQn2V[@.h'#2(8VQta$+uBQ,C"W-RB><ZsBC"1E.#o\**<=+us];)96g8
%NnPXtF6)+A%`-,Fq#Camk"2/XiL]H&!N!$HrJ"\AhDqm=-22-Oh'54V$*qA:);?''`%HdXYc]Wb,33SBhno2VKfGK>!tHW.N:jEk
%Q]\HFr2;Z)nW_X*V#u?JUMl:)\.<e?LhH+-2?Ge@(4%fY($m_DT%@gFp#o*E#UPu;E&=6c1cVui+^cF*1TL!h0GFKfiImhQ88Dlm
%.LERf^,01qQt1(5;?Sm^I%R@a\ZV%6:oe7ce[Ed^+a&61l1OTH<I%r[J#N"2TDtIipZ:-os*9pfpMj(>Ja69hGiR,0RO&=/2eXAL
%3IFkgVZ?-,XLsU40Z9"'+5P?;X8LnJq0N`WB;Cr-,F[VK)lQMq<H>NZ_P[m!TnS0NmYsi-.!u:?])W1%=g8DHE>AniSP:3K)$Bgg
%lRt[H//niXRVgWh<9Mq@/uH?G7SQ.dBEh(="G-&UFq^LeY_bH4EAVgC&n>Z?[mk87SK;>OSntC)W;(4i8&\Ene]ROCJb0L_9g$\l
%)IG_Rc_8:W)8ac2mY-OY.`<QB<qkQ)b"skV-S9[cLMdoMU7*'T:P9Q#lS&'h5I`F?2JU%EnLLEJ*W1'99hNj\,)k`@I8+8a$LS!^
%BT,?_<87n59lL*/n>Y[R`Er"MLRn$)9E+2Fe#_\u.RgjQ^J/7(0+#4K2fl45<MnmL2=L'DH;#OrTP%>k2VY#bURp4LmKpRp,M$*^
%!m;eA@mjO#d\-c<JrUuf@Nl.FkS.a^>ub<@TV(KUn(f&?V@O9romX4snURV'\\X%mi%=7Q8'DcnWCPftP&@7ZX>`SuU95^A`E>g4
%q3ELj/+0glK_YaUg.*R:<?N=ceN@KLr@2e[S7:8SQR>g"jB\rl7F5H3A6pd(Db`*k'f1pf'dd3t@PqeYWbV(shB>3S5RQ]*kKS'"
%o2GFIQhqgJ@Vl<dMVNeRE\Z9(B"6;i&e>%C!lc=*CFpsPI5tF1A1C/Vc0s$@d@+>#jiSKH;9r@EGk/2Aq_5*>qF$J+cFV%(0nJYE
%0Q5.J"+e?HV:cil]\XFcI$O8WHgI"_T57Q&!SckKHj.!RYf,!6Q#eJ\O7'[J"T2__J`l@s0QF4+n`KFq5aEKPDn;c/7^h7L!D6Bq
%GrF[\DF/Gr``;90HsO$MRp(Y/hZ#7$=?@f-.8bptoBNpTLOJb\W>del&dX+=3!`LMY^nJ>-(CF1#7#P]#>0IQ0(1q/CkYFr,9'#7
%/_Kg]Y;rbjRo@0?MaS3]W"[Xd^JFaJpYLB:W[r8/I^T72<E0st)kOtOcFUXjq:EU^2:&lY![qf;WnQQ-WNdI]([4Ta*B0I:Ggf,%
%ZZ62!JF@n+?DRRkm(=RuX>u!MLRRm^/e%.l6=oPc\H#';HAlp5)fiM55bj;AgMQIgNXIG-gWI.Y1?'NmESLdC5.L,tGpT"i#n&.;
%2ht[]l=8Z-+COTbrMl[UXKMkP<1H))6R>NdYAT^-:F;eF@&(-5)_ICoC[Z63],Z6j.ItQd+FS.A"keLFk>jEn8)>iQ3e%D[Q/WEm
%,Vgrkd`46),i!?.I^[ua]id6,aVXB8KUYc:c*20H26P;l%C4%J7e*:AgYu2Hp[6Tabf;%UJp5(n.LUi6qWsLn',F*7=5mI0k:Q7+
%Isb)0aH_7)khDVXCqKNr'X?Y99*Z56</V%Y&qseUUjHKT"^*Z(UQem*.4BS4Q:VJM[WKIXRPg\8AtN;;hFE[ll&_nlSI*D;SPWNi
%0b_"f64dS&LZJkY<k\lsW%F6gLjKNO7u:C7a;qn#*["^FKgB`Ve.;>0?5V>#.BJJQLWm"=K%Tr<ot1EVlOc!.HOA/?Cs,u_[q\q&
%fq/hQ6hrK[BYeh#'Cq^m\0F8.,?KZgbWZ-QenZKP_s#8$,a#a`L7DGGB8`Yo/YmU$hUWqDW:*eE,)#p-]h]6Qa83km7mr8080"o$
%*dNC9[iRP^QeqQNnV#TM.?AhD.maQ0P(BObNr)Dn!2Mes=:+T+rEu9C-[)#RS*B`ZS:0^8cRWsqMY*-,!XRg<G53/5"Xlo@H8Ad0
%3!8"71rAo;!A=+i)i\6%_V<]p[A.:P)Rha\!8!m8/*9f3NadMG[KUl.YE`LB?oI2%Wg\i2^P5$PUFQRpG]iGq?UB1DKF):P.RANl
%)fMe?Ct>VJ[:8k7%EA9X.Kuh\</CHFP?bt[,n;MX[o='=/bM5(Yj]1u_Rg&!F7K0NZNf;/B\d\lO\V1g+.3.0e7hinHP:tLO`#e\
%_5POC8@/,.+H8q=BhqT5rUBXfTgb=u^dTo+$D<m6pfCJ!hh/knZ3hUqTk`&MZS6qBB9*[#+3&/hMO:a7Mj4\p;@Bhqn0)EPOk+uW
%/\'K2*Jd)Mo4Z'H(g"kWE.fE-Ck1Xc2*`q9g$dk#a:fFE+Rtkc.b?,o5pj`fH^hZdP-4tUl#Dub1SH@8e8'?RP+51)=V%\sbXMVa
%%FKF/2kqS#mO+,jJK#-_]_,33KE+-'b@80j`na7_ZTN,Yr!8C!<FH\^?D`5l?#,r46:H4,W<asK@Fu$jq%i1_G6,\H8fl[)!1RlL
%,-^pMM>$ue>iu%`h)8'4HsbUOZ>b'F"01+9VSO7Di.Yf])YkYAC\HnUhcS):U;:'KM,]k?H);B+XpT#<LDWYnHg=flN5;C8CDZ31
%f%1_eHSX[%U]FV3..ZsDB8@#C^-4)\Q2]QM!!U0TnD&'*TF).HOV8VJ*mpd1e\jcU5ra&b*\iG#$];sqo`[nH-K!;adW!BpIo*_*
%Y>e%@S9C?2j&/h[[.&XEZjS/;(1fDon;?i*JLei<eoA(03q@WGR\.p),@sh'GD&uU%**$`+T?Pc5f/2,G8ldPC632=oEY,((jRMe
%46EQ[6;ibOA\PJ$cuO^YHq#[&:iq4s/9^]!9`b]]i)<B!!<@['eobh#A)$]oIU#2;PQe_jOm`S]9X'QAQ?.m^d2c@l[P7J+/;C,Q
%$4I3-i3!3"'aAa[#jad8g^fZJiDKYT.Me^X$;<9n]u9&RYRXNIF(1Rb6&C'!Q<TDs>`K<CjSauPU=HW\DFE@\2LOUpr/c=@G%mC[
%.ksBp<]aa"*o?+iL_%nA[3PSQM:DW@F<ZpDWOoJL&iMT&02A7)@c]<:5uY1R4qMBG6"E"A1q`ktSmBMt%n2[mB_l6QK/nsncH90g
%T8=_J.S*Wm:!,f@,gpUha1BHI1q\h9H.l]57,2VQ9`)[%m"66[L>d_^N;2?S+;/=M*jD7F.-]!L51`icI.-9!FO:;#*Za(uMpbJ.
%kqAVsE[9O$]itI`*+Rp*Jn*d24+\St&=\g1`=CocHQ82A8fMaPnC0t>%31u:)(<3?'\Upd+j(%#cZr.lDXlh>f<[XEk,[,n57Gi$
%XPWNh87toT&m24,#%T,EM<21!&B%7u<IUZk!g:jUn+gcl.#gKAA*;am^C)u5)PFa`B+WXpZKZXB;1e5ZgD=V-M\A#+krh:`"lAbI
%\2lk$V6jRVHt$cW-/JNIpNPZ]>[44o:Peq1\sP,+N;!tA/u=&.o%k$%,[@k;B1Pq5>Cb.Qp*t>?^ka1H]WUAndNRj.mnu=6KE92_
%kNA[3,]LcHI"T^?#VZGELU3'*K=IXnNa%b7.MdKt&E9>2L3bQb<"i2hc/IXQ&;PfZK>O,PkJ$C_^;46+3&Zf9*@Tqp@2GI?`-!ab
%_88'2C4_7:8D6`?.(TXY)A\5"B[1@^#ndRiNoj&l!%><qoQd[s5D0m5oY+RY>gV!/,E/1:>'h%iF[9*k4oh"cMpg9u=nhF8].-tH
%_et>OTiJ;(3u7]*-<kTcK7,*+%\-)pX=>!Dp\0GV%X1g<9e?QU]LkQEgWcTgS+SJbf!d'Amp#:g'-M%M%,o%AWP#e,5mdL]W$ZiS
%9c)bZ91WaiWhfV"ImHVS[M*G)lH(\@qRC1Y=RKT!L""ffS5ZP8=1C$@qqMrLoP)o"7\/<FC#i3_.5P$op,5=-\aN73jL@E7BbYJZ
%4AhuD!C4;1_/LoMo.r?,1<C,Pn^Te.s3K=(25TCV2c>+XU",KVQW.'oIsF^\BXc?_O:s7NSr_pT8"cfcE?nbiKY#:OR,q1E6)g&7
%.91!G(74J5&cQhHh.<aOgKG'iQ76*AM>LH9af/EdOIAFQf`P(6.[p&$e!(fTpP+N#ARcR$_:I2#7qEQ!=XtY.PSG'%BL_42:f,/B
%/VeKpq2*NLk(s2drVb8K'Z.Q-0o6=YX;TFG2j(qF5f=]:(coKcX%!rBJn)%1CbaUQk_@?HbjZ56GMtWg%H1BQ&-D^.kT.JA41%ee
%aS:Vt5iX\!$@O>CN:I^!:sbT`WH__T$"<"3T"@@ilAl]T^:IpRn+e7KYkRS/Ju'e,.`pu'ZW+M1Y!MFu8(:nPWCJZ&IL`+n[/F?5
%S@(,*79L=p/""H!E<a$P:Ofj_#Z#K`\-e4ZIfpbs#ji8fepr.C"V"Ck,$?tZL@l=b)'t29c1t<o:jPP&)Mb2JaX#Lg#Q;(>1]EO*
%7%mieohJuA[jRRp`sr+%&A9b.<QX0MNh2@46LVmHf%R?`KQKNK8WS?"<'sY&i2Z)e&bb'l.(P^=V3QY[F5_jAF1mn(@k+T*+MRV>
%-E]YN0]G's2lT^]MKVcFQ/X`dIbE`,Mq)H%Jog51?4L\k+8`WTMHS.U'>=iC0I@cT+V2H(bV&N^P*FL]IBY@2)C/KBF7/,gmJ&a#
%J_"2r,[$CX6M;uZeDT(AS/o]R`#@q&=PD!AQ=Ot#:MXuCLc='$cprhl)SG/Y7&D(q=[+o?[qC+mlXMopg("K?Ma2)7P!^Ll\S'p$
%H+TCpE(7Z>XkMKE#^,G90ln%[5N+qW:=c@F=-@.D+Ur;3iEXV%aThb=(.["$e6bY1SAYkMH6klN&P$%5-9EB@C18+GE$ufL$MLA(
%$0-bKPG2e6&LLGIjH&$OQ#52+HgXk*$4a"<bJ;m&;hW$Veh`lIVc/!)*g>)IN[M0\A4>.-c#l`iJ/n/kZ\aYTC<8V-rKN=-E%b=S
%'OjU2_rD*4biQt"PYJ-%k%$[':cJ"(bM=n[9lP+uAGHorhJ:M7WV=6IZTViNZY$5]-JFK*,D/q@)75o05H9#.r%Z\G_,k7boS+[>
%4YA5lkEEr1K87MsNdUW6m7`]sVh1Z>eAW<QEb&,_B[G^<gO_OWW8&uHk:lE9"W]\MMDmja2;$U4/+odb%B.j:gFCk:<*Ofqoics;
%M&kS^*JE_*(u;Xo[F79+U3#2,aD+:i`GYD1U9,^^SpUO#]Xg/s[8V<6MbTir`(7Ko4'T@t]`i*X19.3!@,GWO$Au=D6nYQ<Z'MFl
%pdM?9adD_5e%OCr'p,t\9ab^*:&[Qd]6=4WA9l?MB!BU)2KYjJnjYrc@2[aEX8iMC$";K81"TTfZ7o^+.hS\Q*;=+%HjbqH\S4T]
%dKEHJfo8_T$ld`6Q]3>q#'=FK/kqegFfNdeI]tQ'qZMLnbCjcdmbc*663p1P8$fb)XMXd3r-T$Y*+kSbUR*dH0Pa5m'^f%ME'rD$
%\0qqr-WSfjJ2(c@*^S!R0s&8<8'nu\)4/'k@qG<q&0_-i_P[^sf%[f)J3K^kQZhd;\#`o@+7Ze(GU8_tD6`rG9ds7R9QMH0;l`iE
%<@,-8?ciHPlS4@kJ7.@b5utsjAXpOAck'GhQH5H>A.#R%3DfdDFSsra_Due\gI<-G!R/-j9;hMknPukH)8MiV6N6Vh2YB[W``Nec
%;^/2&T#TFWV+nX<g0aa#:H>a*d1fBQ?L'LXAH]&-<`4Hp1g:FZ<SY/SL!6%i"nh7dHu)9A@I/dpSFuQQ8Y\A&A\Ki`HjW5!!_$p&
%[pbR^YnfAIjpS6+<@KFa>6H5i(1&:!fFY%q5$fFC3k]LpFCr>a's[BLiV24Y;\'30odsXaHt(5E<7/k*Hg&.BbO8-f(5Ql'dTeu5
%R-Re*fo5ir*Dgbn6Fa$@kON4^"HVG#\jS2,n"Y"sWo"TT*)S<:YH$&oq0lD$rIP`$U1,>-b'jA.R"L-^=Xl$(=EIm.;]CaX*gJ8@
%"<d#b&`1b\EnJP?)o;?*]V,f:fa-a^ls;7oaBd_IHFFGLA';7%4`YTX6P3o:T\!Pg:1l6Ajjur"OCkQ56p#V=pN]!KV$BqSPmOc(
%IDia3b?(8G@Ht)4le%[1hl>*2.BMuJGnXp6.3kfOT0hQD?CS`EhFsjWW("jp^9;;@[f3)bilOmO20.S!Tr7.iSS)C[!M<6$C/2"!
%%`FdOL2EsHd3de1H6qek61mOhO^?.Efuk^3?M@hG46d7(muB6^VF,M!fU#q1j"$/Z3]?O?k7LMlZ*pZ6+D-2@Qt+*!fjDIqHC_E[
%r)@tiC,;cV^nZ63I<DGRS=rlHcpkZ_ZRIV6NGY]!4Ym1t2@f\-dY/d^RUMG_9^6R731u-]JTL5D!+WXQ5n55B,(^rH)_M5$6g5_V
%X,#d=8`_7L3SRZV+QV">T#<^co7hk&8(`uH'?ckf&b\smYepteFt@q/N"p:#`B630^/8jH`kL>g+EJNKL2c1"MoJ.?.See>j7-G/
%ArhQ_`sC].D3]2O1f(gK00Dg1D:!hfWN<XnU,n;@]5"uDnn$84f3]371[aDefDF>`=E%Fh(O:Y<0-(>E=!H>`/@'ZqM`k7lXRdSl
%@*CQ6hA!YGmk9hXYre.&_TaYe:/#P"GaQ&$SBZC8"=,RiV`7"V@gK_qS]as2aA337ML^UfabQfi]`\gleETslf94J+C`[,h,kn"7
%Tg]Y%U+OPLOVoni!E_n2`Lo(LU==+cM]>foI*S:t`dtg@T6fm)F*`mPTi>LE&:Vs@jcaqG42phVo#&IDn\E?<h=K6/s5I@s,4W$/
%`.;dtM"M5uQ8E`TVr+Ud'".I/<:IZf'k;HKKXi9>BTiQMo;H89<M-KdqXY`,QjZtqTIZDT%>.Y'&N^+i2-\(.M1#/Y&<IO%.%`t*
%W('OLmq2Suf7HuQZBEV`h)\*t8b4<N)<3)5?[f5TJ,VZiS::A(^\n)_s7jbjs7P963;ri[^O6%Wm?^':nP=Z3j_qp5q>RR9^]2K\
%J,S,orpoBa^]*DgreD7ARMYnq\,Z#;s8&47qHr\"184~>
%AI9_PrivateDataEnd
