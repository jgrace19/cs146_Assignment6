%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: spring water.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: 
%%CreationDate: 5/4/2015
%%BoundingBox: 0 0 3056 1081
%%HiResBoundingBox: 0 0 3055.2344 1080.0005
%%CropBox: 0 0 3055.2344 1080.0005
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2015-05-04T14:09:19+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-05-04T14:09:20+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-05-04T14:09:20+03:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>92</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAXAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6N6IHbOht4LhTbTPKmp6&#xA;hEJowkUR+y8pK8vkAGOUZNTGBpzdP2bkyixQHms1Hyxqtgpkli5wjrLGeSj59x9Iw49TGXJjn7Py&#xA;4xZG3eEs9LLrcThd6WNrwu9LG14Xelja8LvSxteF3pY2vC70sbXhd6WNrwu9LG14Xelja8LvSxte&#xA;FfDaSTSrFEheRyFVR1JOAyAFllHGZGhzThfJOulOXoqD/KXWv66Zj/nMfe5w7Jz1y+1AXuh6lYit&#xA;1bvGvTnsVr/rLUZbDNGXIuNl0eTH9QpB+llltHC70sbXhd6WNrwu9LG14Xelja8LvSxteF3pY2vC&#xA;70sbXhd6WNrwu9LG14Xelja8LvSxteF3pY2vC70sbXhd6IPbG14U80bR01C5aJ5PTCLz2FSdwP45&#xA;jZcvCLdjpdMMsqJpnUaLHGqKKKgCqB4AUzWk29CBQpeGI6YKZA0h4tN0yOSV0tYwZwBKKVU08FOw&#xA;+jJGcj15NccOMEkRG/Ni2t+WZoJ3msomktG3AX4mQnqCOtPfM3DqARUubp9XoDGVwFx+5I/SzJt1&#xA;/C70sbXhd6WNrwu9LG14VWLT7qVC8ULyIOrKpIH0gYDkA5lnHBIiwCVL0sNsOF3pY2vC70sbXhd6&#xA;WNrwpjomn30t/DJbDiUPISuG9PYVoSAevTKs2SIibcrSYJmYMf2M7ieUKCw4N3UHkK+xzWEB6KMi&#xA;F7OsiNHKgeNhRlIqCD4g4KrkzM7FEbJDfeT9Mkjb6o7QzEkryNU3/ZPcZkw1Uhz3DrcvZmMj0bH7&#xA;GKXGn3FvK8UsZV4/tjw9/lmdHICLDpZ4JRJBG4UfSyVsOFtYSSAOp2xtRBlsfkrTREBJcSmanxMv&#xA;EJX2BBP45gHVyvYB3Y7Kx1uTaUat5Wu7FTNGfrFsOsiihX/WG/35kYtSJbci4Wp7Olj3HqilHpZf&#xA;bg8LvSxteFEWttZNVrmZkCkfAqciw771FMjKR6NmPHD+IprAfKyTJP6cnw1rBJ8SnanxCh+fXKJe&#xA;JVW5kPy4INH3L7seVLrdQ9q/Zo1NPpXcfdgj4sfNlk/LT/o+5K5bDTwf3V6HHi0br/XLxOXUOHLD&#xA;DpL7EPNbxIQI5PV8SAVA+/JCRa5QA5G1P0sNseF3pY2vCnQ1XVAoUTmg6Ci/0yjw49zn/mMne79K&#xA;6p/v8/8AAr/THw49y+Pk73fpbVf9/n/gV/pj4ce5fzGTvd+l9V/3+fuX+mDw49y/mMne3+mdYHS6&#xA;f8P6Y+FDuT+Zy/zigpRJLI0kh5O5qzeJOWDZolZNlb6WG2PCm8flPUmQMxjjJFeDsa/gDmOdVFzh&#xA;2bkI3oN23lW8a6WO4HCEgkyoQ3QfP9eMtSKsc04+zpmVS5d7JbaIW1vHBGTwiUKO1adTT3OYcjZs&#xA;u1xjgiAOiE1LRbK/q7D0bg/7uQdT/lDvk8eWUfc0Z9NDJudpd6DTydbeioe5ImI3KgFa+wNDlh1Z&#xA;vls0jsyNby3SnUfL95Yksy+pD2lXp9I7Zfjzxl73Cz6KePzHegUVkcMvVTUVAI+45aS4wFI06vqx&#xA;/wCPg/cv9Mr8KPc3/mMne1+ldU/3+f8AgV/ph8OPcjx8ne79Lap/v4/8Cv8ATHw49y+Pk72/0xq3&#xA;/LQf+BX+mDwo9yfzGTvb/TWsUp9ZanyX+mPhQ7k/msv85AMhZix6sSTQAbn2GWW45FtelhtHCzfT&#xA;ZbiWyiknAEjKDUGvIdj7ZrcgAls9BglIwBlzRSsRUdQeoPQ5AhuBpLJvLGkyrJ6fKKWQ1Q12U+AH&#xA;hlo1Ew4stBildbEsWubGW2neCUUdDQ/1GZ0Zgiw6bJhMJEHmpelkrYcLvSxteFXtNNurtylvGXI3&#xA;boAB7k5CWQR5tuPBKZqIVrnQdSt0LyQngNyykMB86E5GOeJ6s8mjyRFkbIL0sttx+F3pY2vC70sb&#xA;XhRnpZXbkcLvSxteF3pY2vC70sbXhd6WNrwqkNr6rceap/lOaDAZUyjjtNdLt7K0kdriWCUso9Mg&#xA;8qGvuMoyGUuVuZgjCBPEQUzOpWZNTMp965T4R7nJOoj3tfpKz/36PvGHwij8xB36Rs/9+r94/rj4&#xA;ZT48e936Rs/9+r94/rj4ZXx4t/pCz/36v3jB4ZT40e9cNTtAKespB6gkEYPCKRqI96W3djoc5Lxz&#xA;Lbuf5aFP+B2/DLoSmPNxsuPDLcHhKAbSYq/DeQEe5YfwOW+Ie4uMdOOkh9qHns1iIAlSUnrwqQPp&#xA;IGSEra5YwOtqXpZK2HC70sbXhd6WNrwu9LG14UZb380EPpJHFx/aqtSfnvvlcoAm2+GUxFABVXWL&#xA;xFCokaKOiqvEfcDg8IMhqJjlS79N3/8Akfcf64PCin8zN36c1D/I/wCBP9cfBiv5maybUnuDW5gi&#xA;lIFAxBBp4VBrhGMDkUSzmX1AFCTCB6enD6R70YkfjX9eTF97TIA8hSl6WSthwpv5dEyzShQPSZQZ&#xA;Ca9R0p9+Y+eqDm6MEE9yfBiOmY1OwBpLJ/L9hLyMZaKRqldwUB8KUrTLhnkHFlo4HlsUmu9KubWh&#xA;lUcW2DKaivhtmRHKJcnByaeUOaG9LJ21cKM9LK7cjhd6WNrwro7ZpHVFHxMaDEypIhZpMP0D8P8A&#xA;ffF4cdvvr/DKfG8nI/Kebh5euChYSIW7LU/rpj+YCRopVzCAms5YX4SoVb3/AIZaJg8nHliMTRWe&#xA;lhtjwu9LG14Xelja8LvSxteF3pY2vC70sbXhd6WNrwu9LG14Xelja8LvSxteFclu7miKWPgBXEyS&#xA;MZPJWh0y4mUsgFAaUJoa/TkTkAZxwSlyU3s5kfg0ZDeFMImCxOIg1Sn6WG2PC70sbXhd6WNrwu9L&#xA;G14Xelja8Lf1duPLiePj2x4l4C16WNrwu9LG14VeK4uooxHG/FBvQAd/oyJiCzEpAUCu+uXv+/T9&#xA;w/pjwhPHLvb+vX3+/T9w/pg4Ir4k+9cdRvipAegPXb+uPhxZeLPvUnuLpl4mQ08Bt+rCIhgZSPVV&#xA;9LBbZwtrGAalajwOC08Ksjxo4dIQGHQ1b+uAi+rIbcgrfX5v5RkeAMvEk769N/L/AJ/djwBfEk5r&#xA;6R14vGHXwbf+GPAEnISKKg3ot/ugL/qsf41yQvvYGu5SaJa/CCB7mv8ATDbHha9LDaOF3pY2vCuS&#xA;2dz8K/T2+/AZJELVo9NkYmrKlOhJrX7q5E5GccNrZLCdDunIeK7j8MImCg4SFL0G/lOHiY8DXpYb&#xA;RwrkiTl8YPH/ACaV/HASkRHVFW00VuGCKx5da07dMhKNtsJcPJVOoD+Q5Hw2XinubGo0/YP34+Go&#xA;zFRmltZt3hPL+ZaA5IAjqxlIS5hQMVtQ0D17VIyVlr4QpelkrY8LvSxteFUSKDj8Yct7EAfiDkSS&#xA;yEQjl1EqoUISAKUJGV+G3jMR0UhNamUS+gFZTXY7H6KUw8JqrYcQu6bleyl+3Hxb+ZNj+qmIBHVJ&#xA;MTzCFaCD9lyfmv8AbkxItRgFP0slbHhd6WNrwu9LG14Xelja8KQnzA7inr8fktPxpnCT7U1Uv4vl&#xA;TneGGhdySbiYv/sif45hy1WU85S+ZZcIcdY+qH95dLGP5ZXFP+GOX4O0NRA+mRP2oMAUba+bNJm+&#xA;FpYzJ4Rupr9BIOb3D28K/eQIPl+1rOJVl1pjtFEB7sa/gKZjZvaGR+iNe9IxBCPqV4TvLTwoAM10&#xA;+1tTL+L7mXhhWh1e4T7YEq/cfvGZODt3NH6qmPkfs/Ug4gixrVpxqY3DeAoR99c2cfaDFW8ZX8P1&#xA;sfCUJNaY/wB3EB7sa/qpmJl9oZn6Ige/f9SRiCHOqXta8wPbiP6ZgntrU39X2Bl4YRdtrf7M60H8&#xA;yf0zY6bt/plHxH6vx7mJxdyKk1ayRarIXPZVB/jTM/L21p4iweL3D9bHwygn1245fu0Cj3JJ/AjN&#xA;Vk9oMhPpjEDzs/qZjEF8WuydJkqPFSf1HLMPtAf44/L9v60HEiRqmnlORcg/ylTX8Ns2Q7b05F2f&#xA;dR/s+1j4ZQs2tCtIYtv5n/oP65rs/tCf8nH5/qH62QxLI9akDfvI1K/5NQfxJyvF7Q5L9cQR5bfr&#xA;U4gjRqmnlOXMg/ylTX+mbUdtacxu/hRv9X2sfDKEm1rekMYp4v8A0H9c1uf2hN/u4/6b9Q/WyGJY&#xA;mtTA/HGhHgKg/rOVQ9oct+qMSPiP1r4QRKa1alfjjdT4ChH31GZ0PaDER6oyB+B/UjwkNNrpJpEq&#xA;oPFjU/wzDz+0GQ/REAee/wCPtSMQWxazcCnNVkXv2P3jKsXb2aP1ASHy/HyScQR0OrWTj4yY28CC&#xA;R94rm3w9uYJD1XE/P7mBxKdxrEC7QqZD/Mdh/XKNR2/CO2McX2D9f3JGJC/pm65V4pTwof65rh2/&#xA;nu6j8j+tl4QRUOs25H71GRvbcfwzY4faDGR6wQfLdicSnPrQrSCP/ZP/AEH9cpz+0P8Aqcf9N+of&#xA;rSMS2HWm5UmjBXxTYj6CTkMPtDK/3kRXl+1TiCvLrNsF/dozN77D+OZWX2gxgegEnz2QMSXT6ldO&#xA;eRk9NR2X4QM0eftXUZD9XD/V2/a2CACgNcaI7XBb5/H+sHHF2jqYcpn47/epgGNXNzDbxmSVqDsO&#xA;5PgBmOASzSC41+ediLd/SQfyH4vpI/hl4xAc1S6SZA/7xxybfc75YAlaLiEmnKm1RyqtR4itK4aK&#xA;LTKx1q+tlCxys8H++ySRT28MqljBSn1nfQ3cfND8Q+2p6g5RKNIRAmMIL8+CqKs1aAAdzkatWovN&#xA;Om0PK5V6ftR1b7+NcJwS7lVV80aSetxT/WVh+NMj4Mu5aXnXoZHCQyRlmFVXkCxHsK4+EeqHHUZ1&#xA;BZmAA3JOwx4AqX3PnBY6rDH6zj9smi/1OTGnvmmkAfOWqF9lhHfjxPT/AIKuWfl4rSOtfOCP8NxG&#xA;Y37Opqv0jqMhLT9y0i11ZblmWG5Ryv21jYEivjQ1yHh10QteXiC7vQDqzGn68ICUHJ5jghNI5HkP&#xA;+T0/GmSGIlVOPzuakLCJAOvxgH8AcJ0yq6+ebQELNEY2PSjA/wBMH5Y9FVE80WlySEuVSg5fEDHs&#xA;TSoLgV+jAcBHRCt6xlUNz5qwqGrUEHvkapLTMqirEAeJ2wqpreW4qVnQcdyQ42p9OPCVV7PWBMpa&#xA;3nWdVNGoQ1DgljrmEIs6nCqFp3ESjqzGi/fkOA9FS2682aZE/pxOZZD/ACj/AJqK1y2OCRSh18yW&#xA;8rUeSRP9Ybf8KTh8EhaRsV0XUPHKWU9CGqMgYq1PrUdopMzB2ptGCOZxGO+SpLcea9Vd6wuIE7KA&#xA;G+8sDl4wR6rSnD5pupJCtw63AX7QFAw+hdvwwnAByVOba6huY/Uiao7juD4HKTEhXm0k/meWUNNa&#xA;3kqgUoySmm/VdttvEnNuNNXT7GHEoSW+tsZGWyvQX2VSjFFX+Xjw/pkhhPcjiU3tfML+nysrgiMA&#xA;UMUhrT+ao3wjCe5eJTGm628/qzWl2XP2nET8jtTwGHwjWwW0ZCfMkMfppZXJVSeIMLdOw3Un8cgd&#xA;OT0TxKtrN5itL+O7gtLuq1Do0L0YEdGoPiwS0xIoheJF32r+ab6QrJaXEVvQfukt3oSKda9q+5yE&#xA;dHw9Da8STPYa2vL0rS8rJQyu0clSwB8B03y7wj3ItWkHmaSII1nc1UAKRC+xApXdakn54Bp/JPE0&#xA;U8zAx+lZ3MQibkvCKQGo6Emm/THwD3I4kaL/AM3NatDJDdseXIF4ZGrUAU3B6UyH5Xe6TxNPc68Y&#xA;1X9HXHIU5ERSCtOu4Hc4/lj3FeNQkTXGkDi0vFoK0EBqWOxJNPoyQwHuXibhfzGqLG1nc9WLyGF2&#xA;Jr02oP14Dpz3LxNGPzBbzPNaw3iyuGjBSKRFROQIC7V6D2w+ASKIRaut95rkiSG5trqQKKeq0MjM&#xA;Knr88j+V6gJ4kOP8Q+oCbK7KUoQY5dt/tLQDt4k5L8ue5eJTlt9bYyMtnegvsqlGKKv8vHh/TCMJ&#xA;7vsRxKb2vmF/T5WVwRGAKGKQ1p/NUb4RhPcvEpjTdbaf1pbS7Ln7TiKTl027DD4RqqW04stX84Wd&#xA;utvDa3BjjJ4BoGPw7UG6k/jlMtJZshPEhmfzEbxbhrW8k681eF96juQN8l+XNVS8S95dekkNbK4S&#xA;Kg+EW7mpHjXtgGmI6LxIP6r5giDi3t71fV4tM5SQFmUHw8K7VyzwSeYRaIurjzbdRqk9tdOY1VYz&#xA;6T7cRTl9mpY9zXIx01cgvEh5IvMjBFSyuY0Q1CrFJuf8o036YRgPcvEmVqdXSBw9vcmbYqZLeQrU&#xA;jf7O9ARlctPK+SeJd+kPMcMaiC0uQ5C+pwilUGg33p4+2D8qTzC8SFum8wXFx67214G6mkBqWIoT&#xA;Wn0ZOOnIFUvEthfzGsaxtZ3PVi0phdia9NqD9eJ057l4lKe01pZTJDb3Zkbko4xSKqJXYLUV6D2y&#xA;Qwy6hHEi7C+81WoCraXAqCrS+i5ah77im3yyEtLfRPE9b8i+aZbry/ZrfXJmvnaWMM5q7+mS2/jR&#xA;SN86/HuHQfmSFLyd54vdRhvG1J05pciOARjieLkACleik9cEDaTqSEy0jzXNf6zqltVDaWi2r2rq&#xA;CGYXERkJap+7bJRFkoOqITGy12K6tbe4RgBcRiVVrU0IBP3VyQjanVJE+u3knni2jium+oCylLwV&#xA;+EypMyMSPGoA+jIV6kfmTzTm38z2NxcXVvHL+8s5FimBBADP9kAnr4ZMAJ/NFS1jzXb6dptxegi4&#xA;NuCfSRgCSrBCK70oWFcEgALUaoldP5ngi0mXUqM8cMRleNftbLy477V3xI2tfzRul0vmGA2k0gcq&#xA;YysZr1V5FUoNq/78XDS/mikv5c6xez+WY5LueSeUyy/vJWLMRyr1PvkMcbCPzJjsmdx5nmi8w2mm&#xA;BFMVxBJK0lTyBQgADJEb0n80atQ1fzkIvLl5qmnMsrwclT1Aaclk9M1Gx61wS5WF/Mm6TD/EEUWm&#xA;Lf3TiKMRLLK29BVQT4nJcO1r+aKW+afMRj0LUFtJzHdrAXjZDRh0JI9wprkZjZfzJKX6z5g1GL8u&#xA;EvIbl0vjaWpNwp+Pk5jDmviQxwSHptH5knZONE8zLc6TaSSS+pdm0innXvVlIJ+llbJRFhP5oh2m&#xA;ecbe7062vJR6DXEZkMVeXEKQNyKeNcRRFqdSUPpXnCebS9SvrwIBYz3CKEqoMcO61JJ37YByJX8y&#xA;U8/SYLFeQ5ChIrvQ9MnwI/Nsc8va9d3PmTXRJcvJaILRrSMn4VWWItVR2rtkIiyV/Mkbpxp3mex1&#xA;GATWsvJCzoOQKkmM0bY5IAFJ1RCG1Xzhb2MNpKg+srd3EVupjYUHrAkPXeooMEqCjUlEXnmWC2gt&#xA;pjykS6lhhjK+M7BVY1ptvhIpRqil3mzzFw8s3slvM0UsiyRQyISG5py5UI6bI2RmNl/Mk7Ivy1qd&#xA;w/l7TXuJDJM9tEzuxqxJQGpOGMdkfmq2UovNr/pjVLSdVS106GKYSipYh1LPUe1NqYK3Pkn80VHX&#xA;POMttY6Zd2HGSO/ureIlwdoplL1AqKGgHXGWwC/mSnFzrtvbCMzyBBNIsMda7u5oq7eOSMaUaosa&#xA;88+Z54tJX9H3TQzx3kUcjRtRqD4iPlWgP3ZDJsF/MEpxfeaHttY0vT1jDpqPr8peVOHoxhxQU35V&#xA;yRFEDvX80XX/AJrij0nUL20YTPYiVWU1A9WIbqfpxI2JX80Vg8w3U/lY6htDcy2RnHDcK7RchSuN&#xA;em1/NHk8S07V5rG/guoB6YhIPprWh2Afqf2uO+Y0ZUbaZQsUs/SE0Nfq0hUmRpCy1B3I4/qx4u5P&#xA;DfNFWXmbULO2eKGgkk9PlNvzPosrR1Nd+IXj8jkhkIDGWIEou38y+ittKo/e2lo9rHWoryC06eHI&#xA;5IZPuYHGfmVs3my4MMkccY9SQzBpiTXjNKZSB36nAcqRiV7XzLLb2dzehw17cXMEjRkGh9FasST/&#xA;ADHJDJQvqwMLkB0pq48wI1tdRk8lufrLShCP93TBh4jtXAZilEDY+H3Kun+Yxc/XrO4m9C0uLWRV&#xA;DGgEh6e1aYYzux5IyQMaI3NrdY8zOuo3i2U3qWrtDInZWeMQb+/90RjPJua/HJOLGTEXz/tX2Pmq&#xA;Qac1pD/oSQywyJ6RpRPVJlrT/WH0YxybVyRPGQb582l88Sfp86jJCJI1LpCNwwicqPEivFa/PHxv&#xA;VafAPDV7qd3r8Ftb3GmqBcwTxusrIxC8/XlkRgadgy4ymBssIGW/L+wK1951jnsLyxSFhDc0CAkH&#xA;goijQCvf4kP34yzAghEcJBBtLtT8wS3eqS3EZAhaJo1RhUbwiNuvjTIynZbIY6jutHmO4ewvLSWj&#xA;W86xKkJ2CiNgfhpSn2cHibEJ8PcF3l7zA+maiszD/RnBSWJa/YJJoPkWxxzorlx8UduajqGsM7xJ&#xA;Zs0UEUKRhehqUUSd/wCZcEpdyYQ71z+Y79rA2S8Y42aR5StRzMoYNy332f8AAY+IapRjF2mbebCL&#xA;y+vU2e+NtyrseMLUbYeIX8cs8TcnvavCNAd1oT/F16kUKW6CNkWASPU1c24QLWnUfu/xyPinoz8H&#xA;vRdr5iOnWunx28gfnJcNcAggCOVwvfv8JyQnQDWYGRN+Si/mBYra0iFZFtjbyx8aUE0EaUO9a0JI&#xA;IwcewZCBJPxR+j+YILiAw3tz6MdrNaS26sdiIXPKg+QFcnCYPPya8sZDkLu0qufMc7ieJqTW/rSN&#xA;FEx+EeqsqEgfKUHKzkbhj5fjuTe185vwsZSWgt7R5Va3jPwmMQgQqRt3GWDLyaZYjuO+vv3Qemeb&#xA;JHub0XSIJNSQwyXBJAWofiT1FAWA+WRjk3N9WeTEQBXRuTzTb1jtp4zcW9vPbTxMjcaNBEkbU8a8&#xA;T1xOQclGKXPlzVLjzsLkWkUkZ4W92l00ldyVmZyBt/K34YnNde9AwkXv0SiTXZ5by4nfi8ckhlET&#xA;AGlZ1loK18PuyHHu3cGwH45IvT/N1zFeWVxeJ9YNgrrBuQQHUqf1j6Bhjl3F9GE8NggdUbc+Y4Lb&#xA;65DX6xb30l2XVCNluSpU18QBkzMC/O2uMJSrpVOuPOsaab9TtEfh6cMCpIdhGkZVwSD3JxOUVQTH&#xA;DK7KaD/lSVB/x1f+FzH+TtP3H9P7Hf8AIEv+1p+GPyX9x/T+x3/IEv8Atafhj8l/cf0/sd/yBL/t&#xA;afhj8l/cf0/sd/yBL/tafhj8l/cf0/sd/wAgS/7Wn4Y/Jf3H9P7Hf8gS/wC1p+GPyX9x/T+x3/IE&#xA;v+1p+GPyX9x/T+x3/IEv+1p+GPyX9x/T+x3/ACBL/tafhj8l/cf0/sd/yBL/ALWn4Y/Jf3H9P7Hf&#xA;8gS/7Wn4Y/Jf3H9P7Hf8gS/7Wn4Y/Jf3H9P7Hf8AIEv+1p+GPyX9x/T+x3/IEv8Atafhj8l/cf0/&#xA;sd/yBL/tafhj8l/cf0/sd/yBL/tafhj8l/cf0/sd/wAgS/7Wn4Y/Jf3H9P7Hf8gS/wC1p+GPyX9x&#xA;/T+x3/IEv+1p+GPyX9x/T+x3/IEv+1p+GPyX9x/T+x3/ACBL/tafhj8l/cf0/sd/yBL/ALWn4Y/J&#xA;f3H9P7Hf8gS/7Wn4Y/Jf3H9P7Hf8gS/7Wn4Y/Jf3H9P7Hf8AIEv+1p+GPyX9x/T+x3/IEv8Atafh&#xA;j8l/cf0/sd/yBL/tafhj8l/cf0/sd/yBL/tafhj8l/cf0/sd/wAgS/7Wn4Y/Jf3H9P7Hf8gS/wC1&#xA;p+GPyX9x/T+xx/5UlQ/8dX/hcfkv7j+n9j//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:f3ac969d-6f74-a742-b00a-efffacb692dd</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:f3ac969d-6f74-a742-b00a-efffacb692dd</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:28BBD9AABDB6E4118ACDAF2C71629BB7</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:69AA004E5DB8E411977AB74E911A0A13</stRef:instanceID>
            <stRef:documentID>xmp.did:69AA004E5DB8E411977AB74E911A0A13</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:28BBD9AABDB6E4118ACDAF2C71629BB7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28BBD9AABDB6E4118ACDAF2C71629BB7</stEvt:instanceID>
                  <stEvt:when>2015-02-17T18:57:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:29BBD9AABDB6E4118ACDAF2C71629BB7</stEvt:instanceID>
                  <stEvt:when>2015-02-17T19:00:29+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:69BFCB071CB8E41188F6AAA1CE1C606A</stEvt:instanceID>
                  <stEvt:when>2015-02-19T12:45:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:BF9905F54EB8E411977AB74E911A0A13</stEvt:instanceID>
                  <stEvt:when>2015-02-19T18:49:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:69AA004E5DB8E411977AB74E911A0A13</stEvt:instanceID>
                  <stEvt:when>2015-02-19T20:40:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f3ac969d-6f74-a742-b00a-efffacb692dd</stEvt:instanceID>
                  <stEvt:when>2015-05-04T14:09:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1080 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1080 li
3055.23 1080 li
3055.23 0 li
cp
clp
3055.23 1080 mo
.2344 1080 li
.2344 0 li
3055.23 0 li
3055.23 1080 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[3.23025e-008 -719.487 719.487 3.23025e-008 1527.73 711.164 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.921569 .964706 1 ]
/C1 [.376471 .807843 .901961 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.23025e-008 -719.487 719.487 3.23025e-008 1527.73 711.164 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~lg!a!kih3mk2tdejQ#:[io/kSi8<GKh;-lAgY:H9g"G$0f@JO'e^W*te'c[ld*U+bcHa\Zbfn8Qb/qcH
aN)?@`l5m7_o'@._83q&^V@Lr]tD"i]=PSa\[],X[^NTO['[0GZE^[=Yck75Y-"h-XK/A$WMuhpVl-Dh
V50o^US=KVTqJ'NSt;LDS=H(<R[TY4R$X/*QBd`"P`q;oOcb`eO,o<]NK&mTMi*CKM26tCLPCP;KS4u1
JqAQ)J:N,uIXQWlI!^3dH?ja[GB\4RF`heJF)uAAEH#l8Df0H0D/=!'C2.HsBP;$kAn>OaA7K+Y@UW\Q
~>
<~p@\+Op%A"Mo^qeJo^h\GoCMSFo()ABo()>@naZ/>naQ&;nF5r9n*f`6n*]W3mdBN2mHs<.mHs9,m-O**
m-F!'lg*m%lK[["lKRQtl07Hskih6okih3mkND$kkN:phk2tgfjlPUcjlGL`jQ,C_j5]1[j5].Yio8tW
io/kTiSibRi8EPOi8<GLhr!>KhVR,GhVR)Eh;-oCh;$f@gt^]>gY:K;gY1B8g=k97g"G'3g"G$1f\"j/
f[na,f@SX*f%/F'f%&=$e^`4#eC<!teC;sre'ldpe'c[mdaHRkdF$@hdEp7ed*U.dcd0q`cd0n^cHa_\
~>
<~s8N#srr2orrr2oqrVc]nrVc]nrVZTkr;?Kjr;?Kiqtp9fqtp9fqtg0cqYL'bqYL'bq>'j^q>'j^q>'g\
q"XXZq"XXZp\4FVp\4FVp\4CTp@e4Rp@e4Rp@\+Op%A"Np%A"Mo^qeJo^qeJo^h\GoCMSFoCMSEo()AB
o()ABo()>@naZ/>naZ/>nF5r:nF5r:nF5o8n*f`6n*f`6mdBN2mdBN2mdBN1mHs<.mHs<.mHj3+m-O**
m-O*)lg*m&lg*m&lg!d#lK[["lK[["l07Hsl07Hsl07Eqkih6okih6okND$kkND$kkND!ik2tggk2tgg
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
0 752.467 mo
0 603.254 li
49.4136 605.828 104.707 582.674 182.729 582.674 cv
260.751 582.674 318.553 639.274 362.766 636.698 cv
406.978 634.127 507.991 587.819 567.807 595.536 cv
627.623 603.254 680.827 641.844 732.841 636.698 cv
784.856 631.554 880.969 595.536 930.382 600.685 cv
979.795 605.83 1044.1 652.135 1077.91 652.135 cv
1111.72 652.135 1163.02 610.974 1225.44 610.974 cv
1287.86 610.974 1359.17 649.562 1392.98 649.562 cv
1426.79 649.562 1483.19 610.974 1543.01 610.974 cv
1602.82 610.974 1630.65 649.562 1672.27 649.562 cv
1713.88 649.562 1765.55 616.119 1803.06 610.974 cv
1855.64 603.76 1924.07 632.961 1965.59 636.698 cv
2022.75 641.844 2060.81 600.685 2120.63 605.828 cv
2180.45 610.972 2236.63 649.562 2280.83 649.562 cv
2325.05 649.562 2383.38 600.683 2443.2 608.399 cv
2503.01 616.119 2524.11 641.847 2565.72 641.847 cv
2607.33 641.847 2636.33 608.403 2685.75 610.974 cv
2735.16 613.546 2754.17 641.847 2793.18 641.847 cv
2832.19 641.847 2902.41 587.819 2951.82 587.819 cv
3001.24 587.819 3023.31 603.254 3055 603.254 cv
3055 747.323 li
0 752.467 li
cp
.760784 .878431 .4 rgb
f
0 752.617 mo
0 603.141 li
49.4141 605.719 104.707 582.525 182.729 582.525 cv
260.75 582.525 318.552 639.224 362.765 636.643 cv
406.978 634.069 507.99 587.678 567.808 595.409 cv
627.623 603.141 680.826 641.799 732.842 636.643 cv
784.856 631.491 880.97 595.409 930.382 600.567 cv
979.796 605.721 1044.1 652.108 1077.91 652.108 cv
1111.72 652.108 1163.03 610.874 1225.44 610.874 cv
1287.86 610.874 1359.17 649.531 1392.98 649.531 cv
1426.79 649.531 1483.19 610.874 1543.01 610.874 cv
1602.82 610.874 1630.65 649.531 1672.27 649.531 cv
1713.88 649.531 1765.56 616.028 1803.06 610.874 cv
1855.64 603.648 1924.07 632.901 1965.6 636.643 cv
2022.75 641.799 2060.81 600.567 2120.63 605.719 cv
2180.45 610.873 2236.63 649.531 2280.84 649.531 cv
2325.05 649.531 2383.38 600.565 2443.2 608.294 cv
2503.01 616.028 2524.11 641.802 2565.72 641.802 cv
2607.33 641.802 2636.33 608.298 2685.75 610.874 cv
2735.16 613.452 2754.17 641.802 2793.18 641.802 cv
2832.19 641.802 2902.41 587.678 2951.83 587.678 cv
3001.24 587.678 3023.31 603.141 3055 603.141 cv
3055 747.463 li
0 752.617 li
cp
f
3052.31 762.219 mo
3052.31 676.066 li
2995.79 681.235 2928.29 696.816 2894.33 697.923 cv
2850.2 699.364 2792.5 667.69 2714.61 667.69 cv
2636.73 667.69 2599.86 688.721 2550.53 687.282 cv
2518.9 687.282 2478.54 670.568 2429.21 670.568 cv
2379.88 670.568 2309.79 700.803 2270.85 700.803 cv
2231.9 700.803 2212.92 684.966 2163.6 683.527 cv
2114.27 682.087 2085.32 700.803 2043.79 700.803 cv
2002.25 700.803 1981.19 686.406 1921.48 682.086 cv
1861.76 677.768 1803.54 705.123 1759.4 705.123 cv
1715.27 705.123 1659.19 683.527 1599.48 680.648 cv
1539.76 677.77 1501.78 700.802 1444.72 697.923 cv
1403.26 695.832 1334.96 679.491 1282.47 683.527 cv
1245.03 686.406 1193.44 705.123 1151.91 705.123 cv
1110.36 705.123 1082.58 683.527 1022.87 683.527 cv
963.162 683.527 906.856 705.123 873.106 705.123 cv
839.356 705.123 768.173 683.527 705.866 683.527 cv
643.559 683.527 592.346 706.562 558.596 706.562 cv
524.846 706.562 460.652 680.648 411.325 677.77 cv
361.999 674.886 266.055 695.044 214.132 697.923 cv
162.208 700.802 84.7222 681.806 25.0107 677.487 cv
17.7866 676.964 10.3135 676.854 2.686 677.051 cv
2.686 762.219 li
2532.21 759.832 li
2532.21 762.711 li
3052.31 762.219 li
cp
.737255 .85098 .388235 rgb
f
0 862.248 mo
0 643.805 li
127.57 643.805 260.333 702.488 317.945 761.173 cv
363.033 705.749 485.401 654.39 598.495 669.885 cv
693.683 682.928 791.374 780.736 788.869 777.474 cv
786.365 774.215 876.569 702.489 989.264 699.229 cv
1101.98 695.968 1217.21 783.997 1217.21 783.997 cv
1217.21 783.997 1339.95 679.666 1475.22 673.147 cv
1610.48 666.626 1745.75 741.613 1745.75 741.613 cv
1745.75 741.613 1931.11 650.324 2111.47 666.624 cv
2291.4 682.89 2399.53 770.955 2399.53 770.955 cv
2399.53 770.955 2462.16 666.624 2592.41 676.406 cv
2717.48 685.796 2755.63 718.257 2805.33 757.647 cv
2805.33 757.647 2908.03 643.805 3055 643.805 cv
3055 852.465 li
0 862.248 li
.67451 .780392 .356863 rgb
f
0 881.776 mo
0 816.572 li
0 816.572 115.255 669.858 284.735 656.818 cv
454.216 643.776 577.583 819.831 580.075 816.572 cv
582.568 813.312 668.518 734.783 788.225 738.325 cv
898.44 741.585 976.094 813.312 976.094 813.312 cv
976.094 813.312 1084.39 699.201 1201.54 702.46 cv
1318.68 705.721 1415.02 816.572 1415.02 816.572 cv
1415.02 816.572 1544.71 705.721 1725.06 718.762 cv
1852.08 727.945 1970.82 819.833 1970.82 819.833 cv
1970.82 819.833 2048.59 754.626 2125.85 754.626 cv
2203.11 754.626 2284.86 813.312 2284.86 813.312 cv
2284.86 813.312 2372.09 728.542 2484.25 728.542 cv
2596.4 728.542 2683.63 816.572 2683.63 816.572 cv
2683.63 816.572 2755.91 686.162 2860.59 692.681 cv
2965.27 699.201 3055 816.572 3055 816.572 cv
3055 871.996 li
0 881.776 li
cp
.529412 .611765 .278431 rgb
f
437.101 812.862 mo
443.347 800.146 468.681 806.831 484.671 815.201 cv
486.38 813.623 488.3 812.164 490.379 810.884 cv
493.246 782.128 530.723 781.476 541.443 785.665 cv
537.963 779.998 528.684 773.2 511.283 774.334 cv
493.881 775.464 479.963 793.597 481.121 806.062 cv
469.522 796.998 446.318 792.465 437.039 795.865 cv
430.133 798.394 426.444 805.317 429.786 813.828 cv
432.163 813.108 434.654 812.699 437.101 812.862 cv
cp
.537255 .627451 .290196 rgb
f
548.403 827.593 mo
557.884 819.045 566.907 815.423 575.94 814.215 cv
576.292 813.775 576.672 813.337 577.118 812.91 cv
580.004 810.132 583.104 808.984 586.123 808.804 cv
573.202 804.691 545.557 816.467 548.403 827.593 cv
cp
f
476.484 832.126 mo
485.764 816.263 515.927 815.129 534.487 821.929 cv
521.547 801.969 503.013 803.106 490.379 810.884 cv
488.3 812.164 486.38 813.623 484.671 815.201 cv
479.08 820.358 475.75 826.751 476.484 832.126 cv
cp
f
1513.93 813.441 mo
1502.33 804.374 1479.13 799.842 1469.85 803.242 cv
1467.23 804.202 1465.08 805.79 1463.59 807.856 cv
1471.27 805.418 1480.97 803.967 1486.24 809.506 cv
1487.46 810.784 1488.32 812.079 1488.89 813.373 cv
1498.27 814.312 1509.14 818.214 1517.48 822.577 cv
1519.19 821.003 1521.11 819.543 1523.19 818.263 cv
1523.69 813.261 1525.23 809.109 1527.5 805.686 cv
1527.5 788.257 li
1518.75 794.925 1513.18 805.369 1513.93 813.441 cv
cp
f
1517.48 822.577 mo
1511.89 827.735 1508.56 834.131 1509.29 839.505 cv
1512.87 833.384 1519.57 829.465 1527.5 827.337 cv
1527.5 815.983 li
1526 816.652 1524.56 817.416 1523.19 818.263 cv
1521.11 819.543 1519.19 821.003 1517.48 822.577 cv
cp
f
46.752 793.043 mo
43.2725 787.378 33.9922 780.579 16.5908 781.711 cv
10.458 782.111 4.7607 784.627 0 788.257 cv
0 805.686 li
10.7812 789.426 37.8965 789.584 46.752 793.043 cv
cp
f
5.2939 814.102 mo
3.4717 814.583 1.7012 815.222 0 815.983 cv
0 827.337 li
3.835 826.31 7.9541 825.703 12.1572 825.476 cv
8.8271 821.977 6.167 818.093 5.2939 814.102 cv
cp
f
199.195 805.081 mo
199.605 805.835 200.089 806.595 200.658 807.361 cv
202.299 806.963 204.24 806.601 206.314 806.434 cv
206.719 796.141 218.86 789.497 236.761 801.386 cv
236.761 780.174 256.216 756.495 275.353 774.576 cv
276.08 774.106 276.854 773.658 277.69 773.242 cv
280.343 758.105 258.272 747.006 245.681 755.21 cv
232.302 763.922 229.626 778.735 232.302 788.319 cv
222.923 783.383 211.794 781.305 205.05 784.84 cv
207.46 792.689 202.732 800.581 199.195 805.081 cv
cp
f
279.573 808.356 mo
271.195 788.714 295.872 774.455 306.289 780.743 cv
306.927 780.148 307.607 779.591 308.323 779.079 cv
311.121 758.418 341.447 756.017 348.251 772.635 cv
343.791 753.467 329.521 744.753 321.495 743.013 cv
313.468 741.268 287.602 749.111 284.033 770.892 cv
281.653 771.527 279.542 772.317 277.69 773.242 cv
276.854 773.658 276.08 774.106 275.353 774.576 cv
264.375 781.669 265.607 794.716 279.573 808.356 cv
cp
f
395.523 776.993 mo
394.632 771.764 393.739 763.051 379.469 758.694 cv
365.198 754.337 345.575 770.892 347.359 784.83 cv
360.738 764.794 391.064 770.023 395.523 776.993 cv
cp
f
417.821 802.256 mo
420.835 794.165 411.128 787.315 401.589 790.625 cv
405.322 792.639 408.023 795.536 409.985 798.775 cv
413.247 798.259 416.194 799.611 417.821 802.256 cv
cp
f
302.766 806.616 mo
300.981 792.673 320.604 776.121 335.767 780.478 cv
324.93 773.42 314.997 774.303 308.323 779.079 cv
307.607 779.591 306.927 780.148 306.289 780.743 cv
299.661 786.944 297.397 797.436 302.766 806.616 cv
cp
f
805.924 805.453 mo
811.432 802.826 820.041 803.868 830.248 811.715 cv
831.761 790.555 852.856 768.255 870.659 787.595 cv
871.418 787.177 872.223 786.785 873.085 786.424 cv
876.813 771.506 855.587 758.933 842.44 766.257 cv
828.471 774.038 824.747 788.632 826.73 798.376 cv
815.6 791.499 801.488 788.79 795.59 796.248 cv
795.074 796.903 794.593 797.566 794.148 798.24 cv
797.655 798.399 800.875 799.405 803.262 801.799 cv
804.459 803.002 805.328 804.223 805.924 805.453 cv
cp
f
800.844 822.81 mo
800.783 822.665 800.738 822.523 800.682 822.384 cv
800.631 822.436 800.581 822.49 800.53 822.543 cv
800.637 822.63 800.735 822.72 800.844 822.81 cv
cp
f
872.459 821.583 mo
865.504 801.418 891.138 788.873 901.08 795.853 cv
901.759 795.302 902.477 794.794 903.227 794.333 cv
907.493 773.914 937.915 773.582 943.519 790.623 cv
940.436 771.201 926.822 761.536 918.938 759.25 cv
911.058 756.967 884.691 763.027 879.581 784.513 cv
877.162 784.984 874.998 785.628 873.085 786.424 cv
872.223 786.785 871.418 787.177 870.659 787.595 cv
859.2 793.927 859.5 807.023 872.459 821.583 cv
cp
f
990.365 798.188 mo
989.849 792.913 989.581 784.16 975.654 778.841 cv
961.73 773.524 940.973 788.703 941.759 802.731 cv
956.533 783.651 986.412 790.93 990.365 798.188 cv
cp
f
998.761 811.678 mo
1000.7 812.648 1001.77 813.343 1001.77 813.343 cv
1001.77 813.343 1001.79 812.798 1001.93 811.868 cv
1000.91 811.697 999.852 811.624 998.761 811.678 cv
cp
f
895.719 821.424 mo
894.935 807.395 915.69 792.221 930.506 797.595 cv
920.199 789.818 910.227 790.025 903.227 794.333 cv
902.477 794.794 901.759 795.302 901.08 795.853 cv
894.025 801.589 891.018 811.903 895.719 821.424 cv
cp
f
604.913 819.785 mo
587.967 804.102 572.805 811.945 578.155 825.882 cv
579.048 816.301 595.102 813.686 604.913 819.785 cv
cp
f
644.656 806.652 mo
622.856 776.96 602.238 793.649 606.697 816.301 cv
610.264 796.263 634.346 797.132 644.656 806.652 cv
cp
f
708.375 766.638 mo
705.698 761.411 692.321 752.697 674.483 757.054 cv
656.646 761.411 647.725 786.677 651.791 810.135 cv
638.019 805.714 624.535 813.686 629.886 828.498 cv
631.952 817.064 644.112 816.538 653.656 819.694 cv
655.655 817.612 658.023 816.037 660.492 815.254 cv
659.723 774.543 697.467 761.719 708.375 766.638 cv
cp
f
771.702 789.289 mo
769.027 781.449 752.972 773.608 744.053 773.608 cv
737.053 773.608 727.31 778.975 721.713 788.867 cv
723.226 789.229 724.69 789.743 726.072 790.408 cv
741.388 779.813 763.461 782.706 771.702 789.289 cv
cp
f
802.026 816.301 mo
802.026 816.301 808.271 811.945 801.135 804.974 cv
794 798.005 774.379 803.232 762.782 811.073 cv
789.541 804.103 802.026 816.301 802.026 816.301 cv
cp
f
696.783 804.102 mo
684.488 795.296 672.208 811.498 675.14 824.328 cv
675.547 825.338 675.926 826.433 676.269 827.627 cv
676.269 816.301 691.431 807.587 703.026 818.042 cv
701.241 801.49 729.783 794.519 736.027 804.974 cv
735.462 797.785 731.391 792.969 726.072 790.408 cv
724.69 789.743 723.226 789.229 721.713 788.867 cv
721.091 788.716 720.46 788.591 719.825 788.491 cv
719.608 788.459 719.391 788.428 719.174 788.402 cv
708.749 787.074 697.278 792.501 696.783 804.102 cv
cp
f
675.14 824.328 mo
671.622 815.611 665.826 813.568 660.492 815.254 cv
658.023 816.037 655.655 817.612 653.656 819.694 cv
651.343 822.105 649.523 825.188 648.62 828.498 cv
657.539 821.528 668.242 825.882 676.269 827.627 cv
675.926 826.433 675.547 825.338 675.14 824.328 cv
cp
f
1327.56 810.893 mo
1308.33 783.421 1289.19 794.453 1288.92 813.831 cv
1289.56 814.264 1290.17 814.755 1290.75 815.31 cv
1297.22 800.052 1318.29 801.942 1327.56 810.893 cv
cp
f
1392.18 772.284 mo
1389.63 766.998 1376.45 757.997 1358.52 761.961 cv
1340.58 765.927 1331.09 790.994 1334.62 814.537 cv
1320.95 809.815 1307.29 817.491 1312.3 832.415 cv
1314.63 821.029 1326.79 820.768 1336.26 824.132 cv
1338.31 822.095 1340.71 820.572 1343.2 819.844 cv
1343.36 779.124 1381.39 767.126 1392.18 772.284 cv
cp
f
1454.97 796.312 mo
1452.48 788.414 1436.61 780.223 1427.69 780.029 cv
1420.69 779.875 1410.83 785.031 1405.01 794.796 cv
1406.51 795.193 1407.96 795.736 1409.33 796.433 cv
1424.88 786.174 1446.89 789.549 1454.97 796.312 cv
cp
f
1484.67 823.974 mo
1484.67 823.974 1491.02 819.754 1484.04 812.632 cv
1477.07 805.51 1457.33 810.307 1445.56 817.894 cv
1472.47 811.507 1484.67 823.974 1484.67 823.974 cv
cp
f
1379.74 809.486 mo
1367.63 800.401 1354.96 816.388 1357.65 829.287 cv
1358.03 830.293 1358.38 831.37 1358.69 832.555 cv
1358.95 821.233 1374.31 812.852 1385.66 823.558 cv
1384.25 806.968 1412.95 800.624 1418.95 811.211 cv
1418.55 804.013 1414.59 799.109 1409.33 796.433 cv
1407.96 795.736 1406.51 795.193 1405.01 794.796 cv
1404.39 794.633 1403.76 794.495 1403.13 794.382 cv
1402.91 794.345 1402.69 794.309 1402.48 794.277 cv
1392.09 792.72 1380.5 797.901 1379.74 809.486 cv
cp
f
1343.2 819.844 mo
1340.71 820.572 1338.31 822.095 1336.26 824.132 cv
1333.9 826.492 1332 829.536 1331.03 832.825 cv
1340.1 826.048 1350.7 830.639 1358.69 832.555 cv
1358.38 831.37 1358.03 830.293 1357.65 829.287 cv
1354.33 820.46 1348.58 818.273 1343.2 819.844 cv
cp
f
52.6016 817.391 mo
37.4883 794.603 20.5967 798.399 12.5967 804.097 cv
4.5967 809.793 5.4844 816.439 17.042 827.837 cv
9.9297 811.695 38.3779 805.996 52.6016 817.391 cv
cp
f
104.265 800.181 mo
108.999 772.76 142.396 770.274 148.615 779.409 cv
146.838 768.012 137.948 756.619 121.945 753.769 cv
105.943 750.92 91.7187 780.357 95.2754 798.399 cv
73.9395 777.507 64.1602 777.507 57.9365 782.256 cv
51.7139 787.005 49.0459 805.047 57.0479 816.439 cv
57.6904 802.71 74.5986 799.406 89.292 804.371 cv
92.9707 802.055 96.7002 800.569 99.7207 800.299 cv
101.166 800.17 102.694 800.132 104.265 800.181 cv
cp
f
126.317 808.298 mo
121.441 803.028 112.308 800.427 104.265 800.181 cv
102.694 800.132 101.166 800.17 99.7207 800.299 cv
96.7002 800.569 92.9707 802.055 89.292 804.371 cv
79.9756 810.234 71.0039 821.423 74.8281 831.634 cv
89.1152 818.783 111.034 811.369 123.371 811.688 cv
124.288 810.518 125.274 809.384 126.317 808.298 cv
cp
f
203.735 787.005 mo
201.956 778.459 190.398 771.811 179.73 770.862 cv
169.064 769.914 161.951 782.256 156.616 797.449 cv
171.73 777.507 197.512 782.256 203.735 787.005 cv
cp
f
222.403 818.34 mo
217.069 803.148 199.29 807.897 191.288 815.49 cv
207.29 810.743 217.069 814.542 222.403 818.34 cv
cp
f
126.317 808.298 mo
125.274 809.384 124.288 810.518 123.371 811.688 cv
119.153 817.068 116.352 823.19 115.722 828.787 cv
130.836 811.695 162.84 805.996 183.287 825.936 cv
174.6 805.595 163.275 797.594 152.381 796.789 cv
152.238 796.778 152.096 796.776 151.953 796.769 cv
142.332 796.224 133.082 801.248 126.317 808.298 cv
cp
f
1094.68 816.778 mo
1102.81 814.515 1114.22 815.682 1121.7 821.164 cv
1106.54 800.254 1089.59 803.74 1081.57 808.966 cv
1077.36 811.711 1075.61 814.691 1076.56 818.416 cv
1082.05 815.858 1088.82 814.123 1094.68 816.778 cv
cp
f
1173.53 805.372 mo
1178.28 780.211 1211.79 777.937 1218.03 786.313 cv
1216.25 775.857 1207.33 765.402 1191.27 762.79 cv
1175.22 760.177 1160.95 787.186 1164.52 803.74 cv
1143.11 784.571 1133.3 784.571 1127.06 788.93 cv
1120.81 793.283 1118.14 809.839 1126.16 820.292 cv
1126.81 807.695 1143.77 804.663 1158.51 809.218 cv
1162.2 807.093 1165.95 805.728 1168.97 805.482 cv
1170.43 805.363 1171.96 805.331 1173.53 805.372 cv
cp
f
1195.66 812.82 mo
1190.77 807.984 1181.6 805.599 1173.53 805.372 cv
1171.96 805.331 1170.43 805.363 1168.97 805.482 cv
1165.95 805.728 1162.2 807.093 1158.51 809.218 cv
1149.17 814.6 1140.16 824.863 1144 834.236 cv
1158.33 822.444 1180.33 815.64 1192.7 815.931 cv
1193.62 814.858 1194.61 813.818 1195.66 812.82 cv
cp
f
1273.33 793.283 mo
1271.55 785.443 1259.95 779.345 1249.25 778.472 cv
1238.54 777.603 1231.41 788.93 1226.06 802.868 cv
1241.22 784.571 1267.09 788.93 1273.33 793.283 cv
cp
f
1260.84 819.423 mo
1276.9 815.064 1286.71 818.551 1292.06 822.038 cv
1286.71 808.096 1268.87 812.452 1260.84 819.423 cv
cp
f
1195.66 812.82 mo
1194.61 813.818 1193.62 814.858 1192.7 815.931 cv
1188.47 820.868 1185.66 826.487 1185.03 831.622 cv
1200.19 815.937 1232.3 810.709 1252.82 829.005 cv
1244.1 810.341 1232.74 803.002 1221.81 802.263 cv
1221.67 802.251 1221.52 802.25 1221.38 802.243 cv
1211.73 801.745 1202.45 806.354 1195.66 812.82 cv
cp
f
367.69 818.206 mo
369.894 796.1 398.709 795.597 406.952 798.82 cv
404.276 794.462 397.141 789.234 383.763 790.106 cv
370.384 790.976 359.682 804.917 360.573 814.5 cv
351.654 807.529 333.815 804.045 326.68 806.661 cv
319.544 809.274 316.869 817.984 325.788 827.57 cv
323.376 807.926 348.528 813.796 363.303 821.528 cv
364.617 820.313 366.092 819.193 367.69 818.206 cv
cp
f
412.304 831.056 mo
423.9 820.6 434.603 819.727 445.869 820.659 cv
441.974 809.396 409.63 820.6 412.304 831.056 cv
cp
f
401.604 826.701 mo
391.655 811.356 377.403 812.227 367.69 818.206 cv
366.092 819.193 364.617 820.313 363.303 821.528 cv
359.004 825.492 356.443 830.407 357.009 834.541 cv
364.143 822.343 387.333 821.471 401.604 826.701 cv
cp
f
1013.03 821.378 mo
1015.46 797.047 1047.17 796.493 1056.24 800.037 cv
1053.29 795.244 1045.44 789.493 1030.72 790.449 cv
1016 791.407 1004.22 806.751 1005.2 817.295 cv
995.384 809.626 975.752 805.79 967.897 808.668 cv
960.045 811.544 957.102 821.132 966.916 831.681 cv
964.262 810.061 991.944 816.518 1008.2 825.027 cv
1009.65 823.693 1011.27 822.459 1013.03 821.378 cv
cp
f
1099.07 824.077 mo
1094.78 811.678 1059.19 824.01 1062.13 835.515 cv
1074.89 824.01 1086.67 823.049 1099.07 824.077 cv
cp
f
1050.35 830.722 mo
1039.41 813.835 1023.72 814.795 1013.03 821.378 cv
1011.27 822.459 1009.65 823.693 1008.2 825.027 cv
1003.47 829.393 1000.65 834.803 1001.27 839.353 cv
1009.13 825.927 1034.65 824.97 1050.35 830.722 cv
cp
f
1964.6 812.862 mo
1970.85 800.146 1996.18 806.831 2012.17 815.201 cv
2013.88 813.623 2015.8 812.164 2017.88 810.884 cv
2020.75 782.128 2058.22 781.476 2068.94 785.665 cv
2065.46 779.998 2056.18 773.2 2038.78 774.334 cv
2021.38 775.464 2007.46 793.597 2008.62 806.062 cv
1997.02 796.998 1973.82 792.465 1964.54 795.865 cv
1957.63 798.394 1953.94 805.317 1957.29 813.828 cv
1959.66 813.108 1962.16 812.699 1964.6 812.862 cv
cp
f
2075.9 827.593 mo
2085.38 819.045 2094.41 815.423 2103.44 814.215 cv
2103.79 813.775 2104.17 813.337 2104.62 812.91 cv
2107.5 810.132 2110.61 808.984 2113.62 808.804 cv
2100.7 804.691 2073.06 816.467 2075.9 827.593 cv
cp
f
2003.98 832.126 mo
2013.26 816.263 2043.43 815.129 2061.99 821.929 cv
2049.05 801.969 2030.51 803.106 2017.88 810.884 cv
2015.8 812.164 2013.88 813.623 2012.17 815.201 cv
2006.58 820.358 2003.25 826.751 2003.98 832.126 cv
cp
f
3041.43 813.441 mo
3029.83 804.374 3006.63 799.842 2997.35 803.242 cv
2994.73 804.202 2992.58 805.79 2991.09 807.856 cv
2998.77 805.418 3008.46 803.967 3013.74 809.506 cv
3014.96 810.784 3015.82 812.079 3016.39 813.373 cv
3025.77 814.312 3036.64 818.214 3044.98 822.577 cv
3046.69 821.003 3048.61 819.543 3050.69 818.263 cv
3051.19 813.261 3052.73 809.109 3055 805.686 cv
3055 788.257 li
3046.25 794.925 3040.68 805.369 3041.43 813.441 cv
cp
f
3044.98 822.577 mo
3039.39 827.735 3036.06 834.131 3036.79 839.505 cv
3040.38 833.384 3047.07 829.465 3055 827.337 cv
3055 815.983 li
3053.5 816.652 3052.06 817.416 3050.69 818.263 cv
3048.61 819.543 3046.69 821.003 3044.98 822.577 cv
cp
f
1574.25 793.043 mo
1570.77 787.378 1561.49 780.579 1544.09 781.711 cv
1537.96 782.111 1532.26 784.627 1527.5 788.257 cv
1527.5 805.686 li
1538.28 789.426 1565.39 789.584 1574.25 793.043 cv
cp
f
1532.79 814.102 mo
1530.97 814.583 1529.2 815.222 1527.5 815.983 cv
1527.5 827.337 li
1531.33 826.31 1535.45 825.703 1539.66 825.476 cv
1536.33 821.977 1533.67 818.093 1532.79 814.102 cv
cp
f
1726.7 805.081 mo
1727.11 805.835 1727.59 806.595 1728.16 807.361 cv
1729.8 806.963 1731.74 806.601 1733.81 806.434 cv
1734.22 796.141 1746.36 789.497 1764.26 801.386 cv
1764.26 780.174 1783.71 756.495 1802.85 774.576 cv
1803.58 774.106 1804.35 773.658 1805.19 773.242 cv
1807.84 758.105 1785.77 747.006 1773.18 755.21 cv
1759.8 763.922 1757.13 778.735 1759.8 788.319 cv
1750.42 783.383 1739.29 781.305 1732.55 784.84 cv
1734.96 792.689 1730.23 800.581 1726.7 805.081 cv
cp
f
1807.07 808.356 mo
1798.7 788.714 1823.37 774.455 1833.79 780.743 cv
1834.43 780.148 1835.11 779.591 1835.82 779.079 cv
1838.62 758.418 1868.95 756.017 1875.75 772.635 cv
1871.29 753.467 1857.02 744.753 1848.99 743.013 cv
1840.97 741.268 1815.1 749.111 1811.54 770.892 cv
1809.15 771.527 1807.04 772.317 1805.19 773.242 cv
1804.35 773.658 1803.58 774.106 1802.85 774.576 cv
1791.88 781.669 1793.11 794.716 1807.07 808.356 cv
cp
f
1923.02 776.993 mo
1922.13 771.764 1921.24 763.051 1906.97 758.694 cv
1892.7 754.337 1873.08 770.892 1874.86 784.83 cv
1888.24 764.794 1918.56 770.023 1923.02 776.993 cv
cp
f
1945.32 802.256 mo
1948.33 794.165 1938.63 787.315 1929.09 790.625 cv
1932.82 792.639 1935.53 795.536 1937.48 798.775 cv
1940.75 798.259 1943.7 799.611 1945.32 802.256 cv
cp
f
1830.27 806.616 mo
1828.48 792.673 1848.1 776.121 1863.27 780.478 cv
1852.43 773.42 1842.5 774.303 1835.82 779.079 cv
1835.11 779.591 1834.43 780.148 1833.79 780.743 cv
1827.16 786.944 1824.9 797.436 1830.27 806.616 cv
cp
f
2333.42 805.453 mo
2338.93 802.826 2347.54 803.868 2357.75 811.715 cv
2359.26 790.555 2380.36 768.255 2398.16 787.595 cv
2398.92 787.177 2399.72 786.785 2400.58 786.424 cv
2404.31 771.506 2383.09 758.933 2369.94 766.257 cv
2355.97 774.038 2352.25 788.632 2354.23 798.376 cv
2343.1 791.499 2328.99 788.79 2323.09 796.248 cv
2322.57 796.903 2322.09 797.566 2321.65 798.24 cv
2325.15 798.399 2328.38 799.405 2330.76 801.799 cv
2331.96 803.002 2332.83 804.223 2333.42 805.453 cv
cp
f
2328.34 822.81 mo
2328.28 822.665 2328.24 822.523 2328.18 822.384 cv
2328.13 822.436 2328.08 822.49 2328.03 822.543 cv
2328.14 822.63 2328.24 822.72 2328.34 822.81 cv
cp
f
2399.96 821.583 mo
2393 801.418 2418.64 788.873 2428.58 795.853 cv
2429.26 795.302 2429.98 794.794 2430.73 794.333 cv
2434.99 773.914 2465.42 773.582 2471.02 790.623 cv
2467.93 771.201 2454.32 761.536 2446.44 759.25 cv
2438.56 756.967 2412.19 763.027 2407.08 784.513 cv
2404.66 784.984 2402.5 785.628 2400.58 786.424 cv
2399.72 786.785 2398.92 787.177 2398.16 787.595 cv
2386.7 793.927 2387 807.023 2399.96 821.583 cv
cp
f
2517.87 798.188 mo
2517.35 792.913 2517.08 784.16 2503.16 778.841 cv
2489.23 773.524 2468.47 788.703 2469.26 802.731 cv
2484.03 783.651 2513.91 790.93 2517.87 798.188 cv
cp
f
2526.26 811.678 mo
2528.2 812.648 2529.27 813.343 2529.27 813.343 cv
2529.27 813.343 2529.29 812.798 2529.43 811.868 cv
2528.41 811.697 2527.35 811.624 2526.26 811.678 cv
cp
f
2423.22 821.424 mo
2422.43 807.395 2443.19 792.221 2458.01 797.595 cv
2447.7 789.818 2437.73 790.025 2430.73 794.333 cv
2429.98 794.794 2429.26 795.302 2428.58 795.853 cv
2421.53 801.589 2418.52 811.903 2423.22 821.424 cv
cp
f
2132.41 819.785 mo
2115.47 804.102 2100.3 811.945 2105.66 825.882 cv
2106.55 816.301 2122.6 813.686 2132.41 819.785 cv
cp
f
2172.16 806.652 mo
2150.36 776.96 2129.74 793.649 2134.2 816.301 cv
2137.76 796.263 2161.84 797.132 2172.16 806.652 cv
cp
f
2235.88 766.638 mo
2233.2 761.411 2219.82 752.697 2201.98 757.054 cv
2184.15 761.411 2175.23 786.677 2179.29 810.135 cv
2165.52 805.714 2152.04 813.686 2157.39 828.498 cv
2159.45 817.064 2171.61 816.538 2181.16 819.694 cv
2183.16 817.612 2185.52 816.037 2187.99 815.254 cv
2187.22 774.543 2224.97 761.719 2235.88 766.638 cv
cp
f
2299.2 789.289 mo
2296.53 781.449 2280.47 773.608 2271.55 773.608 cv
2264.55 773.608 2254.81 778.975 2249.21 788.867 cv
2250.72 789.229 2252.19 789.743 2253.57 790.408 cv
2268.89 779.813 2290.96 782.706 2299.2 789.289 cv
cp
f
2329.53 816.301 mo
2329.53 816.301 2335.77 811.945 2328.64 804.974 cv
2321.5 798.005 2301.88 803.232 2290.28 811.073 cv
2317.04 804.103 2329.53 816.301 2329.53 816.301 cv
cp
f
2224.28 804.102 mo
2211.99 795.296 2199.71 811.498 2202.64 824.328 cv
2203.05 825.338 2203.43 826.433 2203.77 827.627 cv
2203.77 816.301 2218.93 807.587 2230.53 818.042 cv
2228.74 801.49 2257.28 794.519 2263.53 804.974 cv
2262.96 797.785 2258.89 792.969 2253.57 790.408 cv
2252.19 789.743 2250.72 789.229 2249.21 788.867 cv
2248.59 788.716 2247.96 788.591 2247.33 788.491 cv
2247.11 788.459 2246.89 788.428 2246.67 788.402 cv
2236.25 787.074 2224.78 792.501 2224.28 804.102 cv
cp
f
2202.64 824.328 mo
2199.12 815.611 2193.33 813.568 2187.99 815.254 cv
2185.52 816.037 2183.16 817.612 2181.16 819.694 cv
2178.84 822.105 2177.02 825.188 2176.12 828.498 cv
2185.04 821.528 2195.74 825.882 2203.77 827.627 cv
2203.43 826.433 2203.05 825.338 2202.64 824.328 cv
cp
f
2855.06 810.893 mo
2835.83 783.421 2816.69 794.453 2816.42 813.831 cv
2817.06 814.264 2817.67 814.755 2818.25 815.31 cv
2824.72 800.052 2845.79 801.942 2855.06 810.893 cv
cp
f
2919.68 772.284 mo
2917.13 766.998 2903.95 757.997 2886.02 761.961 cv
2868.08 765.927 2858.59 790.994 2862.12 814.537 cv
2848.45 809.815 2834.79 817.491 2839.8 832.415 cv
2842.13 821.029 2854.29 820.768 2863.76 824.132 cv
2865.81 822.095 2868.22 820.572 2870.7 819.844 cv
2870.86 779.124 2908.89 767.126 2919.68 772.284 cv
cp
f
2982.47 796.312 mo
2979.98 788.414 2964.11 780.223 2955.19 780.029 cv
2948.19 779.875 2938.33 785.031 2932.51 794.796 cv
2934.01 795.193 2935.46 795.736 2936.83 796.433 cv
2952.38 786.174 2974.39 789.549 2982.47 796.312 cv
cp
f
3012.17 823.974 mo
3012.17 823.974 3018.52 819.754 3011.54 812.632 cv
3004.57 805.51 2984.83 810.307 2973.06 817.894 cv
2999.97 811.507 3012.17 823.974 3012.17 823.974 cv
cp
f
2907.23 809.486 mo
2895.13 800.401 2882.46 816.388 2885.15 829.287 cv
2885.52 830.293 2885.88 831.37 2886.19 832.555 cv
2886.45 821.233 2901.81 812.852 2913.16 823.558 cv
2911.75 806.968 2940.45 800.624 2946.45 811.211 cv
2946.05 804.013 2942.09 799.109 2936.83 796.433 cv
2935.46 795.736 2934.01 795.193 2932.51 794.796 cv
2931.89 794.633 2931.26 794.495 2930.63 794.382 cv
2930.41 794.345 2930.2 794.309 2929.98 794.277 cv
2919.59 792.72 2908 797.901 2907.23 809.486 cv
cp
f
2870.7 819.844 mo
2868.22 820.572 2865.81 822.095 2863.76 824.132 cv
2861.4 826.492 2859.51 829.536 2858.53 832.825 cv
2867.6 826.048 2878.2 830.639 2886.19 832.555 cv
2885.88 831.37 2885.52 830.293 2885.15 829.287 cv
2881.83 820.46 2876.08 818.273 2870.7 819.844 cv
cp
f
1580.1 817.391 mo
1564.99 794.603 1548.1 798.399 1540.1 804.097 cv
1532.1 809.793 1532.98 816.439 1544.54 827.837 cv
1537.43 811.695 1565.88 805.996 1580.1 817.391 cv
cp
f
1631.76 800.181 mo
1636.5 772.76 1669.9 770.274 1676.12 779.409 cv
1674.34 768.012 1665.45 756.619 1649.45 753.769 cv
1633.44 750.92 1619.22 780.357 1622.78 798.399 cv
1601.44 777.507 1591.66 777.507 1585.44 782.256 cv
1579.21 787.005 1576.54 805.047 1584.55 816.439 cv
1585.19 802.71 1602.1 799.406 1616.79 804.371 cv
1620.47 802.055 1624.2 800.569 1627.22 800.299 cv
1628.67 800.17 1630.2 800.132 1631.76 800.181 cv
cp
f
1653.82 808.298 mo
1648.94 803.028 1639.81 800.427 1631.76 800.181 cv
1630.2 800.132 1628.67 800.17 1627.22 800.299 cv
1624.2 800.569 1620.47 802.055 1616.79 804.371 cv
1607.48 810.234 1598.5 821.423 1602.33 831.634 cv
1616.62 818.783 1638.54 811.369 1650.87 811.688 cv
1651.79 810.518 1652.78 809.384 1653.82 808.298 cv
cp
f
1731.24 787.005 mo
1729.46 778.459 1717.9 771.811 1707.23 770.862 cv
1696.56 769.914 1689.45 782.256 1684.12 797.449 cv
1699.23 777.507 1725.01 782.256 1731.24 787.005 cv
cp
f
1749.9 818.34 mo
1744.57 803.148 1726.79 807.897 1718.79 815.49 cv
1734.79 810.743 1744.57 814.542 1749.9 818.34 cv
cp
f
1653.82 808.298 mo
1652.78 809.384 1651.79 810.518 1650.87 811.688 cv
1646.65 817.068 1643.85 823.19 1643.22 828.787 cv
1658.34 811.695 1690.34 805.996 1710.79 825.936 cv
1702.1 805.595 1690.78 797.594 1679.88 796.789 cv
1679.74 796.778 1679.6 796.776 1679.45 796.769 cv
1669.83 796.224 1660.58 801.248 1653.82 808.298 cv
cp
f
2622.18 816.778 mo
2630.31 814.515 2641.72 815.682 2649.2 821.164 cv
2634.04 800.254 2617.09 803.74 2609.07 808.966 cv
2604.86 811.711 2603.1 814.691 2604.06 818.416 cv
2609.55 815.858 2616.32 814.123 2622.18 816.778 cv
cp
f
2701.03 805.372 mo
2705.79 780.211 2739.29 777.937 2745.53 786.313 cv
2743.75 775.857 2734.83 765.402 2718.77 762.79 cv
2702.72 760.177 2688.45 787.186 2692.02 803.74 cv
2670.61 784.571 2660.8 784.571 2654.56 788.93 cv
2648.31 793.283 2645.64 809.839 2653.66 820.292 cv
2654.31 807.695 2671.27 804.663 2686.01 809.218 cv
2689.7 807.093 2693.45 805.728 2696.47 805.482 cv
2697.93 805.363 2699.46 805.331 2701.03 805.372 cv
cp
f
2723.16 812.82 mo
2718.27 807.984 2709.1 805.599 2701.03 805.372 cv
2699.46 805.331 2697.93 805.363 2696.47 805.482 cv
2693.45 805.728 2689.7 807.093 2686.01 809.218 cv
2676.67 814.6 2667.66 824.863 2671.5 834.236 cv
2685.83 822.444 2707.83 815.64 2720.21 815.931 cv
2721.12 814.858 2722.12 813.818 2723.16 812.82 cv
cp
f
2800.83 793.283 mo
2799.04 785.443 2787.45 779.345 2776.75 778.472 cv
2766.04 777.603 2758.91 788.93 2753.56 802.868 cv
2768.72 784.571 2794.59 788.93 2800.83 793.283 cv
cp
f
2788.34 819.423 mo
2804.4 815.064 2814.21 818.551 2819.56 822.038 cv
2814.21 808.096 2796.37 812.452 2788.34 819.423 cv
cp
f
2723.16 812.82 mo
2722.12 813.818 2721.12 814.858 2720.21 815.931 cv
2715.97 820.868 2713.16 826.487 2712.53 831.622 cv
2727.69 815.937 2759.8 810.709 2780.31 829.005 cv
2771.6 810.341 2760.24 803.002 2749.31 802.263 cv
2749.17 802.251 2749.02 802.25 2748.88 802.243 cv
2739.23 801.745 2729.95 806.354 2723.16 812.82 cv
cp
f
1895.19 818.206 mo
1897.39 796.1 1926.21 795.597 1934.45 798.82 cv
1931.78 794.462 1924.64 789.234 1911.26 790.106 cv
1897.88 790.976 1887.18 804.917 1888.07 814.5 cv
1879.15 807.529 1861.32 804.045 1854.18 806.661 cv
1847.04 809.274 1844.37 817.984 1853.29 827.57 cv
1850.88 807.926 1876.03 813.796 1890.8 821.528 cv
1892.12 820.313 1893.59 819.193 1895.19 818.206 cv
cp
f
1939.8 831.056 mo
1951.4 820.6 1962.1 819.727 1973.37 820.659 cv
1969.47 809.396 1937.13 820.6 1939.8 831.056 cv
cp
f
1929.1 826.701 mo
1919.15 811.356 1904.9 812.227 1895.19 818.206 cv
1893.59 819.193 1892.12 820.313 1890.8 821.528 cv
1886.5 825.492 1883.94 830.407 1884.51 834.541 cv
1891.64 822.343 1914.83 821.471 1929.1 826.701 cv
cp
f
3011.54 812.632 mo
3018.52 819.754 3012.17 823.974 3012.17 823.974 cv
3012.17 823.974 2999.97 811.507 2973.06 817.894 cv
2984.83 810.307 3004.57 805.51 3011.54 812.632 cv
cp
1509.29 839.505 mo
1508.56 834.131 1511.89 827.735 1517.48 822.577 cv
1509.14 818.214 1498.27 814.312 1488.89 813.373 cv
1488.32 812.079 1487.46 810.784 1486.24 809.506 cv
1480.97 803.967 1471.27 805.418 1463.59 807.856 cv
1465.08 805.79 1467.23 804.202 1469.85 803.242 cv
1479.13 799.842 1502.33 804.374 1513.93 813.441 cv
1513.18 805.369 1518.75 794.925 1527.5 788.257 cv
1527.5 788.257 li
1532.26 784.627 1537.96 782.111 1544.09 781.711 cv
1561.49 780.579 1570.77 787.378 1574.25 793.043 cv
1565.39 789.584 1538.28 789.426 1527.5 805.686 cv
1527.5 805.688 li
1525.23 809.11 1523.69 813.262 1523.19 818.263 cv
1524.56 817.416 1526 816.652 1527.5 815.983 cv
1527.5 815.982 li
1529.2 815.222 1530.97 814.583 1532.79 814.102 cv
1533.67 818.093 1536.33 821.977 1539.66 825.476 cv
1535.45 825.703 1531.33 826.31 1527.5 827.337 cv
1527.5 827.338 li
1519.57 829.466 1512.87 833.385 1509.29 839.505 cv
cp
12.5967 804.097 mo
20.5967 798.399 37.4883 794.603 52.6016 817.391 cv
38.3779 805.996 9.92969 811.695 17.042 827.837 cv
5.48444 816.439 4.59674 809.793 12.5967 804.097 cv
cp
156.616 797.449 mo
161.951 782.256 169.064 769.914 179.731 770.862 cv
190.398 771.811 201.956 778.459 203.735 787.005 cv
197.512 782.256 171.729 777.507 156.616 797.449 cv
cp
205.05 784.84 mo
211.794 781.305 222.923 783.383 232.302 788.319 cv
229.626 778.735 232.302 763.922 245.681 755.21 cv
258.273 747.006 280.343 758.105 277.69 773.242 cv
279.542 772.317 281.653 771.527 284.033 770.892 cv
287.602 749.111 313.468 741.268 321.495 743.013 cv
329.521 744.753 343.791 753.467 348.251 772.635 cv
341.447 756.017 311.121 758.418 308.323 779.079 cv
314.997 774.303 324.93 773.42 335.767 780.478 cv
320.604 776.121 300.981 792.673 302.766 806.616 cv
297.397 797.436 299.661 786.944 306.289 780.743 cv
295.872 774.455 271.195 788.714 279.573 808.356 cv
265.607 794.716 264.375 781.669 275.353 774.576 cv
256.216 756.495 236.761 780.174 236.761 801.386 cv
218.86 789.497 206.719 796.141 206.315 806.434 cv
204.24 806.601 202.299 806.963 200.658 807.361 cv
200.089 806.595 199.604 805.835 199.195 805.081 cv
202.732 800.581 207.46 792.689 205.05 784.84 cv
cp
379.469 758.694 mo
393.739 763.051 394.632 771.764 395.523 776.993 cv
391.064 770.023 360.738 764.794 347.359 784.83 cv
345.575 770.892 365.198 754.337 379.469 758.694 cv
cp
222.403 818.34 mo
217.069 814.542 207.29 810.743 191.288 815.49 cv
199.29 807.897 217.069 803.148 222.403 818.34 cv
cp
196.41 808.641 mo
196.029 808.783 195.815 808.871 195.815 808.871 cv
195.815 808.871 195.978 808.715 196.265 808.427 cv
196.312 808.498 196.362 808.569 196.41 808.641 cv
cp
406.952 798.82 mo
398.709 795.597 369.894 796.1 367.69 818.206 cv
377.403 812.227 391.655 811.356 401.604 826.701 cv
387.333 821.471 364.143 822.343 357.009 834.541 cv
356.443 830.407 359.004 825.492 363.303 821.528 cv
348.528 813.796 323.376 807.926 325.788 827.57 cv
316.869 817.984 319.544 809.274 326.68 806.661 cv
333.815 804.045 351.654 807.529 360.573 814.5 cv
359.682 804.917 370.384 790.976 383.763 790.106 cv
397.141 789.234 404.276 794.462 406.952 798.82 cv
cp
417.821 802.256 mo
416.194 799.611 413.247 798.259 409.985 798.775 cv
408.023 795.536 405.322 792.639 401.589 790.625 cv
411.128 787.315 420.835 794.165 417.821 802.256 cv
cp
445.869 820.659 mo
434.603 819.727 423.9 820.6 412.304 831.056 cv
409.63 820.6 441.974 809.396 445.869 820.659 cv
cp
437.039 795.865 mo
446.318 792.465 469.522 796.998 481.121 806.062 cv
479.963 793.597 493.881 775.464 511.283 774.334 cv
528.684 773.2 537.963 779.998 541.443 785.665 cv
530.723 781.476 493.246 782.128 490.379 810.884 cv
503.013 803.106 521.547 801.969 534.487 821.929 cv
515.927 815.129 485.764 816.263 476.484 832.126 cv
475.75 826.751 479.08 820.358 484.671 815.201 cv
468.681 806.831 443.347 800.146 437.101 812.862 cv
434.654 812.699 432.163 813.108 429.786 813.828 cv
426.444 805.317 430.133 798.394 437.039 795.865 cv
cp
586.123 808.804 mo
583.104 808.984 580.004 810.132 577.118 812.91 cv
576.672 813.337 576.292 813.775 575.94 814.215 cv
566.907 815.423 557.884 819.045 548.403 827.593 cv
545.557 816.467 573.202 804.691 586.123 808.804 cv
cp
604.913 819.785 mo
595.102 813.686 579.048 816.301 578.155 825.882 cv
572.805 811.945 587.967 804.102 604.913 819.785 cv
cp
644.656 806.652 mo
634.346 797.132 610.264 796.263 606.697 816.301 cv
602.238 793.649 622.856 776.96 644.656 806.652 cv
cp
801.135 804.974 mo
808.271 811.945 802.026 816.301 802.026 816.301 cv
802.026 816.301 789.541 804.103 762.782 811.073 cv
774.379 803.232 794 798.005 801.135 804.974 cv
cp
795.59 796.248 mo
801.488 788.79 815.6 791.499 826.73 798.376 cv
824.747 788.632 828.471 774.038 842.44 766.257 cv
855.587 758.933 876.813 771.506 873.085 786.424 cv
874.998 785.628 877.162 784.984 879.581 784.513 cv
884.691 763.027 911.058 756.967 918.938 759.25 cv
926.822 761.536 940.436 771.201 943.519 790.623 cv
937.915 773.582 907.493 773.914 903.227 794.333 cv
910.227 790.025 920.199 789.818 930.506 797.595 cv
915.69 792.221 894.935 807.395 895.719 821.424 cv
891.018 811.903 894.025 801.589 901.08 795.853 cv
891.138 788.873 865.504 801.418 872.459 821.583 cv
859.5 807.023 859.2 793.927 870.659 787.595 cv
852.856 768.255 831.761 790.555 830.248 811.715 cv
820.041 803.868 811.432 802.826 805.924 805.453 cv
805.328 804.223 804.459 803.002 803.262 801.799 cv
800.875 799.405 797.655 798.399 794.148 798.24 cv
794.593 797.566 795.074 796.903 795.59 796.248 cv
cp
975.654 778.841 mo
989.581 784.16 989.849 792.913 990.365 798.188 cv
986.412 790.93 956.533 783.651 941.759 802.731 cv
940.973 788.703 961.73 773.524 975.654 778.841 cv
cp
800.844 822.81 mo
800.735 822.72 800.637 822.63 800.53 822.543 cv
800.581 822.49 800.631 822.436 800.682 822.384 cv
800.738 822.523 800.783 822.665 800.844 822.81 cv
cp
1005.2 817.295 mo
1004.22 806.751 1016 791.407 1030.72 790.449 cv
1045.44 789.493 1053.29 795.244 1056.24 800.037 cv
1047.17 796.493 1015.46 797.047 1013.03 821.378 cv
1023.72 814.795 1039.41 813.835 1050.35 830.722 cv
1034.65 824.97 1009.13 825.927 1001.27 839.353 cv
1000.65 834.803 1003.47 829.393 1008.2 825.027 cv
991.944 816.518 964.262 810.061 966.916 831.681 cv
957.102 821.132 960.045 811.544 967.897 808.668 cv
975.752 805.79 995.384 809.626 1005.2 817.295 cv
cp
1001.93 811.868 mo
1001.79 812.798 1001.77 813.343 1001.77 813.343 cv
1001.77 813.343 1000.7 812.648 998.761 811.678 cv
999.852 811.624 1000.91 811.697 1001.93 811.868 cv
cp
1099.07 824.077 mo
1086.67 823.049 1074.89 824.01 1062.13 835.515 cv
1059.19 824.01 1094.78 811.678 1099.07 824.077 cv
cp
1081.57 808.966 mo
1089.59 803.74 1106.54 800.254 1121.7 821.164 cv
1114.22 815.682 1102.81 814.515 1094.68 816.778 cv
1088.82 814.123 1082.05 815.858 1076.56 818.416 cv
1075.61 814.691 1077.36 811.711 1081.57 808.966 cv
cp
1226.06 802.868 mo
1231.41 788.93 1238.54 777.603 1249.25 778.472 cv
1259.95 779.345 1271.55 785.443 1273.33 793.283 cv
1267.09 788.93 1241.22 784.571 1226.06 802.868 cv
cp
1292.06 822.038 mo
1286.71 818.551 1276.9 815.064 1260.84 819.423 cv
1268.87 812.452 1286.71 808.096 1292.06 822.038 cv
cp
1327.56 810.893 mo
1318.29 801.942 1297.22 800.052 1290.75 815.31 cv
1290.17 814.755 1289.56 814.264 1288.92 813.831 cv
1289.19 794.453 1308.33 783.421 1327.56 810.893 cv
cp
1484.04 812.632 mo
1491.02 819.754 1484.67 823.974 1484.67 823.974 cv
1484.67 823.974 1472.47 811.507 1445.56 817.894 cv
1457.33 810.307 1477.07 805.51 1484.04 812.632 cv
cp
1580.1 817.391 mo
1565.88 805.996 1537.43 811.695 1544.54 827.837 cv
1532.98 816.439 1532.1 809.793 1540.1 804.097 cv
1548.1 798.399 1564.99 794.603 1580.1 817.391 cv
cp
1684.12 797.449 mo
1689.45 782.256 1696.56 769.914 1707.23 770.862 cv
1717.9 771.811 1729.46 778.459 1731.24 787.005 cv
1725.01 782.256 1699.23 777.507 1684.12 797.449 cv
cp
1732.55 784.84 mo
1739.29 781.305 1750.42 783.383 1759.8 788.319 cv
1757.13 778.735 1759.8 763.922 1773.18 755.21 cv
1785.77 747.006 1807.84 758.105 1805.19 773.242 cv
1807.04 772.317 1809.15 771.527 1811.54 770.892 cv
1815.1 749.111 1840.97 741.268 1848.99 743.013 cv
1857.02 744.753 1871.29 753.467 1875.75 772.635 cv
1868.95 756.017 1838.62 758.418 1835.82 779.079 cv
1842.5 774.303 1852.43 773.42 1863.27 780.478 cv
1848.1 776.121 1828.48 792.673 1830.27 806.616 cv
1824.9 797.436 1827.16 786.944 1833.79 780.743 cv
1823.37 774.455 1798.7 788.714 1807.07 808.356 cv
1793.11 794.716 1791.88 781.669 1802.85 774.576 cv
1783.71 756.495 1764.26 780.174 1764.26 801.386 cv
1746.36 789.497 1734.22 796.141 1733.81 806.434 cv
1731.74 806.601 1729.8 806.963 1728.16 807.361 cv
1727.59 806.595 1727.11 805.835 1726.7 805.081 cv
1730.23 800.581 1734.96 792.689 1732.55 784.84 cv
cp
1906.97 758.694 mo
1921.24 763.051 1922.13 771.764 1923.02 776.993 cv
1918.56 770.023 1888.24 764.794 1874.86 784.83 cv
1873.08 770.892 1892.7 754.337 1906.97 758.694 cv
cp
1749.9 818.34 mo
1744.57 814.542 1734.79 810.743 1718.79 815.49 cv
1726.79 807.897 1744.57 803.148 1749.9 818.34 cv
cp
1723.91 808.641 mo
1723.53 808.783 1723.32 808.871 1723.32 808.871 cv
1723.32 808.871 1723.48 808.715 1723.76 808.427 cv
1723.81 808.498 1723.86 808.569 1723.91 808.641 cv
cp
1934.45 798.82 mo
1926.21 795.597 1897.39 796.1 1895.19 818.206 cv
1904.9 812.227 1919.15 811.356 1929.1 826.701 cv
1914.83 821.471 1891.64 822.343 1884.51 834.541 cv
1883.94 830.407 1886.5 825.492 1890.8 821.528 cv
1876.03 813.796 1850.88 807.926 1853.29 827.57 cv
1844.37 817.984 1847.04 809.274 1854.18 806.661 cv
1861.32 804.045 1879.15 807.529 1888.07 814.5 cv
1887.18 804.917 1897.88 790.976 1911.26 790.106 cv
1924.64 789.234 1931.78 794.462 1934.45 798.82 cv
cp
1945.32 802.256 mo
1943.7 799.611 1940.75 798.259 1937.48 798.775 cv
1935.53 795.536 1932.82 792.639 1929.09 790.625 cv
1938.63 787.315 1948.33 794.165 1945.32 802.256 cv
cp
1973.37 820.659 mo
1962.1 819.727 1951.4 820.6 1939.8 831.056 cv
1937.13 820.6 1969.47 809.396 1973.37 820.659 cv
cp
1964.54 795.865 mo
1973.82 792.465 1997.02 796.998 2008.62 806.062 cv
2007.46 793.597 2021.38 775.464 2038.78 774.334 cv
2056.18 773.2 2065.46 779.998 2068.94 785.665 cv
2058.22 781.476 2020.75 782.128 2017.88 810.884 cv
2030.51 803.106 2049.05 801.969 2061.99 821.929 cv
2043.43 815.129 2013.26 816.263 2003.98 832.126 cv
2003.25 826.751 2006.58 820.358 2012.17 815.201 cv
1996.18 806.831 1970.85 800.146 1964.6 812.862 cv
1962.16 812.699 1959.66 813.108 1957.29 813.828 cv
1953.94 805.317 1957.63 798.394 1964.54 795.865 cv
cp
2113.62 808.804 mo
2110.61 808.984 2107.5 810.132 2104.62 812.91 cv
2104.17 813.337 2103.79 813.775 2103.44 814.215 cv
2094.41 815.423 2085.38 819.045 2075.9 827.593 cv
2073.06 816.467 2100.7 804.691 2113.62 808.804 cv
cp
2132.41 819.785 mo
2122.6 813.686 2106.55 816.301 2105.66 825.882 cv
2100.3 811.945 2115.47 804.102 2132.41 819.785 cv
cp
2172.16 806.652 mo
2161.84 797.132 2137.76 796.263 2134.2 816.301 cv
2129.74 793.649 2150.36 776.96 2172.16 806.652 cv
cp
2328.64 804.974 mo
2335.77 811.945 2329.53 816.301 2329.53 816.301 cv
2329.53 816.301 2317.04 804.103 2290.28 811.073 cv
2301.88 803.232 2321.5 798.005 2328.64 804.974 cv
cp
2323.09 796.248 mo
2328.99 788.79 2343.1 791.499 2354.23 798.376 cv
2352.25 788.632 2355.97 774.038 2369.94 766.257 cv
2383.09 758.933 2404.31 771.506 2400.58 786.424 cv
2402.5 785.628 2404.66 784.984 2407.08 784.513 cv
2412.19 763.027 2438.56 756.967 2446.44 759.25 cv
2454.32 761.536 2467.93 771.201 2471.02 790.623 cv
2465.42 773.582 2434.99 773.914 2430.73 794.333 cv
2437.73 790.025 2447.7 789.818 2458.01 797.595 cv
2443.19 792.221 2422.43 807.395 2423.22 821.424 cv
2418.52 811.903 2421.53 801.589 2428.58 795.853 cv
2418.64 788.873 2393 801.418 2399.96 821.583 cv
2387 807.023 2386.7 793.927 2398.16 787.595 cv
2380.36 768.255 2359.26 790.555 2357.75 811.715 cv
2347.54 803.868 2338.93 802.826 2333.42 805.453 cv
2332.83 804.223 2331.96 803.002 2330.76 801.799 cv
2328.38 799.405 2325.15 798.399 2321.65 798.24 cv
2322.09 797.566 2322.57 796.903 2323.09 796.248 cv
cp
2503.16 778.841 mo
2517.08 784.16 2517.35 792.913 2517.87 798.188 cv
2513.91 790.93 2484.03 783.651 2469.26 802.731 cv
2468.47 788.703 2489.23 773.524 2503.16 778.841 cv
cp
2532.7 817.295 mo
2531.72 806.751 2543.5 791.407 2558.22 790.449 cv
2572.94 789.493 2580.79 795.244 2583.74 800.037 cv
2574.67 796.493 2542.96 797.047 2540.53 821.378 cv
2551.22 814.795 2566.91 813.835 2577.85 830.722 cv
2562.15 824.97 2536.63 825.927 2528.77 839.353 cv
2528.15 834.803 2530.97 829.393 2535.7 825.027 cv
2519.44 816.518 2491.76 810.061 2494.42 831.681 cv
2484.6 821.132 2487.55 811.544 2495.4 808.668 cv
2503.25 805.79 2522.88 809.626 2532.7 817.295 cv
cp
2529.43 811.868 mo
2529.29 812.798 2529.27 813.343 2529.27 813.343 cv
2529.27 813.343 2528.2 812.648 2526.26 811.678 cv
2527.35 811.624 2528.41 811.697 2529.43 811.868 cv
cp
2626.57 824.077 mo
2614.17 823.049 2602.39 824.01 2589.63 835.515 cv
2586.69 824.01 2622.28 811.678 2626.57 824.077 cv
cp
2609.07 808.966 mo
2617.09 803.74 2634.04 800.254 2649.2 821.164 cv
2641.72 815.682 2630.31 814.515 2622.18 816.778 cv
2616.32 814.123 2609.55 815.858 2604.06 818.416 cv
2603.1 814.691 2604.86 811.711 2609.07 808.966 cv
cp
2753.56 802.868 mo
2758.91 788.93 2766.04 777.603 2776.75 778.472 cv
2787.45 779.345 2799.04 785.443 2800.83 793.283 cv
2794.59 788.93 2768.72 784.571 2753.56 802.868 cv
cp
2819.56 822.038 mo
2814.21 818.551 2804.4 815.064 2788.34 819.423 cv
2796.37 812.452 2814.21 808.096 2819.56 822.038 cv
cp
2855.06 810.893 mo
2845.79 801.942 2824.72 800.052 2818.25 815.31 cv
2817.67 814.755 2817.06 814.264 2816.42 813.831 cv
2816.69 794.453 2835.83 783.421 2855.06 810.893 cv
cp
3037.38 808.769 mo
3037.38 808.769 3023.16 799.509 3003.02 799.509 cv
2994.4 799.509 2989.85 803.41 2988 808.92 cv
2983.21 810.701 2979.78 812.552 2979.78 812.552 cv
2979.78 812.552 2997.88 795.302 2972.02 781.775 cv
2947.73 769.063 2933.49 789.659 2930.63 794.382 cv
2931.26 794.495 2931.89 794.633 2932.51 794.796 cv
2938.33 785.031 2948.19 779.875 2955.19 780.029 cv
2964.11 780.223 2979.98 788.414 2982.47 796.312 cv
2974.39 789.549 2952.38 786.174 2936.83 796.433 cv
2942.09 799.109 2946.05 804.013 2946.45 811.211 cv
2940.45 800.624 2911.75 806.968 2913.16 823.558 cv
2901.81 812.852 2886.45 821.233 2886.19 832.555 cv
2878.2 830.639 2867.6 826.048 2858.53 832.825 cv
2859.51 829.536 2861.4 826.492 2863.76 824.132 cv
2854.29 820.768 2842.13 821.029 2839.8 832.415 cv
2834.79 817.491 2848.45 809.815 2862.12 814.537 cv
2858.59 790.994 2868.08 765.927 2886.02 761.961 cv
2903.95 757.997 2917.13 766.998 2919.68 772.284 cv
2908.89 767.126 2870.86 779.124 2870.7 819.844 cv
2876.08 818.273 2881.83 820.46 2885.15 829.287 cv
2882.46 816.388 2895.13 800.401 2907.23 809.486 cv
2908 797.901 2919.59 792.72 2929.98 794.277 cv
2929.21 788.001 2923.88 755.331 2896.32 755.944 cv
2856.37 756.831 2857.72 811.825 2857.72 811.825 cv
2857.72 811.825 2848.95 787.946 2826.74 791.877 cv
2814.73 794.007 2812.51 804.593 2812.47 811.955 cv
2807.71 810.47 2802.34 811.015 2798.42 811.82 cv
2797.06 811.697 2795.67 811.753 2794.27 812.041 cv
2798.33 807.968 2809.25 795.151 2797.58 784.696 cv
2778.56 767.666 2761.05 780.492 2749.31 802.263 cv
2760.24 803.002 2771.6 810.341 2780.31 829.005 cv
2759.8 810.709 2727.69 815.937 2712.53 831.622 cv
2713.16 826.487 2715.97 820.868 2720.21 815.931 cv
2707.83 815.64 2685.83 822.444 2671.5 834.236 cv
2667.66 824.863 2676.67 814.6 2686.01 809.218 cv
2671.27 804.663 2654.31 807.695 2653.66 820.292 cv
2645.64 809.839 2648.31 793.283 2654.56 788.93 cv
2660.8 784.571 2670.61 784.571 2692.02 803.74 cv
2688.45 787.186 2702.72 760.177 2718.77 762.79 cv
2734.83 765.402 2743.75 775.857 2745.53 786.313 cv
2739.29 777.937 2705.79 780.211 2701.03 805.372 cv
2709.1 805.599 2718.27 807.984 2723.16 812.82 cv
2729.95 806.354 2739.23 801.745 2748.88 802.243 cv
2752.47 788.74 2746.79 771.519 2724.84 761.774 cv
2711.93 756.044 2688.47 770.946 2689.64 798.448 cv
2689.64 798.448 2670.37 779.117 2655.62 783.55 cv
2640.37 788.134 2647.4 816.786 2647.4 816.786 cv
2647.4 816.786 2625.12 790.425 2606.34 806.469 cv
2601.42 810.679 2600.62 815.121 2602.1 819.384 cv
2597.03 822.051 2593.44 825.098 2593.44 825.098 cv
2592.44 820.2 2593.44 788.858 2565.37 787.879 cv
2539.34 786.972 2532.06 801.436 2530.04 808.956 cv
2527.4 808.648 2524.44 808.787 2521.25 809.477 cv
2520.18 809.063 2519.01 808.653 2517.76 808.259 cv
2529.7 778.808 2493.51 763.99 2471.29 787.043 cv
2462.44 746.233 2421.15 748.009 2403.32 783.555 cv
2393.07 746.091 2346.12 761.268 2350.68 796.046 cv
2336.09 785.453 2321.12 789.243 2315.92 798.619 cv
2306.4 800.17 2296.88 805.586 2296.88 805.586 cv
2296.88 805.586 2314.58 787.946 2288.42 774.984 cv
2263.84 762.807 2250.08 783.708 2247.33 788.491 cv
2247.96 788.591 2248.59 788.716 2249.21 788.867 cv
2254.81 778.975 2264.55 773.608 2271.55 773.608 cv
2280.47 773.608 2296.53 781.449 2299.2 789.289 cv
2290.96 782.706 2268.89 779.813 2253.57 790.408 cv
2258.89 792.969 2262.96 797.785 2263.53 804.974 cv
2257.28 794.519 2228.74 801.49 2230.53 818.042 cv
2218.93 807.587 2203.77 816.301 2203.77 827.627 cv
2195.74 825.882 2185.04 821.528 2176.12 828.498 cv
2177.02 825.188 2178.84 822.105 2181.16 819.694 cv
2171.61 816.538 2159.45 817.064 2157.39 828.498 cv
2152.04 813.686 2165.52 805.714 2179.29 810.135 cv
2175.23 786.677 2184.15 761.411 2201.98 757.054 cv
2219.82 752.697 2233.2 761.411 2235.88 766.638 cv
2224.97 761.719 2187.22 774.543 2187.99 815.254 cv
2193.33 813.568 2199.12 815.611 2202.64 824.328 cv
2199.71 811.498 2211.99 795.296 2224.28 804.102 cv
2224.78 792.501 2236.25 787.074 2246.67 788.402 cv
2245.76 782.146 2239.69 749.6 2212.15 750.812 cv
2172.23 752.57 2174.83 807.52 2174.83 807.52 cv
2174.83 807.52 2165.52 783.839 2143.41 788.255 cv
2124.7 791.991 2130.41 815.908 2130.41 815.908 cv
2130.41 815.908 2126.04 811.766 2120.24 809.793 cv
2105.67 793.828 2080.41 815.281 2080.41 815.281 cv
2079.22 809.493 2080.41 772.455 2047.23 771.294 cv
2005.78 769.85 2004.57 801.391 2004.57 801.391 cv
2004.57 801.391 1990.35 792.13 1970.21 792.13 cv
1955.57 792.13 1952.63 803.387 1954.84 814.686 cv
1948.37 817.259 1943.27 821.587 1943.27 821.587 cv
1942.97 820.12 1942.86 816.025 1941.94 811.173 cv
1958.46 796.343 1944.52 781.431 1924.72 788.849 cv
1924.21 788.703 1923.69 788.574 1923.15 788.455 cv
1934.6 757.243 1896.61 744.156 1875.76 769.044 cv
1864.03 728.935 1822.97 733.521 1807.72 770.194 cv
1794.81 733.521 1749.06 751.857 1756.1 786.237 cv
1747.03 780.57 1738.19 779.941 1731.55 782.383 cv
1730.73 780.776 1729.57 779.187 1727.99 777.641 cv
1709.03 759.083 1691.58 773.06 1679.88 796.789 cv
1690.78 797.594 1702.1 805.595 1710.79 825.936 cv
1690.34 805.996 1658.34 811.695 1643.22 828.787 cv
1643.85 823.19 1646.65 817.068 1650.87 811.688 cv
1638.54 811.369 1616.62 818.783 1602.33 831.634 cv
1598.5 821.423 1607.48 810.234 1616.79 804.371 cv
1602.1 799.406 1585.19 802.71 1584.55 816.439 cv
1576.54 805.047 1579.21 787.005 1585.44 782.256 cv
1591.66 777.507 1601.44 777.507 1622.78 798.399 cv
1619.22 780.357 1633.44 750.92 1649.45 753.769 cv
1665.45 756.619 1674.34 768.012 1676.12 779.409 cv
1669.9 770.274 1636.5 772.76 1631.76 800.181 cv
1639.81 800.427 1648.94 803.028 1653.82 808.298 cv
1660.58 801.248 1669.83 796.224 1679.45 796.769 cv
1683.04 782.049 1677.36 763.283 1655.49 752.664 cv
1642.63 746.418 1619.24 762.655 1620.41 792.631 cv
1620.41 792.631 1601.2 771.562 1586.5 776.395 cv
1580.44 778.386 1577.92 784.543 1577.06 791.23 cv
1572.33 784.41 1564.77 779.101 1552.54 778.674 cv
1541.65 778.293 1533.54 780.194 1527.5 783.196 cv
1527.5 783.196 li
1510.54 791.626 1509.88 808.769 1509.88 808.769 cv
1509.88 808.769 1495.66 799.509 1475.52 799.509 cv
1466.9 799.509 1462.34 803.41 1460.5 808.92 cv
1455.71 810.701 1452.28 812.552 1452.28 812.552 cv
1452.28 812.552 1470.38 795.302 1444.52 781.775 cv
1420.23 769.063 1405.99 789.659 1403.13 794.382 cv
1403.76 794.495 1404.39 794.633 1405.01 794.796 cv
1410.83 785.031 1420.69 779.875 1427.69 780.029 cv
1436.61 780.223 1452.48 788.414 1454.97 796.312 cv
1446.89 789.549 1424.88 786.174 1409.33 796.433 cv
1414.59 799.109 1418.55 804.013 1418.95 811.211 cv
1412.95 800.624 1384.25 806.968 1385.66 823.558 cv
1374.31 812.852 1358.95 821.233 1358.69 832.555 cv
1350.7 830.639 1340.1 826.048 1331.03 832.825 cv
1332 829.536 1333.9 826.492 1336.26 824.132 cv
1326.79 820.768 1314.63 821.029 1312.3 832.415 cv
1307.29 817.491 1320.95 809.815 1334.62 814.537 cv
1331.09 790.994 1340.58 765.927 1358.52 761.961 cv
1376.45 757.997 1389.63 766.998 1392.18 772.284 cv
1381.39 767.126 1343.36 779.124 1343.2 819.844 cv
1348.58 818.273 1354.33 820.46 1357.65 829.287 cv
1354.96 816.388 1367.63 800.401 1379.74 809.486 cv
1380.5 797.901 1392.09 792.72 1402.48 794.277 cv
1401.71 788.001 1396.39 755.331 1368.82 755.944 cv
1328.87 756.831 1330.22 811.825 1330.22 811.825 cv
1330.22 811.825 1321.45 787.946 1299.24 791.877 cv
1287.23 794.007 1285.01 804.593 1284.97 811.955 cv
1280.21 810.47 1274.84 811.015 1270.92 811.82 cv
1269.56 811.697 1268.17 811.753 1266.77 812.041 cv
1270.83 807.968 1281.75 795.151 1270.08 784.696 cv
1251.06 767.666 1233.55 780.492 1221.81 802.263 cv
1232.74 803.002 1244.1 810.341 1252.82 829.005 cv
1232.3 810.709 1200.19 815.937 1185.03 831.622 cv
1185.66 826.487 1188.47 820.868 1192.7 815.931 cv
1180.33 815.64 1158.33 822.444 1144 834.236 cv
1140.16 824.863 1149.17 814.6 1158.51 809.218 cv
1143.77 804.663 1126.81 807.695 1126.16 820.292 cv
1118.14 809.839 1120.81 793.283 1127.06 788.93 cv
1133.3 784.571 1143.11 784.571 1164.52 803.74 cv
1160.95 787.186 1175.22 760.177 1191.27 762.79 cv
1207.33 765.402 1216.25 775.857 1218.03 786.313 cv
1211.79 777.937 1178.28 780.211 1173.53 805.372 cv
1181.6 805.599 1190.77 807.984 1195.66 812.82 cv
1202.45 806.354 1211.73 801.745 1221.38 802.243 cv
1224.97 788.74 1219.28 771.519 1197.34 761.774 cv
1184.43 756.044 1160.97 770.946 1162.14 798.448 cv
1162.14 798.448 1142.87 779.117 1128.12 783.55 cv
1112.87 788.134 1119.91 816.786 1119.91 816.786 cv
1119.91 816.786 1097.62 790.425 1078.84 806.469 cv
1073.92 810.679 1073.12 815.121 1074.61 819.384 cv
1069.53 822.051 1065.94 825.098 1065.94 825.098 cv
1064.94 820.2 1065.94 788.858 1037.87 787.879 cv
1011.84 786.972 1004.56 801.436 1002.54 808.956 cv
999.9 808.648 996.938 808.787 993.751 809.477 cv
992.68 809.063 991.516 808.653 990.263 808.259 cv
1002.2 778.808 966.014 763.99 943.784 787.043 cv
934.943 746.233 893.652 748.009 875.823 783.555 cv
865.565 746.091 818.615 761.268 823.183 796.046 cv
808.589 785.453 793.615 789.243 788.417 798.619 cv
778.903 800.17 769.381 805.586 769.381 805.586 cv
769.381 805.586 787.077 787.946 760.919 774.984 cv
736.342 762.807 722.576 783.708 719.825 788.491 cv
720.46 788.591 721.091 788.716 721.713 788.867 cv
727.31 778.975 737.053 773.608 744.053 773.608 cv
752.972 773.608 769.027 781.449 771.702 789.289 cv
763.461 782.706 741.388 779.813 726.072 790.408 cv
731.391 792.969 735.462 797.785 736.027 804.974 cv
729.783 794.519 701.241 801.49 703.026 818.042 cv
691.431 807.587 676.269 816.301 676.269 827.627 cv
668.242 825.882 657.539 821.528 648.62 828.498 cv
649.523 825.188 651.343 822.105 653.656 819.694 cv
644.112 816.538 631.952 817.064 629.886 828.498 cv
624.535 813.686 638.019 805.714 651.791 810.135 cv
647.725 786.677 656.646 761.411 674.483 757.054 cv
692.321 752.697 705.698 761.411 708.375 766.638 cv
697.467 761.719 659.723 774.543 660.492 815.254 cv
665.826 813.568 671.622 815.611 675.14 824.328 cv
672.208 811.498 684.488 795.296 696.783 804.102 cv
697.278 792.501 708.749 787.074 719.174 788.402 cv
718.263 782.146 712.191 749.6 684.644 750.812 cv
644.727 752.57 647.332 807.52 647.332 807.52 cv
647.332 807.52 638.018 783.839 615.909 788.255 cv
597.198 791.991 602.908 815.908 602.908 815.908 cv
602.908 815.908 598.538 811.766 592.739 809.793 cv
578.17 793.828 552.908 815.281 552.908 815.281 cv
551.724 809.493 552.908 772.455 519.73 771.294 cv
478.283 769.85 477.071 801.391 477.071 801.391 cv
477.071 801.391 462.854 792.13 442.708 792.13 cv
428.07 792.13 425.129 803.387 427.343 814.686 cv
420.864 817.259 415.767 821.587 415.767 821.587 cv
415.466 820.12 415.359 816.025 414.439 811.173 cv
430.964 796.343 417.019 781.431 397.219 788.849 cv
396.713 788.703 396.188 788.574 395.653 788.455 cv
407.103 757.243 369.109 744.156 348.262 769.044 cv
336.529 728.935 295.468 733.521 280.217 770.194 cv
267.312 733.521 221.557 751.857 228.597 786.237 cv
219.53 780.57 210.693 779.941 204.05 782.383 cv
203.227 780.776 202.066 779.187 200.49 777.641 cv
181.534 759.083 164.082 773.06 152.381 796.789 cv
163.275 797.594 174.6 805.595 183.287 825.936 cv
162.84 805.996 130.836 811.695 115.722 828.787 cv
116.352 823.19 119.153 817.068 123.371 811.688 cv
111.034 811.369 89.1152 818.783 74.8281 831.634 cv
71.0039 821.423 79.9756 810.234 89.292 804.371 cv
74.5986 799.406 57.6904 802.71 57.0479 816.439 cv
49.0459 805.047 51.7139 787.005 57.9365 782.256 cv
64.1602 777.507 73.9395 777.507 95.2754 798.399 cv
91.7187 780.357 105.943 750.92 121.945 753.769 cv
137.948 756.619 146.838 768.012 148.615 779.409 cv
142.397 770.274 108.999 772.76 104.265 800.181 cv
112.308 800.427 121.441 803.028 126.317 808.298 cv
133.082 801.248 142.332 796.224 151.953 796.769 cv
155.536 782.049 149.863 763.283 127.99 752.664 cv
115.127 746.418 91.7402 762.655 92.9092 792.631 cv
92.9092 792.631 73.6982 771.562 58.9961 776.395 cv
52.9395 778.386 50.416 784.543 49.5645 791.23 cv
44.832 784.41 37.2744 779.101 25.0391 778.674 cv
14.1504 778.293 6.04303 780.194 0 783.196 cv
0 788.257 li
4.76074 784.627 10.458 782.111 16.5908 781.711 cv
33.9922 780.579 43.2725 787.378 46.752 793.043 cv
37.8965 789.584 10.7812 789.426 0 805.686 cv
0 815.983 li
1.70123 815.222 3.47174 814.583 5.29395 814.102 cv
6.16699 818.093 8.82709 821.977 12.1572 825.476 cv
7.9541 825.703 3.83502 826.31 0 827.337 cv
0 846.991 li
0 855.214 li
3054.58 855.183 li
3055 855.183 li
3055 827.337 li
3047.07 829.465 3040.38 833.384 3036.79 839.505 cv
3036.06 834.131 3039.39 827.735 3044.98 822.577 cv
3036.64 818.214 3025.77 814.312 3016.39 813.373 cv
3015.82 812.079 3014.96 810.784 3013.74 809.506 cv
3008.46 803.967 2998.77 805.418 2991.09 807.856 cv
2992.58 805.79 2994.73 804.202 2997.35 803.242 cv
3006.63 799.842 3029.83 804.374 3041.43 813.441 cv
3040.68 805.369 3046.25 794.925 3055 788.257 cv
3055 783.196 li
3038.04 791.625 3037.38 808.769 3037.38 808.769 cv
cp
.329412 .427451 .196078 rgb
f
3055 815.983 mo
3055 805.686 li
3052.73 809.109 3051.19 813.261 3050.69 818.263 cv
3052.06 817.416 3053.5 816.652 3055 815.983 cv
cp
f
2540.53 821.378 mo
2542.96 797.047 2574.67 796.493 2583.74 800.037 cv
2580.79 795.244 2572.94 789.493 2558.22 790.449 cv
2543.5 791.407 2531.72 806.751 2532.7 817.295 cv
2522.88 809.626 2503.25 805.79 2495.4 808.668 cv
2487.55 811.544 2484.6 821.132 2494.42 831.681 cv
2491.76 810.061 2519.44 816.518 2535.7 825.027 cv
2537.15 823.693 2538.77 822.459 2540.53 821.378 cv
cp
.537255 .627451 .290196 rgb
f
2626.57 824.077 mo
2622.28 811.678 2586.69 824.01 2589.63 835.515 cv
2602.39 824.01 2614.17 823.049 2626.57 824.077 cv
cp
f
2577.85 830.722 mo
2566.91 813.835 2551.22 814.795 2540.53 821.378 cv
2538.77 822.459 2537.15 823.693 2535.7 825.027 cv
2530.97 829.393 2528.15 834.803 2528.77 839.353 cv
2536.63 825.927 2562.15 824.97 2577.85 830.722 cv
cp
f
.2344 1080 mo
.2344 855.571 li
3055.23 855.571 li
3055.23 1080 li
2913.49 1080 192.23 1080 .2344 1080 cv
cp
level3{
gsave
clp
[-1.00761e-008 224.43 -224.43 -1.00761e-008 1527.73 855.571 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.286275 .901961 .901961 ]
/C1 [.819608 .952941 1 ]
/N 1.50177 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.00761e-008 224.43 -224.43 -1.00761e-008 1527.73 855.571 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~d*U+ac-=JUb/qcHa2Z*;`5BI/_8*h#^:h1l]=PP`\@8oT[C!9HZE^X<YHG%1XK/D%WMlbnVP^2cUnaZX
TqJ$MSt2FBS"#k7R@'>-QBd`"PEV/lOcYWbNfK*XN/NRNM2@%DLPCM:KS4u0Jq8K'It)orI=6KiH[:!`
H$FOWG'8"NFEDSEEcH)<E,TZ4DJa6,Chmg$C2%BqBP1siAn>OaA7K+Y@U`bS?sm>K?=$rD?!LW=>?b97
=]nm0=BJX+<`W7$<E3!t<)Z^n;GpCi;,L.d:esk_:/4PZ9he>V9MA,R91qoN91hfK8kM]I8P)KF8P)KF
~>
<~oCDJCo()ABo()ABo()>@naZ/>naZ/>naZ/=nF5r:nF5r:nF5r:nF5o8n*f`6n*f`6n*f`6mdBN2mdBN2
mdBN2mdBN1mHs<.mHs<.mHs<.mHs<-m-O**m-O**m-O**m-O**lg*m&lg*m&lg*m&lg*m&lg!d#lK[["
lK[["lK[["lK[["l07Hsl07Hsl07Hsl07Hsl07Hskih6okih6okih6okih6okih6okih6nkND$kkND$k
kND$kkND$kkND$kkND$kkND!ik2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tgg
~>
<~s8N#srr2oqrVc]nrVcZlr;?Kjr;6Bgqtp9fqtg0cqYL'bq>'j^q>'j]q"XXZq"XXYp\4FVp\4CTp@e4R
p@e1Pp%A"Np%@tLo^qeJo^qbHoCMSFoCMSEo()ABo()AAnaZ/>naZ/>nF5r:nF5r:nF,i7n*f`6n*f`5
mdBN2mdBN2md9E/mHs<.mHs<-m-O**m-O**m-O'(lg*m&lg*m&lg!d#lK[["lK[["lKRQtl07Hsl07Hs
l07Eqkih6okih6okih6oki_-lkND$kkND$kkND$kkND!ik2tggk2tggk2tggk2tggk2tggk2tggk2tgg
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
3047.04 884.427 mo
3039.58 893.241 3041.83 965.408 3048.78 972.251 cv
3050.5 973.948 3052.56 975.297 3054.77 976.284 cv
3054.77 878.938 li
3051.89 880.088 3049.19 881.882 3047.04 884.427 cv
cp
.231373 .529412 .462745 rgb
f
1759.32 1042.26 mo
1759.32 1034.4 li
1760.42 1034.25 1761.5 1033.97 1762.54 1033.53 cv
1762.05 1034.77 1760.73 1038.16 1759.32 1042.26 cv
cp
1438.28 986.883 mo
1438.06 996.941 1437.88 1007.49 1437.73 1018.07 cv
1435.12 991.167 li
1435.12 991.167 1430.62 1008.81 1427.2 1027.43 cv
1427.2 977.89 li
1430.93 977.394 1434.48 975.626 1437.23 972.251 cv
1437.96 971.35 1438.59 969.749 1439.14 967.61 cv
1438.74 973.457 1438.43 979.886 1438.28 986.883 cv
cp
342.409 1042.26 mo
342.409 1034.4 li
343.509 1034.25 344.59 1033.96 345.629 1033.53 cv
345.136 1034.77 343.812 1038.16 342.409 1042.26 cv
cp
21.3643 986.883 mo
21.1445 996.941 20.9629 1007.49 20.8125 1018.07 cv
18.2002 991.167 li
18.2002 991.167 13.708 1008.81 10.29 1027.43 cv
10.29 977.89 li
14.0137 977.394 17.5684 975.626 20.3105 972.251 cv
21.0439 971.35 21.6797 969.749 22.2275 967.61 cv
21.8252 973.457 21.5166 979.886 21.3643 986.883 cv
cp
3050.42 975.23 mo
3050.42 975.23 3046.72 989.644 3044.92 1015.93 cv
3043.6 1005.82 3042.38 996.653 3041.71 992.119 cv
3040.39 999.024 3039.28 1013.76 3038.45 1027.8 cv
3035.7 991.149 3033.06 963.871 3033.06 963.871 cv
3033.06 963.871 3028.73 980.744 3027.16 1011.27 cv
3026.95 1011.31 li
3025.79 998.406 3025.06 990.922 3025.06 990.922 cv
3025.06 990.922 3019.75 1011.62 3016.73 1049.55 cv
3014.8 1015.98 li
3008.15 1014.53 li
3005.94 1064.51 li
3005.43 1064.17 li
3002.05 1009.03 2997.27 959.684 2997.27 959.684 cv
2997.27 959.684 2991.75 981.196 2990.91 1019.61 cv
2990.76 1026.45 2990.63 1033.51 2990.51 1040.66 cv
2987.48 1009.46 li
2987.48 1009.46 2984.44 1029.34 2982.98 1047.28 cv
2980.53 1026.41 2977.38 1015.17 2977.38 1015.17 cv
2977.38 1015.17 2976 1028.21 2974.08 1048.83 cv
2971.24 1008.73 li
2964.6 1011.63 li
2961.95 1040.65 li
2961.95 987.394 li
2965.16 986.965 2968.23 985.439 2970.6 982.525 cv
2976.61 975.139 2975.1 914.075 2972.1 906.691 cv
2970.78 903.437 2967.13 901.334 2962.82 900.752 cv
2962.54 898.859 2962.07 896.833 2961.3 895.308 cv
2959.78 892.32 2957.87 897.098 2957.1 900.863 cv
2953.23 901.52 2949.39 903.386 2946.6 906.691 cv
2940.15 914.3 2942.09 976.616 2948.1 982.525 cv
2950.26 984.656 2953.01 986.206 2955.93 986.977 cv
2954.29 1043.69 li
2952.05 1018.15 li
2943.19 1000.04 li
2943.19 1000.04 2943.19 1047.12 2943.93 1054.37 cv
2939.5 1008.73 li
2934.33 1018.15 li
2933.95 1024.79 li
2932.11 1002.65 2930.7 988.081 2930.7 988.081 cv
2930.7 988.081 2925.18 1009.59 2924.34 1048.01 cv
2924.31 1049.44 2924.28 1050.87 2924.25 1052.32 cv
2920.5 998.694 2916.35 955.857 2916.35 955.857 cv
2916.35 955.857 2909.67 981.855 2908.66 1028.28 cv
2908.51 1034.94 2908.38 1041.79 2908.26 1048.72 cv
2905.54 1030.46 li
2905.54 1030.46 2899.63 1050.02 2899.63 1059.44 cv
2898.16 1024.67 li
2898.16 1024.67 2891.59 1040.53 2888.49 1052.16 cv
2888.49 1019.17 li
2890.62 1018.75 2892.66 1017.24 2894.22 1014.37 cv
2898.21 1007.09 2897.21 946.869 2895.22 939.585 cv
2894.35 936.377 2891.92 934.304 2889.06 933.729 cv
2888.88 931.862 2888.57 929.866 2888.05 928.361 cv
2887.05 925.415 2885.78 930.125 2885.27 933.838 cv
2882.7 934.488 2880.16 936.328 2878.3 939.585 cv
2874.03 947.091 2875.32 1008.54 2879.3 1014.37 cv
2880.73 1016.47 2882.56 1018 2884.49 1018.76 cv
2883.81 1053.98 li
2873.06 1038.43 li
2873.79 1052.92 li
2865.67 1017.42 li
2852.38 1001.49 li
2852.38 1001.49 2861.24 1042.78 2861.98 1054.37 cv
2850.17 1005.84 li
2850.17 1005.84 2846.9 1026.71 2845.53 1042.76 cv
2843.46 1017.25 2841.79 999.985 2841.79 999.985 cv
2841.79 999.985 2839.64 1008.35 2837.83 1023.95 cv
2837.21 1010.25 2837 995.915 2838.36 989.901 cv
2835.01 992.857 2832.88 1005.35 2831.48 1019.14 cv
2831.31 982.498 li
2834.16 982.105 2836.87 980.738 2838.96 978.146 cv
2844.25 971.576 2842.68 917.453 2839.99 910.918 cv
2838.8 908.039 2835.55 906.189 2831.73 905.69 cv
2831.47 904.012 2831.05 902.218 2830.36 900.871 cv
2829 898.229 2827.33 902.47 2826.66 905.811 cv
2823.23 906.41 2819.84 908.078 2817.37 911.018 cv
2811.69 917.789 2813.67 973.02 2819.01 978.234 cv
2820.94 980.115 2823.39 981.48 2825.97 982.15 cv
2824.65 1036.57 li
2821.62 1015.43 2818.43 988.452 2818.43 988.452 cv
2818.43 988.452 2816.2 1009.03 2814.46 1028.31 cv
2811.74 992.156 2809.15 965.364 2809.15 965.364 cv
2809.15 965.364 2807.56 971.561 2805.95 983.23 cv
2805.48 978.101 2805.21 975.23 2805.21 975.23 cv
2805.21 975.23 2803.76 980.872 2802.24 991.51 cv
2802.19 989.904 li
2794.07 993.524 li
2792.63 1019.86 li
2790.11 987.283 2787.84 963.871 2787.84 963.871 cv
2787.84 963.871 2784.15 978.271 2782.34 1004.53 cv
2779.69 972.899 2777.71 952.513 2777.71 952.513 cv
2777.71 952.513 2772.91 971.245 2769.84 1005.72 cv
2765.48 1005.72 li
2761.76 1052.93 li
2761.02 977.601 li
2755.12 984.121 li
2754.09 996.609 li
2754.09 969.136 li
2757.56 968.673 2760.88 967.021 2763.44 963.873 cv
2769.93 955.892 2768.3 889.896 2765.06 881.915 cv
2763.63 878.4 2759.69 876.125 2755.03 875.497 cv
2754.72 873.452 2754.22 871.261 2753.38 869.614 cv
2751.75 866.385 2749.68 871.549 2748.85 875.617 cv
2744.66 876.33 2740.51 878.344 2737.49 881.915 cv
2730.53 890.141 2732.63 957.488 2739.11 963.873 cv
2741.45 966.177 2744.43 967.853 2747.58 968.685 cv
2746.17 1017.62 li
2743.7 993.216 2739.36 979.873 2739.36 979.873 cv
2739.36 979.873 2737.58 1007.35 2736.28 1042.37 cv
2731.46 1048.8 li
2731.29 1031.3 2731.02 1012 2730.6 994.501 cv
2729.84 962.795 2724.86 945.039 2724.86 945.039 cv
2724.86 945.039 2720.22 988.828 2717.16 1036.32 cv
2715.99 968.908 li
2715.99 968.908 2706.39 924.723 2704.18 921.826 cv
2701.96 918.927 2705.66 1002.95 2705.66 1002.95 cv
2699.01 976.152 li
2697.67 1005.56 li
2694.84 967.251 2692.04 938.314 2692.04 938.314 cv
2692.04 938.314 2686.51 959.826 2685.68 998.242 cv
2685.59 1002.35 2685.5 1006.54 2685.43 1010.78 cv
2681.29 991.363 li
2678.33 1031.04 li
2676.3 1017.85 2674.34 1010.84 2674.34 1010.84 cv
2674.34 1010.84 2673.19 1021.66 2671.54 1039.19 cv
2666.53 1028.31 li
2665.05 1044.96 li
2664.32 1008.02 li
2656.93 1015.99 li
2655.46 1042.07 li
2652.76 1044.71 li
2652.65 1012.24 li
2654.79 1011.85 2656.82 1010.48 2658.38 1007.89 cv
2662.36 1001.32 2661.17 947.198 2659.15 940.664 cv
2658.27 937.786 2655.83 935.934 2652.96 935.435 cv
2652.77 933.758 2652.46 931.964 2651.94 930.616 cv
2650.92 927.974 2649.66 932.215 2649.16 935.556 cv
2646.59 936.155 2644.04 937.824 2642.19 940.763 cv
2637.93 947.535 2639.41 1002.77 2643.42 1007.98 cv
2644.87 1009.86 2646.7 1011.23 2648.64 1011.9 cv
2648.25 1033.61 li
2644.38 1020.34 li
2634.05 1000.06 li
2632.57 1049.31 li
2629.62 1005.85 li
2623.31 1006.98 li
2622.15 994.074 2621.43 986.59 2621.43 986.59 cv
2621.43 986.59 2616.12 1007.29 2613.1 1045.22 cv
2611.16 1011.65 li
2604.52 1010.2 li
2602.3 1060.18 li
2601.8 1059.83 li
2598.41 1004.7 2593.63 955.352 2593.63 955.352 cv
2593.63 955.352 2588.11 976.865 2587.27 1015.28 cv
2587.12 1022.12 2586.99 1029.18 2586.88 1036.33 cv
2583.85 1005.13 li
2583.85 1005.13 2580.81 1025.01 2579.35 1042.95 cv
2576.9 1022.08 2573.74 1010.84 2573.74 1010.84 cv
2573.74 1010.84 2572.36 1023.87 2570.44 1044.5 cv
2567.61 1004.4 li
2560.96 1007.3 li
2558.31 1036.32 li
2558.31 983.062 li
2561.53 982.633 2564.6 981.107 2566.97 978.193 cv
2572.97 970.807 2571.47 909.744 2568.47 902.359 cv
2567.15 899.106 2563.49 897.002 2559.18 896.42 cv
2558.9 894.527 2558.44 892.501 2557.66 890.976 cv
2556.15 887.988 2554.23 892.766 2553.47 896.532 cv
2549.59 897.189 2545.76 899.054 2542.96 902.359 cv
2536.51 909.968 2538.46 972.284 2544.46 978.193 cv
2546.63 980.324 2549.38 981.875 2552.29 982.645 cv
2550.66 1039.36 li
2548.41 1013.82 li
2539.55 995.708 li
2539.55 995.708 2539.55 1042.79 2540.29 1050.04 cv
2535.86 1004.4 li
2530.69 1013.82 li
2530.31 1020.46 li
2528.48 998.321 2527.07 983.749 2527.07 983.749 cv
2527.07 983.749 2521.54 1005.26 2520.71 1043.68 cv
2520.68 1045.1 2520.65 1046.54 2520.62 1047.98 cv
2516.86 994.363 2512.71 951.525 2512.71 951.525 cv
2512.71 951.525 2506.04 977.523 2505.02 1023.95 cv
2504.88 1030.61 2504.75 1037.46 2504.63 1044.39 cv
2501.9 1026.13 li
2501.9 1026.13 2496 1045.69 2496 1055.11 cv
2494.52 1020.34 li
2494.52 1020.34 2487.96 1036.2 2484.85 1047.83 cv
2484.85 1014.84 li
2486.98 1014.42 2489.02 1012.91 2490.59 1010.04 cv
2494.57 1002.76 2493.58 942.537 2491.58 935.253 cv
2490.71 932.045 2488.29 929.972 2485.43 929.397 cv
2485.24 927.53 2484.93 925.534 2484.42 924.029 cv
2483.42 921.083 2482.14 925.794 2481.64 929.507 cv
2479.07 930.157 2476.52 931.996 2474.67 935.253 cv
2470.39 942.759 2471.68 1004.21 2475.66 1010.04 cv
2477.1 1012.14 2478.93 1013.67 2480.86 1014.43 cv
2480.17 1049.65 li
2469.42 1034.1 li
2470.16 1048.59 li
2462.04 1013.09 li
2448.75 997.158 li
2448.75 997.158 2457.61 1038.44 2458.35 1050.04 cv
2446.53 1001.5 li
2446.53 1001.5 2443.26 1022.38 2441.89 1038.42 cv
2439.83 1012.92 2438.16 995.654 2438.16 995.654 cv
2438.16 995.654 2436.01 1004.02 2434.19 1019.62 cv
2433.57 1005.92 2433.36 991.583 2434.72 985.569 cv
2431.37 988.525 2429.25 1001.02 2427.84 1014.81 cv
2427.67 978.165 li
2430.52 977.773 2433.24 976.407 2435.33 973.815 cv
2440.62 967.244 2439.04 913.121 2436.35 906.586 cv
2435.17 903.708 2431.92 901.857 2428.09 901.358 cv
2427.84 899.681 2427.42 897.886 2426.73 896.539 cv
2425.37 893.898 2423.69 898.138 2423.03 901.479 cv
2419.6 902.078 2416.2 903.747 2413.74 906.686 cv
2408.05 913.457 2410.03 968.688 2415.38 973.903 cv
2417.3 975.783 2419.75 977.148 2422.34 977.819 cv
2421.02 1032.24 li
2417.99 1011.1 2414.79 984.121 2414.79 984.121 cv
2414.79 984.121 2412.56 1004.7 2410.83 1023.97 cv
2408.11 987.824 2405.51 961.032 2405.51 961.032 cv
2405.51 961.032 2400.82 979.334 2399.43 1012.3 cv
2398.55 985.572 li
2390.43 989.192 li
2388.21 1029.76 li
2386.74 994.988 li
2386.74 994.988 2382.84 1015.64 2380.99 1035.27 cv
2379.8 1021.5 2378.98 1013.07 2378.98 1013.07 cv
2378.98 1013.07 2377.83 1017.56 2376.5 1026.07 cv
2376.33 1018.75 li
2370.52 1019.7 li
2367.61 1049.19 li
2366.64 1033.02 li
2362.15 1035.6 li
2360.82 1051.09 li
2355.11 1048.99 li
2355.11 1039.56 li
2357.72 1039.21 2360.22 1037.97 2362.15 1035.6 cv
2367.03 1029.59 2365.81 979.906 2363.37 973.897 cv
2362.29 971.249 2359.32 969.537 2355.81 969.064 cv
2355.59 967.523 2355.21 965.875 2354.58 964.634 cv
2353.34 962.206 2351.79 966.092 2351.16 969.155 cv
2348.01 969.691 2344.89 971.208 2342.62 973.897 cv
2337.37 980.088 2338.95 1030.79 2343.84 1035.6 cv
2345.6 1037.33 2347.84 1038.59 2350.21 1039.22 cv
2349.72 1056.3 li
2347.25 1056.34 li
2346.28 1044.43 li
2340.47 1044.43 li
2337.58 1056.48 li
2337.23 1056.49 li
2336.12 1043.68 2335.36 1035.9 2335.36 1035.9 cv
2335.36 1035.9 2333.96 1041.38 2332.46 1051.74 cv
2331.69 1042.74 2329.89 1023.05 2327.68 1009.47 cv
2327.68 1009.47 2325.52 1022.63 2323.8 1035.56 cv
2321.16 1000.74 2318.69 975.23 2318.69 975.23 cv
2318.69 975.23 2313.66 994.83 2312.47 1030 cv
2310.01 1001.91 2305.72 986.59 2305.72 986.59 cv
2305.72 986.59 2303.51 1007.41 2300.8 1038.11 cv
2300.59 1024.18 2300.36 1006.68 2300.36 998.609 cv
2300.36 998.609 2295.99 1015.77 2292.57 1031.82 cv
2292.57 972.21 li
2296.29 971.714 2299.85 969.947 2302.59 966.572 cv
2309.54 958.019 2307.8 887.3 2304.33 878.748 cv
2302.8 874.981 2298.57 872.544 2293.57 871.871 cv
2293.25 869.678 2292.71 867.331 2291.82 865.566 cv
2290.06 862.106 2287.84 867.639 2286.96 871.998 cv
2282.47 872.76 2278.02 874.921 2274.79 878.748 cv
2267.32 887.561 2269.57 959.728 2276.52 966.572 cv
2279.03 969.039 2282.22 970.836 2285.6 971.728 cv
2283.98 1027.58 li
2282.14 1015.3 2280.43 1002.98 2280.43 999.333 cv
2280.43 994.463 2277.67 1012.32 2275.87 1029.1 cv
2273.92 1005.31 2272.38 989.429 2272.38 989.429 cv
2272.38 989.429 2269.96 998.849 2268.08 1016.34 cv
2267.97 1010.24 2267.84 1004.22 2267.7 998.34 cv
2266.61 952.579 2259.41 926.955 2259.41 926.955 cv
2259.41 926.955 2252.52 991.973 2248.11 1061.64 cv
2244.79 1010.49 2240.54 966.711 2240.54 966.711 cv
2240.54 966.711 2236.53 982.342 2234.83 1010.73 cv
2232.51 978.651 2227.57 961.032 2227.57 961.032 cv
2227.57 961.032 2224.03 994.504 2220.39 1039.15 cv
2217.01 979.923 2211.6 924.116 2211.6 924.116 cv
2211.6 924.116 2206.08 945.627 2205.24 984.044 cv
2204.92 998.502 2204.69 1013.98 2204.51 1029.09 cv
2197.97 1034.92 li
2194.43 1056.4 li
2192.8 1037.09 2191.6 1024.68 2191.6 1024.68 cv
2191.6 1024.68 2188.12 1038.26 2186.27 1063.07 cv
2185.37 1036.82 li
2179.56 1039.68 li
2178.59 1055.85 li
2176.78 1055.85 li
2176.78 997.9 li
2179 997.506 2181.13 996.098 2182.76 993.414 cv
2186.91 986.613 2185.87 930.372 2183.8 923.571 cv
2182.88 920.576 2180.36 918.636 2177.38 918.101 cv
2177.19 916.358 2176.87 914.492 2176.33 913.087 cv
2175.29 910.337 2173.96 914.737 2173.44 918.204 cv
2170.76 918.809 2168.11 920.529 2166.18 923.571 cv
2161.73 930.58 2163.07 987.972 2167.21 993.414 cv
2168.71 995.378 2170.61 996.806 2172.63 997.515 cv
2171.42 1053.19 li
2166.96 1044.43 li
2159.2 1033.97 li
2156.29 1056.8 li
2154.35 1031.12 li
2154.35 1031.12 2151.31 1039.33 2148.8 1048.26 cv
2145.66 1003.09 2142.14 966.711 2142.14 966.711 cv
2142.14 966.711 2136.62 988.223 2135.78 1026.64 cv
2135.53 1038.19 2135.32 1050.38 2135.16 1062.52 cv
2135.12 1062.52 li
2134.96 1053.26 2134.78 1044.1 2134.57 1035.26 cv
2133.47 989.496 2126.28 963.871 2126.28 963.871 cv
2126.28 963.871 2122.6 998.526 2118.9 1044.34 cv
2115.51 986.371 2110.31 932.634 2110.31 932.634 cv
2110.31 932.634 2104.78 954.146 2103.94 992.562 cv
2103.47 1014.19 2103.17 1038.12 2102.99 1059.65 cv
2102.83 1059.64 li
2102.8 1058.13 2102.76 1056.63 2102.73 1055.13 cv
2101.64 1009.37 2094.44 983.748 2094.44 983.748 cv
2094.44 983.748 2092.27 1004.21 2089.59 1034.46 cv
2088.49 1023.68 2087.47 1011.97 2087.47 1005.44 cv
2087.47 1005.44 2083.57 1023.16 2080.61 1040.92 cv
2080.37 989.525 li
2083.22 989.132 2085.94 987.765 2088.02 985.173 cv
2093.31 978.603 2091.74 924.48 2089.05 917.946 cv
2087.86 915.067 2084.62 913.216 2080.79 912.717 cv
2080.53 911.039 2080.11 909.246 2079.42 907.898 cv
2078.07 905.256 2076.39 909.498 2075.72 912.838 cv
2072.3 913.437 2068.9 915.105 2066.44 918.045 cv
2060.75 924.817 2062.73 980.047 2068.07 985.261 cv
2070 987.142 2072.45 988.507 2075.03 989.177 cv
2073.91 1035.3 li
2072.39 1024.14 2070.99 1012.52 2070.99 1007.34 cv
2070.99 1007.34 2069 1016.24 2066.92 1027.19 cv
2064.59 995.476 2059.71 978.069 2059.71 978.069 cv
2059.71 978.069 2055.92 1013.88 2052.15 1060.82 cv
2049.89 1060.65 li
2046.53 999.799 2040.84 941.153 2040.84 941.153 cv
2040.84 941.153 2035.32 962.664 2034.48 1001.08 cv
2034.17 1015.44 2033.93 1030.81 2033.75 1045.83 cv
2032.14 1035.83 2030.28 1023.17 2030.28 1017.8 cv
2030.28 1017.8 2026.4 1047.29 2026.4 1053.94 cv
2025.43 1034.92 li
2019.62 1037.77 li
2017.68 1052.04 li
2017.68 1052.04 2016.71 1041.58 2014.77 1038.73 cv
2013.52 1036.88 2013.08 1036.24 2012.92 1036.01 cv
2012.92 1034.23 li
2014.93 1033.79 2016.84 1032.25 2018.32 1029.32 cv
2022.05 1021.9 2020.94 960.802 2019.04 953.423 cv
2018.2 950.174 2015.91 948.084 2013.22 947.521 cv
2013.03 945.627 2012.74 943.604 2012.25 942.081 cv
2011.29 939.098 2010.11 943.888 2009.64 947.658 cv
2007.22 948.333 2004.82 950.218 2003.08 953.538 cv
1999.07 961.181 2000.47 1023.53 2004.24 1029.42 cv
2005.6 1031.55 2007.33 1033.09 2009.15 1033.84 cv
2008.9 1050.47 li
2007.19 1046.24 2003.85 1037.97 2003.14 1035.87 cv
2003.14 1035.87 2000.43 1041.58 1998.19 1047.94 cv
1996.39 1008.49 1990.25 986.589 1990.25 986.589 cv
1990.25 986.589 1988.9 999.31 1987.02 1019.51 cv
1985.7 1007.44 1983.73 994.92 1980.85 986.417 cv
1980.85 1005.44 1981.82 1049.19 1981.82 1049.19 cv
1981.82 1049.19 1978.91 1004.49 1976.97 995.927 cv
1976.03 998.077 1975.29 1005.19 1974.73 1013.83 cv
1971.7 971.491 1968.49 938.312 1968.49 938.312 cv
1968.49 938.312 1962.97 959.825 1962.13 998.241 cv
1961.88 1009.41 1961.69 1021.19 1961.53 1032.94 cv
1960.39 1019.07 1959.06 1002.92 1958.55 996.878 cv
1955.64 1006.39 1956.61 1052.99 1956.61 1052.99 cv
1952.74 1022.56 li
1947.89 1023.51 li
1946.92 1052.99 li
1939.16 1052.04 li
1938.2 1077.72 li
1938.2 1077.72 1938.2 1039.68 1936.26 1025.41 cv
1928.23 1031.71 li
1928.23 1012.38 li
1931.32 1011.97 1934.27 1010.5 1936.54 1007.7 cv
1942.31 1000.6 1940.87 941.956 1937.99 934.863 cv
1936.72 931.739 1933.21 929.717 1929.07 929.159 cv
1928.8 927.341 1928.35 925.394 1927.61 923.929 cv
1926.15 921.061 1924.32 925.649 1923.58 929.265 cv
1919.86 929.898 1916.17 931.69 1913.49 934.863 cv
1907.3 942.172 1909.16 1002.02 1914.93 1007.7 cv
1917.01 1009.75 1919.65 1011.24 1922.45 1011.98 cv
1921.38 1049.19 li
1917.84 1023.51 li
1911.06 1010.19 li
1910.08 1052.99 li
1908.15 995.927 li
1902.33 990.221 li
1900.39 1045.38 li
1900.39 1045.38 1900.39 981.66 1897.48 971.198 cv
1896.3 972.171 1895.19 976.011 1894.18 981.502 cv
1891.79 962.632 1888.95 952.511 1888.95 952.511 cv
1888.95 952.511 1886.52 975.499 1883.61 1008.78 cv
1882.19 997.375 1881.01 989.27 1881.01 989.27 cv
1881.01 989.27 1879.39 1001.18 1877.57 1014.53 cv
1875.13 983.256 1872.98 961.031 1872.98 961.031 cv
1872.98 961.031 1868.38 978.952 1866.94 1011.27 cv
1865.09 1002.16 1863.56 994.976 1863.56 994.976 cv
1858.71 996.878 li
1857.74 1046.33 li
1855.8 1001.63 li
1855.8 1001.63 1854.02 1007.08 1852.07 1014.44 cv
1852.07 961.41 li
1855.22 960.99 1858.23 959.492 1860.55 956.632 cv
1866.44 949.389 1864.97 889.488 1862.03 882.245 cv
1860.73 879.054 1857.15 876.991 1852.92 876.418 cv
1852.64 874.563 1852.19 872.576 1851.43 871.08 cv
1849.94 868.149 1848.07 872.835 1847.31 876.528 cv
1843.52 877.172 1839.75 879.002 1837 882.245 cv
1830.68 889.709 1832.59 950.836 1838.48 956.632 cv
1840.6 958.722 1843.3 960.246 1846.16 960.999 cv
1844.72 1011.05 li
1844.39 1005.08 1844.17 1000.68 1844.17 1000.68 cv
1844.17 1000.68 1841.42 1013.16 1839.4 1025.86 cv
1836.98 1005.87 1833.96 995.109 1833.96 995.109 cv
1833.96 995.109 1832.53 1008.64 1830.55 1029.95 cv
1829.63 1008.29 li
1829.63 1008.29 1827.6 1016.25 1825.4 1025.87 cv
1825.25 1017.49 1825.08 1009.2 1824.89 1001.18 cv
1823.79 955.419 1816.6 929.795 1816.6 929.795 cv
1816.6 929.795 1810.08 991.337 1805.66 1058.83 cv
1802.29 1005.27 1797.73 958.19 1797.73 958.19 cv
1797.73 958.19 1792.76 977.558 1791.54 1012.34 cv
1789.96 1006.26 1788.12 1000.03 1786.01 994.025 cv
1785.04 1018.75 1784.07 1055.85 1784.07 1055.85 cv
1784.07 1055.85 1781.16 1012.1 1778.26 1000.68 cv
1775.35 1014.95 1775.35 1052.99 1775.35 1052.99 cv
1772.44 1030.17 li
1767.47 1029.81 li
1767.47 1029.81 1765.66 1052.04 1764.69 1055.85 cv
1763.82 1045.66 1762.96 1035.5 1762.78 1033.43 cv
1764.51 1032.66 1766.11 1031.48 1767.47 1029.81 cv
1773.12 1022.86 1771.71 965.382 1768.88 958.431 cv
1767.64 955.37 1764.2 953.388 1760.14 952.839 cv
1759.88 951.058 1759.44 949.152 1758.71 947.716 cv
1757.28 944.905 1755.48 949.402 1754.76 952.945 cv
1751.12 953.564 1747.5 955.322 1744.87 958.431 cv
1738.8 965.595 1740.63 1024.25 1746.28 1029.81 cv
1748.32 1031.82 1750.91 1033.28 1753.66 1034.01 cv
1753.26 1047.62 li
1751.87 1041.57 1750.15 1036.82 1750.15 1036.82 cv
1750.15 1036.82 1745.3 1050.14 1746.27 1055.85 cv
1742.39 1042.53 1743.36 1033.02 1739.48 1014.95 cv
1737.75 1017.92 1737.38 1025.81 1737.49 1033.64 cv
1736.54 1018.56 1734.95 998.643 1732.7 989.27 cv
1727.85 1002.58 1724.94 1049.19 1724.94 1049.19 cv
1723.48 1044.05 li
1718.24 969.41 1712.48 909.917 1712.48 909.917 cv
1712.48 909.917 1704.78 939.931 1702.3 994.108 cv
1697.8 988.317 li
1694.9 1015.9 li
1692.96 968.344 li
1690.05 976.904 li
1688.54 997.411 li
1686.5 972.295 1684.86 955.351 1684.86 955.351 cv
1684.86 955.351 1679.8 975.086 1678.63 1010.49 cv
1676.48 993.072 li
1672.6 998.779 li
1671.63 1032.07 li
1668.72 1004.48 li
1668.72 1004.48 1668.09 1009.8 1667.2 1017.38 cv
1664.77 988.287 1660.31 972.392 1660.31 972.392 cv
1660.31 972.392 1658.51 989.35 1656.17 1015.21 cv
1654.76 1003.86 1653.36 993.782 1652.24 988.317 cv
1651.66 995.782 1648.96 1009.49 1646.48 1023.57 cv
1646.24 972.486 li
1649.09 972.093 1651.81 970.727 1653.89 968.135 cv
1659.19 961.564 1657.61 907.441 1654.92 900.908 cv
1653.73 898.029 1650.49 896.177 1646.66 895.678 cv
1646.4 894.001 1645.99 892.207 1645.29 890.859 cv
1643.94 888.218 1642.26 892.458 1641.6 895.8 cv
1638.16 896.398 1634.77 898.067 1632.3 901.006 cv
1626.62 907.778 1628.6 963.009 1633.94 968.223 cv
1635.87 970.103 1638.32 971.469 1640.91 972.139 cv
1639.94 1011.84 li
1638.38 997.715 1636.74 985.463 1636.74 985.463 cv
1636.74 985.463 1634.55 995.346 1632.15 1007.86 cv
1628.62 975.617 1623.73 958.194 1623.73 958.194 cv
1623.73 958.194 1621.95 975.025 1619.42 1001.98 cv
1619.41 1001.72 1619.41 1001.45 1619.4 1001.18 cv
1618.3 955.421 1611.11 929.796 1611.11 929.796 cv
1611.11 929.796 1607.59 963.023 1603.97 1007.42 cv
1602.68 990.277 1600.98 972.987 1598.93 964.539 cv
1596.61 972.128 1594.6 985.93 1592.96 1000.56 cv
1589.86 956.437 1586.46 921.274 1586.46 921.274 cv
1586.46 921.274 1580.93 942.786 1580.09 981.202 cv
1579.87 991.557 1579.68 1002.44 1579.53 1013.33 cv
1578.56 991.345 1577.61 968.312 1577.61 963.588 cv
1574.67 983.031 1575.07 1028.09 1575.44 1048.84 cv
1575 1031.08 1573.91 996.24 1571.79 981.659 cv
1571.04 984.456 1570.18 988.004 1569.25 992.003 cv
1566.97 959.189 1561.91 941.156 1561.91 941.156 cv
1561.91 941.156 1557.93 978.739 1554.08 1027.37 cv
1552.41 1015.9 li
1546.59 1015.9 li
1541.74 1050.14 li
1540.77 1020.65 li
1540.77 1020.65 1539.37 1028.34 1538.08 1036.79 cv
1538.08 1016.35 li
1538.06 1016.36 1538.05 1016.36 1538.03 1016.37 cv
1538.03 976.226 li
1540.49 975.9 1542.83 974.734 1544.64 972.507 cv
1549.22 966.868 1548.08 920.238 1545.78 914.597 cv
1544.78 912.114 1541.99 910.507 1538.69 910.062 cv
1538.48 908.617 1538.13 907.07 1537.53 905.905 cv
1536.38 903.624 1534.91 907.272 1534.33 910.147 cv
1531.37 910.649 1528.44 912.075 1526.3 914.597 cv
1521.38 920.409 1522.87 967.996 1527.45 972.507 cv
1529.1 974.135 1531.21 975.321 1533.43 975.909 cv
1532.21 1018.02 li
1531.25 1018.31 1530.29 1018.58 1529.33 1018.88 cv
1529 1030.28 li
1526.95 1023.3 1525.26 1017.8 1525.26 1017.8 cv
1525.26 1017.8 1524.02 1033.01 1522.04 1046.4 cv
1519.55 1020.53 1515.6 1006.47 1515.6 1006.47 cv
1515.6 1006.47 1514.38 1017.97 1512.64 1036.47 cv
1510.28 1025.53 1508.9 1013.18 1507.82 1007.34 cv
1505.7 1012.18 1507.18 1034.13 1508.14 1045.74 cv
1506.82 1030.81 1503.94 997.333 1503.94 989.268 cv
1501.39 990.52 1499.58 1002.92 1498.36 1016.46 cv
1495.95 985.665 1493.84 963.871 1493.84 963.871 cv
1493.84 963.871 1488.32 985.383 1487.48 1023.8 cv
1487.33 1030.63 1487.2 1037.69 1487.08 1044.83 cv
1486.87 1030.07 1486.6 1015.22 1486.27 1001.18 cv
1485.17 955.421 1477.98 929.796 1477.98 929.796 cv
1477.98 929.796 1476.15 947.018 1473.78 973.216 cv
1472.02 952.093 1470.69 938.314 1470.69 938.314 cv
1470.69 938.314 1465.16 959.826 1464.33 998.242 cv
1464.25 1001.57 1464.19 1004.95 1464.12 1008.37 cv
1460.32 963.587 li
1450.62 952.173 li
1450.22 993.485 li
1447.41 955.534 1444.64 926.955 1444.64 926.955 cv
1444.64 926.955 1443.25 932.37 1441.76 942.612 cv
1442.62 919.111 1441.13 889.748 1438.96 884.427 cv
1437.44 880.661 1433.21 878.224 1428.21 877.549 cv
1427.89 875.357 1427.35 873.011 1426.45 871.246 cv
1424.7 867.786 1422.48 873.319 1421.59 877.678 cv
1417.11 878.439 1412.66 880.601 1409.42 884.427 cv
1401.96 893.241 1404.21 965.408 1411.16 972.251 cv
1413.67 974.719 1416.86 976.516 1420.23 977.408 cv
1418.38 1041.64 li
1415.57 1003.75 1412.8 975.23 1412.8 975.23 cv
1412.8 975.23 1409.11 989.643 1407.3 1015.93 cv
1405.98 1005.82 1404.76 996.652 1404.1 992.119 cv
1402.62 999.862 1401.39 1017.45 1400.54 1032.87 cv
1392.98 1029.93 li
1390.5 998.023 1388.29 975.23 1388.29 975.23 cv
1388.29 975.23 1386.81 981.023 1385.26 991.944 cv
1383.52 971.011 1382.2 957.374 1382.2 957.374 cv
1382.2 957.374 1376.67 978.887 1375.83 1017.3 cv
1375.81 1018.38 1375.79 1019.47 1375.77 1020.56 cv
1373.23 987.615 1370.93 963.871 1370.93 963.871 cv
1370.93 963.871 1367.23 978.272 1365.43 1004.54 cv
1362.77 972.9 1360.8 952.513 1360.8 952.513 cv
1360.8 952.513 1356 971.245 1352.93 1005.72 cv
1348.56 1005.72 li
1344.85 1052.93 li
1344.11 977.601 li
1338.2 984.121 li
1337.17 996.609 li
1337.17 969.136 li
1340.65 968.673 1343.96 967.021 1346.52 963.873 cv
1353.01 955.892 1351.39 889.896 1348.15 881.915 cv
1346.72 878.4 1342.77 876.125 1338.11 875.497 cv
1337.81 873.452 1337.31 871.261 1336.47 869.614 cv
1334.83 866.385 1332.76 871.549 1331.93 875.617 cv
1327.75 876.33 1323.6 878.344 1320.58 881.915 cv
1313.61 890.141 1315.71 957.488 1322.2 963.873 cv
1324.54 966.177 1327.52 967.853 1330.67 968.685 cv
1329.25 1017.61 li
1326.78 993.215 1322.45 979.873 1322.45 979.873 cv
1322.45 979.873 1320.66 1007.35 1319.36 1042.37 cv
1314.54 1048.79 li
1314.37 1031.3 1314.11 1011.99 1313.69 994.501 cv
1312.93 962.795 1307.95 945.039 1307.95 945.039 cv
1307.95 945.039 1303.3 988.836 1300.24 1036.34 cv
1299.08 968.908 li
1299.08 968.908 1289.48 924.723 1287.26 921.826 cv
1285.05 918.927 1288.74 1002.95 1288.74 1002.95 cv
1282.1 976.152 li
1280.76 1005.56 li
1277.93 967.252 1275.12 938.314 1275.12 938.314 cv
1275.12 938.314 1269.6 959.826 1268.76 998.242 cv
1268.67 1002.35 1268.59 1006.54 1268.51 1010.78 cv
1264.38 991.363 li
1261.42 1031.05 li
1259.39 1017.85 1257.43 1010.84 1257.43 1010.84 cv
1257.43 1010.84 1256.28 1021.66 1254.62 1039.19 cv
1249.62 1028.31 li
1248.14 1044.96 li
1247.4 1008.02 li
1240.02 1015.99 li
1238.54 1042.07 li
1235.85 1044.71 li
1235.73 1012.24 li
1237.87 1011.85 1239.91 1010.48 1241.47 1007.89 cv
1245.44 1001.32 1244.26 947.198 1242.24 940.664 cv
1241.35 937.786 1238.92 935.934 1236.05 935.435 cv
1235.85 933.758 1235.54 931.964 1235.02 930.616 cv
1234 927.974 1232.75 932.215 1232.25 935.556 cv
1229.67 936.155 1227.13 937.824 1225.28 940.763 cv
1221.02 947.535 1222.5 1002.77 1226.51 1007.98 cv
1227.95 1009.86 1229.79 1011.23 1231.73 1011.9 cv
1231.33 1033.61 li
1227.47 1020.34 li
1217.13 1000.06 li
1215.66 1049.31 li
1212.7 1005.85 li
1206.4 1006.98 li
1205.24 994.074 1204.51 986.59 1204.51 986.59 cv
1204.51 986.59 1199.2 1007.29 1196.18 1045.22 cv
1194.25 1011.65 li
1187.6 1010.2 li
1185.39 1060.18 li
1184.88 1059.83 li
1181.5 1004.7 1176.72 955.352 1176.72 955.352 cv
1176.72 955.352 1171.2 976.865 1170.36 1015.28 cv
1170.21 1022.12 1170.08 1029.19 1169.96 1036.33 cv
1166.93 1005.13 li
1166.93 1005.13 1163.9 1025.01 1162.43 1042.95 cv
1159.98 1022.08 1156.83 1010.84 1156.83 1010.84 cv
1156.83 1010.84 1155.45 1023.88 1153.53 1044.51 cv
1150.69 1004.4 li
1144.05 1007.3 li
1141.4 1036.3 li
1141.4 983.062 li
1144.62 982.633 1147.68 981.107 1150.05 978.193 cv
1156.06 970.807 1154.56 909.744 1151.55 902.359 cv
1150.23 899.106 1146.58 897.002 1142.27 896.42 cv
1141.99 894.527 1141.52 892.501 1140.75 890.976 cv
1139.23 887.988 1137.32 892.766 1136.55 896.532 cv
1132.68 897.189 1128.84 899.054 1126.04 902.359 cv
1119.6 909.968 1121.54 972.284 1127.54 978.193 cv
1129.71 980.324 1132.46 981.875 1135.38 982.645 cv
1133.74 1039.36 li
1131.5 1013.82 li
1122.64 995.708 li
1122.64 995.708 1122.64 1042.79 1123.38 1050.04 cv
1118.95 1004.4 li
1113.78 1013.82 li
1113.4 1020.46 li
1111.57 998.32 1110.15 983.749 1110.15 983.749 cv
1110.15 983.749 1104.63 1005.26 1103.79 1043.68 cv
1103.76 1045.1 1103.73 1046.54 1103.7 1047.98 cv
1099.95 994.358 1095.8 951.525 1095.8 951.525 cv
1095.8 951.525 1089.12 977.523 1088.11 1023.95 cv
1087.96 1030.61 1087.83 1037.46 1087.71 1044.39 cv
1084.99 1026.13 li
1084.99 1026.13 1079.08 1045.69 1079.08 1055.11 cv
1077.61 1020.34 li
1077.61 1020.34 1071.04 1036.2 1067.94 1047.83 cv
1067.94 1014.84 li
1070.07 1014.42 1072.11 1012.91 1073.68 1010.04 cv
1077.66 1002.76 1076.66 942.537 1074.67 935.253 cv
1073.8 932.045 1071.37 929.972 1068.51 929.397 cv
1068.33 927.53 1068.02 925.534 1067.5 924.029 cv
1066.5 921.083 1065.23 925.794 1064.72 929.507 cv
1062.15 930.157 1059.61 931.996 1057.75 935.253 cv
1053.48 942.759 1054.77 1004.21 1058.75 1010.04 cv
1060.18 1012.14 1062.01 1013.67 1063.94 1014.43 cv
1063.26 1049.65 li
1052.51 1034.1 li
1053.24 1048.59 li
1045.12 1013.09 li
1031.83 997.158 li
1031.83 997.158 1040.69 1038.44 1041.43 1050.04 cv
1029.62 1001.5 li
1029.62 1001.5 1026.35 1022.38 1024.98 1038.42 cv
1022.91 1012.92 1021.24 995.654 1021.24 995.654 cv
1021.24 995.654 1019.1 1004.02 1017.28 1019.61 cv
1016.66 1005.92 1016.45 991.581 1017.81 985.569 cv
1014.46 988.525 1012.33 1001.02 1010.93 1014.8 cv
1010.76 978.165 li
1013.61 977.773 1016.33 976.407 1018.41 973.815 cv
1023.7 967.244 1022.13 913.121 1019.43 906.586 cv
1018.25 903.708 1015 901.857 1011.18 901.358 cv
1010.92 899.681 1010.5 897.886 1009.81 896.539 cv
1008.45 893.898 1006.78 898.138 1006.11 901.479 cv
1002.68 902.078 999.288 903.747 996.823 906.686 cv
991.141 913.457 993.117 968.688 998.461 973.903 cv
1000.39 975.783 1002.84 977.148 1005.42 977.819 cv
1004.1 1032.23 li
1001.07 1011.1 997.876 984.121 997.876 984.121 cv
997.876 984.121 995.651 1004.7 993.913 1023.97 cv
991.193 987.824 988.598 961.032 988.598 961.032 cv
988.598 961.032 983.903 979.337 982.515 1012.31 cv
981.636 985.572 li
973.516 989.192 li
971.301 1029.76 li
969.824 994.988 li
969.824 994.988 965.929 1015.64 964.081 1035.27 cv
962.884 1021.5 962.068 1013.07 962.068 1013.07 cv
962.068 1013.07 960.919 1017.56 959.589 1026.07 cv
959.416 1018.75 li
953.601 1019.7 li
950.692 1049.19 li
949.723 1033.02 li
945.233 1035.6 li
943.907 1051.09 li
938.193 1048.99 li
938.193 1039.56 li
940.809 1039.21 943.307 1037.97 945.233 1035.6 cv
950.118 1029.59 948.897 979.906 946.455 973.897 cv
945.38 971.249 942.408 969.537 938.9 969.064 cv
938.672 967.523 938.294 965.875 937.664 964.634 cv
936.43 962.206 934.874 966.092 934.25 969.155 cv
931.1 969.691 927.976 971.208 925.701 973.897 cv
920.457 980.088 922.038 1030.79 926.922 1035.6 cv
928.684 1037.33 930.924 1038.59 933.296 1039.22 cv
932.802 1056.3 li
930.338 1056.34 li
929.367 1044.43 li
923.551 1044.43 li
920.66 1056.48 li
920.321 1056.49 li
919.202 1043.68 918.449 1035.9 918.449 1035.9 cv
918.449 1035.9 917.041 1041.38 915.54 1051.75 cv
914.778 1042.75 912.978 1023.06 910.765 1009.47 cv
910.765 1009.47 908.609 1022.64 906.891 1035.57 cv
904.243 1000.74 901.772 975.23 901.772 975.23 cv
901.772 975.23 896.746 994.83 895.558 1030 cv
893.101 1001.91 888.803 986.59 888.803 986.59 cv
888.803 986.59 886.597 1007.41 883.882 1038.1 cv
883.679 1024.17 883.449 1006.68 883.449 998.609 cv
883.449 998.609 879.078 1015.77 875.654 1031.82 cv
875.654 972.21 li
879.378 971.714 882.933 969.947 885.675 966.572 cv
892.628 958.019 890.89 887.3 887.414 878.748 cv
885.885 874.981 881.654 872.544 876.66 871.871 cv
876.335 869.678 875.798 867.331 874.901 865.566 cv
873.145 862.106 870.93 867.639 870.042 871.998 cv
865.557 872.76 861.11 874.921 857.872 878.748 cv
850.408 887.561 852.658 959.728 859.609 966.572 cv
862.117 969.039 865.307 970.836 868.683 971.728 cv
867.07 1027.57 li
865.223 1015.3 863.518 1002.98 863.518 999.333 cv
863.518 994.463 860.759 1012.33 858.952 1029.1 cv
857.004 1005.31 855.465 989.429 855.465 989.429 cv
855.465 989.429 853.049 998.848 851.171 1016.34 cv
851.053 1010.24 850.925 1004.22 850.784 998.34 cv
849.691 952.579 842.495 926.955 842.495 926.955 cv
842.495 926.955 835.606 991.97 831.19 1061.64 cv
827.87 1010.48 823.629 966.711 823.629 966.711 cv
823.629 966.711 819.619 982.345 817.915 1010.74 cv
815.601 978.653 810.659 961.032 810.659 961.032 cv
810.659 961.032 807.112 994.504 803.477 1039.15 cv
800.095 979.923 794.687 924.116 794.687 924.116 cv
794.687 924.116 789.163 945.627 788.325 984.044 cv
788.009 998.502 787.772 1013.98 787.594 1029.09 cv
781.06 1034.92 li
777.512 1056.39 li
775.887 1037.09 774.685 1024.68 774.685 1024.68 cv
774.685 1024.68 771.205 1038.26 769.352 1063.07 cv
768.46 1036.82 li
762.644 1039.68 li
761.675 1055.85 li
759.869 1055.85 li
759.869 997.9 li
762.09 997.506 764.21 996.098 765.846 993.414 cv
769.992 986.613 768.955 930.372 766.882 923.571 cv
765.971 920.576 763.447 918.636 760.469 918.101 cv
760.275 916.358 759.954 914.492 759.419 913.087 cv
758.371 910.337 757.051 914.737 756.521 918.204 cv
753.846 918.809 751.193 920.529 749.262 923.571 cv
744.81 930.58 746.152 987.972 750.299 993.414 cv
751.794 995.378 753.697 996.806 755.71 997.515 cv
754.504 1053.19 li
750.042 1044.43 li
742.287 1033.97 li
739.38 1056.8 li
737.44 1031.12 li
737.44 1031.12 734.399 1039.32 731.888 1048.26 cv
728.75 1003.09 725.227 966.711 725.227 966.711 cv
725.227 966.711 719.703 988.223 718.864 1026.64 cv
718.612 1038.19 718.41 1050.38 718.248 1062.52 cv
718.207 1062.52 li
718.047 1053.26 717.862 1044.1 717.651 1035.26 cv
716.559 989.496 709.362 963.871 709.362 963.871 cv
709.362 963.871 705.689 998.532 701.988 1044.35 cv
698.597 986.376 693.39 932.634 693.39 932.634 cv
693.39 932.634 687.866 954.146 687.028 992.562 cv
686.556 1014.19 686.259 1038.12 686.071 1059.65 cv
685.919 1059.64 li
685.885 1058.13 685.851 1056.63 685.814 1055.13 cv
684.722 1009.37 677.526 983.748 677.526 983.748 cv
677.526 983.748 675.358 1004.21 672.676 1034.46 cv
671.574 1023.68 670.559 1011.97 670.559 1005.44 cv
670.559 1005.44 666.654 1023.15 663.694 1040.92 cv
663.459 989.525 li
666.308 989.132 669.022 987.765 671.109 985.173 cv
676.4 978.603 674.822 924.48 672.132 917.946 cv
670.948 915.067 667.701 913.216 663.877 912.717 cv
663.619 911.039 663.2 909.246 662.508 907.898 cv
661.151 905.256 659.476 909.498 658.81 912.838 cv
655.381 913.437 651.984 915.105 649.519 918.045 cv
643.837 924.817 645.814 980.047 651.157 985.261 cv
653.086 987.142 655.534 988.507 658.121 989.177 cv
657 1035.3 li
655.475 1024.14 654.079 1012.52 654.079 1007.34 cv
654.079 1007.34 652.088 1016.24 650.009 1027.2 cv
647.677 995.476 642.796 978.069 642.796 978.069 cv
642.796 978.069 639.001 1013.88 635.239 1060.82 cv
632.971 1060.65 li
629.611 999.799 623.929 941.153 623.929 941.153 cv
623.929 941.153 618.406 962.664 617.567 1001.08 cv
617.253 1015.44 617.017 1030.82 616.839 1045.83 cv
615.224 1035.83 613.368 1023.18 613.368 1017.8 cv
613.368 1017.8 609.49 1047.29 609.49 1053.94 cv
608.521 1034.92 li
602.705 1037.77 li
600.766 1052.04 li
600.766 1052.04 599.798 1041.58 597.858 1038.73 cv
596.607 1036.89 596.168 1036.24 596.011 1036.01 cv
596.006 1034.23 li
598.015 1033.79 599.93 1032.25 601.403 1029.32 cv
605.137 1021.9 604.023 960.802 602.125 953.423 cv
601.289 950.174 598.999 948.084 596.301 947.521 cv
596.119 945.627 595.823 943.604 595.335 942.081 cv
594.377 939.098 593.195 943.888 592.726 947.658 cv
590.305 948.333 587.909 950.218 586.17 953.538 cv
582.161 961.181 583.555 1023.53 587.325 1029.42 cv
588.685 1031.55 590.414 1033.09 592.238 1033.84 cv
591.985 1050.47 li
590.272 1046.24 586.94 1037.97 586.227 1035.87 cv
586.227 1035.87 583.514 1041.58 581.273 1047.94 cv
579.478 1008.49 573.336 986.589 573.336 986.589 cv
573.336 986.589 571.988 999.307 570.103 1019.51 cv
568.782 1007.44 566.82 994.92 563.932 986.417 cv
563.932 1005.44 564.901 1049.19 564.901 1049.19 cv
564.901 1049.19 561.994 1004.49 560.055 995.927 cv
559.116 998.077 558.38 1005.19 557.813 1013.83 cv
554.789 971.494 551.575 938.312 551.575 938.312 cv
551.575 938.312 546.052 959.825 545.213 998.241 cv
544.97 1009.41 544.772 1021.19 544.613 1032.94 cv
543.477 1019.07 542.15 1002.92 541.638 996.878 cv
538.73 1006.39 539.699 1052.99 539.699 1052.99 cv
535.821 1022.56 li
530.975 1023.51 li
530.005 1052.99 li
522.252 1052.04 li
521.281 1077.72 li
521.281 1077.72 521.281 1039.68 519.343 1025.41 cv
511.319 1031.71 li
511.319 1012.38 li
514.408 1011.97 517.355 1010.5 519.63 1007.7 cv
525.396 1000.6 523.954 941.956 521.072 934.863 cv
519.804 931.739 516.295 929.717 512.154 929.159 cv
511.884 927.341 511.438 925.394 510.695 923.929 cv
509.238 921.061 507.401 925.649 506.664 929.265 cv
502.945 929.898 499.258 931.69 496.572 934.863 cv
490.382 942.172 492.248 1002.02 498.013 1007.7 cv
500.093 1009.75 502.737 1011.24 505.537 1011.98 cv
504.463 1049.18 li
500.926 1023.51 li
494.141 1010.19 li
493.172 1052.99 li
491.233 995.927 li
485.417 990.221 li
483.478 1045.38 li
483.478 1045.38 483.477 981.66 480.57 971.198 cv
479.38 972.171 478.272 976.011 477.262 981.5 cv
474.879 962.632 472.039 952.511 472.039 952.511 cv
472.039 952.511 469.602 975.5 466.699 1008.78 cv
465.272 997.375 464.092 989.27 464.092 989.27 cv
464.092 989.27 462.474 1001.19 460.659 1014.54 cv
458.22 983.258 456.066 961.031 456.066 961.031 cv
456.066 961.031 451.469 978.95 450.027 1011.27 cv
448.177 1002.16 446.644 994.976 446.644 994.976 cv
441.798 996.878 li
440.828 1046.33 li
438.89 1001.63 li
438.89 1001.63 437.107 1007.08 435.154 1014.45 cv
435.154 961.41 li
438.309 960.99 441.318 959.492 443.642 956.632 cv
449.53 949.389 448.059 889.488 445.114 882.245 cv
443.819 879.054 440.236 876.991 436.007 876.418 cv
435.73 874.563 435.275 872.576 434.517 871.08 cv
433.028 868.149 431.152 872.835 430.398 876.528 cv
426.601 877.172 422.834 879.002 420.092 882.245 cv
413.769 889.709 415.676 950.836 421.563 956.632 cv
423.687 958.722 426.39 960.246 429.249 960.999 cv
427.802 1011.06 li
427.476 1005.08 427.257 1000.68 427.257 1000.68 cv
427.257 1000.68 424.509 1013.16 422.489 1025.86 cv
420.065 1005.87 417.049 995.109 417.049 995.109 cv
417.049 995.109 415.615 1008.64 413.638 1029.95 cv
412.718 1008.29 li
412.718 1008.29 410.69 1016.25 408.483 1025.87 cv
408.334 1017.49 408.164 1009.2 407.973 1001.18 cv
406.88 955.419 399.684 929.795 399.684 929.795 cv
399.684 929.795 393.163 991.333 388.743 1058.83 cv
385.378 1005.27 380.817 958.19 380.817 958.19 cv
380.817 958.19 375.85 977.558 374.623 1012.34 cv
373.044 1006.26 371.209 1000.03 369.098 994.025 cv
368.129 1018.75 367.159 1055.85 367.159 1055.85 cv
367.159 1055.85 364.251 1012.1 361.343 1000.68 cv
358.435 1014.95 358.435 1052.99 358.435 1052.99 cv
355.527 1030.17 li
350.554 1029.81 li
350.554 1029.81 348.742 1052.04 347.773 1055.85 cv
346.908 1045.66 346.045 1035.5 345.868 1033.43 cv
347.596 1032.66 349.198 1031.48 350.554 1029.81 cv
356.205 1022.86 354.793 965.382 351.968 958.431 cv
350.725 955.37 347.285 953.388 343.227 952.839 cv
342.962 951.058 342.526 949.152 341.797 947.716 cv
340.369 944.905 338.568 949.402 337.847 952.945 cv
334.201 953.564 330.588 955.322 327.956 958.431 cv
321.889 965.595 323.718 1024.25 329.368 1029.81 cv
331.405 1031.82 333.999 1033.28 336.742 1034.01 cv
336.349 1047.63 li
334.957 1041.58 333.233 1036.82 333.233 1036.82 cv
333.233 1036.82 328.387 1050.14 329.355 1055.85 cv
325.478 1042.53 326.447 1033.02 322.57 1014.95 cv
320.839 1017.92 320.463 1025.82 320.574 1033.65 cv
319.629 1018.56 318.034 998.646 315.785 989.27 cv
310.939 1002.58 308.031 1049.19 308.031 1049.19 cv
306.568 1044.05 li
301.33 969.41 295.566 909.917 295.566 909.917 cv
295.566 909.917 287.863 939.931 285.386 994.108 cv
280.89 988.317 li
277.981 1015.9 li
276.043 968.344 li
273.135 976.904 li
271.624 997.405 li
269.585 972.292 267.943 955.351 267.943 955.351 cv
267.943 955.351 262.883 975.086 261.716 1010.49 cv
259.564 993.072 li
255.686 998.779 li
254.717 1032.07 li
251.81 1004.48 li
251.81 1004.48 251.173 1009.8 250.287 1017.38 cv
247.855 988.287 243.397 972.392 243.397 972.392 cv
243.397 972.392 241.6 989.352 239.254 1015.22 cv
237.844 1003.86 236.445 993.782 235.331 988.317 cv
234.746 995.781 232.042 1009.49 229.563 1023.57 cv
229.329 972.486 li
232.179 972.093 234.893 970.727 236.98 968.135 cv
242.271 961.564 240.693 907.441 238.002 900.908 cv
236.819 898.029 233.571 896.177 229.748 895.678 cv
229.49 894.001 229.071 892.207 228.379 890.859 cv
227.022 888.218 225.347 892.458 224.682 895.8 cv
221.252 896.398 217.855 898.067 215.391 901.006 cv
209.708 907.778 211.685 963.009 217.028 968.223 cv
218.956 970.103 221.404 971.469 223.991 972.139 cv
223.026 1011.84 li
221.471 997.715 219.822 985.463 219.822 985.463 cv
219.822 985.463 217.634 995.346 215.232 1007.86 cv
211.705 975.617 206.816 958.194 206.816 958.194 cv
206.816 958.194 205.033 975.027 202.503 1001.99 cv
202.497 1001.72 202.491 1001.45 202.484 1001.18 cv
201.392 955.421 194.195 929.796 194.195 929.796 cv
194.195 929.796 190.675 963.022 187.054 1007.42 cv
185.77 990.275 184.068 972.985 182.019 964.539 cv
179.697 972.13 177.686 985.933 176.045 1000.56 cv
172.947 956.44 169.541 921.274 169.541 921.274 cv
169.541 921.274 164.017 942.786 163.179 981.202 cv
162.953 991.56 162.767 1002.44 162.613 1013.34 cv
161.651 991.354 160.693 968.314 160.693 963.588 cv
157.758 983.027 158.155 1028.07 158.521 1048.82 cv
158.088 1031.06 156.999 996.237 154.877 981.659 cv
154.127 984.454 153.261 988.004 152.333 992.003 cv
150.056 959.189 144.995 941.156 144.995 941.156 cv
144.995 941.156 141.012 978.741 137.162 1027.38 cv
135.49 1015.9 li
129.675 1015.9 li
124.828 1050.14 li
123.858 1020.65 li
123.858 1020.65 122.459 1028.35 121.163 1036.79 cv
121.163 1014.52 li
125.76 1013.91 130.149 1011.72 133.534 1007.56 cv
142.118 996.998 139.973 909.692 135.682 899.133 cv
133.793 894.483 128.57 891.474 122.406 890.641 cv
122.004 887.935 121.341 885.039 120.233 882.859 cv
118.064 878.588 115.33 885.418 114.233 890.801 cv
108.697 891.742 103.208 894.41 99.2109 899.133 cv
89.9961 910.014 92.7744 999.109 101.355 1007.56 cv
104.451 1010.6 108.389 1012.82 112.557 1013.92 cv
112.084 1030.28 li
110.033 1023.3 108.35 1017.8 108.35 1017.8 cv
108.35 1017.8 107.107 1033.01 105.124 1046.4 cv
102.632 1020.53 98.6875 1006.47 98.6875 1006.47 cv
98.6875 1006.47 97.4687 1017.98 95.7285 1036.47 cv
93.3682 1025.53 91.9834 1013.18 90.9014 1007.34 cv
88.7852 1012.18 90.2627 1034.15 91.2236 1045.75 cv
89.9043 1030.83 87.0244 997.336 87.0244 989.268 cv
84.4746 990.52 82.6699 1002.92 81.4473 1016.46 cv
79.0381 985.665 76.9268 963.871 76.9268 963.871 cv
76.9268 963.871 71.4033 985.383 70.5654 1023.8 cv
70.416 1030.63 70.2852 1037.69 70.1689 1044.83 cv
69.9551 1030.07 69.6875 1015.22 69.3525 1001.18 cv
68.2588 955.421 61.0635 929.796 61.0635 929.796 cv
61.0635 929.796 59.2383 947.018 56.8662 973.216 cv
55.1084 952.093 53.7734 938.314 53.7734 938.314 cv
53.7734 938.314 48.25 959.826 47.4111 998.242 cv
47.3389 1001.57 47.2705 1004.95 47.2061 1008.37 cv
43.4023 963.587 li
33.71 952.173 li
33.3086 993.485 li
30.4941 955.534 27.7256 926.955 27.7256 926.955 cv
27.7256 926.955 26.3359 932.37 24.8447 942.612 cv
25.7002 919.111 24.2119 889.748 22.0498 884.427 cv
20.5205 880.661 16.29 878.224 11.2969 877.549 cv
10.9707 875.357 10.4336 873.011 9.5371 871.246 cv
7.7803 867.786 5.5654 873.319 4.6768 877.678 cv
3.1748 877.933 1.6836 878.361 .2344 878.938 cv
.2344 976.284 li
1.2383 976.733 2.2627 977.129 3.3184 977.408 cv
1.4629 1041.64 li
1.0488 1036.06 .6367 1030.7 .2344 1025.59 cv
.2344 1080 li
3054.77 1080 li
3054.77 1025.58 li
3052.43 995.975 3050.42 975.23 3050.42 975.23 cv
cp
f
538.439 361.071 mo
544.906 364.845 667.345 371.115 826.385 367.768 cv
989.29 364.337 1191.34 361.071 1320.25 364.419 cv
1449.15 367.768 1488.54 356.922 1479.29 347.679 cv
1472.59 340.983 1427.39 354.374 1350.38 342.657 cv
1273.37 330.937 1174.6 247.233 1129.4 235.513 cv
1084.2 223.794 1064.11 233.836 1062.44 255.601 cv
1062.44 255.601 1000.49 215.424 963.662 193.659 cv
926.832 171.895 864.891 175.245 874.935 240.535 cv
874.935 240.535 849.823 223.795 836.432 242.21 cv
823.038 260.626 838.105 275.691 838.105 275.691 cv
838.105 275.691 818.016 268.993 771.139 257.277 cv
724.265 245.558 650.604 257.277 672.37 295.78 cv
672.37 295.78 602.055 287.41 633.864 346.003 cv
633.864 346.003 518.349 349.352 538.439 361.071 cv
cp
1 1 1 rgb
f
1479.29 347.679 mo
1479.16 347.547 1478.98 347.437 1478.82 347.318 cv
1430.72 357.107 1341.83 366.335 1256.63 333.874 cv
1162.63 298.07 1079.08 245.851 1083.56 290.609 cv
1049.25 268.229 909 180.203 891.097 208.552 cv
873.195 236.899 891.097 256.295 891.097 256.295 cv
891.097 256.295 865.735 238.39 856.782 254.801 cv
847.831 271.211 877.67 298.07 877.67 298.07 cv
877.67 298.07 764.282 268.229 719.524 280.165 cv
674.764 292.102 704.604 307.02 704.604 307.02 cv
704.604 307.02 658.353 301.052 649.402 320.447 cv
640.449 339.844 676.257 350.288 641.942 350.288 cv
614.772 350.288 569.846 354.964 542.681 362.1 cv
566.359 365.855 681.087 370.827 826.385 367.768 cv
989.29 364.337 1191.34 361.071 1320.25 364.419 cv
1449.15 367.768 1488.54 356.922 1479.29 347.679 cv
cp
.921569 .984314 1 rgb
f
538.439 361.071 mo
544.906 364.845 667.345 371.115 826.385 367.768 cv
989.29 364.337 1191.34 361.071 1320.25 364.419 cv
1435.07 367.401 1478.86 359.125 1480.52 350.744 cv
1466.69 360.382 1443.88 359.805 1403.65 359.805 cv
1353.88 359.805 1041.92 355.363 937.934 352.695 cv
833.947 350.03 605.534 363.362 567.316 361.585 cv
551.165 360.833 541.699 359.445 536.466 357.423 cv
535.647 358.539 536.175 359.752 538.439 361.071 cv
cp
.776471 .956863 1 rgb
f
1330.42 209.637 mo
1347.69 207.91 1428.22 206.534 1476.34 208.083 cv
1524.47 209.637 1784.66 210.186 1820.39 210.186 cv
1837.47 210.186 1800.79 187.904 1783.71 187.904 cv
1766.63 187.904 1763.53 195.665 1752.66 192.561 cv
1741.8 189.456 1716.67 154.282 1676.6 132.02 cv
1648.66 116.496 1650.21 135.123 1640.89 130.463 cv
1631.58 125.809 1608.15 93.6929 1564.83 80.791 cv
1491.86 59.0571 1431.32 68.3726 1418.9 87.001 cv
1406.49 105.628 1428.07 133.071 1451.5 150.648 cv
1463.92 159.961 1479.45 172.379 1468.58 172.379 cv
1457.71 172.379 1424.18 142.261 1406.49 159.961 cv
1397.17 169.277 1408.04 183.247 1408.04 183.247 cv
1359.91 183.247 1299.37 212.742 1330.42 209.637 cv
cp
1 1 1 rgb
f
1476.34 208.083 mo
1524.47 209.637 1784.66 210.186 1820.39 210.186 cv
1821.59 210.186 1822.51 210.071 1823.21 209.868 cv
1812.26 203.985 1798.18 192.984 1783.31 196.169 cv
1763.28 200.464 1751.83 207.619 1743.24 206.188 cv
1734.66 204.756 1673.99 138.641 1661.69 163.26 cv
1648.81 189.017 1596.07 129.889 1542.92 133.211 cv
1520.42 134.616 1409.5 60.3857 1419.24 114.517 cv
1425.46 127.46 1438.18 140.65 1451.5 150.648 cv
1457.11 154.849 1463.33 159.68 1467.49 163.722 cv
1473.88 169.008 1477.97 173.625 1477.1 177.57 cv
1474.23 190.448 1457.06 183.292 1437.03 174.708 cv
1417 166.123 1418.43 180.431 1421.29 189.017 cv
1423.9 196.858 1368.03 185.609 1328.89 209.767 cv
1329.37 209.733 1329.88 209.691 1330.42 209.637 cv
1347.69 207.91 1428.22 206.534 1476.34 208.083 cv
cp
.921569 .984314 1 rgb
f
1476.34 208.083 mo
1524.47 209.637 1784.66 210.186 1820.39 210.186 cv
1822.98 210.186 1824.32 209.675 1824.7 208.811 cv
1800.38 209.372 1687.79 202.728 1591.59 198.545 cv
1493.57 194.284 1380.2 202.806 1349.51 206.217 cv
1335.82 207.737 1327.06 208.069 1322.23 207.442 cv
1321.06 209.366 1323.38 210.342 1330.42 209.637 cv
1347.69 207.91 1428.22 206.534 1476.34 208.083 cv
cp
.776471 .956863 1 rgb
f
3043.13 388.282 mo
3036.24 392.706 2951.5 409.181 2884.14 406.623 cv
2816.78 404.068 2657.09 393.803 2610.38 403.345 cv
2597.7 405.932 2611.18 379.689 2633.32 375.653 cv
2640.36 374.368 2625.45 348.027 2659.14 343.8 cv
2668.99 342.56 2617.44 319.211 2630.67 284.334 cv
2643.9 249.455 2720.94 260.602 2747.33 277.905 cv
2773.71 295.206 2778.79 318.933 2785.94 319.288 cv
2829.43 321.437 2846.28 321.724 2865.38 354.347 cv
2896.36 349.26 2910.15 363.539 2923.88 382.026 cv
2946.2 390.835 2981.34 388.628 3008.06 386.276 cv
3034.78 383.927 3060.17 377.341 3043.13 388.282 cv
cp
1 1 1 rgb
f
2606.18 402.492 mo
2606.92 403.404 2608.29 403.772 2610.38 403.345 cv
2657.09 393.803 2816.78 404.068 2884.14 406.623 cv
2885.62 406.68 2887.12 406.722 2888.61 406.76 cv
2900.05 402.698 2911.5 397 2909.74 390.849 cv
2906.34 378.969 2879.19 363.695 2863.92 377.271 cv
2853.73 361.998 2819.79 328.056 2790.94 341.634 cv
2770.58 319.572 2690.81 261.869 2650.08 289.023 cv
2640.25 295.576 2633.99 301.137 2630.1 305.881 cv
2634.3 318.857 2645.71 329.088 2653.27 335.643 cv
2662.74 336.516 2671.41 337.964 2672.14 341.634 cv
2673.84 350.118 2651.78 346.727 2648.38 358.605 cv
2644.99 370.484 2646.69 378.969 2646.69 378.969 cv
2646.69 378.969 2618.74 387.034 2606.18 402.492 cv
cp
.921569 .984314 1 rgb
f
3047.87 384.679 mo
3031.84 390.38 3001.42 394.017 2979.49 397.039 cv
2901.35 407.816 2801.44 397.982 2723.24 393.272 cv
2663.28 389.661 2631.02 397.127 2610.32 403.354 cv
2610.34 403.349 2610.36 403.349 2610.38 403.345 cv
2657.09 393.803 2816.78 404.068 2884.14 406.623 cv
2951.5 409.181 3036.24 392.706 3043.13 388.282 cv
3045.51 386.755 3047.03 385.584 3047.87 384.679 cv
cp
.776471 .956863 1 rgb
f
696.522 521.452 mo
682.639 522.502 491.536 515.02 384.783 520.759 cv
278.03 526.503 172.805 519.792 168.817 504.506 cv
164.83 489.221 179.794 514.326 275.491 505.691 cv
282.391 505.067 255.003 479.135 285.85 446.228 cv
316.697 413.317 385.661 441.794 406.333 451.721 cv
406.333 451.721 409.38 426.82 449.419 439.73 cv
484.925 451.184 522.352 484.877 567.944 496.466 cv
621.925 510.189 728.418 519.033 696.522 521.452 cv
cp
1 1 1 rgb
f
546.588 504.474 mo
497.11 492.479 452.13 465.495 434.139 480.485 cv
412.63 470.362 323.19 419.014 286.443 445.623 cv
286.248 445.825 286.045 446.021 285.85 446.228 cv
255.003 479.135 282.391 505.067 275.491 505.691 cv
187.42 513.638 167.729 493.01 168.258 501.585 cv
173.783 509.287 li
196.263 521.129 289.917 525.864 384.783 520.759 cv
457.941 516.824 570.709 519.104 638.91 520.586 cv
607.114 516.634 572.526 510.761 546.588 504.474 cv
cp
.921569 .984314 1 rgb
f
696.522 521.452 mo
697.858 521.349 698.929 521.238 699.794 521.115 cv
629.269 516.655 484.934 506.872 408.342 509.608 cv
313.516 512.993 234.495 516.38 213.045 514.122 cv
198.013 512.538 178.558 510.397 168.645 503.819 cv
168.697 504.037 168.754 504.267 168.817 504.506 cv
172.805 519.792 278.03 526.503 384.783 520.759 cv
491.536 515.02 682.639 522.502 696.522 521.452 cv
cp
.776471 .956863 1 rgb
f
1929.29 315.26 mo
1939.47 317.297 2202.56 316.731 2315.68 321.137 cv
2428.81 325.545 2437.62 327.014 2446.44 327.014 cv
2455.25 327.014 2408.24 313.794 2377.39 309.384 cv
2346.53 304.977 2334.78 303.507 2324.5 294.694 cv
2317.99 289.118 2300.11 255.893 2277.48 234.455 cv
2249.57 208.011 2227.53 224.171 2227.53 234.455 cv
2227.53 244.741 2206.17 200.493 2137.91 158.061 cv
2083.55 124.265 2032.13 127.206 2013.03 147.772 cv
1993.24 169.091 2002.8 224.205 2064.45 259.431 cv
2074.74 265.312 2039.48 249.148 2026.25 260.902 cv
2009.1 276.151 2036.54 294.694 2045.35 300.571 cv
2045.35 300.571 2029.44 301.416 2008.62 299.101 cv
1982.18 296.163 1976.3 287.347 1958.67 290.288 cv
1950.87 291.585 1921.94 313.794 1929.29 315.26 cv
cp
1 1 1 rgb
f
2233.76 271.257 mo
2201.88 245.454 2100.19 155.9 2051.62 158.936 cv
2016.33 161.144 2008.29 180.976 2007.7 196.901 cv
2012.94 212.144 2023.64 228.399 2040.91 243.035 cv
2060.07 256.87 2084.07 270.913 2101.71 277.328 cv
2066.8 267.926 2015.26 259.724 2023.81 281.077 cv
2027.89 287.593 2035.18 293.444 2040.69 297.373 cv
2050.93 302.218 2062.25 304.648 2062.25 304.648 cv
2062.25 304.648 2041 313.753 2016.71 309.202 cv
1996.34 305.379 1963.13 293.024 1932.35 307.974 cv
1928.56 311.74 1926.74 314.75 1929.29 315.26 cv
1939.47 317.297 2202.56 316.731 2315.68 321.137 cv
2321.31 321.359 2326.68 321.569 2331.8 321.773 cv
2321.81 317.644 2312.97 312.029 2305.1 304.648 cv
2280.81 281.879 2236.79 240.898 2233.76 271.257 cv
cp
.921569 .984314 1 rgb
f
1929.29 315.26 mo
1939.47 317.297 2202.56 316.731 2315.68 321.137 cv
2428.81 325.545 2437.62 327.014 2446.44 327.014 cv
2448.58 327.014 2447.41 326.232 2443.98 324.98 cv
2335.07 313.172 2119.22 308.62 2070.77 309.654 cv
2026.31 310.598 1962.3 313.111 1929.23 315.245 cv
1929.25 315.249 1929.26 315.256 1929.29 315.26 cv
cp
.776471 .956863 1 rgb
f
487.893 207.417 mo
476.052 208.326 116.731 207.417 85.5542 207.417 cv
54.377 207.417 5.9106 208.352 3.5166 201.169 cv
2.6367 198.534 12.9995 196.773 28.1401 196.773 cv
45.7271 196.773 72.9878 196.773 60.6665 179.628 cv
56.8237 174.281 55.9639 166.107 58.8301 156.939 cv
66.2524 133.185 106.338 143.577 106.338 143.577 cv
106.338 143.577 91.4897 115.368 119.701 87.1587 cv
147.908 58.9521 183.54 53.0132 231.049 73.7993 cv
278.559 94.5845 321.611 127.247 330.52 124.274 cv
339.43 121.307 330.52 109.429 348.336 102.007 cv
366.152 94.5845 404.751 131.7 419.599 165.847 cv
419.599 165.847 431.477 161.394 444.837 179.21 cv
461.169 174.753 507.194 205.93 487.893 207.417 cv
cp
1 1 1 rgb
f
408.345 177.655 mo
392.485 164.439 364.9 134.148 336.979 136.686 cv
322.442 138.007 327.729 157.831 327.729 157.831 cv
327.729 157.831 216.717 71.9277 167.817 91.7524 cv
150.637 79.8564 109.667 89.1084 103.06 118.183 cv
102.871 118.847 li
100.918 133.248 106.338 143.577 106.338 143.577 cv
106.338 143.577 66.2524 133.185 58.8301 156.939 cv
55.9639 166.107 56.8237 174.281 60.6665 179.628 cv
72.9878 196.773 45.7271 196.773 28.1401 196.773 cv
12.9995 196.773 2.6367 198.534 3.5166 201.169 cv
5.9106 208.352 54.377 207.417 85.5542 207.417 cv
104.032 207.417 237.79 207.736 346.148 207.808 cv
379.27 204.086 li
379.27 204.086 412.309 185.584 436.098 184.263 cv
429.49 178.977 416.274 175.011 408.345 177.655 cv
cp
.921569 .984314 1 rgb
f
487.893 207.417 mo
491.895 207.109 493.081 205.521 492.314 203.243 cv
488.993 208.017 481.043 203.802 459.02 203.802 cv
434.398 203.802 293.699 202.042 197.847 199.406 cv
101.997 196.769 36.0444 206.441 22.8535 204.682 cv
16.0361 203.773 8.7524 203.097 3.6655 201.443 cv
7.2036 208.323 54.7837 207.417 85.5542 207.417 cv
116.731 207.417 476.052 208.326 487.893 207.417 cv
cp
.776471 .956863 1 rgb
f
1890.51 511.242 mo
1853.58 497.813 1806.6 470.899 1795.3 470.899 cv
1784 470.899 1785.62 482.194 1785.62 482.194 cv
1771.1 480.58 1751.73 472.512 1724.3 459.605 cv
1696.87 446.693 1674.28 443.466 1661.37 457.989 cv
1648.46 472.512 1674.28 490.263 1667.82 490.263 cv
1661.37 490.263 1658.14 490.263 1635.55 477.354 cv
1612.96 464.446 1580.69 469.285 1575.84 487.034 cv
1571 504.785 1591.98 516.081 1582.3 514.468 cv
1548.53 508.841 1554.87 522.535 1554.87 522.535 cv
1529.05 525.764 1513.65 508.998 1493.55 527.377 cv
1489.78 530.822 1509.61 532.219 1525.82 532.219 cv
1590.37 532.219 1871.14 532.219 1914.71 532.219 cv
1958.28 532.219 1993.78 528.99 1993.78 517.694 cv
1993.78 506.399 1961.51 537.06 1890.51 511.242 cv
cp
1 1 1 rgb
f
1525.82 532.219 mo
1590.37 532.219 1871.14 532.219 1914.71 532.219 cv
1958.28 532.219 1993.78 528.99 1993.78 517.694 cv
1993.78 517.557 1993.77 517.433 1993.76 517.308 cv
1982.75 524.943 1965.32 529.466 1920.57 525.174 cv
1858.32 519.206 1828.98 489.529 1807.16 486.8 cv
1793.51 485.096 1808.86 495.328 1796.93 496.181 cv
1784.99 497.033 1742.35 480.83 1703.98 464.63 cv
1668.2 449.523 1656.89 464.071 1660.36 476.475 cv
1663.71 482.831 1668.98 487.942 1668.86 489.646 cv
1673.4 493.938 1677.54 495.328 1677.54 495.328 cv
1677.54 495.328 1663.9 505.562 1635.76 490.212 cv
1607.62 474.864 1582.04 482.538 1581.18 494.475 cv
1580.33 506.414 1590.56 515.794 1590.56 515.794 cv
1590.56 515.794 1588.13 515.018 1584.71 514.382 cv
1584.42 514.657 1583.68 514.698 1582.3 514.468 cv
1579.97 514.079 1577.85 513.792 1575.89 513.577 cv
1570.97 513.705 1566.21 515.044 1564.13 519.206 cv
1559.01 529.439 1561.57 529.437 1551.34 526.878 cv
1541.1 524.322 1507.85 521.763 1498.47 527.733 cv
1497.38 528.424 1496.89 529.271 1496.87 530.22 cv
1502.92 531.615 1515.15 532.219 1525.82 532.219 cv
cp
.921569 .984314 1 rgb
f
1525.82 532.219 mo
1590.37 532.219 1871.14 532.219 1914.71 532.219 cv
1956.23 532.219 1990.39 529.281 1993.52 519.233 cv
1987.63 525.045 1980.46 528.259 1942.74 529.439 cv
1888.16 531.142 1761.11 523.469 1684.36 524.322 cv
1607.62 525.174 1528.71 532.991 1493.55 527.377 cv
1489.78 530.822 1509.61 532.219 1525.82 532.219 cv
cp
.776471 .956863 1 rgb
f
2226.66 534.779 mo
2236.5 534.506 2312.26 533.971 2427.54 537.007 cv
2542.82 540.047 2668.91 539.674 2681.35 539.33 cv
2693.79 538.986 2654.78 535.394 2609.45 528.865 cv
2564.13 522.333 2492.97 475.973 2469.72 486.027 cv
2454.34 492.679 2482.64 502.794 2462.59 509.575 cv
2442.54 516.356 2399.68 486.406 2357.38 476.68 cv
2315.08 466.953 2293.73 483.109 2298.83 498.536 cv
2303.92 513.963 2322.5 510.334 2311.79 516.858 cv
2301.07 523.382 2271.21 513.309 2246.41 517.11 cv
2224.02 520.539 2215.78 535.079 2226.66 534.779 cv
cp
1 1 1 rgb
f
2503.93 504.409 mo
2473.14 495.078 2494.6 522.135 2468.47 519.337 cv
2442.35 516.539 2414.35 522.136 2358.37 499.744 cv
2320.64 484.651 2301.58 487.791 2298.29 496.293 cv
2298.41 497.041 2298.58 497.789 2298.83 498.536 cv
2303.92 513.963 2322.5 510.334 2311.79 516.858 cv
2311.06 517.301 2310.24 517.662 2309.34 517.961 cv
2311.36 526.081 2291.01 524.423 2281.86 522.136 cv
2272.2 519.722 2237.57 522.863 2224.04 527.364 cv
2220.56 531.38 2221.23 534.929 2226.66 534.779 cv
2236.5 534.506 2312.26 533.971 2427.54 537.007 cv
2484.38 538.506 2543.83 539.175 2591 539.427 cv
2556.2 535.23 2533.5 513.369 2503.93 504.409 cv
cp
.921569 .984314 1 rgb
f
2226.66 534.779 mo
2236.5 534.506 2312.26 533.971 2427.54 537.007 cv
2535.43 539.851 2652.76 539.708 2677.58 539.396 cv
2624.39 536.958 2484.9 528.785 2417.82 527.531 cv
2338.83 526.054 2239.17 532.698 2229.57 531.958 cv
2226.79 531.746 2224.26 531.095 2222.3 530.067 cv
2221.15 532.838 2222.5 534.893 2226.66 534.779 cv
cp
.776471 .956863 1 rgb
f
2429.49 152.8 mo
2428.67 161.042 2450.05 153.608 2504.52 155.075 cv
2558.99 156.544 2674.74 158.645 2721.36 159.938 cv
2774.8 161.419 2795.21 157.486 2806.6 155.938 cv
2814.8 154.825 2807.56 149.766 2789.09 152.019 cv
2770.62 154.271 2722.34 155.817 2677.01 143.975 cv
2631.68 132.133 2590.29 102.644 2562.64 113.353 cv
2546.27 119.694 2560.8 133.921 2554.66 136.041 cv
2548.52 138.164 2498.52 121.401 2483.66 126.531 cv
2471.38 130.773 2485.85 138.836 2479.72 141.984 cv
2473.59 145.132 2430.42 143.543 2429.49 152.8 cv
cp
1 1 1 rgb
f
2721.36 159.938 mo
2721.67 159.948 2721.96 159.952 2722.26 159.961 cv
2712.47 158.958 2702.91 157.533 2694.06 155.637 cv
2649.31 146.047 2595.76 124.47 2577.38 130.862 cv
2563.61 135.655 2560.61 134.612 2555.93 131.097 cv
2556.48 133.523 2556.59 135.378 2554.66 136.041 cv
2552.71 136.715 2546.34 135.485 2538.07 133.656 cv
2536.32 134.127 2534.05 134.322 2531.03 134.06 cv
2514.43 132.616 2486.08 126.607 2479 133.715 cv
2480.2 136.988 2483.12 140.24 2479.72 141.984 cv
2473.59 145.132 2430.42 143.543 2429.49 152.8 cv
2428.67 161.042 2450.05 153.608 2504.52 155.075 cv
2558.99 156.544 2674.74 158.645 2721.36 159.938 cv
cp
.921569 .984314 1 rgb
f
2504.52 155.075 mo
2558.99 156.544 2674.74 158.645 2721.36 159.938 cv
2774.8 161.419 2795.21 157.486 2806.6 155.938 cv
2808.53 155.676 2809.59 155.195 2809.87 154.643 cv
2785.79 158.821 2733.88 158.73 2701.25 158.037 cv
2663.69 157.236 2529.43 150.045 2508.66 149.246 cv
2487.88 148.447 2451.92 154.04 2440.73 154.84 cv
2436.45 155.145 2432.54 154.748 2429.49 153.61 cv
2430.22 160.524 2451.97 153.66 2504.52 155.075 cv
cp
.776471 .956863 1 rgb
f
990.788 572.136 mo
990.053 579.456 1009.04 572.855 1057.42 574.158 cv
1105.79 575.461 1208.59 577.329 1250 578.476 cv
1297.46 579.792 1315.59 576.298 1325.69 574.924 cv
1332.98 573.935 1326.55 569.442 1310.15 571.443 cv
1293.74 573.444 1250.87 574.817 1210.61 564.299 cv
1170.35 553.783 1133.59 527.592 1109.03 537.103 cv
1094.49 542.736 1107.4 555.371 1101.95 557.254 cv
1096.49 559.138 1052.09 544.252 1038.9 548.806 cv
1027.99 552.574 1040.84 559.736 1035.4 562.532 cv
1029.95 565.327 991.613 563.916 990.788 572.136 cv
cp
1 1 1 rgb
f
1250 578.476 mo
1250.27 578.485 1250.52 578.489 1250.79 578.497 cv
1242.1 577.606 1233.61 576.34 1225.75 574.656 cv
1186.01 566.139 1138.45 546.977 1122.13 552.654 cv
1109.9 556.911 1107.23 555.984 1103.08 552.862 cv
1103.56 555.016 1103.66 556.664 1101.95 557.254 cv
1100.22 557.851 1094.56 556.759 1087.22 555.135 cv
1085.66 555.554 1083.64 555.726 1080.97 555.494 cv
1066.22 554.211 1041.04 548.875 1034.75 555.187 cv
1035.82 558.094 1038.41 560.982 1035.4 562.532 cv
1029.95 565.327 991.613 563.916 990.788 572.136 cv
990.053 579.456 1009.04 572.855 1057.42 574.158 cv
1105.79 575.461 1208.59 577.329 1250 578.476 cv
cp
.921569 .984314 1 rgb
f
1057.42 574.158 mo
1105.79 575.461 1208.59 577.329 1250 578.476 cv
1297.46 579.792 1315.59 576.298 1325.69 574.924 cv
1327.41 574.692 1328.35 574.263 1328.6 573.774 cv
1307.21 577.484 1261.11 577.404 1232.14 576.787 cv
1198.78 576.077 1079.55 569.69 1061.09 568.981 cv
1042.64 568.27 1010.7 573.238 1000.77 573.95 cv
996.971 574.22 993.49 573.868 990.79 572.857 cv
991.435 578.997 1010.75 572.9 1057.42 574.158 cv
cp
.776471 .956863 1 rgb
f
.5 .5 mo
0 .5 li
0 0 li
.5 0 li
.5 .5 li
cp
0 0 0 rgb
f
3055 .5 mo
3054.5 .5 li
3054.5 0 li
3055 0 li
3055 .5 li
cp
f
.7344 1080 mo
.2344 1080 li
.2344 1079.5 li
.7344 1079.5 li
.7344 1080 li
cp
f
3054.77 1080 mo
3054.27 1080 li
3054.27 1079.5 li
3054.77 1079.5 li
3054.77 1080 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%Title: (spring water.eps)
%%CreationDate: 5/4/2015 2:09 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&BmULbdOtHHmd&jsLh<tJOt3k^A&):$$jLPA<L.3#=I+mkp[W\k^\s-R,-ral.PK.)c^?T=$uOEq\OOSfBAL)F(nZi^#,?gj
%poh(t2:P2d-%8;S%lt'#r-%,?UVX#1['X-kNDteXED?<rJ2^<%q6ee`GC&$dc!F)`^&E--*"U)RkusqZGB[#3eif\`F=ZhW_r:C:
%8n6N@*RQtAa5PXq@+aq,-cb%G-)u5qk^V]\?Vfo<C&gJ>H2R@*0bnR"B/:GD[>jH1?9N,7>uE+99-7O6%gLM9UcTNS8"Z,F[Ji.K
%VRQFM?24X][T68t/C?+$Xo<eDF?#IJ.sW`CEOK+<'.]?M'9l2dXb]#9r-7@dJ#O\DYYS9XIsJH@TCB1ipm",@H1@V_5.":F]Lia`
%YI/XA/TcN+,p"=4E2S251@3<_]RS)q]Xbdn2-PF2&ppXE"I1Z9CEYSoNGC@4'kgST,#^MZiVjpOrh!tk8,_j^Ipt=A5+-6ureEC*
%UCV5=#f")7*VLka7tV\]RHCeSG2_,!Y<Si1jUH<d?/AXqMYsr_Z.#6`oOgR_j5DFF@BG]']f\MBhX(6t#K]E3PHC&JBP76tLK[DP
%</Z,WXe[em+AA`i=rbph@p7J0eooB(7qI/9Co6S#c(QlH:!A*k=YGR\[jH`[_._('2ZEPl1>'cA<I)mid!.-^rh%pERuu/\b\$g9
%>oTWT2P3!?n(""HUYkcYY;nedQ;$hp"qgchcGFOJ@"+UFK7?BcS=Z,$E5C/h@sVQ;6GllRHS3'+^:kGUdOu\;`ht2F8,M<s^Fe"1
%`k22lRso96T$ShQ<OR(cdm'-K97/!84-OQCg7Wq.F_]aKamoTEdQAoUMYrdsjaZ"a?KQYsYJ`Km#,JUhqP-7pT/[9Q^!!eX@b;]D
%-PcVLf&5]K&,K"eegYMM(&P=]QYM`*jb/qR>N%Vam@R=nq:0&fg)Q%eRc(L>AG522EeFnVlZ[EIH^R@4O8?3>iI%u/oUdu<U,tF^
%@F-+`9s_6hJ*-'U[?n2B[+O^TLP(4NpZ-;?X#)0$e&0>RGWa2R0DU%IPP[H@(#HUa1hQ^.BPSmb=mX[<R.$+RT"OY:gfsJQ=\n\5
%s-J&:$e*rO&;rU0.%XXUqp-nBr8qD];T-*Dp[RZr31(b"Xh,l4ki<.u_uBAedol]K]P5!uK.C0$iifY11;uJc9)n<cY\j8i&Le3T
%mF/nQT:aBunHlSJb4]9<UsCQ%CMr<0L0mNT\T4`S^%.Yq1e+WQHT:9X%7i%Q<L-sP7bqPe=9k_%U8a]h;A..%bheWB5$n&%rQ9%b
%7sR]UXaCk^:dlj7M+UcR2,mM^<(D:=C&A9.+-(HE':nF"DWms8l*g$DNpledf=p\YIcutjilC[:Id5P`#!G\qjgY1`i!#of"f+oB
%T.l(Q3(SWXW!A<T)75!=cj;j]<2`/K%)O]W_O-o?,[DRpLQ/N0:Fg7:S]IQr7AQ,;5nlf`P=0+aVl**^.r%SFfSaGfZ)42tBSKNS
%,YmA\4cLu,`Qbn-\)VYkdA%>C<8o8k&gl+-&h!I<-M<%,hNq6:7Ii;8m:CeIK0RlF^\H.TbndWc3rb6rJ'2#1o=&WZr'Wq^re6uc
%5iDZs[,I_S47['#5le930g?!E5P97O]fQ*k2h*clVsZG<U&Ce%>Q"L:s0k]u$\-X`3qcGGj70ZVHoC&H:HrRm)eUIi^Zi<")ukl'
%K>/Z-Y<3DhV21`H`5o"?nNsW&m<Uj2-U`M_4)>.=^TH7J7ac"Y>HLr4eS*K;Be*o:Xf)uCJsP<B/Oe^e1u$8UZe9.Olclf)1h39T
%YXo5QoUEFkBSN'I]?t@M)i[>#OZ&@lgkZkW,G:7!)i@[j;fC8lok(m7YLh6L6K]MlL\7>.f6(BH\olGEg.Ii9IS1Vo4\aCYm"d&!
%die<^SLRh+:=;m@8Mb)-!D2OK`,oNV3]oSH,"9,kTnCmi"4j-?QI;Ibj+n0fNKF^GVKMC&%NWq4*Rt?7fp#6:9Lh(<_sGjG<`)=]
%*NI`ubnKU,Rn*(Fbeq'Dm[-ND[*7"[Vh'WS]l'F+T>WiH5EU4XIKK-9r+P[MIQVmZSL_J&Ncf/>/c!jP:P5:NGuB)(IU_n:r.O2=
%n5,%WGr.b.4@64lo?``-<K]R`k@nL'ds2kW;pV&bGnN6h,5rNC:R"#9o*!b,4-+P+ZTls6lK"kdF,&uZC!H%5ZZH&oo7qKEFe3,]
%-_:4s<=137^,@;hnN8T(K2?CB)K?)C,Q+<42KB41R0YbYI+YBh8gAR16M;[t#oKFEJ%^QU'`EAeR]$edH=>`IE<=WfXholg@qru@
%.crUtgRij*]es!(/n&mVbN]UXWW!ITlOU'+Pj&:<7Zcj:U(K4&NM*3`YZ=$$-$fSK"47QumD.ulU*2clLe'lU*J'fnUF!;B$l_q"
%b&>4![*]\A9P9/+(A>[s7!Bb;aneAg:Sgl`LG]Akdj?ne'ZBU&<Y5s[_^!l(_A\.kXCi(XPfKA?ThKO-N:+O.Q/@N9@NRg]!p9lr
%-Rq7Ki^5:Y5A-.77;a`"Xf)\gJ@/0h`$khi#ZU[XZ\QLH[:n3d16UILbkqd;`sP9d(@rp8LI;[[e2ffj5kCo84DiUt52&[\lW!j;
%'l$H2$MCh%KK<:]@TIE*:KmHgMtQFNbWX2YSlXN3/S7>hfrjq"rg_%o8*K,Fs2o8?i1C\]\aX7ZmgB)"r9"E;;#uKudS(+SML\P-
%11e8$"/6?_9#+%":(o,]U)$!KT]re'+R4M+#RMS/-j_&h@,Imi$FIt(#j35k^.CG[_7TccQGZ&]:Ic-QisuudcO\ER;:_-2=dFoo
%DjdNF:W#<fr#m\Xb1#TcK(plO3%#1P*j=pE;nMEll#YFJesVR2VUT'riG"hZeB`Qk3C-pD,aWleF/0T390^g8*bs*.o?P*ABj+?&
%N7)gVi`&mJ>ihr`5%TsG/XB7nGD7;A:)O3bTQOpRCB$qN]'Q++0AOmGgUi0Q.]RC#(I^Ng4c7ld-pR!M3-UbU>N`#(^Y".:DCQo\
%W($6/$R1f8#?CFV\e43a:_MTA80:LbK)YHoDdPtj4!V8O^LLW9nb"p-S8i@fB?OAh$8F??o'XgS^Ra?h)fU/u2u`K'IelfNIj1KU
%XRbnf=4s?MhS$Mk>;[aA:^\cb$+-'\XW4+_$^-qgA)A`mS1BZ[>+fSURr0IIKh`"#$tfs[5XHp>ifV6_Ji#fA.j-:&nj]W%1?s+I
%BV0(^<kdnj.)NJ`.VD.d-V9<Aps=s\$u->r.$(@d1p*FtYN\$cO;%OQO@!4tKekufU7Q)BRaQef"kZ'm-PJcqdpDpIX)jt81cAKn
%eG"4s?7h%t[*k-QMJBD<LZi7e`hio;?;NYZ"Uqar@j$&U'oM$TPS-ua1&*V>=XXf:TO\<bFKul_VXk"tAVd=6;UN`#,&Mpe7%UfR
%'R?^[]XS`sg?]ds2dE:\/b&oaJu\Vl8u2]fI-ccSmR[$U>WJIbn[+6*Td.X4@El\F;.3EK4kqTah0Z.>P<r=r#[0Zn'15Z2JVF`&
%Q$Y=nPgb5/A;nXG;Es536CL]GMmK'ncR7[?[?)^B$:MY70LT'#ct)&^@AT3Ukk0@op=9"Mef+/l]^8JnY,n=5M'f%*T;9Yqea44p
%fRq<Z.;Z]Sl1(hEN8sBMPrkpi(Oo`dmBnsrFRG(Mq"!U[UAd"t*<3i@+g.VU;4M<(\2dV-dHW.6l/LAK/$uM[CC^'T89km5j="XS
%rNlc?(&O7/[u'.f+$BHXWY&s#ZB*?\.tp"2C%NV'gqW$@[F8<LkT:1")DYb!.s=nlDssW#B0MjCdB^W=c]6_^ju:hV(\T^1[R\pF
%_S/M3RNguogfNK-A.'sTX!*hH[/MHmd`%\Z)TB7Wka%$fj<%nu.j9OXh,3p>5H/HnpA1!7Mgeeh2e9QnJ"QEE97FRs0.p=>`(T3c
%b>fp%WE(N^`]0fS6?R]Oog2)sFh(Dn=1Gais+V7@%FO1Eq+U<S<EZFTSB]TAIDSn!?EN]o<>AYu/G83()?-til8(qg/\BMWA[JK.
%^G9-qm.'@jcZoK?'QdAn#$!YKW%FM/l@>uGr82!K/-#?N5Q"K0LK(_8hnqVq)66P'j$-'305)k/ob"Qne`X:Ccq.:(S=5Z?IanY-
%4+e\#j`mVIfH#o#;FQJ0H2O_?cCOOX[V+FQdEfRNRGJk<l(D,AC,/!<TDt):Igie5VD?kF2*"j(na'8j2^\70a1mmsAn`_Z+cX%\
%*np)O=70+lr)Qs@g1"@WDM:0UO@E>T74(If]JsinK!dRf%bsBj$MlMVE/'rCEV@K"T13lag,g>!cC.)ijaRk6@'BUXb+XB6iE5En
%Z0qk5Th%gIN1h=`L^V&Y7sG;7L4D.PT->+0:G>rG]]_3A#-jW>dd(V^rC;@E[C>m;:Ib@IF/!m4J+\/YnghK9-5N$@8!C^dg#^T8
%KB&/(cCoq-ZP6n36>`A?U.^m)*biK*Pkb0/VmR;d<tnbgXT&u[.SH@r6L)jHAIcg28)dc)\mBK6I8ZnQ)D?7e5OS?;G[>rFs+?T+
%:R6Jr(Aj"Z5+8S!T9Gq;e7`9#(8i]`ISjK':OXaLF_L(?ZfT]hI-FcsQpKL)p/ZCgAS6]K&3n/!]]3Joh6YAhj1YF0^V3oTqWiAc
%U'ao+HmXL%doh084;k3mae\gKg<@=1(T1U.E%p(:oW<1h'SON6<8"JFfBhsi^A7HMc-c1LFT9\!NgIegqF>aSRaoA1VIrk]p1sUm
%'jL:Ts+LV@HR[J?96#dlQjsA7rhWZRcMmunYIk"PI4q\'^?TotkKNh-5<(Wm?#&P>e]TMZ^O:jN(P[Nu\nHhJ%eaLiQ^XSHq&_=U
%AJM."kI!CCc,RenrV`-,@4jFV`L$QKB$5G.M`1.0bOMM1O==c)]o/c\pSFb[pJ8*MIljjh*hQ2RI7>epSo+I28%&B[Igc-cdJZRZ
%1B#Och>c)nC,@")0=+9gEUTj@GH#/Z<W=<=aO9L,EP^oqP9cUMma%KrCb@G>\,(TD6:Z)9FE`N?4Z_CP0SQo!0$b;0pHO;g1!e_@
%Pk:4?!;?/*-.0,7(TnC<^N9tc1W64T2[mM%cPk,Z`W@1TBAG`)Z%'StdXOBHCO='2EiB0!eE.t$oO!*L<$h.L0PJ/*fc;*'!bqXC
%Hib]C^C]Z1MRn'^"VuB-gn!e3H@13pXrL.3g$C>m4NW7m'S_']G#_Pqc0'I_ZVFeKB"^32KF5%WG;MJIde<>4VMP`T.au66o^eml
%H]6S!Y%)#s*TPQQlEef7g2`:#Y3C:VXnPQp2,c"Z75Q,K*^?t(_F\riDnb]#mdt2L5+J4'BCkf-_h#_glAmIge(M8%W]QdE-PoPB
%BLM.3piJtu0[;T5WLHp`\gRF_/^EnNcqP:eE"d_1^KiluOe;DOAP8oFmc]`"F??+T.ST$EUd+6BrodF,qL?a,>hn-U$jSS(8+D>T
%8n.j*Vm@&*Z<\ZbK-\5+_KHM,?@(1p*a\K]d`6#!]trs<o:+(O=Y2^\jt7!E@\1N>i[AJu>"MRlD>/gH\he)_<i\H1gm[f;bN2o.
%GB;R*%adkA[Td5H*#Mu9=fJ3oC9C0T<.E[`*=hI9hXi0o>kTqZKY>>'.*n*Q;uCWAhL>(c.k^[3N;n4uhS)hZC8&:kX%ggaF"]Bu
%itM0`3%$3;<VEbQSF@k*s59q5._FMFGLS.<)u#o[E,\/9#Qal?OmW8<TXj!G'2*H-5PgQW\@h2J@?OKJF27us/G],L?FBK6Z^`V>
%;]20r6='<s8'XrBUY2;,I%Yi6R-CCWEF6\L"2<6IB$4r8kZ$5pipA2N;mSWJ>fYgBe_`E*\@Yk!49d]f!#B$S3CD]"*NpEbo!h\C
%H:hMhQ@1XB$!2I$-^.`MpR.)rXZ)d[CF:KVa!>e_Nn?M,:"S37"kA!QHP4>lFt`2d<9Ci*R"dJ*Qh?Ba#Im4"2K<>/2?_Md6TB!F
%H%WHnaecRmkFMgVQC_6cYjrV&5,?X^VqT?rPZ>#rf]qo=2=FOgs/r^UFN,ZNjm.g`SNT,c`%i+uZsHE/j8Jpjs4mDV!RB;$R,.N,
%0(%22E%l<dE`l+SOL:W>/SMjYAmr<k`HQ4?>][PB)"oU]Yrgb^b`9:_kDaI@WSo7r9D3&'Ggo@?l&A3?[52JgkKO*/1WI+d)q3*5
%4P?cp-U9q%\Cso'T4H(&Gk+)mCn+AiA3:kH>:ZBOmeEGuGaV1TVH;WBeYXVhqcR\N<rD!0R8/)V_qs;6YS=(d)bnYVGt`b^@b<h`
%B3O$CN:a\To=hH:o-SEsE-tV0Ru*B#]o/mbZRh!?W0=7oM9Z=3bL@6Oj;t"`%SM'UC(j['+EmSER7$@9`oe@"Y!Z.%Gg7\TfES,L
%nO<*t:2WFr#<Sn/ASXQ"s00htq>'h6>,DEa@CJ=dT""+_`/&]a$&=FRkCW%Ed0sp?T3T*A=6;tb<^6"INi$m8^-q@9fU&OaOn@NQ
%c"_SmLC9GcLK$=&m#O["E`^b[T'fA"<B$e_h#Xl=CS[6I)>=*o&'q#4BaoAM.HAnK=Yj%toaeX\XtOOMUtb*b8je;=]68dT3@gq`
%dmMpMfKX;^:ocg5hE@T9j@`P-hH[JDfAP6Wl_HG,bZgubR3\MqEu%Yu7Y:pR%A$GE879JQ.,02M,XH]A%3s*M>WKRNnO`13<^elR
%-*`S3&0U(O9eYjMn+7TJMJ>g\:RER14<2TAfg3<e6SR-3"mXBDD_f"Z"QO7oVk`*oPU2TRl'G7Kq8g'`G;L51\%fW:McDfUW2QLN
%a5%Wtkaei2YNe0OHs1j/]u>3Y``9]Aen"8aq(.qS9_tWeQ'Q7q<<<CI/9jT"=q]kE4?Ld>r>DrK<I;c9+.YJt[M_Ma>d1J0F[^!s
%4*)4[S:WJ9$-?#B?co>Uc(@c.X`:OqIhqsBm"[q4B&11(EL]Q9=lX/\r75.E-Hs<F(':iY[q=<@EmnPY]V+!NBQ-;h_<=#I!;.Za
%V'a[jR*e^m=,$(kSR$DdG4t#jrFER!HiMlT[LI,hH.X9+[S9Y%Y-qVX%Af?;3;6`Z"s`hl_(=hXNa:W3ge.P8\PCACcO0)S332=5
%54&-H\A]fmED>JSHZc2MNpCR#2q@Vi:9?jjSQmeX*^m.UrnUSbA[g*TG9%IaDU#fl0&unI^Y&OBeO&Y]Q:orEjEaDZM\iHsmu/!F
%8s`d<e)L:o\XeJcDu@T4YQ"#[J$RtXl.U:#b7<0?#qFcYT(1.QZcds`?f'cMH\)+3>9#=Vht:oBrmRF[CR=80cVH)(6uPoO@qBrL
%GP9>P3U'#JBclg;pLGAi08'1hS-?W*a>J)8"2Y)FZTA$-^ujc.M11:(do-liF3Mq:lLa8"F4;/t'pPo'\JGMJM_2>[=s[2+AZhhe
%ABN?@a2?jbgSRB-^LE@lCY.4o(Tl!7BB.CLG;pH^P<f%e,iS\j=urP^)n0jBM;T,.Xk>k"&D!L=4hi/"L*WLI0G&^W!(mf7nR=U#
%AH%upp&?C+-YKL`p]#QnB7[GMH=tNmq*T6o`4U/9HFu?)%YbeDP$d3amIR0'3Z)#-=,50ln)5nu@K>rb_+hLjQZdFV-[;VY)krZ?
%*8[/(gNbXM657LRUqA^Cln%UfI;<IN36!Ie?2qJsQafJ(^gVZq#'#Kn)7d397+T\6l[i6fGm*$i:[+6#k:.$gq:RBGb;nYH^EZ5V
%+@4U`Hi?)2mdmp28^=/.GS147OS)BYlL>pdqn`7Sj8YHkH\#C+@bLQ&2;'CMc7f-An!RK'O*\b.0)8t-6e6UJnSWOt+,;iU]o1pA
%Q[&&5G]6c"K3^B*i!`E/jms+6_M'[f1?nP-EB:^;C*21([Q"]G+UM5:mh"iUmr:J]]iQ#\6-jqbEM5+6k,Xu^1Gu\,'JF+V6)d5q
%I63c1r4.jameDjdLm^$k_<L\<$0@->j_<=T*Eo'Ykt?]aidf@GD=Q_[dWGua3+L/KMXN>hla]rbdhdIRY&eO]e7@5o6E:(5q/lcT
%9#d9>M.SR8kn5OkHU\c@GB09bcrMHLI<(J[?tnecGXM_-NgUp].jjga0j]NIjj1jDW&!c>!H-@,<M6rVo6XNc#,eYHVtd+al9hV9
%AXq:#Uar0JqKj^\'cR'uHs.[LB2g&*f,%_[LEVWu!,=_8aa4amD8&rBNjApZ[%*E7(_-07Pl\KT\s6]*hYS8fDDYi96,I*/\/p8,
%r-6`NOF#cNoPF@K`cFbI*q/7o)GDZZUEdRMCM0t]X*XCbK9H\Uk8D/a&b*6DM_qD+*A'8j`:kn3[abQ-Mb)L3UrZfL.Nb!H+\6gc
%<2YBD\.Dh+S#sk2\fdMEW;PqT*0NYU*B.5L6/@,H\m&=3?\gsaB#`l*?Xp_F8,jHtTE-d0qOBJtZ`*%c^U?Y#Q+N8&,3]MEk-9:\
%D;H*'A@u]mTN4T/C^dD->i0E_I[l'C16hMM_1*\SY]]Qtb50k>\*eFsh0J#;go<7j-4c.Jf+(8OT6.6m=h<-'FDK@kdHa<ikh=b1
%l\G5,"V90B5M^Xo0feX?S[O!5ge^:Uc1@g7n#_4(hXul??Y[&/f'f,&2l9CD.Wr(;GOt+<ep9)e*'APX\Zm4J\!r"spNs#GmFK*?
%?^lE2WPc6r\Zlp"GW9Jes4dlD<:A=ta.$"2f\,6+rTMsLV\NHdg\<tFop31'm<_WP93]"LVu-"RQQJHBGFGouBD:]B>Pl(<Ian2+
%Yr8^)YI*`Q3:/7[gr!-=]O%.IUe8,i5JN0s_i<We[Je,(XEbY4:k]Y[G-f^tRm/g^+5D/m%FLiHbqB</`q7a)+0ES1O0:IAanP,o
%mHV*A%,tQ:n!(CT^Fu_]g:d";;Y)U;H?[&O_nWb1G^ei1b!u!RlV=d9HMd]2-eAjsp3PO>r%qMimr'7>f?.=b`fn73DejtY:\G^E
%)\6gd-S(fal^QWfIp`?$)g@noqUA5]pW_l\qP\W(Gideg];tJlVgF%U?CgN]oh"VW=ufbb=d-PMPNa#i\bK2iId;?-CP1baQSqu0
%]=1bQdr,ZT(WS:dpR=*"RZH((]kuXu6X7=OHMfM/G!Bl)^T=NOg&&:VGHZGWG41K0d$3rg\$'4E5"9IcQQn'3rPm6*<&FgTAoH-s
%T<CCnX`i<7G-7uqR%ToS^\G[JE#%ZXg\q(j_#INIhcVm&XhS^;Q28`em;LFAI]jh,"i'Y0mb_s?dB*WYpImqmn#bL'qu6L$mq+Ie
%C2^-bg2<iij%2.^chS.%d_/_\eIT/@]\7%IjlIg,n0!NN7,N@aS_!P#f)Fs`+73t?f(DM>qtan#il8U^orVid7;IC"n71M!k;@Wk
%XqA>(q'ldK+klh?ri0#U1kKrEX\S3ZgTSl<pLs6frpbu#:36HDU,BU`/WO3*NUmXDm2sAElW]jfT6=D]HV\3qlrqRE!"$kEC+iX0
%]]oEW.G^&Jm`+(Rg$eU)-aV:@aiuE?ZP%F;hG(0,VRG^lD)H;D7Jk!ZN<B,rrB\WmI+n(X%bACsG?RBZ\*pCT`p&icr@0G&]=E)@
%KR=g\:/?/+0H558SnpTlIsn&YDUqlamXFIQm6@`'^%Ip,HMRE(FW!bj7AA74Btpuro45CW(qhtFYADcN3PEj$GX#ePZeaI?Tl/6A
%3ke1L]=-KW3,DCN]=lh"lL>,XG((N>4;tp_2#dBiG4j-u>.-$I;?(?o\uG-\gKPh5F$FM!2W#UANL-\,ocCi.pZ_1S[AP)NcPFW8
%p7enk@X,B2$:!a>q[^I#VN-%=1p>bbVqh^?7TA2i_n;nE*kf,%]s^tVS_S+1TC!XXL8-]fqTe'3ldWr'Q)oP#p7:_ph76[J5Ls3/
%+5WaD52U0E/";<KFY:/sD`rtk]]2@fM=!7j*a+Lu4Zr\Uj**Bkm_&_;s45m5%c>iEhrmdmokr>fm<fm#hhTa)k&._75W<tBnIoiS
%EO9gCkc@!J9+J$&nEP2K>o&ST%dR0PmV.%4hN,.VjI,ls#^U2#+4(#bgC"aZD_$#R:\T]qpTB2ZFZTG&hu<>FBmuQ&^MU&:C=]?+
%[l;592K(M'LXWI"mF.UKs".:V:SX*5NCe'UVJMZI:flPX5M0_2iqR6^ReL@dEPm.7FPNb.p);dd[9&]eT"Mh)dSK?";d"=^/Q2l`
%IKSE9<P.D<Vb77hqrW,!BfUSb0:CF/&(6QHG1*(1%pmXZhcj!t<'E%mA-54O[it2%\2E/u1]6U!-V&M81E78G7`VXX+LiAY.6!)l
%/N:,7bd>C]ibn8^r$l91T'pfCh5nmW?a<E+q"VXMrQ/kkSSGie5_"3`];s'P07DNX$b?8b=ThmU&%A.b<kd)T`C2`)h(%=>TA>I:
%S]JFj=!-/hU7n%P+7Is\.]eHUbPs"Z_rQHQ(C+s2CbE%G49t](2JIVEpa9a-pZ;nT3/9CU>hsMbQ.*q9HLWYuS$M^Ml1/<9'ldiF
%b,+FH"QIYZXC8hVo+S$g9SZai`SieS<@7Y6I\BiM-b[7+0BX\>ZJsHXntAXS:Q&(nAB`06CH)POWH)A'c/,,1cS"sG7)Q)):+#.#
%>.4>(96)'aR_M7L]Ida4Z=nW_dJIskAUi\g@3RJY>G$d6iU-KeS#<%,`i]4Mf`D!(Poj^g7+1[7Zh*S;qmF`"gGOdEYJ7]8=:LpL
%Sb/?$dDjpVY7I(S04-Zl]qZZ.7CG3;7Q>a7[^kG`+tITbgjuk6[!6hoXb5p0"47E^4C8#O$b_-Tk$?_dF)*4A*hL+Bd!GQ\8&Llq
%j(lF/C=Ltkf`!YZKlT913*+"9<nOc]HgV?XY#iA\`q-rNrI+Jd)6.UMg:]R0X,Z>'Xu`GVC@!"KqR>4?Eg;OtW$eKW^,AGBqiknW
%et&jEOSoLg3$!1^qkCMN2"3,jf;dl]B<OML0eb"PUs"N8re^/c$-S#;W./Kn>f(Ndl<m)[<D6-rl[jigjX@TGP$r4uaR$h1)b3A7
%HM=5O)K*8gGuO`cL'QJff&D#JWV*V1h4bsVG8i1o52L1i]^^9eWj;B[To)L/au*1dqX6pMCTYY7j)2SO0KcRaAddn!8+E)-k"^?j
%oi!&]3i56=q+/f:3Fk_M8($_j*'A$GUP"VD)c/K(H*B9Xr`8@Dd>^>\Z^9usJ+Vs&40s\i^[J&ab2)!$Z/*Y\Cmam"L=n\jD\"d-
%kk0QMWqYepQJQk72)XO_cL!ftf26L<F$P47]%0"AFENR4r:R*:J^63BE"-'FEV+($%$_Y+6$?)U?oNII*9hfOo3Z#bn#bst%m=aZ
%PCb)$2*1'j:UR9h\F\hRm;&9dkS2'9haieATs$Q0=$J$ODt?Q\jbo*7HMRO0F#2=ppG_@jT5VJq8T'%Jp:G7/H$n)!O%sn+Gag(g
%iPXn\IkoW`4e?`.s/Wc/DDKB$CeQ12YCj5qD]`p/GJ+6*^VKndHM_FJZ.&L!8`NYm3,Np*cKj`F_ENAF;GZaFX_,?#$%CA.Fg9NO
%G;^e_5C(bh]mM1Mf(G=;TK@KF&m)7tSZg4<%l%.8@t"*pB]JL'Q()QE/)(/hL?Wn/GDB6Q\2k[2>>HTT^DTXJUmnFPqbf:5abA:u
%GDpZD^W@[^I5Vn4A3]feSpu]iOl.(?[5d#]%]4l7h%/%sUf=^N2!:=?KK$\\pZ5Bfk4TYhl=';KOK5I^jQ^f*J`ZVZB(`(jeXl-h
%]r03N>'n<S*D:uW^QU\X^hYeL>nc0r*FHKe'8M-`gYUcpfD=BBp<?JuHEl0@em9e?FF1s;#^%A?5(B,NDL_V*j!,$5i9J=C`g<Mq
%KH4[S7m&cBIY/C\I1.!8d,&(,0IUZobeHBJM/PfWjoH0pq!GDOm@l_0Wq![Xm^KrIm=$@@jXtf(rc5W[idIg39Bf)YKl7XP%o!$&
%[>jhaYA^ij*tLOn_Dgpuop<-p*7S?_XE8E!DERh:2icDE`)U25^t`.24oVs:)]HdJY!TdIICj=jaj//sgRYP"DSC&VdulSCan7`t
%-VMWUXRbFWJCTR1)b3:6l0iijYAYMKoGWfnI5PlFglD)6H&)>Zq:bVLn`K[aQ?Bl4gO*rtRVd4U'K3h!>.*k3>?AMY+!7YT2DUE<
%IbeYop\38D[pD6C?11P%dsD&XG1kp`othI/k3hF&a%tmKH?2/shRgBW=64?"bOQ8Bh:A/>g`<cjN'A_"PG,!pLRla%O(Yq?U#,O&
%fdtLu[404`B8<5<4G_iWCd)dOGq_`2-MB1)qN4bB+0T@U2h!`$UM7lOd0dY-rOEn4.G9Ip*RpuaFKb;rd<]T<)<M:3fuPhuY."&5
%^Q"_8hlhf'hn`?AFT:m@N0&:&5^Q_qhF[Q[IoY%.f%NnYmP[gF[G6^XI;*1h9i&U!2sTqr^#uNro\4-X6[s9#DFr=GP?U,E$[d5,
%+!5CV`hF2>-I\^aT:b]5e$'lUG"C`o]uVk%P4Y^0hPnQ[/(Q)_[e=''+f'g-R.3AOenN]"+*<qj#Ho1S^S`.)e((4>H'S6nmi-1g
%*d9^3XdLsbilfr&hcP6[5M/M%-=>Gk=jg#K0Akpj,$K;4GhKWbr`<oIrSd8!n]Lh*i?QF5+!9pbcZ[JZY1]D``W)*7jSR2]2u>\7
%:?2)D-`=*#X1df<g@Oc'Noj)dm6n^57SOQ-aj0:7\je*BED5r-YQ_LjX,$X,hs>CX"*[0TD4S*VI@3i7GBQ(8p#YKu?5#cAs3Wg_
%\fWO;c-,!9S/m#c"mW6o,,Q13+<>?4[C*b*+a_Sj5B`(Hj6>`F%rZQm52DT2q_DsSO!h=J\kPbV*\8NqoWHZuJ)KM1aP&T"(h1!n
%7J5qNJ+nBLl1!o@p$hs?53X)%,bEcIRh*uLh7K5Sa*V`5J:7R/Gh;5aIt8b_\rtg(=d[:F]sO;_PIka)=aKkV^82`3=lU$Q2V.>h
%>]UFPeW/jk]iA\g^$2'udJ_Z_],k"F^')VU-/EMl*pT)PhC01;^NVS+m9VcHY,etlP4cCdO11a(BHQ*GW/p9A94r?6X8b":X,SE'
%Wk<tlB.H0fet&:306Le5e8P'CX94R[mCaAXkFGK+dgnJmM6t!BmG@_3f\1Rlo#"MB1PVV?#rOkn^G4g=UK'<TmQLC8`*"2q6_>=8
%GiLhh)C?RF+YjYe4pC7s[8u*jT4E"cI21'L/UNK9nDr>oSaTCD,Kb5b]AEB9=2-[g7e2K6YhMZAiu3M4?N&E!F4Rq/ojc;t:e.G:
%YRC#V]=HV_r>pA69BYT9dnX44Rb'fR4F4EWk4IL.j-r!L])Ni5.T2+(n;R-d]>beMDU)*9m_3PACu&9g2>g?8YMT4jF<7&\Vli+h
%ZEC0rXS91Clbh#RX.[eJ[XIiM`**)eI,7W5Z%,uf5Q-]+N"W3*Zb!X<EqqjLR-1N&CMW6*f<r"I?\bZo1!F=@&\gD@f9;!=)$9'Q
%cI.pAS#1L[4MBKV]6R)VI^SNcIK.>BX-_&(+8#Cuep1FpG#&Sf$,Q!&_oqHm;?Fnqh>Ph%A=aBoDmrc<2mO8V;\$G[5?,3gb4p.X
%ZZ/7K^4!T!G;0t*C`2h:^e/i@2"Xh4P-Y(g^3sXHp?(<,W6c"&BY/Kbqq$-lXo/`00q'=BP#%j%,<4E3Mr),Gr$I7B1`nRc5OSI[
%'C>IQop>ZEf$gP_^LqQLq:D:;Fh0Nd)g=N]-B0j2\`2j85C19?59,e&hES!S)MW/</@kXqA%MU+pX[e@5#M?f`^q%l[7L?O5/]Ni
%:\d@igXhng=pJL.qtcl4:P7m1O5"M,PA^EaXESuF-o51pYpmkf$r<?2S)_K4Q$XJ?mk%:(TTOV>`nPk#Ff=RQf=t:+O6G<S?>jIN
%GAk60%'+.+iO]Wh7^P+\7dg;?.aPlrSp%hr5!;:<a"93@WhVX;!H3_)i?!L<5^$[f[JH24s7K9<[!OLOpfsN70D_'4U6E&`B_Mu#
%[9l[C%H$%c(AIAVs/i!%\+Q<DnP6fGl-[NF9q)"MgObn./,eieafH.o>5-U?T/_j1?E_ANops\$_.moecMON!H?/1'g:KA\D"uLl
%HI>rsD`>b9IVmN<)SQ!udmo5+*k]Ncke`]nr_Bbns7("$mJ&b:gsu,m)kD.5*ji\p4+'c8Vu"-'rjV+af#R66fkbgqS_87#H$4De
%mR><-j4X"o+<E[p\\\RJ]Gp_oklT0l[tq&fIqVp@-O5XhX^?3A@.<:'6%,Xg]cI&rg3mq$/EeCc^=H;h_lT-XpMb"nf8f:,4qHLW
%F3#qKLs:F46-!WGiP01MDX:A-O,(uhF)$6'?[fT;=aJdmYW"4!g_i1H;"1,J)35WM7Le+a47+_7PD-/(5acl(a.@279_jdUqh6V9
%hqK[XB@bemDr:$57h;c:k^6V2XDoXP[@UXZp[S@=`kQu5qfqGSX(^nVlWorR^LM@U+umJ!Sp52c6iUAf*^7,`rb1]Qk=]A<L$@3S
%p9U$K:>a273_MQ`G45DTC?kK:PO%K!p;cL`_-:$i1q#pDl.<Z!G7JsUN:R#(^QKaXMn*s^^(OCQ<H/U>l;lXl\UP4D3@+7e'mqCb
%$sn(c"Mj/I_Ii6%.6$bp'jMl+`VG5rUEeiP36H]'NrC,u'r@+O%e2ud&>bl.=+4B5gA":rk(n']9>2F)gOW]rDH57;;YqupQK@VM
%;YAYp?#/TOZ-F.P<Mb/-I1GJh?SBj$No`V=fo>k'!%1D!.#d`FbsJCi:oja54&)5Bm'P0m`CR>]SK:mlVd@C+r;m]`XBCF-%&8X8
%EL54V1_)41=J`DJM5#mRT,=]W\5F2G)!Y:p-@Y(40e+LnJ&0T,(2Hqa:Z2[f3ik/aQYa$K;56bDe&t=EEgus)h.U'hD:A=K&FXB(
%6U7J9'S;-+5ikCur"K_hQR3pUb\U$E^\!Ah9@4c0Os3m#Q?K28aX*3#U;gnYL\1$X:242M"dLK0C<@'M8i=tE9rG@0&\bQAhuhMY
%&CM\$?@i\Ll\HsMFs4&d4ka1hLR*b&(+&aW1VS7]j;EMDUEJPtPu]b<CFW"nM'(a%Rcc!h@N<oti"LO7nn%,88nrpS-L%opX[Usi
%L9L+6E#JkeU2*@I\tZm2Q3>>`FJcsS7asgNn9$>PW1&bXIcL%K=lY(2COW!SJrc/:5$eXa72-WnV;[]8d<Sh3I-DOW&dE&%V:joU
%oO:?=1"Ii"$R7m3q-pJQF[B%KV(jQeG"Uu;3)&j"FJgh_Q$d[4_FM@(0;p/o;-pVD9Ba>?9klDC<E>KA@83Sie!0Fm+`Da`g[.ma
%pkH<P[8W3b=Gt&3cWa<nS7k4KW6hT^\%dbZ;l?A`j'!9(2"r,i^$l[T=6_`]Wk&*)Zpdib,2Q(SmuSt_NMp<FSKdXoW$FWD.9^dN
%<!=^7_X=>t`iG3p2Y#3Dha!?d1^b>%3G%5VN.F2lb_*`5e.pA/NJEip+pMWS@<&S-m?e]?C9i-l/[?J=VULbj9bitbRh';Q_Y>)4
%.`DbA8iqsJ?W6[H^s!r)n^:rXHr`6X!qgkZ>4[/GN4bmZ!W0T/dRd!9egdJ>M-p^,XQei8U/=`95,D!H[)PV+';mQZ#?8[a>d)),
%BHG;:SrXCE1TB+bWkg+sqE$@I]0T,kJ_Q3UMRZ/T@?&ObL"OQId1\7Sa"&>X@)c1(>XSC&kd7Y&>^;*Xpob(<bnN1nNCnYj^X:6>
%cJe!K?fQ,b^A]%;@lX1cnMri8J!&4=RbqK5FTCk0,.G2Sp"0![i8MGrn`]@i_"6dW?fub-niu&Z\:FKY3?Ps3lb&9brWh5>W;7V*
%5N!r>PloIHs*t@&gV:T/EJWfQi&mXlU(M28nkj*T_c)=t&hAkJRU2_F<TL/d."n8r3WOmLqTRlRlGAJnL3ZXnl8`F1%jmb@@#Se<
%4r=VKoMt1gRU.CY0Vr=l5*u[!,W/m9+,kmaL7o^8l$>Gm_ZmMb"s"H%#*VB'74&ib?P4[k]!AFSR%R66_bp-oifLu\A:Yogk=$/B
%Op,D-Ku*gmjH'\3i$8X3F@pRbcRBS%B+C>*`%'QgZ8n01\t7%PL%i.&]=]fcd;V:rC0%U\q9YShHqCSE_tVU/W@3-)_kVjTqE\Zf
%*Z0^fDh76MMUojf]u4m'L^;;1]eD'TW*t!<RW#iIH:a?>TOE/'6ec\)*_&LR=(HS=$cDP`icL(uO"1RXZb=d90H;_YNYdNP2sa;Y
%cDhT3?0#.3VnG&C>#b4*U+eZG\d28dfB$dQjE)QtX^uXSe!fd;GcodFVrNZOl'0=dWSqrmcAQ^[0D4.YbiaR35J7r0j+"W9?9f2^
%S7c3lWdC&J3U32IELFQ8.nn7RHb[G[EcpiK)-oPeq\`EnYOVPoZcb2>T4`B>)W+=E]M.A_BpP)7I)!Jh1551`fNtHEr=\.[=876)
%ojo'!0/:59`qP\`DaEL^#mQc2I)!T$(Grju@=n(Xhp8RD"dSPS(h'<4r@BI@PWltnkF#VTc:?CFH(+Gk?%k">je)I<I@53&^j;q[
%6FKYQ3"G>rkGd&u`YNm=$pZ_kL!kX]oe[$/b8_(+N"_Y#QtY21g3ZP+!)4)l+oP.><)NNi7,&DP#uS4).M4:8au#qrl"Gid!Zde[
%$>=OW\r1W3X+XGYjnj<8?H'@n^)&gF]bjFuXJM"lN#<F7;7[P>[$W!gHUJ9C`,J=aO=!8"9"#%g"GRYg+CL_YPbtSuRAO+!hG&ef
%-:s:Y'k<C5AG'B>ILRZbM?5h!fUo7$'aN'gO`BJE($VgO;R-I>-ja$_`5NEm-CMR[XXDdJ^9D/`-C?+qOEsQ=^d95d+06u2/Yk0=
%bITdk#"5=,,L5T%_65:E'#oZ1&a/[U:.14Y?Sie\-[m,!W'Kf$-(`3%9GWL&9&bJCB]<"m:WjN1;@!@^%@r@`*'HTMSXI?dO^(A<
%0=8^@.$;!f06-QIc;,EMJP6-C0;V$%Em676<.^YgO[k+9i+aJ6`/AAE(nlRI"<fME=o^kPXtTa*jAbF-.hWF9@*_5!IZhXVI:6$@
%-]$V,?BuCj\PHspT/R9U9q,&9;#2iiK-Y,2kS"-(aNdt@/ttJ;KO4:joF'45\.QdPSK<W;eWM?/71rL7&N`/(;.CpS8n-!"pI*MA
%"YeCj1kD9c<U!3S6)*p%X"%5JETlT_`V(<1L'0/pVDZe=8DhjXWhfaF,*=sd*`Y7k1t4o0[^#,HilA%DGInarm)2G^b:ja9L*#^W
%<-f#5:uV^'U.U:R$LKr-&!`6H9d4"M`&@`#N0s?3*H:Kpl^=WsniUkMRW/dg-j9DP5nsca7?F1q/7k6=&qM7t8:@3WdeIMB#["n\
%(22jP&IU)JbmDX#K.#-jd,`!+RF;CS:!ni0Fuu[`,iQ,_mDN[p7cV.G("F]6kJ>7ITPH$!%2,K@@n,#0h'(&G\I:N.5"F>20]@ge
%>AD?b`1D2h82$_I'Yb]R>hUi>'V5h,#+88'2^!Dhr_6'++tTI;!c3hg3)_cCXdTSq=s%L<Lo;(YfKUE,WPno:T_[A5d&DGjUQCL"
%1$a@D8X]j&`MPJ$0<GAQ%ZhN".O;>53YsVRbm.NAIn`MPd*Nn&n9ZA=arfOn6pC]27p:i^m=t78-k(4G8QtliESeIH22PHdL`MXA
%[E)-78:]V#?8?tp'FQ`gN/A)L:'_U<b=8R/M:`,jX0UH9(.m8S4i/YQYA5dH:*YiIZ^j<'gLu%0cO^F5@a>a*W_YDtS[oS`ZmAZa
%M^fDRL\!5^QDeo64eEb1L*/m`YlFR;fN/)8NFJ.j=;dZ,5mL@^8r',mnY!>;Z)&O?)AokU*<[im:`r)q6Hg&[P=C>S,TTaB7qUiJ
%j0[h4=n3#8;uG,Y7m=U;RMlH*+jO6@39TdH7aT^W7E(@hi;QQAGTLOYljrU<J/!'f.^UFhQ6*tURg7m`+,2BgODH;00-If\Bp!4!
%]GOg';lV/RVLl,r_.O&a$aQZN'mcN.@TYK@,pAhe7,(;F76T$*0s*plBPE^)%n2;qR*HU>*iD!Xp69!j'&%&\oSn6sJ$[(G1s9Y`
%"W][6;i=&4-`rNQ&-sWmIH$Q[$7ujh)@Fs3>!UV.HQasT0fL9n0/Z]=W_5V5=V4g_[Ol$]=,bgUN.\uhWJ<_I"e$X_/9+"F"R.1R
%B(I4.Q\U@uT*JRm)EChW8.'EMU*bRtZ-5p)3'Biq-PjYc&AfnbD.jM.&95o:?YZ9C[kSSYoFR<HS>SR@)Z32G5a:@1`+_d]5l=Pp
%!:eC2!M!a^!$ou`Eo;&%W^X7lUI]]pa%)7!1`o/egln-S,"7[s9=qm9h4L;T^q+NCbpR)IUXd?*-'h0C'V.2BFU:VLP+\ckUSL-$
%$1o?'8.'#aI6&sm8PMD-1a$7*+=/,P9%><W%rrFE6\5s1D-EVCdQ/!Q:VMZu"AhT[&AYZ'C^HJWPCt3a9KE36PB`luM:1W?8->B4
%JFd&oLtW+=/Cd@T1dNrrjb&;4=-?0,UaNi)`<%Pul_B=Nn'cgr@S`e#22ENdK*eI&K32\U7!g5Z+<=Ks\.PhS]kA66(,V!nX<MTq
%@51cP`JF:Dfg`iSWl+s0!g)sf:nr.%M&3$#bZFsN4HA!c9<oHLdO;Ve>qAtm+p#GlV!$_Y2OXQ$-]h<&4X9+J6U&Dd9?E\)CSTp\
%_G-8F\2<XulhP@o1V5DOS(\4RjBBP,1P5TH`Ce,Q(BRUu(_li@E&,7hM*lVP)'U5i>G8;!+G<sS9`X0[TIBX?kT([t&d\r%gt4-T
%N0qQ:B@UO$:,5gIqWQRn#UO114q*N-Yt?c>I==80h-!a>)no!)JZpN]MG\rIiDm[N;jdo4.'G)TL;\dEXp.<"](dHY1K?#gqVlKs
%3&Pq8J9">B'2!2]@Za\%lO$)e`Fj1:1@6n)Bt(aB3s^]3@bN9aIiK->.YdGJUnA)Z-kTto%>a()#m\O4KUfCdb-^WE?=(]+,3>bd
%dK!A]"Hb0MGm\=%@Nc"%0ii6'=]l7:Y"$D5HIS[gTrA_FQa3R=ReNF\js;7[NAN1^W.Y7k.Jq,Pd3t\fPU(?qA<'5*-U0N"A0=g:
%=Xfn0efOsl9QYMWBN5@N6Z_ol_!ub#9N%Bgg2U.3kqp4,a9Nn39oM\2>9su`iV/uKKChNakX]0\.?a't_"1.eq<'T2jn<5eFDP!t
%QGl=SgI.GWSij;NL$N+cH1nn"OGA`5CH$Wi;V5qtIn>7Dktl&<A5Z;5_[+dPj$5&"*n&oD;iTn*`COC8dL9LgJr$ZmU-e[,E3jBY
%e1se14!ej'3"9Fk`9YL9()]j+WraYUaLm'@.C$"\Flh94iptFad))#oEo\Ani9(*d:@TeUH(#C.V1P*2"f$c3c8mt]KF`s?EX:1t
%7nYZXFCIcRY6hR,+OZ!a#`TKN?oK>Qb9YufVH%X'IW(ZU88gsT;Fc-Zo."8_8ahb!8ABiES0,?(@\eRp?DNsi'4M,7O/Ad2X1pJ$
%#ULspSHb!\4qbY?[b<Y.8N&K5Dk!UA'a[qb&I444@0u9p5[o7;<F-T,2Z^[]Lu@Bl'GP6;?fHnfL@D?T%Z9(Qj0*"_AlcVmB'TUe
%h?bA;a/5)lf$%>@WdRnZR;ifR6!SGmO)P?V9gi0k-jr)#6\nX78(8cA+_8$7=,D9&&O\Fa+3X5sX%(Ki)jC6'<RPJonAOqt"CPD5
%im;<#,>q@3JE,Iu'QFXT!fE7F.Nt35e0Nlsee\K@-#'j(\G0?=B>W\meAr18WIQ!YnDMak:m!-GL\2IfAUYHT$eASHKqbQ1eXm2:
%_cN@[RoVC/;rF/h>c!Up5XWOoK=_:/WQ'j<;T3kkKiR265hH[S'6p(H/)gD6,r,,FVlhlFDk^f*<B,)!Qp*JQ8o(3F_&*J\-"7Z;
%mh[@u5bI*K<!c89@\I:?&sQcl5enB2njTE:qg,NkA3).&F'-f9j-A6#Bg'iK2%iH)oam*mR1D3tr[U\FKU#aB[ibm6eKYE6_[T$c
%GPGHTZp:]T$aqP?dij)&Bua/*<2sJ4Z9KKTqXAWDr%2k\^k,Y-WDZ_FZq%VnWA"1L8ukNNB28[#JKQgsVSG2_;W9r1nA85bo(1Oe
%XTHD1?oYL__`ik.o*q[\=qj5(VHTL=ZCm;t1cj#?(TFKK.!1"[98Ib_\g8fD(I\o51rY"0grKg9TsDpFZE\#^'o+>Cf8h1fH-E*Q
%.W?)2-49B:70q)A+3kNh;,s^+_Vss;'!`0H,Q_Ip'6kseMfsaL@#f#(Mi(&N%D55F(R]1#-A*7A@0'::7oHNI.\D,#^8T$t,IUNJ
%Se:%Z4#/JMWPGom#&n6a]!)8oM4s,W,(\i$bqtUA&jf+&0*VoOdW-QnKu;sr;iTX.,qKte<'DcUnZ.7tbmW+Lq-=/n$;;Dq<O*TA
%OdNQ^gB##rVPD*RgOlG!1*a,)ckIQi%<k8c#*4L[Z&1N10QMi'^oWCBTm?Op,@p6^';oKo*Y\fU9;Ltp]`H\%@ML0oOU8,M`0Qt[
%Gm5D[,%:iF2`>.nk!=@?,+/kM:buN59\1+YoFaZ1=>rSi%9=1?Kg7%%N<gf4OF76r)=,`m')$]KMhm-<DsSn0o0ok&*X=C2i8ERH
%L$2o<^[VCX$N\CX)2S%NXKrJ61(M"n#Z,=36tgZ^]gV5&K@Y^#L+c"R*3P--qb2pj%<6.<7%qO`Hk,DXhBRH7eJ`\Ni+BuBYUq;9
%5o-q3KAaN2L4g].J/k&cM3oP,DU"D7.J4P*`bN^3/n)E6('GW.@R2,u#^[AJbQrq-ZnM?mH$n84'T*/?M$Q;>K[+oeoShIu`s@>3
%qSoh</HmDQ20HhS8Tn/l#DmDq,83(-LG@#cPkPR!_7N<cJXAW_nVd9^ks7u),#f]h2<n9Nj+Qel-/Jq\nQBL'ZG7k#<rnS>`p^`t
%E2RXu#SA@k!^;,N8]FD[n!U&3[O<e\d6fF]Su"f1>mpagf&B53"s=tYHD!]rU^?h;3ad"L$4d91O&-736P7.ig#^6[Y=%nOYRLV\
%ckp#q+V[d'N"ESZ.(SgpiLiBc?^h,jfC4-_e\em$0-F[j4aY7)1#`F0('+J=_J4HY_!hm`aL+QPRLNqnMknE;*9h1rLH\rs5!05p
%EBrNM9[e)o4cfdDkA6:W:ao<Q!22SCE\OhFm4l0p22<iMa;mB=m'n2+^l]rXJB9C5]q-eGr!?Xg`:HJ>mu`1ImU)=c*k]ZE#t<;H
%)(k3HCb#-Q_C[_eYf2Z##V4ddCG4U%kKGXMN)u:n?_@u\pbXs6l'oS],'JdQdCQ6\2@:::g+(j&-'g6n7me=R;hg=+7(_WD#BnLI
%>-g1f1POI;gbI<A1P%!*XMlK],i0;UBNU*?c@E=sW()JWhEm,d=pR`Z"g*J'^QI),O,:IKJh2_;[>,A)dOYmG*#iKkCiX7CAt0f"
%!g2#br<\Utm3hB\H(t;XnEhIh.eK+[3%R3MW=UaEfP^fR[2]i$GoW+i*0+&N*3[<p3.FbO1/^o#5@F:sT+<o:'R52EEYi@:1QN,)
%op%ob5ftp'\91pN%#qAZ^GG`!Q=f),AB%;t,`dZuK7B!/3f#EJ9UZl/+hX.X6SJ'X6f<bVU;/=NTtA21!SM2Z%NHAI4YY'5'3C;E
%T^tatR@e[nNFA+21khT208)YSNW#i`6L:[Vm*#k>1`_LQj@kMBKEG_"@*tDT];d"#lGKiZQ[rk01c(;G#Z66I!02W?W]"bPr'^dY
%%^\W@C2aF^X#:\G@q#iSk\Cf,@YYm"@hOL<Q4TYL"F_!E*!Gb/j#,nlKV3]P[UDd9QAQ]en?&E2KqK:/gZH907>)k1+(8@"$n@.!
%-VeSjDhBCcK(\)%Md$o&m!+TD((4j?&1k4gPaZP@X%(#Q()GDU=Q5Qck%R=1P+jL:"!glU1MI(]P"ZT"[qs9g3o]?(Eebk/5A):(
%oH[LqKllb(^e$t_AB-<jbs_BS6QteoEKAKke+!gb0>PtLPp1]+'i,>*Qa#^6#)kpm^^nLu"Y1C`1VqbAo;?j]4:,riOEeV$*3FN!
%8-3?lZ`J%jiXX9E(XsoE&V(3*jFG$K,SgC"c\<R_0Atal/(Y'3,j^%-]c]lk;4gB#"JYU/3p'oOmtLJ1`+V,=m[6tHM>%DDiTMOY
%02[%`nl-/>hhn$u8?g2R9%7Q#DC9t$PpI\NIY:l3]8e>%rVV*mYLtZm1kec=nG%eG8]@ADI41C3hErn:1ZCqEN=*L?Sd\.&;'d-f
%Te<sK:!USP=X[_6b`#rGE!VUIG>MW^#lnVMKME:sBqFD\7H2FgQP_Xdd_h`h8"t1EllgX%$&9qfr$HlP9RA%rTJ2$^Kb?1<jDP3j
%9,-TK9AgcW#tJLO"gMA,+QJFGR!GVCMI#"^_[I?)('K0gL=R!o@/H)sWamf)#__g4k*ZCmZ,ffYg!0YC@P3OGQkg^/?"6F>-=&Q<
%iaV:AC!T1U>^iVM'CQ:$:a.PMn4\AL$ES7l>U7i4C+cZJ336ULcIkjBTFhfFBZ4Gb5[GQ-g#s^$YUGW3"kmM!,DM&l?5S\1H9?XU
%$^!-e!>#O0(tMF*62-VMPu&Us5N6fTs,XG$TLcTP;?a%fH@fhKnaNo@aS5TtA]p3tXcP`gXsEcNN_tTL(JQfA.tkK0f\`LC>KJUm
%`4("/Sn;)/&*Z0Eh=CZm&&_Q/RD`Xed/[07.UT!U1c1m+CQ@q_>1.j2G#@b!`2(M\,6F)R)1S.g"?cshF!.WM(hof`-c-5)+42VQ
%UG<J0EjB37,t9gYG.oUZ9;8Mo$krp5%7=d?'ef,$95O#PCFr.fR4.]QMK!)kZV3\9(XbjKG`+(e_E=8&1M2D;/E&1Z45+Fu35JFd
%;P\:'\VENj<bha>!Ge;5M>P#<$,M\$AL&>@s!.WJ+>Gb`-elNtiis8eEXi^o!!%^^_\p9_ib&QF?j39?Z>*!b@tK]&3=g?HoA_6?
%*/gRS<J_%AE=OiTG`,KW;hnAmI#9h53AIDV\gkaO7DPR^(J(Kih%>-%*DD/jg#R[dPNpXe6@If>.0l)W2?T.gcf*'_\2thA64R&A
%%mm'7Z@U!9%aA><"Sa=M!(VpmA:h?\-6*f<Xc^t$U4@kL&GJN7$$/8:7cma)ZuhOOKIGcs(bKBU_8QFfh2:`Q6F(8MDB3M/%(N*G
%Ooe0C%#EQ?XRMhdT&f(m7:bn,RKWpkLts=QJH0Iof/ut\XCj0%2&m7l9%[R-EC'&K@@Y+BT#;7>k4%OX-%PV'$)WBSk"(QjMib(_
%Eu>5,Om3mD(FPJ=$VF)l)f]c5=5q"4&?qQ:N[kep*,dGq<_L:V<%8A\%MAAe\ZqWV*Li,m$)dkRg(=8mc</kN_\a38s06OQGrDqC
%8esAr7Y3$aC'&NOQXj4G$@u2#/diI#F%b(cOCR[9SV/%1d--rmX$g1X);]JFO3aW"7C&C-blnHo:j$=BSE>Ve:r7Kk*$#MX"^5.M
%)nq"uPB%idOV4d\`,@qUb%rl3nl.WV`]5-l`Q(hJ.:T-l"M55K25Pl>4?+Z:M%_k*:^]6k3"7/jWjE(t_L^"(C%_prW2`J(OHs9"
%S%9mj2Qh(n5_La6":"6maI\$k")mA(QE$R1`pHHGSm3-55F;t/!I-E<ZoEYlA-V`fV4e%EWc2]u+icFtT10YZn04([$QjgIl*E2`
%R.JDcLN=JBG"rG'QtM$K&qke>d:-nF2+=uV2ilDlON7f!=QKrFA?Im\n4_dU(c*-di,0Fr&kPUrl7Cua;DBd:p?_==`X"H6_7d]j
%B6+KA,gO(1Z'!,0?ls9>mI3PIjIDN8_M-OU2dU;qeH%C+6.VKqF,Wcop's88L8CXn1B(W1NB#=E[k)*,?t`YUA29HCp=4&jV^*]P
%YUCdRE.mgLk_mg?TMnnM_\CK;R:O^.7V+P*]e>>KF<W"e/mF[Qp#B,9p80k4!?`KJ;$97^N"63a*QcQ'_B%9#/o.'b0ErnqPA=m<
%O\P[,Bq;UVJU"?m?l<<Y'tMo^QfX2:&E/;+/7ntjBtWqqQRm1+jq@l\1MfWWdKuQYE!E#@JZ<[(F3Xc@&4;.B1op8JS3Ti7_`IQ8
%:iRriJon'!]*po86r$6P8cAu#NKcT+&?0[.b`G/#bi8QVq'"Ll+Kh6?)a>$[_fGj:@_3Dd:E8(T]U\St+Gu816+WUi6g3:0NjI)Z
%/G]ilq+ajbU(ui`/G+2g<L<&Gao9P'1_U_J[tMZHlug05OGP#u'INl_9llFT7OLGV7QDZI(E6.f`fgE:@<b>gPMluf1E';`QDcQU
%MD*nQJ5HTBWdn>`iHUIfQE0MYZ3(s_$`CHf1$"2rPpSK0-q_1g2an>MD9rNh4qq/Vb7$QiTe47iPKD"`(Dp5T%@!s"#XeZ%fE;1q
%jF6'""^]_hT*IInZ%-1,_$Hi1H2o2=@ZET<)baa"G5rpsh@&K)-'G#UiA==3'-qD4A'G=JWN^@BI=:ggL6<Dh_UejO_,_k0:a&0n
%U-aWufnJi:3?X25.SfRDR<2A!=q[LX_?>S\U;48e,l>hr:BE5>m!NHp#2meFpd,YSa,V8R3@k@NC`q[b&ulR]7:ra?\0D8]peG73
%ZJS$P.IdT:_i1^Q6(#<e&@;o0/!/8T#:!Ui1U]>"b(O%foEbCbZ+lnl8ceBL.Y>To9M(Vg"W<b2)Iagkl4f*QYi'#!"oqIeU6s8!
%I))_d@@Ba&OqU2-EG(u,ms+pe0\=_qNahQ;\`\c#DCmHf@H8XS+al[D.?UEB7D;?%@:(cs>XX?FX>8F)M0Ok$\4G98_&J%XArqCl
%L^%mdJ]CmJ6aO7\:,4i7MBj,//^=FQKfB)Q;$1htP2p#@=!Zo\1roc%k]UrVAJ819B?=?$0,\*GW[;=*m3EqJPmJU$@J@9!pma')
%ge"H`,X>T'(NE7f&PU!D-+jZ$QtD/(?k7)u#TgV`X;-s'KH*.0$H!#K`WOgg^a8R[C19$,?BSE,W<pirB]U3bA>>($?L02Ihk4km
%Gn_JH0&Wf`d]$0]5KCp1-nnC8CZ3(7#0PCT#tOL?Lpj'(^]lHM14gmKr>5nGT0r>3i_[l6r%).pM!DfT+DM.sS27UII$8rNPtRPD
%E5G9Wb=u5M9!T0c&6gXn"WA6`\386'5U)u>(]-:\Af#Z#@C,+*'GM7,,+W_,H'P,N2UCMk(ibD2CJ_5:3BSRoN$".HZk-FQOG_*n
%l9e?BC$u*(]"o^L>"&jGj:i#m.E$;t?7a3WSEg`K]F^J4f:>LO73NbpaJ@1U5l@QcU85_\'U7D!K_P6K#_%m=L;JoXYc\'A4_*s1
%idr'^:dnFV8'Z9kZM#%(6'38/.@N5=<Hr;I@Nkn(PWLeU,6=@NS:`9rbd9%>;,5X3,cnh"G?/ZC7"P+\*;5nKe)NW%j(j>B&S\FK
%350eF=qOj/BU:6>*%!+NON*(bE2TrM+<hd,T3G:rhj,r48f;5<7EC%E1D<^ZMuo$D""35]l%hVr4!m^/%Um:\KQnB8>OY"XB!.R[
%Y!>rQ:,GE],!/&X7U\.t(24tc`llU/jt'2LRen9hWCTTk&ncd/1*rF=Zq5/>Bd+_PPUo+aj;&TDK=cb[/N%`>YgX't:DNXUR2c+I
%1E&(XoLSTcdLcQ&BCkr#Ao0,CC.A@B"D=A&-?Dtg#I,X'*6lT[[)JV6H`\*^A;X%gASY/K@e35Cmi#:mVbb3S6bB'$L;iljnO#a$
%*[q[>JbIN.>6K]dfEh,t.Uj#&X3Y`R.:"BjY,h`82tJ#tgCd*X87K^=7$<.b]MfQ%@Om7Z(mIQ4k?ri1YQGdm8-(^6==$kMB_df6
%SJl%DA@_SH$MC2V:9;8L&nhr+!XudM@uK9)-(,DN5pT$F(lm6K@3CY".#<iM[&=X]O"i);(nBZGJJ.`_ZJ--U2IN+mmf=ZtHa4"j
%6E$oDrQa72f'buaqir#N.F0ZO'1K^eo1]<X%Dn$[A%@C-M)7RcTd[0+(UcVQ#Ok3&9k,@O[K1e9$coWV)tJ[hlsi]-;%`r0`kH$<
%.b=X)6YoGAO])\r&KG*o)S83MHScrJ`YCdY:a>El7`'D+cj2Q?Q%tM>beaf71I!PLn&<s5Y0d)5i^F>_U)Q<.6oZSa!/K2nabd<b
%,2B>8P0M?;&'m1#,:$5Z2DU^s:!Rj#Ia*QcUeWpH#s87>d(qjP\<cM^$[bpD6N\V\6Tut0lc7$;[a7Nu,t\eG_K64[;E,6s"Nq?b
%MDM6be`reL'dp<g`bFCm.eJ^WOTQ^nm-Qn<Ot+J7BpjMp'oo[o+9a>(;Sb^;M`I'?+;LCh4qH?)+;H9<EGH<qWN_'\`0MVk'k<S\
%9?NohMNK#tnQ@CgY;.I<\R7s^9oaV071C/5_>PZMd%V\o(2(InE(C.N(V@C:4JW<8c9;=uQL(a\>/QjF9A[KQb1.so.T55A"s/,n
%%5(Q;Q5N8JF-)Mh.OdC_)l[euN/G:g*Q]V/CV0@4.S\T-ScL);Ji'pEKh,*=a>\^]+@uS1-(d8S8HLb%(8_7-Q:s.DgkTpdJr>n)
%o$rjs#YaXY11FN,Zm66Q0B"T$0W@Ci`M,1Z9I`eP;LY-'-;,bZBqamLPT6Lp'?BS4"`Hk)@.R5eG,!-AP9mQ#A^GCW9+JF`S^d-8
%,R*\57Q6L*CXJ?7K+ih+oNDBO`_kZ->_\m#m(eVp#=,9)>.f+`V<4ks!eaJ3hut)^ZPZ;oV2=A$PaYGTT`_%=S;Ao1X$KTt*-"Ho
%\M-Y#=l6JY,<urD"$RF05YB9<UNn,]7a+7COTqb^JRW%n.g,BWL9SmS.5_/aWdpu-lVtqJF5W:7q00'-;W%O(GmM!3Unf1d2J!)h
%/D96G!p8[b'S$R83)jbBPe88J!D^a*nJn-`46LuL$`MQO\bJYO$rJI[aPiB:eHQd^WM+hsA$B'-?6&4eJgj>.[`>R(m_Ig?/PKBm
%1",!TR\U_\J4_<@L-c<A;UN$6WS81bak'ZdhGOi^,ds2J;47M8(#Pe(Wg<`c17#:tW&,e1Uf-`,,<1'^+dEE/`GmY1#,tiI]]"%t
%1JTq=lQiWYSkWk+O@h".RF`3PBu].?.SWJEWhd*82YV8h-'cCW+O<?=I(pBuk$1_/<D8?adXisJ-oCe7!EGEoholIbB4;E4TLspf
%7ccY'8hT)_Sq/AJKpg\(>Yq9VUpr7i\H02f#HlFh\D%m#8O]<U,[=0B!fi7WrsVjuk'8/2UC:*n[Ws.f/JhCNPZgn[dNn23=.Xsm
%("*__/%D6E\X\Vbfe#B^!S?:O7>kVR5]R.)fE"u=W?tW+Db1:Qjqo]`KL2/Z.[:JP1>;h0nc`]s4)[BL8jdCEE=T"mX14fpWX!_o
%`0^^.,2li:RLE/p@+^5SH?)99]Z+ZMK.7U_"W4IS6'W`Q@>G)N'mP]?Wh`PP(:^3qJgqM>TK_Da/>uGi>/Zau\Y)PENJo7'K!2+$
%2Ge9!dGc@)B"4L+Kod!1VD:soBm1nt,m..FOg+p-:o+5J!e-dN<2k7KHH(&0:o-JaN)Nqc:aL7!ZH=q!V:(2l50lKZ$Fh][VKP4i
%<!rO3%_2aCb(9gI#?@'d)3[Z13L16D4E^8-YX.7g<2oYm8mYp6W[uh*Zf?Ll&25?uE_rT!1l@ue)5r]O!b=AA"'$i+9IFW;J1?h&
%*?GtqW>PA]F.B@u!]7nVgi?4;^$;$0HipBJaCaA;K+(^^11I;fW`To!>u2i8#KFf%6'YEqP70[6WDj/2R@Kig;lL>.A1!RM.]E^/
%N+;D_;lKae@cX8AWDmnjPln!b'&dI'RXnG(%+oHTB2L#dUf&r$/l=nEWFQp5b>Kme;UJb6?,iDsO@m508i!%KUf&q?09&sAW@U&a
%]Urcu[H(<5++GW^1rD^!8>QAS:pQB<Up=OB9oGcs@A,!/@kj5uiD?oiWhcB=6no.N;BZJu2Ei2jX&QSi=;PqA$HZL944=VBP.&^n
%_.*^Qaebtpb2UV"`.r/k>>ta'7hK"*3(9s"Y2if,q#]7Y?:d2f1AC#mpe$uDCnM.O?qEcfIpaN(==PRtaUKI)_GYA;'q;WI@S+c-
%)6:tj/6.YH`!Vn7ZD>o6dLe:",o:h1QmELC`f&m8/GTod^)/WK(ug!m(MQGeg;_EZW23*K'=O,"K0hVg\E>EqZ@jDW;Xl$eab<r>
%W@m*\V5OC(j<?IB\<PDCjH>E(0P)u*;BuaU*->oOF\nF%>8MHc11WJ5=NNT`^e;37bXG)=H)ZmBaYscCcqBXM2QtEB?HSP@"m?a=
%V(Olh9!jT)jR>elNPnfBn<XKKr<+_Q'1pRU,3C"%'s7iUbaX;o.O=U@-d=?4$5pUk%5%pM8j,b.b#"H4)5mlkb8C^e+_t'N_nfdP
%JVsk#9Z<Ei%MEjQV"W$D0:_7F@mA9\pf.eK\o:=m122.POh&!*B"r>,%EBMq9I?+sXcjVNPDd'T.[0>G(8mH#b>]oGjOh@XELF1(
%2Sa!WR0o9B#t36.B(G>;I",c5buB)6:][%g11iTcgeK26o,O;mQA"r">'QoV4),h/.A[2u-5RQ34@a(*Ma7B<WF0kjMHPmMa_:#Y
%"42c)cji[38cspoAM?i"?b)*D,f7PQrGt4uWgJZpSKTl\E?UMYAYGP=VlXM@kko-G3O86hRjjEYY>L>3A@<$b!1P:@29S7>,-><N
%`,$pY3m..qL?2iNU'W:gBUQa1N6sb.;b9<<Mqq@B`A9!:2bX"T"2_h9!LtWKD`oF]+Ipr31:VT;ihRc'1->g%<4K:n/cn$Xh\VJ/
%7rg5*CW7#T-c0%&Yaf$5mO->sS;ap,TK/e6Jm&u9)8VeD`,froOcYD'F@L4HVoIt:XdY'>6s^Af<;=H9a)ml;eZ![a3@H5%2]sNc
%3ft[$'lfd8Y>G\Cc7$%N-A,DhCt0>@=:mV:<>!uB6EO6"g^1)GG0uigCM_Td2@7b`^6;*K#cn$qj:;k/0I)3fE_6^hc,,$VWn97s
%ni.AH4j-t<)9A"?>uZn";4b&$WR)M>%s\niLu4-LPa_o(.S_I%VlE13.\Nrm!n=Pe^6s#:b`j-P-h'A:i,4T$</SaUQUP)f-S&q?
%LA7Q^HuikqKm`H!6r.hWT.3TpnS1@^,m1EN:Y`Cn!;f147p<]V7UVr+6,V(mUk-V[3\Kt:f?\aHYT-8e,+pRJ%*Z5;]?:S'oOho[
%>;Q%%cJBcEe+8OMg]Ba'ltOlU/HV/M-oAE73=o":%IA5/"p7Id\8G6U+OERB@&bb&UCq%*Vb26d1Uj/j85O[f=,)lh5uH\rTKuGT
%MK$q0nQ2]J#=VK(#BPDlHkf&)"[FKA+)OtQ&>9J"@@@&1Shmdm9&*N/-ks3j1@>Pc]"hs3WL!%K'!=+<hW.tgggla;6R*_lMV-8]
%q5Sh+B7[0/,E)#Cc-W.T@Z$*5cnjpnKV%@`IX\!/"g;o3O#N+3eRH<U+Ao8)7.)\L:nh2/beliJ1c5_GS1#1B/l7ch8l'it%T$-r
%Ps:c@@$.1Z9#gG8M$tk;111c#nJT`A(;Z_UTVXNNR13>!F)H,^3cIrUFF6RT3I"C1(SU!n7Q&W\_ZF9]=&.9[7p6qSW.m6bXb[BA
%Wo<2u$_U@%[;>cu%Vc^3ZOGL'7^^QD0DZ/r<5UX.cN?Zpi!2gSm_tC:.[3%>`e8'?"\,kg*';<>8HCrr=1ud/T,'RnZGpMH"eXon
%nY7#&G?P!.C'Hs=&>USLA"sl&&5is]Rjqf:2>h<?!CWsH=psLiUmb^ab&\,D3ag"BTB<@CbtnFa$91:KNTcfV?<JPQk&Xm[P*Sen
%Xol_(kJ3ls0P4aR-InJu.+(qN-Ij+)P5F;LS5aR8YV4]LCWJQp\9h,lPJStA$ge!f91JL/S.i])jkd6^;Q=^OMnq:i9IZJ?-8i\m
%8u]mZDT>22EbWUn*fJk7,#Je#^lK"o#U]i_aJD0'=c-HUF(_"sQ>42Te3(/Rc51PW[fr+5^9*6]Zfk::9&r'K%_S#6KgT$k.2>uJ
%V?N?QO9ecs)(h+Mg`0nJX7kOXM_aB<?%A?[3F:aa#R=taKjpo_S1,7'nH9f(WJ1LY6ELaGP`KZ`J=85.8FE"eR[+M>jfAh0j4NkA
%H.Gm1J/1*Z%g_CG!od2NX]'$D>KEf5>?7mHbUJgS#1I6OVaNpl$:'h[eENCN<^N+K`2i$_VqU=@)$bJfJaN"f(WTu\9:!_T\jJ'A
%\9#Kab/75?U=U=Q.Fmr6E@H*YHFQ@J&kR06.0jTjHcs4&>U69r(@K7po$HIY)"8upa[o8_^'s3=*8`Zb1'ZrA11D1.p3^W]kMT9m
%mq&b:b^rWU!YKA]V$3J@>]@MdZZX*^$J-"a)Q!\1.bs"qf_?H`2AHk/V8r\0;R`?udh[>24:FKCl^'WD#qc_9^;?NC5,I<)b@`di
%+J&'?k6UN\?A-W;nQ2"rn0sVPF*53Jf+FL(]-7fA16Q"D:1V5A%eu:C'>cTa;uT1Xfl7*XV6ruj&Df^FdPS=A_e(;i.Z-n0J]2(r
%O`TK9"`;[KRD`EamGtG^)WkJW_%nu\m^N`Q3RPh1.E17@L70%QWKQR2g&5I@RO*s9E(YGK)e&P18nYfH/di'.mrH-g,Z"ZicDMl4
%gd>c6Vn=+GAiT9YDD>VK[I@+KS$C13=9a5SE.)I6/)s;[hFtm:!P\*B_AB2mP,&7AQE7A$VF*bUb<LcSEqTW7BEg\$poKN:E!Cck
%'_?G5OTRgJ8/dil<\4/J+U=Pk;9?maiNacWD&rDN6?]oZdcEuP5:+2YqX!$l+kru0-"!TliMR%7BSkk]iMW2K+SrAITMgnbMua06
%b%V3[U59[Ibuk<e8\Z('G000:m,@kSoA[X2AX7*TW!ZW.\b"-6:q9-'Z/\)GPnG'<l>U??/^-533G6@f_D2f1JkG?InIQIfb3p7_
%B-=/&Xcb>p\e%gnN>\L#+fJWkkQM>[jW[8QEZh<tk'`df:_bTf@V*eN:eOjBR%N<\C*&#-_&`FT#aGg1+Fmr,KrQ:-oK3O^j*!T3
%_4d%'SXPTi=V)ko.FF\l,V!Y#A?PY_:fJpLT+J80<3Bd(mi7;/%>G$CWWp3L1lm?cQ;#jX=GijsF+@5l@e8DKMb)B]]Al.Si=\"L
%[5s[S.LjYa\JCF0ED2Ms.TQ(ciiaC`YZ)&eM@6pn%Fg7`eJ=OP!ClVAOf;MMqsdPhR]7*P1=f+R+rqPKM??W(O=#DWSP$5Jc'>U>
%SuVTY/rn"5pf)--aMe3[[Gh^M-jQFQ<L&=*(Eoe^EQ3ZibLDD6bijX;!@a.Lh74Y(NP!B^!Z4mh3sI<FZt++BVW77^N')&UJ%R3W
%Ku'Fen52%>+WH&6/SS1mDP?Zb&Y:_BOuY1ubeb"`]7K`f1X%<_,Ejp%6*%XAi>cTt5GZI=:0?/KL:g+c\5gdTHR"Tf"g2TF>c1g\
%Uh0n&ZK_7;'[8;9=aRl^GTOMt29/2h#JI-[BKj;(_,n&,CsAaU?_r<#p+co+?e)[W>>SUkbVcR$k.Cj6_5_M,^;2_\,JnY%o4:Gf
%]*h!7F,@3dIu\!gS-N)FZ'*I'dUXYVZ"hNj?dV:^CKA^>=K)B1NjD"%P!1NAlB88PgqWZ5B&ZF!ieiGrC4$_"77uZd<fM#>K_'^p
%XnZch(X]6/9p.a0@3DZj*uL)dIWJ2``bh.AWQGY!Wq$#mK3aZ[]V/:!o<;7J<A(G>9+5j[!*_<uQVZb+Xhrp&crLT-0.gR99:"4t
%R-_[u(TddWV:&>mj:'hDE.PDT*t0re)rtFI<6kTSneWe93;*fkPs6=-5%%d6XU6Zt!HC*W<phaU-^k(F.QS4i29(5P3D%PE)_20&
%.U7f^Bg3Bgb$PJ;%o?GKX+F!oI(q'7[jiK1msGBm\5hK$+pQ\6fW!kKK<W5VJ6S;b\su033"W+B\nBE*^o]G$D6L1h_6'6)-m'\?
%:ecXZ6fdYC$g9.pS>K"=<9>63#Mc=uB90V!aT,3BFi8_>Mf*)+'E`2WGcR!tU;5QV&ht()?_#O+K3tLdKmrE>4=b:hI&hi,a_ZmO
%[jp0(P03/n#2`T>9-K(RjX=9=q:4SN3BbP]F*oJQ=m20j[jp0i,L/1Phl:YS1oEZQpf=+jj&!/Yero:?3h0OPm5Ap1Pnq)qLp,/#
%punDIH51p"2bcX77]E7"$1Oo^hgVX`Y[9q#BnV^_Hm)AYk:cjbk2*Q0QK($Pr%<O"iV=+:$IVsVot10Z4:VDr`tL^u)%&YpcptH4
%5tD029Lo,3lFu[dh:9.'Z#",0))tI6ij8CIf;_j:I\ZBJSttB!S`)Vr.B%B_[nM<8MaS!P(fDG2Ya[kqCjiSL#r"E4_B&TrBE1.>
%@3&k#,M\G$L;6(i]o\Oene6dcJP$Wu\mM&>aLU(A+%hD:SD7ht!1%>=Z-32nKHA'E'D"T`59J.q:.qtGeF,6o3tO\"9B^m9*GD2!
%eF.S\3uC7*9^&jJH]@3+KDO!:m^0U`l&0a(kaaX/3uua^/%*iFIA\mUC#O4R]j:!)"*-PeYWcOIJ^uj^>T]s25^H5]Y6tka@)OGD
%fYbnD^fgtlHO$Hqp7.b7l$$O(-_AdQI<m;,(G9ra$;^<107Bj(r5F&8/F#B)DJ9(&W_Bp07%+r$Dm$C?F>fp6RtI*7";m@sH<kdh
%IMn6J*I"kVGG_cO8FpYE!6&OI(tC47M[o7W.Ea1^a29/[Q;`N5K3#;U-jg^$Fh3YTY0,q]S]MY3A;OQm\^Bq9/X7%i6eq7S1<^5+
%5GHguV7<Zo\_$24/#'b3n3H<r@5-QCn=$=rFQ2U&e18+YCVWZeh=?"^9iJEDjb^0!F&T`5cT7A!I?_@7P.4^W5>1?<+oY6UhCIuc
%)h@pJYd8J"mOu3,d,&s=Z)?uu%m#,n:,ep)[ck(WSir0aZ_Z&Ml1A<Y9q"g9Vpk8%2MX>!UgC7hSYjnPoBP#el8D;H%?O>SUpo%G
%D4l40XN,dKcf0EpB)(d68nI3R(?U.0Ips$<i[S/ojaF2pO1\Y(k$F"reU$hIn<TrjiW<*pEgkUdMrl-CXT^3D1?S5SNt/JdO$#\\
%NF!VIO1n;7>R/Vb<2pg@BLsXTqach+BPm1fY@b,NQ=tD,@a:X8bd],ijgfE.^0;J>"cu,VFM<@'7LU2%R"2??%&p:l9Rkd>RJLSr
%_'7o9,fNACpADh^EQonLI<+Fpg"d+!Xu.tU<!$d9!sW=G?%\"^FK"U0(\=[l^aD@H7H<B1.k*:*%LYodiKNh@ZOILY.:iD!>TGi!
%i(XQ<NS.^EUCTb9c:1/l[6=^&h&]jdC4Zm)DDmI%_jXtT&%8&PNonhSbSAmf>dQfF7c>MkKL=JoQ/s@)nna7bAgEXsp3uih+@UR6
%!drONC.7-RCIHgdiEO2i[/bP^%quHj:H*6[.3KC@?;?6SBa&p8BY2l%8q;.1fg`'R<q96d5a!ugHJESH:<FQl;J-N>"and5nKZ("
%,lS1!7S<_moV-*1_b'b;SA\M"@Y`t<%R]t^jm<V.qomt.Kt'K,mP/gq<8J,D\'GKNO@4FpdOs^i6Vd#F=M%hi-RZ>mSF$q*3s<S6
%%C4<Hljt[/oZKE-]u*q?YhK!HpC:!u8Z(rsmX*ae-\K00om^]X3m*!pqn:%5mr@U(SGNe/[_o1pLN`WhB0Rj#4]ZK^rqi>o5FKH=
%j1!A:b5VJqV+j,Z8A3/PdXA<apIH)`l/<K8Z!9lH,MkDj.9M<SpT?%[U,i.W.OSoTlm"Al>&f9]EgTI89O*K:V2dN1Y$RssMSE*;
%Wjh\gr1PUmh%2?EodXB:='0`2?_N3'mh-s3>F6(hq69ZaAoYO^%pofN;-4FT+)8uRa<'l_oCapD_R^"jB->TkS^`q_,VmtZTo`Bm
%'+,oDj.!;\I&uNd`P@Q,0X].FVrk1'ok[[LC8:C%WKrA_Lc)DQ[+6MrQ()a7T"R(Om<QR"UcD?3k/f8@6Pb?5_9IY/i5!7RI!2E<
%hiMQ\Bm`c_-2ECMq_1l_@mSGq\?dZK1jQsfkddOt##8B+gR`)liA$n%8FmP&paloNA0E:+Q!SI6V:tfE]Bco@T<T=9$KLVsk%CUB
%qjdo*Ffe=4LasVJ/kW)'D<g+IF$!=N,Z3"HUA7.W'C)2Bj>^NsOS>E:kulAT`Fm_'VkB@W$ZAP<,V47[l4Lo/=K7!6AeX<><1V`,
%"cko+q'&Fd4psRUdh(e)n?ZA&6Ght7<1^FsLa:;5)I?Tj<,$Fk%Bq!:e;"N"U<fY!:bFfIN';lh8+h*>6M`O4-_I?T3dQRQeDi8H
%fhQs%=bhP$A?#7TC`V*]K,N9Rcul:1*C=))\bDop4aDSHn-(nl_@HP6*M28Sd.h-7p.0:2@U+[Pf40@(kVQ)Xc%DJ&-aiuJSD'04
%)TtY$d$Q3!c`:brGr(OVFWj73/l\8o\'Y,j.WMWf7#+MHUTH<?``VEFAbcnU8k4m3T;DB(eUPT9<.W<B_u:LK=RX#C@8g05*[jC'
%#dL@'`jlFK#TV.__4/iilgLdqiR6H,9\X1'K>nnp1d3pHW3a[]c0bJ_k4sdLO;ph21M6D7.BRK1Qfp>Z)q^iQ@TK7"P1EN:]H&Ia
%p9DGYI]4`pW.Ih+k0P&XN;,_a%N.mq!$6"W]LB%!c9[WLG(Y"!]S5fr5V#IoJfrTq3sU[UKC'X^l<^/)j`XK)S]HhcP&Q:>JXpEZ
%dKbIK4gU<CGtOXCY@fE=1HMV(0_Po!l\(N`n8#Sn3R:s7B6IBA@dKLIousB"-!<D&Y+D%`h<:qQ_U^MsWuJ56b[>bZ1j.iK3iPp$
%A>i76h)!aP)1L1saEo8u4js$JPV:j3Rne.a,MoVj!Vf=qI"Vh"!qJB4HI&\+DC"*qSa%)#eI-,=k.*W2hg3s`SHuK5bh+/"N&S6n
%XAk9n?c0YK`+X>e,"--]+W;e`Z+3(2RN;.l(P"sq,b)0mQ4GR/(O0P%CYGL=RlUU0E+W=kXf99Oe9/m/Z;bLL;mA3@%5P9S=g[;6
%"jCe7#&^r03\ICcAN$q5BO3Nob_G0LI"=&BMC^O&"-_,>N3A=:fh+7=r^:9TQC\kRH.qBGpKfuT40JHDDuPNEs3p)E*sV5Y%!^nA
%F;#sl_%VlGMI(hP1Zm\ZK[GbrGpJM7dn8I'20hT^4O[.g+Y(g>PtiAn2n%h9mda&%km#*ho44G\1];!Uf)V:1`(_mQV%\jZN)/\l
%Jol#MSllM`8-aS4W6(PEB2QRi7p9>e<Fs+Uh,0KG;T('+_F;1I/BV6iY7SmW*l/:o=lluCkB$g1//47!^/DC5k"<&Nb(:aSC!`-!
%<ogXF^_JjV+#e"),7.>I67XfpO78nP=]qbAe-W3-`65gO.Z:ZE2d#2<Z\kc=KXALE.Tin10GOsmEs&CLK_gS)d+c,4.[p6^#Sg.O
%e-A1cKr:l">&S?eCK_'%09Z-On-U*g"]kf=Ik$c$[f$E,W(gg[nHMQ^bN657.AEW?2]P6qQT\,g(e'$G3Ya$",3AZI"&WT;R>BJ+
%0GNWH0/j/*<f62P6-15jG5t'^]d\)TT4Ap_`uBCM:@bpZofoDcHL,dW/UF.iO6I.Gi5TrX:*/BNi(gH^i6RAODL27saF.2@m65tc
%+]@IX7mN@&5krYiRo<:a'enmLf69RL;_?Ko[,_gc%P%4AWnpBTmfp/6k.!X^hYWH)O5TeG[X:%3q[jG>N"PNVNB]ePT>BWmq;uRD
%\b1<#,FI`OYRt$(K1Rr8Gc\;s<Ip93eg-]`'c4us*jr3X>f+$?7<81n?bhCS#Q+.NM9PB$2NZ#BT)82s4mW7=J4M]][DbM1ACJ@&
%%XAMBVt^%DQ%)9L5B>DeKlaIO.h\RFlOJSi!q19%N[R"u&@ESAUOb^!a[P1GU*(!lEXRJ,GF)JA6nZ\miSPc>,\#74!>2L2$@m(o
%)uN&On-f)dmJRLk:dX`_hiSGW.rVr<>3joIoiPrT?87MrHrEHrc31#%GFX.^d>l$TS5Tf=%*DNl.AgPpKB?K>d1+S[^kZ8MUgm4K
%l,YI'0kfsr7$,CF8AF<\DT+U?e?)Bj%kGq&7^o<_/']l*e02,,MfUT96ET5e$lO8i36*/$**^;rk85Ji"L5$^a.SoHi;Zth%W\Vo
%#]=%16*EaIEEQ][L3?+J($6>GqhB7*_&S*)-(:YXbX'Mi0et-#6%Y?Wf.NG#d"BS<k_(r#X`01jn.WJPnpI03(X+UI<M^p\r?3Mo
%?Msug(c#?XBtD,#jU_+4&Qb?0O9*TohmUBA_iuNmM-H@"][^kgjpU;g,W)1gEP`]Jb\Km0Cg`8h*l^1*T.n;>@=bal0LmKPPb7>r
%N-:pdqjF:OE78G&C-O5V(TQ2G?L<O<G#EZKftRCri(dHp-W@OEh;$+sIKi*Q',^ZVQ@=QaG=/AlC"Aj!l[Cg:-UmnM[G?i'mUUP9
%'#*7[!e4a85D-qe6.Of\ktXWh04qbY>MI9.I:V:,aXpQE'BL'A.#r04M/nhf*Sj8$;%B2c*K2CC%UX?QFXP>jFR(0um>>q'+-@V8
%.*"S&#U!B)Eff9%2`sos!Op^0^/,:\0nX!GatYT<XS[]l$oWH>edLRV<658YkX%964Wum.VA820'V"-1N0l<BaF44O4O>@F&9/6E
%;\Ltl?Rej$+J"/6]ZBk1_`.k%"ie@A#jiIr#D![8fjg[oLW=CGBQ/js<nFD^Ia]1Q23GdHg4ZkYTSYNT")G96CVIf]>SGSYC'r"c
%cn1=XEim'c<!ja/F"mm)m'^^HB-<=&HUflPRZrdt.0(SJg`"5Lc_fp#Zg78"?C<ADGKl&GQTiuOd7R>M[&is=esI3n%rRqh.kIKc
%#4me4kpFSq&nj<d2>s2>8"`X*p#hljTO*Z*1Mj!39(Ye1l=:n-_iT2D8Y'[oD@"]IXf7NKeBJ-]LBfseL>!K=&+qj4f@K\AA2so@
%;SVsfS([dVPb.8*f>"6<?H885n(m`Fq!7_Up'h*Gc@Sjh_092bSf6b[)\)BbFmd>EHQ)%Lf_H\HmcgT/R"rDFKBWZX4*'koXLocB
%mtfJ?ddXDo]V@=P8^dV^/1p92);&jlbqpJr)t3QBF:::'2BQ4_N38L:a)Rkmc-c:TGVT'Y)1pM5A<4OI-:bE?q<C-.R=5GiSh7ht
%OdS_D7K$4"V4#;U=Ds=kS?r[;l7Llgh0N9H*p2@0p9*(ocP?E/5/#umr`-2amhY+-U\)jZS;0*0!A\+cI?aC:W9LBp[Tim;X:_Vs
%kf13b?W""0I#l@CXP8--8%)W>C`-D+8p9=>jtVnTN1hgfCP]%reOo?KP*IOe[8a^p><G5DbH^H^s,Ys`/9]1MBJ*uX5Khr`rOC0T
%9P@K%f%NTME]pn``)/uu)Q_&Vq8s2JnYKBV?e]@&/?/hr\nA1I=t@E6XPpKsW9cTP128Q0GCX7aZ7SF6KXjV.D%`+FH;2@)3<1p?
%>s$5L7-r)7Ykrej5(q,Z,Bf_L(;/cCoMZ/>d/i'^JPHhD5I-rGD9tj>kX?fU1]@YGWS&FJBdp_hQ%&L#-`#jljO0*:l"%\R&nLi1
%1QRcY:(g#T1?4e)d7N8@-`Wr*l-W*%GUF]r&LGlI)gNfujI*-s8RQcjWo9*)cq/]ML*lQA'j`+%qCsOl]Tum(9.)$](FIR%*9ege
%4VNi:0hC-1Uh?]*-[MbYaO?4<Gtn%tB)oVW"a'm#hFepT6kjcqN&lec2*pHoSc>k7I`DT+A![-Oec,uYe^JsHma(nqOAGmm2F](=
%U6Blm:,p6L7H58nnQn,n45h@/[#\N?a?/?(c]jQ)(<O2I+cd=JLRC9RP+RlZmmJfn,FY5ZcJ?"n:+l/p4M$llgl6"8"?CZ-T<Wrm
%,\]?Dr#*'$$0LY'G^#mr+*lfCh!eXcGUJ7DS\4M`Yk^*R]UtAD$'jpI:\QZF+'I0c_!>l=F>m.p)*Ha$K^XT7G9Z0rC$#:qo4RiD
%5:*ubVu@UGhFhM]LNoog7Rl:e"+"rLlM)RrN/Y?.7ibs4Sq5<S'*6dE?@:fip2_4#JWH@(aDQIf1M="W7JT[]jO;i+G##4V?p1-d
%SnD'Tp??9$e[8EBfIun[RegVk4kHU02cS\/lY5JR[/9.CJp%"/3\Foj40kc$=i]:`*>>f?>M@P)X`(rIFD6(ZEpMGm3TGC)QOb9@
%Y1DIM&t@qCZp%N.YKopC:teVR35d!J4[%=;6`qPt`K8GJnV9SrQc2['&(QBT^<Y'"q=$%Y&\`(2TB<q;(ZCD1E6"4<>o2I4J?<1a
%B@:WM&%<3>gWcdIL>)@=D`]DYcR@UUjK?b)?c/ObD4dfTSS[P76E&cNX$6-V];aDQFR2bWp:Fbf06,+)9]^K8QQI[$SLirJ6D'n/
%d*D^VIa7RAO1LNYrD(#u1P#4fdece.mka[H'+WfUea;JeG#EY`C#5E5mnPcc05A(f8c?`4mYA8q;VjK<nGU`/::bg#KDqFGqG+&=
%2)9g1^eCT5he';3],ja@8+9'9X\)W:NP,_QH*-odm(Ke":83(_pmlQc@K"J4d.)q\36CnHkF^W'*=)J5D1'Z9^1TdiF0#?(OuJt`
%(S+ZeDL0;YA>9gWdEh1CKR7eb5i,)hTT(sYCIp>OHdOHuk[($<B]Qnirfk:anh]<P*CB;Ha#J-n^64fO#]Wbe)`eO;*e(OG)'0%A
%F^rmaqMH\=JdRWA=$Ub0RnO(<Fu;4e,p,'.;1kj%'?^S-W,38DP[Vf+$7>&aXDY">ihh`S$RItIe/*=m:<L=j!Jqc/Z/Ylu2rMRh
%8).Xooa2r'g2]OmcYog3iq)nl*30@gbC7JCbM$JUkDA;;lDi\P7'(4e2;Jh^D+\-*:&kmX)S5b[5MWUPHA)kgl#7o_CjrX`+fEWI
%EMu'To&.%Lfg:IPm\$%aYoe0Gk5l,0nb?F1_ZfOPDd^IOPPYeH<0(R<"Uu9J[UZm&_aVME)e?IWVrF'$64DC<#n9Ar8/@=V>.j?M
%Jpn"A5ngG8iM%@_%4ka,aGgX0\7hdu]!$Yl(J-E$8>/e#gN1*%]&taC(:]]:%1M8Gdbo:9#oS!l$"4t0pcU;tGSKIgLBq>#/u_,B
%fpUUq_WP@W_qTbfI)1G3l6&/gFAPD_9d_GNW.rOiM@GF_"P@i`K8]GD2e5_oUi8-&J3bSH/M<tDS<s2-"na32-MrW,denh3&YPfM
%:WnFu/i5cT4!Z6DK>%/=#\l4i/Kh!5b--&_:7Z(%'+VBKUI>9IF1d*USELqfE5"G62Q;6/q>1sROPcbt>(Js;=#1<f#NT$7K`U@?
%elEJ]=*;**J<.;`@.AEcTFkQ2]a)#Nbe6J^QRK#ajFP*_P?DuLr4*!lOD^+%>!=m6\7L<&Xh(*<V#&^5K6r!82I)3N>ER]9Hlcua
%cC-NT+)lduRM;)-L2"Qf]n%lRH18@Y&58DD)h=nj@@<ts^QbS>k#CdW^/QcN\=o78!]Sm3N4$4oHDnZ%OOP:W<!-E<_)aO9;O\nO
%,Ym81QW8L/_(D>ibs<>I8mkjh"]Ac%[On\],m<I\D*UbeDY>#]ao:u;ZIDYEBFr@$5'J1O=K;+9hN!IpWmq7Hk_(J:;aI('U6QAr
%BDW^N<<%oJfSNU;fK?:Z"]_R,Lu>[0.b,P%>+eb=h"c\':8f:B@*2&f)[7fb3RL-+5tY9t0<Z5SZu9BF:a*tQZQ#QP749PO3K*5-
%:ekd0=t;e9&),tsi(4e\O0@cC5)8G#"=I'oh69H_dcVE[')1StQdie4)_?ghZ=gu8oV?d;AI;7S)Csd?@ZkP7kPYTVjs(+F.1f)D
%!p1FEWQ%9g2(q'iK9eGt3)[u+q*H=4DVcl\ah6#1OdX#)V1Bi0ek3,:,S[C#&?49']]"su(H5Z6RBTBVIR>9T9?]=+;Hr6ZX'HQQ
%f$r5:OCac"'cn*@bVH-,!K_bDNBTOU58m4,9=6sfa7?N1o?ombHJEGSUKEhcYbUi`2pbF7'+2,S3Bhnn(Ak8Q>.ej7[a0dg$Ga8^
%NEY4HOiDYVn=a/bom1&K=-W7F>>Z[7kbhU;EN)X>MD&FX0HCtBW*'Q_ecoC/[YaZ8TLIDQ8%sLBj?^g,<eSK"jU5$%agZs<je#;/
%^BG=\E$DH(ik0r"AH``SccKf\BEDHACoBnaYbtTU/!)`(fqWgtEPt.cneU&B$6p&Qo!`_7L]brj7lirS5uKTjaTb+s/BAj%$6e\(
%6-hUn`$s>;%=BSDLu$5U4OgRfKg2fZ6)<ogS)t%u%QQAM-ZV2J\GAl8E$uU^G"2uHFUa96(c35nX#GajSG-E!8#b4RJIDcA-5U'g
%Mr`-&`<unO>WK1R'eUKeWPKXTU4n6.M+\,9!=O&E/CJF?_Ek^!*8WNbVh<^tds>7ii?3p_,HqA#*2FUOPWs^c$.Q%JY;kM4Jaq5E
%aK!=Hgk?A].,L'k86C>9)SK/;Db)!plZ<48#<B*o\l8V?YCq&40Z*"6``"H(SO&kP+rkFk[;6XI364\7*KH!ho#"rE_,&#U#73#R
%8Pq4Z5t5k[[VZgM362]%?:9\`%[uX*3iWo?[(('l5f1eif5o&VY%p;>6!@b>R0jS$i.Ek9JqSbmXf\:35f3)IA#'?1ODmaZ9'2Kj
%C$0LdASSf/KS)\=co!=E3(Q2,\,QR;LP0\0jVp`MW%[?pWe,nV3g<[(<KM/j'b+kC6DTE.i%%>XAE7Ot"VM;%<H6,p5f,hF83A's
%&e7g#;llQ5iLkAWPfN"m&e7<>mIPXUK]P2Y>$+)-EkklnR12^.R@+dq6,GpBpM3t("VM=/O,8$r5XP+7HgPHM1m^r\/KeKbR>?WP
%6Hp.#$RB7>,06g<Y=r\\+WB>L,\2#@\H*$4CfhQ\+<dL<\#LRELSudT8D#qkHC0:YGQ\tIE0sP2/$:#R+:r(!+MpE&S+]0`+MpEA
%'O(YN2IBGb_Tm)N(Q=&KEqKVZ/9bM\eo1\DAS;GBpBhJ+YI1]>!tb#a*St];5fdHpg+r`G6(7>ZJhMXnOR"4@rY,#E'"BrR5m)e2
%,E>>td(/hQ%6ulY.*ou5.R;(oYYR[k#RB<PiJW$`KS-^pdl(P5iUqBq&.X!3=#rkPKS-;gOK8[PLa\Wt568VeSf3iB/O2:+XMFN;
%+<2eBiQ5&LE00C=Mn'$7*2K<ZK5q$HAHnMhSm2<56"%k[1URu@*/)l#]i>*M61TF%_[-lX'<QFN!t^b_$if`1+<5EZo&p2^#8sqP
%gUc8B_Ek=Ais8X7!5_#e$R\mS_LYOC.0Rj0+<9I#i>K3.KL=%9m@=79+;%1U``rN&+Phs0U_P!lA1u,$p]Lj-@Hs>oI2>/)hV/Le
%$4rO#\43G<!28j)dp`CjQDYp^&u,M]K)e6)`Wc\R"dc_<f)UJVUc!,;:4R<)ear>7#b.Ll+=n'#&`+$5+=o0<$<]k&#T6f/,@1?n
%MXkTj^KCP'[,W)[9E>\K*QQI%"UGuWi]$s*jsf2n!!jI!:!*VNne7[$-U>aH\BGaSfQl*7jJm6R%7:4/%Q"Hk"#0De+HB2j;ZRF>
%dqh7')aHB]8RSu>"UG@\C-j3]!$O,png(=h5WC11a_e'?B?PD(h*fi?6]Q5=WFnOr5]o+(ScN'c`"jA%lB9$GP._"PhVb/7:u1&X
%7nsl13(VW`([b8Rl]",p]`f3LUUn%?i$&N`34o5-4%JYJ=oP2,<H8EheDtriEZTR%>cTn\#q>"<)5k2"[49J-\sI29'n$^7*a8>8
%KJj`D%E>7h,b,L1fVbW>3"IQK?5/obN;DlK&->U90lHj46hpnhnkG8H^!P9cZZH;X2m;48krn`co3u"5RtnF/H#KLJ#C0(HEYCHi
%+cK((WBm@_]UcXY6]9,^[Y\GZQu:'kQSG;MTZ>^i[n*SJ6dZ,BD\ZCW7@S1DM6'X$#,6BF7Fl&=P695>O`cibaW=6Ea;Xsq)k0c:
%?%-4@q5T=R_t1<6=goVV-6HgrQ7!K[H[1"^LG2&e\R:nMm0=,(]:Ym6BW19_&5fUMhBYM\1,VS.k.Fr!f%jY!Nu`3HeLZ[(m49a"
%2,f]Mh%Q]ap8o"j)Oha-s/o5'+nSMBC>!O/$GDX4B5HGQ#ecEY=S?"&6LQ1RgI0dAK\g^^/u<bR0Q4[UK!r-?1tneO41'6Nn/>:d
%Q$)<\@L$qJgV1lj69t5q[9SZ@CoZt4,p:s6Vr\'B)92H#-O"&OT;R(!!jW9ppA&/$4H@>nd_GamW`H9HnG>7C+"GIbB6t]p+]:C$
%Z_#oQ4@Ng-bg][sNtJ"l:q]%_=n!Mk<dg"rLYurLNpM#fr24I?rtk?_(-,>E]2S62AVQO\[o=Z2odh'U1.T"!YGb-DbF?(ZOme^!
%0pO&WI*[S"&B3ZsBD@]8p*GV;D.?':fp><S1mK*CAOhj6&ao>AI=2jg;_?Xa'R$=.*JrcCaOjQVAkeNB":JJ4W5tFI[Op"^<"3,U
%k<Ga0mDs9/U><Pp[j)"CLkX_dpHI*&*7.W,qGa?+St_j1kG@BIYfE$jZTZ]M8"//`YWfFs*C4L;3W&AVQ@Jlmhu)i!hu3PXJ+Mq!
%^\R7-hu<$SDh"ak^XE-=J,&QW1@W9/QZ)m%&&7u9m2s(>h(Zd_Qf%c<2a8uq*jms,hcTkRs1_n'Z8@gG2jToIr6NEus6M,*o>beF
%Vf*Z,GjjgFp@[<jr4AU$p"Nifq6.QThkY1>qY"!/T7?D&1k&@e;?#lWhu6o&W8lVKqOatkM.kl<m6BibF=:_OH2IFKqR?K,roq1a
%Z%"52akP^crR_'-^A[?'nfN?I@Al:"g"auW:5=bW3[tpW3'#q!'&0\ZkkPZ0aWa`*0=&/+*?<F`1p@HQJ%aX<0E5?[o^fipiJ2?d
%s6`s,^]*&u^\Z3!5Q(Ltq^E?Vd-2"RfRpPAJhU8/M^]ld7<J1`YBA\(6$o$NMr;cU'DCs:$=A;/TC-H]ft$57\%=D=E!-+1e%b[)
%^\m-LH_0krT>EtUb:hb"1-RA7em.'kl)/GaqqL$.mPdB.qX*l-^\m*?VgnXD(VfqI\,+j(0"/6]rOcC;ci<^>s7":jrnlW4cgUl)
%+9(GIn_\fHIdPn9rib5YrYOI?qX*a#<A$*-rJt47TDdc]Du[l8Hs;(!J*F/o56(,kci6AfT)\^!^]!!_rbqH1/Pkc;If&lsIIkG(
%%m@LRqtiVUO70fnNo9Rj:2aM>b'-)MOh4uX2#XUr[4^828)Natlh/<T/cS:gO[bB#r13G-do7Uo&9Vkn=gb3slfr&qlq7iZ]VhQK
%WJ^YCkKST#1#Ain5j`8b;U6W984pi\M'o-1/aQg5\5[AST8K^6&0_N?&En@diiUFhZZ9%H&YPd_09%^/9(fLdm1]BV9G'HYoa52Z
%k-oa/Q:s[N<T.)<2%3mbTE&1[:*PS')L'Im61*8I:mh&8G9bRihQ$*^ru[tNX2=!Lr_QlseK(Y-e6L1A:N"1U5mt1h^t%_]m&0lc
%gkiBi.@Y^k0"AJqmWk46l@n7?m5-E#G$:s4ct4:SBR?J0*2B)?qkQ-CZ[.Lh^o$/!j%jc!R7^s[KFeLJEpm\L0riCj,GT;$.HQh^
%k^X*N3>>VLLtUmtmP=%9U;tN%1=F\u1NYOGP@%02nNd/#A8Q]&2^@Aj=ab%Y!/uf!?k7iE.Ytg!>"s)Ekuj#`SP:l^Js5dI#"G]i
%PI?uch$BtY;BK4><\/s1>$G+[AAtXkFhnsffmTko$JHJL#f<%.8DIg5/kM@0DfiIFAGWTQSN.VbU*!l\iUUkAe3XF&hN[;C!YB\d
%')%Ca1+*h63^7p=$of&/6]OuNeB6[N7V*<6M^"69SAVd:U&aO#3#q/rKf=%ub*L)#;ZsMoI'fHSO4M"+8&IPGj/'GoV]+Amc(_hM
%UQ]>bHKDlI-RYU:ifJ?T:A*&o7*XE##S<P@QX28],#D3<);fu4rbQc@;Ap]hL0:?!T[\)?,#rZNCPedL,A2I_]fp=q,8'T[#`d#p
%%aNa>4ej9fM*Aq_:>pr/f%MU,.+;_T2Hm4JSB:@o."kDB=I.jhESYb^\BC23A63A<6B0N9LN^uhpTp-GVp(]S=g4aD8ps(4Y:5VE
%FIqIFCDOKejd_<m86phR-\p]\=(\,X81V7]93:Okpm1(\6TM\K"cJ+>Y5P7$_&6tZ'Vd*rh9<#SMQLYnXo!r*/,sVVqIGo:WUb:k
%;i6:^mI:l`7f0.]:FXJ?=_\;!3ff.4U$KIjQuPP*UWsZGM3oLBF6/:PpIm6;e'Fj5Ut(ti7ut#c7L:"MfHJuNL=dr+0W>$7+TeGA
%=8BX%F.CMo=Al+[GGCZ`>t*)V_2&i#;p\Ksb,5Z-cGn6^NGTpGZ]B6l3J,>J+gg;CVO=Na+l@*I[HVhsBI[pSdliUM=HBZd17\cL
%q9>"310S)#iX^YFUs%$NQ]K>Z;Va?-'(EuJSmm"7)+m0iDg_I&Ppbl=^4!Yh_R4N!!LP[+4a1*SJM?D\b*cs&HqciE!J.laOQbYl
%&6Y6u-porK]!>XR_WoW9T?O7lqfl2d]&]'=,>odtMlSIJ^Y7T1Z87VkLss^h!V'occNs.#V!15`-pnR6[A.-Hj&\OIb8`Z>]9@cN
%hX4+nIS"-[O^u5rfftsHr2PoEoE=LLW8u)tp<'LY^iR*rNV7h2SZA%WpnXQpnq<KG%oFN&jq$WhWD)4('im+[)Zd(fCmI$nkFW.Q
%k;ZLd@_%,$pcqEX9GiWCDO*0JFu<mIHqdU>*Ml!"k69Lj;0<MhOO-cTUH11k\)us:n%YE0BeE'gi12#")K4)_?l`D`3?TM0SZ4K;
%a;@U''1)&4^Thl2cPW9TIgPBn:Zf_?g=i+NDVO/^AdV?d[m]pU(.q'QJ2#JM^W[LS7kO'O=!29ZJ@-Ob5#8A6gTdB%ZFGXAU*PlR
%\uL^2r;;5+o&6orjL[sV^oi"Li9gBIZ(SEiXPpN8]4fE,nfC9r*"B<_$:\>eYlBsq3?n?F:f8QcM-^Oj-u-1hSb)o:]4$T2ZCIAo
%dJiLr=TY:Dp-mVMbKKc+5`S3dC,s[+c-(AV:fm:,J_)X;G>D21)%T0hmA]RAKt'>%Z5c\(V?4Q`WFVN\>kM6Yn?]PX(d[A060ImP
%K'AEokl=#InO@&#j3d$%PnPEPc\WpE-m!I^i?dg,Y\ZnX7jg&6Oc7AjNL2EBnh]`s(SQqp.11;b*KJ&S*1i`d]/`lGq\T;PL6em#
%?SFB"NK9#n;1@qfAT>9!^-df)$Ed`bB!9ADB!c=</_hNJ2JA6e8FTWLh8ZM*7IXeVJ?7$8>JamZH%!]c=6gYT_EP3KDUW(\ZMWW#
%<TFORkD<Dg.@$=:`JIlh^G)DWF9nY.,^?V6Q*]6<rk^ZB$,'-g-#k6^TXRIQMdjJs1CZL\5*U"-bRQg7Ob@T\^IhT0[gcCck?;N$
%)glUb.Q/\0Q4R>B85!uX0)$AiFN15N[4HTU_)F\Z-&s:ligAo]7cl#FOn_E*X4Tn]-q>mmK^46N<M>Es`7HREL1dkU-a67G4\pE`
%.R-FEUc,SQP[`7CqWLftHM"FbOk40BJ<X_DbpGT6Xu6PAJ_.(u-]!sV*H@aLO"p-69KX\rq%NAXb%EYC+DgR*>Oko[OCaQN5lfC]
%E5VSUW<0`Z6K\n?6PUKWKb&/Mm.KllYRRV4?SscAbo)YkqSb38>6CC8q-DAcAs<suq]]2/#;en"6$hH=U(P;5Pp!iB?(X#Oa;-2<
%Z9$_icg_*5(s.f3RCJkBq=Gh'J8^Rpi7#D/NYb@nOS)QihljAr^V"XSmMFI$eJ`bi,K($ooGTP3grV-ormHPMK:de+a%]@G@+'D/
%M1rf"gZs!C83S)+/^.HF_'PgOB9<G8`cTl6Tm;k[aTL"+(U;!+82/<I:*GX*Lti`Y9oomq1>ZuQJ].G3`>bQuJ.kIDpdqD"?k(Nr
%_@.Wn81G`S/?-290;7[br;%c4H<Mq3BsAN3PXOAia93opBddiWQQf!+@Z)?(_oWdTe47:YA@h7lW^=+>E^5d`OU?bGFR7)6R">LH
%??JRk4W6&*8<PB%7/nNR>mqS*htU(mq)i9C3?\BR9dqu#?:4>)@4i^#dP7k?Yo!OK;;N+)GN,7%IYdU"S*<sC-gqq7WRZi)A6HJ=
%7#[>M'Ikn6I]AW'X_l\THp58BE&Yg#LVImG<Lhp$P%hSFWM($]SZ/c/FeRf=1j-$Cl]rX_j'oKp`Kfsj(BGiRPa?91UFM5F1[2_<
%QEj1#n&V8FQtD9>AhSE6\__WfM$3A4)K2-<H!ULLdOqQ$cIC<%!SinQia6FEr5=03<p"-K>(nM>&Lanf;_b_;.[63$!cB<Y<OMhh
%)\K(']k><pGV`/F`mi);dP8X.f+>:3L\(-pH0IsI,[uSq!"kOOTV)inT.g>p5)Z$JV(-ad";[&*11>LU?tmP*_@Mh@A.H1s:+9*;
%[+EtG9oqg@et^MNa:U1cD=2RcNYH)S<Vm<_4'e,>_F7.@bjR<]q2LAK=>4dQ<CQF\m?g:5eY8$V!Cq`@40pg(Z\kFhUJjN29>44I
%>WoJ"kp(Y90:ZQaP_i4o_(i59fL(Vjn^Q-ZAP[I@&fW6U#eUeK)V$(-d1K.ui;V9fB91=j=>L.R\jW=!8AuN9c)&PsCLi,JqFfG-
%84IaQ<N56E^iB?(rc#0OO=jrK%YIHOZ1DK>UZ]dp&\sfM`hQ&3>r&?sR\NBn\09;LnFDN1NRNiejaU"P=tWHr3DuttOu^pn*0K1C
%f$n4U'&[:FV&,$C#U4f_G\g;UFQkkD6u.paI&d*s`MRXd_Pg-f6E.`Pc3hN*D+iWlkdQC$??^K9mKfkWgh8R1TdBCUmHd9#pI^p%
%N"2!V9ORmh3Zu'+NJc4pHRGE$)KYmKhBNQtlMZQ08))g>8om+&fB>D%:#s^D&^MrQ&]j$q/hd9![[bPI4A4o[f]]4mGkfqF5.Dt>
%hF2KAe0)iKgCSs9r^j^NpopCMI,)VE6blfY`7p[84/HS?!J"M1eWCdmi\VcLW659;R3>2qWFgjL"ojDW=qq,.UU!`r+YJVNpI6C9
%_t2)b$0!F%M[MiL//8`2X'4Rl6b13KFA1(8eN"I!JFKkYSEa3X<q/6]bfL%Hk]s6Qb?=Hq+8Y@3-PHg=/2Fp'0S!jnB\(>:cEX>5
%(94(gj3:F^^eBPL$lQ9/&O9<Q3E@[#]1@lZ[t,"dI8mQC2?o9h4(e!/"N$?O;^Q@^mn`'`%se$qD8DX78:Rd,KJm!KRpL<@@b@kO
%^d>;o>`"_COfW/=2Scm\_'=<'-S5JZ8,b,2iM)nR,X@(uA<u>CJ2nN8A.#9[]7j,@+nU?7OUOW(8eN4?kU$XL2g<Dj&McKB^\F!5
%icJhqT[EEMa!.j<9eS&LI%:=X>nO9S#Rk^F<FBb(TR!IW'['M2)j]THY_BOL$n3S,)l%1>I2]dl37u,0O)#c:$nN]#>VI)WE@I=h
%'MB2=BI(;!5BMsD@3^&i5JGnLL]/Ef>k/+abO+dF(BV#e0%>soJ#^O6L9T65'pE3>Z2K2di=q2hU""ofCbc4$MF8_T+K@!^^m9\3
%4R?bM*BXSVRjtD2lR_"-XtK!5Bq`/7:qm*`2<FW$:GB^30k%OSX[2/SYgc^5c<do;K[<sG`IR@f,uD"TI[03=^D^enZu\ZW9a?ZC
%dB[ZE/KO?+pA:g]%k^uqgj/6C`;uk'YLdR-4WHV&:+qrXNo4U,#E$QB*+NA,6B2R-mBb[Tm[jJJ+)a&%;FSS>\-``9>a5_pjW]=%
%7,+`.7Y.WLWo`WHQI51<UY13XC8jJ5pRp*BD0G@aA)`-p8@)_\Xl,=:j<#u1AbW*$=NG5_AJ7sr-E!uVRCoHmFE1iqT?:shG-=c+
%NK%g?V*f)'\rq@oAm:;!p,"`%42p/L@fd$Sfu&qM6aTFlR@3u+N,,6qm(STe?hIQ9gd[3sN6'KN5U]\Qnft77Gi8c[lD#8?/Z*)F
%STugi48nBmaBm[-K,,G^$LC%hBiiNp(qo;+S1&E5162m<*6Sg1mV`c<bqKrjcIFs&<Q,aB"*.#/P7aBJ:*rpJ^7k:[?TX&OLlS._
%H572l=ssEq(nsm)I[dRe1:#YiSn5Apf"84\!E@1-Rhsi$Y>k:t@]APW+ndFZWV]Y3ifi>;/][KmbN\HGCi^A+@;'WeDoa506qboC
%rF=73eK6D2fkre;IR&i)g.K+tZl=Q\HGnBW%l7[T7.7;HQ`W)UPE-?4>?J!OG@J0#)XOotrto,,XV.i+_%2G\EV8CAq3ePoQ?@A-
%BKij7R6Fl1q0]tRiS4hoDR!tL].cP0M/&2@pZEK(P3hVhcptrPhts;tG&;W%i_6$lnD'(Egq"AFO<h-e>T&dRdCO"Vi.*;9C.2b[
%-,$<N1QTgF5F(nt7rdL3"eYOQW_u;b-'@7B<8BG/R;jAR\&2+eaj`:'KhcB*/OOl,0=9"GVHbh?H5Joj0A\mJ4@O<Y/o-eDce;Vr
%kKQ\r1:hgL+TG""I#lS#$^OJ#Fc3VcB#?Bl4MDfe7'0P[)c`0d2*"17iuZIfEUEf_:C_e:?^dNS[CAEar;*<NIKq,mAgs"-c&_t.
%3cTPi:fp0XXD<Cc'W2$fhi2<$4JkqiWsS,m?&-X6:LEnLj7TK[2k#S.6>6_J^8)<6mtq9g9Nq[3pt6XTiG.2bF"'J?nRQbrnXa73
%C_ZiLq??lOJDN+t&,9ElI(=QB(;>%IDhHa!:7"p74[$V6F-)#:+Z"N_.8U^r'#!E#+q%%sNZjR[at.!Fb_!oUD9KbpfBA\`c]K9"
%6;Z5!\@FWD%B$JljR-4-m4&Fe7l\/^o4W=.o6lk;COEt"lF2eBXi%)a>\-m:!Lgl8Uf8ki!QP22,hIg\93_la_m0a+$*]5oD73e"
%Dq?so%L6.e-ts7i6$mHjVK1BmrKqD5/)550P[a_7JT,kIb@FIH@W9H.bpOZdD5hiuiqlPmb)t'W97n+IT3n=<]S9+i%#&2emOMLX
%^/7N'<#HQ7;XA9Fc(p\<8f:odT-97=dT8?[Bo/@W]?Re<.2J$HWu2g2&OYsm/2\+=)CeB$E!mJ6\f].EGL%e]<=ouJ!`CU#r5^m5
%;B@c>>A]V!B-+h@%3jfs(P>_d%*dA2l(qiqs27o.Cr[oj2uG3B?XPW$PZ*=f!)]S-%UU9kONrn`%gW2IBFG]S,?["2YqOH7aJC<U
%CDg+dd"FMIX1h=:SN<(oR/LsR[R17!3!SoR\m&iYoSeoBY^t;<#!!lM8(kV*G]b-!%?fW@k^b>;nCKEPRW(;V<(YbaYNA70:Nees
%e[d5<S)k0E2g@"f+]iT'ji-&YZ0KmhAl53,Nl:P"Snm_)2YGnjIiVs@lQ_Ed"gLE,[XO2,+DRAUR4<IOV.4q>GE\nSFss)CI5'jJ
%!Fr&JoO4(db(,=2R!H"R;l^3(^qkgKOpjt0N[Q,n&/UJ^:"_1YJA-.aerWSgVBr[tDI8A)F%P2D,4([uHE+<M2FoX5A#bZLCY03n
%Fp,X#8tgo4Z3Q)>.[gZXXW.]tWR+e3X/7X/#.oHs`YM(.cIVr))G1maies;*^-CL6euanp?#'>'U",9ZqBS[-^/*Qk"$90:FKNS\
%+./oZ>E?"&iJ)$&?&qg1C['adckij25]p83j.rTSKIJ:d;7u=EU"UB#`FT?CI*EF2B@WB\K0Sp>X*:)FY[n_`_"6f<6p?-U:osOS
%YROL`39\,X4eDVtHt71*O@W'+e^WJ33noQY.j^,?$G-`#SD(WrjC>%r%%Ot`0CgTW4-KEPQuEem`>G\OguVV'YY*:HbL)_1ULOFm
%ZK,jW$H6%!@t,3<J3.Rp0;__fFiN'+a4KBj32'oZ_F#$_On,6AVt8546E`q8DEd;!"M6FrGTE4A@5+a@De+bN_f_=hALMnT3am!>
%P!F++H'm_:;/gH\j-6ce_YR9e':g(2PUNDhQI(`M<jmjiR9\oWU"%f7=+>o7L;dH/<SG_QKJO_Z0:=`p8$ak"7U^V0U!].-cG>2%
%<LjoSLY@q,It=_rRVFmU1:0%*=.=$8KN:5eB%XR/=W*mtA]hPfSO":;$CW*K02n*eRc"S;(5B2u$r2:\;X!?D06\?X@(Vb+/(T+[
%":bONN66_e)4C6H*a<KH$6`l=*m"c:Rf<9P/OUHpj./`7rT(di;%Vl_,F/oVpu3MVo?Rbg_K-Gqb;(>4e`#BEUn%ao2^'cc.>tSP
%$r,GcX#]3tDWM!6D<u:g,!(h5SEjj)93*Uq6(Q';LXD3++=Y8+%.X1,H=<,WQdMWjR*I<l9/3n[$dnN\+t.5Is-P19%#rXrPp;+=
%Qb$L\^iEGPmB/WJW7@[Zh8Ha5pD$V5PmNj&lm5/?/O@P-%Tr5BO8RrL>#b$6&</8dL$#?*1r1MA2T'bQhDJ:XFc;igab)T#TVWDp
%Gj/#15>7sj0,!Y&4<ug%%H"`G.a(4r3(;-J8X&-7*bu^CEZ9F0A)hX='Q$SS=6dRfNiTRBXb7%%XJaMk[M$&[3RaV'U"s9?kI-&1
%R6KpPk^r1:qprme"+FdcPpZ6MMI":)lT=pf8$85L,X?^baC"!&bZELb!Pqc4KoGjsCFIGj704!faD&bK*6/@!;@Y?\Y9T[Y:*PDV
%Wj)CV[+\ALdiMeA%XC,kNiFr+5/_`N`^B<l?<b5:"\rjAVdE]/9*<BO/kY^J5<Bc<SsFX!PFT02J[P?Uq\etdhD-c_Wf5jkW;X3N
%@gV)r.:DMI3=.H-(:C_nGGQ499XY8fGqKF(9p,lC9df=G&&Q^nJo06'kn7c(j--Ln.,`\?2!ZisIaS$X*e=ffbYafnH^'-j#G;r-
%h&C4A5/p`E[T_SEd4>*Pi6phPd?nd*f$dl]K0f1KjV^"LD%K7WJCn*0/5peMC>sFGRLI2%E6=ZI?7kUML,(8RUQL?oA_0l.NK_!S
%I%/1u]An2h0AntBZUT?e57PGi8V/QAFqU/6L]!$9AU/r&";bj#.)0&.8$oZ,11ktQfAK[5IZUAi3_ZcMN1_rE:0p>i.8hB+BKWo9
%`88tcX4Q_>Xb!9r1df+UeRp3+JjBM[:!7H:1toM(/,jLoJQuF0@4C<LCpi&N;0g%FUH+*"D5\TaKCLMAE)q#O@,S)q.]m$GYeZqZ
%(LN5G#^>i&"dZ"JQ;BQmVn.k-,oE^K#1KH!Gn!c@#kf3/EJ"1_;"A"Uj<pF+3:[\qc*9:Hb6MQWhNagq&ufMJ@Qc'LOB`$*DGcmC
%)>.Wp0`u'YRt/hs8:b69'?]:84LM*GX40#XIdEM6C6brC_mN_"72,?QL85dH$&p>c]VY81BlcNC3[6?+/>76S2VUf0/"@fW?fN,-
%:N7_5$$:.Q#h."EcXBMPj0I;,bc,'R`ik8t`]d_O)qt;"bsl_5\rY(E=c+QeDN:bCigY'*,#%Q?dJq\og:,VQCPa/HM+G@N@5h_4
%EhF(nN3f1q(&[B36ALLsVq[tV`"BS,;H%@l#Zcs'\r<4X_KBE9'484,DhF.J,7+;ZfT@"IL"tf2a=m@iH@RDK8EO,#2C[7'Pckc!
%%UP<E86T.R9ns?K/j%iF5luRL.V\%6TQlLJ760>#$`C*bWAteQa^Hg+N2p3M%ZdhAU^&c^9VX:q<F[cT-)pL[44(:0p3r1W&4\cX
%s!]uf&f[8k-2-ZEh:1iD22?goN,^]'C^25,&:$<O15%ZDae66;G_En1lKCrQ#\n9iA"cL''23Sk;de)pc(pcinAY)F0-MF<ENWk=
%_Kofk73nYmkZH1#Bt2!KGNDEa(T>Y9MMT1)knujTe]af2`@T3hiS4e^rhVfIE)!)qjr6EdKC!O*V*I_.7*,oL"0(%R\$C[MMF)(f
%bO,bV9cQ[4M=aj!MXqb)+[0L./Sb>!'RFP8BV#YheEh/"W>Z`<A$!,TjkU)/*j,B.YsM&.XT5JT`(1OTM*itb@7O^<qF3`l$1L8c
%5jA.KfEl7g[H3K@)MVu\KHi(HYoUoc<`f2-d4@_#70;YJNq/!JEcce*^T(lh1Pr>b40ViSVk(i78"d&;lEG9Xn+'q:i3Ojl_ZIXT
%.&T50@Q94(\2e@PesE_.!8Z1p>5U-`es$BG09]q"c4fNn[b\.WF>e=#=fFU7JM<Y18S%"d<[iT"gr94SiX&H5'>`gD;dW'fbjF)*
%)?BBMAAY67ZQ!uQ""UJs%O^GH_.`KTP;4-PI?2rkPmXB?p]B(2*oY(k5$ISEW5.bFG+s&;bTJ(@E`+8<^R!<e_4%Dd#:O%*bu,L3
%W4JKG0,XId=F)4H9<U"bRW'.l"K7][cu@Bs?d*0F8CUVp=*G"q7mPS"-X:f_H3D*XRbdf[O]cc78IZ<p&/=Qc*-0KtbV>IZKtW#R
%!bdk2"W0KO%1tHP<PG1>8pXGgVU/@Z%hs]J-7r=KU%F'NL1cDJJZX5Lq8R,j42"C7g_B>'1L,#h^`M>0k$^09pUGd;Io)ns4@Cn_
%iD+Mt`m5smOQrdi#i/JY;M(%.C;#h4\WjmES86"+P\hg'YoU:'(8m1S?@"ERbaJe3(-R:`*tkb*Fc_OpKf]%9+`EnET^d$QWhA6o
%qcL+FbZ'^&AjCe@&8/k;T_E)^9fPLZ1A!oE'/q(l*A.<L_XP00do8hG3^V+c*hde0LVn+&>@mZYcX)1*6u1_/Z$PD#!d8qqU^eFh
%C:g%83-k'ueeO=\MuIZ*8p(J7JI7FQOPBFCCIBF7@6V&P3<j.,B_%\6M%W3pdho_s+)KTWl`oOIIZ..N%N)X'=@>DAlRBKL[X!"+
%6-:8IcuHM#R;ohFaui\P9L9s<7>D"j&1[I[lY^2i^(EO"iHL^P<q:l&\nTF-l>IBH!I@W"r[eoEbSi5UQn[Z>kXP0Z'SYRKr8D8Y
%\#9Kn6lN<JK3A=Q1l.8VB*Mp@I/;%fOe/O+IT0A2DDn5\i=oRE31q)l.+(QN9]!Yd=7%7!%lfYfG3`!J$ofE]_%Un4@Z)eODlp,g
%OW$`=GHG$U!Bnh,B6Af-[^doMe:;Z8:[E5K;2MnMZV@S%.Hm&nL^MbVW^t\sB\BE!FcL"3d(S(J_U&rA2CpHFe%q_K`4V&k.71U^
%L>%g7V7$/DC*&.%85d@AqiT$[n7\*C:jgCW9t^ZLd*BPif;BpZ<^PZ2>P1F>q0*C51HIq9'\m<1%+D&-[3R!]dBT2Q^[%G\f[lnY
%fhfTA@eo(g,%W7jc-f3Ba7S3OoS^4+f$^HU?-kX(.s44LpSiM\/sVEhZ"#\D$3%Su33hip$eCBY'L>TbF-.WB>aH"d^iM>Q1Qgp)
%5B/Yf-u"/@:Q,$pjg4aXBTa&M/T!@-G;Agkq6SdYM-dg&%VfeF0N5-CpA;t/QnRs\-9P6I"KUg@[d,]>N/?:(c=,[X?4#&/D-eSk
%BD!uWB'Ve:*Mcj\nDZ2t#;q3AP1'D,EM$aur/E=r.P/PKWZ6*%TJI'MglAaCVn2TL961:7OrY>OPY;@>0TLD(2,dPmmMMh98X__S
%/t/2U0-Rc?b[56;TeWA?4,kVg4QS;VB_;o\b]0ZJ*+19uNEfI6,\mjbccVd`_`KD0i(GEXTC[0^PS0b)LB<&m]oS,4U$b-W(C`sm
%iV<,H%YL"fa0u$c-o:KPPbC+E@1pC-dDV5Xc4:1um,k5o'Q_<(.1$0k8*=9g*217ABXXlr8sI[6-Ug@Hc;[fR`$6CUSZm/ps/HD=
%'Pm)G^h8gs]*+=7[J(A`N^U)\HN'#:F7=7h`<b;R/*0N?#:pP(kke=L-hAR-M2usTl2m^BBCET@UXg/f[k,6\&s1-#P_O[KMaqiR
%R(+GgKJMie`_XNGWKoLec$OupH5JK0aA3NL1tG+%(JA:X@aqZIaP"'370c'+DUCNnQ!$RF;f<OL<h:djB0ZE8%&,i]%IJlqg>Xr1
%`=i!JhC_#naY<m&"fZbI7'sX[R\_+2P5U2u?4P?;@o[KBg4&%7,I\<'!N)qt=jIb`*4=@?^'=en0Il"U3BRR8D2!h<UmL\uE=HJ3
%LCD:ZNR2QON)'s9SCUnQDImL&GqX.Fm`Z):!@s`k'Il\c2`ED!&1JpIkg3`%UD>:(+b5plkpimaIj\/`-S(/dgYW.L-g&'F75S*l
%A$]cOI-:"2:9jm8KhN;:%$:%(UOdmQHgJqu:lpVaM$..*`"JV+`&jih`9KVSb(eZr`.a)Q)t%1,l@hj^2CY3#EiT!c\]dTu=@W#J
%ibX'dH(;ntFQlp1)<1#,Wl1,`QsD`h'<S=N4,ocIkUN%goIm``;bWkD7)?VXO%=AgdS`g:'n;SjN2TY%dGG@PL:E7<>9+XF-n)23
%/Yc<'5<<pF+lcM7iJKCNAW+?@D?-3N;8B(Y2_26g%RojWNb;=uh9(hD<no+.M=eeZdDo1eP*m4pf7.%@bNs2"<#H"?gl/81<!o&o
%d"&6^+)69Z=bqS_#[l8olnoJ3b`OoD,rWmZasFp,$"0=t0R:!j3K:GX`#3%&H<bSFAe)[GBq9"[b$iQ5OWm[ma.QXTTd*18F>_!^
%6s&sudKQ1N'u^@0EKXg2bG3uNe1iF%ojfk3XNf%-Sg!m@d<bOM%*pH"V?oTdk9Le6&5"lZ@aWdM9j$62E=Jsj[n(V!(IjR3/0[80
%eL>oj's2<d^^R[;0Jj5ReRqB`&=k:k9Jh#d>rMgZWSS(1Ii9hWq6n.4lXm<YI<;LfLT#tjR_<LYKMoe#/&<-+Z39"j0Cq$?IS2QL
%(=J@]'Y_aKa/;G6GW\SV\V@?<<Z6PO,nI8I@OOL)CUDRl9H!LOm<,i*rotbWTQsoAi<4@`mB,b;+qL:B/7'k=\@.@m*J^P.[jQJ1
%$[4pgM!pmj4_MpK2VbM^Q3^aW13t6K_F9#c[Yt:Bl08M'DZ@+'p8k).?<_p0/#kS6k?lF:g0N(sZVlcr&Q&Np=O,[pgG,J9%^L'&
%q+h`ci("C#,`fOiMC+G0"Xsf?WKKEYB<^N'V$IJrdq#X)/A-8)O-mBd]HYDoEe.fuJ='Q3:T`Fm7eMtM$rQHfaMt`B97<#Dkdb/O
%<CmRGHL]:H/N=gL[,X%)Jp/1Zdj@S@X1rQ]ZU?JU(MsE>S#aA/MAq]_enU&GRV@/b"O)d>IPig%!A)5'j*W_l&<hN,ajGu,A2(mr
%90%3`L3^l9KgegN-K_)1O-[1ha/6X,IG8(f_5i;c.2tZ!CPno[3CF1^],4lSR/_)/os.B]K'KO%"d.)mq'(nBG!4M^4GbZg?,F7r
%("gBj6)ulAj>FfG_b5_0PU7.o$rsq>@l)1,dN_HZ+@\*+$Z,k`603\s?mHmfWq\:AERMlKes:&=POr:UXjN]D+-j-O6k<O=24^LQ
%km(N@X764MJAS/@TBi<'(UG4Bj9#@scRVEO9T%nei)n^7ob'E^7&WcW!B1\$\oX^7+OQ9@MCmI(FrjlH,FC*pdkX&.m*h^>53bJh
%\q_8hU\7IOO@.N-KL_#EL^%],[YDu-7bkHX!DWP9E`9C$lMPs%6+Z_5b56?Qhjf+&eONGGg%)cFgsI+)dHffWEqj(nN(\Yq@JqB%
%%/UAm,=dVj+r(^^PB8sf/4<3XoW\X\;g4Xt'Fq]LdrD]15/n/7$W4_S(;ZS9h^7u.V7Mb3NbebSFYO1PViGjoE2u5MfZP2LCPZA1
%^%#"GJR.2-UlEnPI8G!&=_*4sZ1LV.`l"bdnkMhqk3fG2`7RUOD2(([gEbU%$-R/3Tn?F!@@(DmqI8hPma<Tnbc3;B]9*!]\3-GY
%]a?M5$g8V_Ze[.+2Ib+uflp1CDbYe0c0!0EJGGnk8W_e\3YH,'"F7pdAlNA'lTGkq>K)AXT09'RSBF=-@u$M^E,rD;KiE&)7i@>O
%:<C5]CLh3o`-.3$O7UXt=)D%OJQ1=jbXA,LX#Yttna4!HamEhk:h;;,<$\l[i0B<4O)-_.j`$=.*RjtO1gT$rZA55t?aa_BRST*`
%^4bhg'02X*mIQ$Das2c^:#AF?DRLPd(#1Ef5PDUfQ_PYq=424;]0Kg6V%Kc4e8CQ5.3hZp[IT!9b<AGE>pepC9_VH9;*;9#m#GRR
%T#3Oi'G(nSnIF;4D5!Vd#`[u/D:?W1.I!=5-B2f0`+<7eX(g:ZX#"kXR3m>aa=&^b1_aEjG'?X/TT-2p___\:Eil[K?^bM*JS\S7
%C"HbQQ6rl&4bB\:RcJ![7T?Ru4U%g[[IDminP.d"PU?3qrIh4KRSM-,(QE@#^'ulmdjAq0)4);/1n>>@/$2C3Ndi-\,/PQ6H(:JB
%diqN/1&HMY%VbeW+kNVXRRCTb&#VX\"Cc0f>C/3k_7&Ir7[*1sIH,%$<d$W77GjUYnh,`ceJN/X"1^F?d5It]7_6ao2;OMEe=*,r
%!3H4%SnP_i2)J6u,FXj5^h\*]1HBD9W`fBiZuV!!8Vkfs+.>q)itC+?Pm)IIN+f%n,^k-<;i2g;$]Sdm6e3U,$;K!W7QelQKN;Ca
%XouD6`X#::2j>W=#>Jqc*0j_I1b%-,^MuOi-*]:@k&#qiP:8:H(ggLY3M:50d:>mI%F@!AIKW%srauj"NIp(`qm0!oAc+mTIO6)!
%4b"CA1C9<4b`;Fc]ksQB_G7m=pGWDC&h[9fiIW*Y=KPUV;B=F0Z)LtbkRDn34O]+1X4?d"&Y&oB4>TmIW=H5dkqYBUjLYgD&]:pl
%9@s#jhq=<V`^)0bK/SPli9aUTZRmpclufb0qq:&/A]*3El3mu_/[A-LZ]3[P]GmD5_A$gnbNE[T3],`"c8IQ=k,"N:eKLE\2ATqp
%-47PLl>X22"\7=I)OtXnHJ>R:fd<ng3EfSPa>P#MQc@it;kqbLaNN@4haY_2HCO0o%m!&9CaN!pn\2-1)/$>#bN3N:&Qh:V2:K=#
%p@5XTbp;Eq\F&oFPE:\8qQr*.LcR&gU"Lc;H(,a;1TA&q]:FC_X#>AS&K3a;'q9`eEALgQM-NefX"#aNK.\B)ICXPZe]1>gYT9'e
%fiHpO>7\'"9Xd#5bVnmf^']I%j"2LX)1._$^hhh&,k^^]>PGA,DXGWu/RgeGpG,-MFp/0C1=Tl8_GTF'WrbA"a0s^sB*AR.WcQi]
%3OdSbDJNKXC7,Wo1qmNL`c1<ZCs,j]/b@f+9\M+6Zg,)O.L`6F`j/:l+^</ja"jWSN,:D+AK%qF^H(?NG;lP!TPCUM,VaT%%-a!<
%KF!De7:T@F6'PfZl;b:8UB]j?<b3UV8ZQBgK^)M`SJ%uE47B9)rB&j[i1X.o.hn\G6Yrj;P5b>f"gt4BCtEorXa39o_r)nWeD"Bk
%:o9;#/uo1fX!Bj`gZhS3hmJ;NA"KOg0R'Y1P=]VF29KW.-Df6j?)"B.QbG$jKF)G"2$L'&c=AH`aF5ol>NrA/e)a6"&b]"u/_R/4
%V-#a;.G:_G(FW&/PAF56-!A3$8L=HSLhH$E[`[?)=P%7X[S$0?K?Vf*9R8.,dJ!JR!K^8TeW4O_=)5D6a;3;d&3JVS3l\&aF<f6X
%+AOrAaH2=bhDJVM&otO<S*+i)>\3)ECj.6^P[&<[)C)P'YkjG5`tAg#b:j4@f*km[HM/*p50IO7,8(1ui18X0B5e1a)BNGNAWegm
%_N2]g9YrJ.WRZPnEj+l/ed+/VA'FA5]*1W^9Z4MY-HIu0022%e=Oo%g]@6CVK4D9eWR%`YE?CBja_[G]5.7O9SSZ![,\Nhb@ILIA
%"VE`AMSaZj0jr;!8/82of>7s/hi5Z%?#kiQCrahP`cQ"tm9&Op?!&TEJE,9c/hAVZlOnq^2H[Np)o"*VIP1>eBEnq802(=`-:JO9
%F6eS"EBo-`Y;,:@%%1.sZ)(n`NW7Qb=(uM2NTo*##-'js$UnC9gPfj.B%Q9&L2KV:o@%5DkD,$nlS0`_;I_Dh9LR"JVn\TU96='8
%HSMM,GV2d91$P'a/m!*K7CNlCe=N1H%4T2q\!Ri9[`_ij&Ue;@\Wii(JFliK0cbd=l,-P<;:u&0UN%$t+:Fo<`LI]2[MS#W``#P9
%Ak`61'O-`9p!urU)(0VN)F#suX27@PqARN,ng`6d%V#e5)`'2tRb3ao?=L6!fX,uD.ktad%'PAKQr:Q0mqIa!d/#`m.t#:2GI!&_
%2I`QX8n$e$#T#4lKka!")_^pV5!&5)D0>.f7Z9:lIe=89bf=-OCSV;.dc8[q68@:\S:NcNFu']!fas4(J!^^u*nk<M-Cp=9k/KQ#
%(4]-@<mAO(Gmk1:H'k`;4OqG5%*d7a0'b2?Se0#9c='U!-*LpIEL>'#2ni]==o?,*%3m$"gVDAu9HkTMm&+XO/-4dc6Wf_1BuKSd
%`\VG6\FsVS7Mu';2i_=0q*69?%Drl(B$OZS$_&lVf^`Si-In2r@Ug34Da=Xjh83blYNp2=Kb89YXK=2bPAZ7_.F`*r(H_l[Nf_D[
%!0Yc'R:i6+[8p^.hfT2mX]fkO6#XAo_DioLY3HZIm?/L?)E/"[P,u(J/XogrRH)\JV2J'F0>f8ZWRc=V.k/TmrKP;FC^/>t/oENP
%;h?O/Xn;otgfPi6m<2Z1JluagGG@G"kp]MYD%=#BA@gK$[.+?iD*NK&241P;YQ2^)D'o,KD2A\Y`YV;T>37Ip[U:o1E,Ge[%&U8n
%C.uHUEH7R3Ed<6KN.i-;@gQbDcZF@6]*93A0GHIi,1R3?L9HTq7G*/SJ+o-;gG[De#,W@p6[R>k9St-#3]5brqD)-$eHno1+Fog-
%#Y[`\?/PL/C!aPYC'1=F$d5OZR)D<L3bVd6B(2=#]1g!c;'Mp8>(E;L>&O=H;E!2UZeBn#'*M\(FT56Gd^<5!K!ZkkmBlk]Nj-nq
%S\HEpJh;A^StZ7j>H,>Darq.TC=mtYEO%IOjnkkW1L!%"[U8k^fQq'),s;t7f%,KUYnD``gL,+->L+r3:2lR>bHKC]k]H`#PLhn3
%`pg#I+CY"u1^\4jG^\7%$]2a/7u3>uXk@#8G5;h%@1RWZC\1'd)=;SBHr45W#<kJH3JCDhKRS"MQS5c>e`J_NUqoPh>-mO4p%W"f
%7eBAan`:V'Yr[8@>:gb5^3:Pn#_Di.'X^>F&UIYt+&qjtgX$C_YT6t:,JK,[Bq8-l)K.:6*eL,lgPlnc(:GG;aMd&gpRd))Ynp:_
%E3V+jdVd\(Ja2PY&aTLnE*5q1l^8J#N4TBB\sfDEeP#^1=L>P$=8FgZcW![nggDO-_pW=pr#Y<e?IN^&o4dEbZbaTMo^e5-K?_+L
%4"h"P[$Nl1]TDM8'3$b@NJoiQ>uk8uHZAsD+)Y**VSL/l/DUhXmHshi^]Zp*2I<>2QG%;.ROH"5]87>C].8F$nBrIRPs_Pu\l;pX
%pMCn_Zperb%0g-V\`om/[c\Pt2,u%8q^rfRkK)cAeI:0E$b_a?GjO7_M$r`BG+WK0J9[<9A&s!ua%'sNh/Agqe4hk*RX/V,:*gZ;
%(jAjPC<R\:I(O>WeifMsbI1%gOI9;(/o=X.q)hB`U_j)7CsdSa!kn-R%U(1kkj[h*C!+Zf!,D=c:@o6*i$24gNF>RG%1K%gk6B([
%27Z5u:!e+O<MHXF!iZ0HAC.^6Om4QsHA#97'g+_:3->8L*h_"ke-3+r&VHEG(Ca^=I2DtJf"5h7>e2amb,<^aM[O@,>^1A<,-gCj
%A^R>q_^)GUEj0:3D.1dk;dQq0/;6;)OKdd=/pf3n!$#`Th78omYnV-#\WE;`2et$M/PLA$/uVVZ8o\$R6"brsdiE7@\U`/6,d4@U
%k[)^!a[M&!+oUL<7Jmjc,Lqp7--J"j2=Y_@4n5us<Vj.6_qf(-8U-/A9MRN!F?TgP1hKu@Zf1=P0.re+EG26b(W%,=QS0jA](;1R
%kH(_Z_J*GsPlWqoh1s0#78%..L#N;C@!1F;iRT(@G(r?%;aj%"i_06*!4c9PW@S%4\R!ZH7F#C&E1s&#3F30)BGIA5rRU4uDu6Y-
%M9_^SgDWSIYt9/!q%h@V'W7;n('9g_oN'Lh94F4N9@p&9\dgt+NUrI-i,&eT/Qlq+DI2e7>?[/)g8n#XNq%GF:<tM3EL_>T/[sAW
%O0.Hn&Krp3h\J*ogYH^>eLI-`dqif\2Tt3i,o[W_s#!h]&f78I5+T.U!1e$t>7qb?8+kQ@q-jg'3@nUDNFC=+)mQDuXQU(1hG(Eg
%'/^_iXWp`!DAHHg)\S.JQ?pIGhAU4t6(YgfCW1Jbm]TVFSC:fFXE^2Q)gAD</&%EeXYneGH>@50`*B%Eej=\mcd>UR1j"cU906pW
%!3O!,2WldF_A=N=%6/dDY*$_)CPqau]5!2T.tEtRNU/9u<U"ufLB.:[e<5^jm%Dg)9B&6nUSjfO5UpN9ek^&k5lJ";RTFi9?Z'%^
%b"cZcRq\iKPH*U4dS^O5ddXWlK'U/,S[9klq_HTg,#S()d8KR9/-!j`$Z9Wm?*lFaDUc;K6qcAk9NmF2Q@^g@Ge5N6'O2s3guY1T
%l37.A`^$TY4C8:rWBN>m5>+p(D<TP7.k_KtGhQfP#hrB_eNF:1)f-0+o.4O-So>Rh@h&N'Hq+fkq]dtq=k?4)R3c,Y-C:WC(:G1g
%9ij:<;6V#triJ4nWKY.^[C+3k,AKo=A(J.Yb[#"O29oM=Dgkj-=Jb8fb7\BU&<Fg^9@G&2`+kRF#?&qfAaN!!h!DaP.d6ONg*Nd>
%KLgg,`+kR#RLYdX.E5J#C$VO,S>7eHZ:%AI#;1?SE?A?>W]AWfE*6["TA+NhB/-5el%8-)`KDT*jLE4kAZJl*eIi87idNi)P(pt2
%)OpVsCIm`2\AZLC_mu&1':+Afo=b!.WBX"UY.A#?I\qs,4g;kp[atFu^tQ5Q#d"#,,!c9Q<qiXHg;8jBeM`iBFrF^Z*MiX)FhONA
%52JH+FBZlm;=LSj@tRk]Y!f4XmWMZhp"m.#lq/31R'>-+8htVW6Q;dN;3Fcm<1>Bqo$OsHP:Mb1<fZqF\3_F.dcGEoHK@JN8,-;F
%r101D]@AsnEnT;Ml9D3BEjf/(dF.kpM,StX,d(/X'O8O]`h$4B=!IZH.N1?qA\-8]RFf'C'a.@4#]]nTg=+uhL6n15AkT//Z/K5i
%U30qn3h<A7](XaOG*0=C;Mb4\GVS2H$I:nkPLaEbE3Pe2SR(8_FcP"[Di-G<.heLhQr\@4R^+ATX`'K#Qml_4VGWCO#\oJe^3W2q
%JIl;HG86T_N=r1-AWsguDf/Re4l@rrWm*]1Ro@iU$#-;5eQV]VeYOa/IQ*=f`CeY"TuqO(QTs#"EUq;DC963]l:mOKYI6=pH@%Wk
%`g81(8PV5-+"[_6l5PYR5q"p"lHNisJ-1oOEB-pfK;TmCY_0tk2a=<.kDgi2G#Us.YJJDBC-['5p</G1:t+&l>[^)Z8:4rbalS^C
%A69B<ZD&9"nGTFX<.jS'm`nLYRVln)/fUfV1'?b:eV@m1Fm%9,;!I1hi(b(<NKAU:RSXGar9*J05rFIrj?6OG:^ssM@B0L\+<^e@
%3fO0jOFq7mqG.P\e01age1a=)bO$9\EfokPJd"&+i?DF,VhQ0$?2#k\"Y<N1VhSG4RB#`*TSAk5#qt&4619nH8[CDp+8p%dXb?#H
%2bYCZD,$o4?"E=%g*a1,/$8!aTZWZs`8rs9bgk+S0q@eWD;t&S)PjlRnS@Kg#5-`dNl,^Kcpe0/H8V01<7![R.6Fh4-ObE\[3=>&
%"p&:GWA\?e_\.e@p6nU",#dE,=A?>%1.^?@O&i0X!Lhj$Qn7IU'V/WAq!@D/TEUM.>\p9rLC^\?&Za82;rtS$>5-u[2^VIUaEAgM
%iA%/ZKH_UX2H2>XS"N1_?Nch_a9QQ(SP+;I9F[F6`ossd^XTK+_1?OkV$8X\;p[_/]@:dfe&^ZLjXLa12*%I*'mH\g[an@Q68oLW
%Z]pIRf%k$k2$cub&F*T98&JBlld]$NJ/bVoWif6P=D1b!>[C)"2T+4u;bC\;ML2aq)NNJ9[>n-GI`suN6Re#IpUBuj%E`V.4Jf<H
%)Ur8?:.;Za%7b(IWgV@UCgm;"GY&@E_YKnpOrC.+-g8`c;M,=&:>pAJ(^-LCY@^[bjRuOF"]]bnOBCAjn*NP<FdIQG8IaM`N:UU-
%22Ep#go[@VC$HAJ%Tl:sSj[N,+:r.A<ZFK]#ms*oZA_Q00\T,kQUE3:eokOLj\s1N[TZ63km[E&XJC6dNb&\N.5$STqMgciT\X(#
%+`pjY%>gq>=>)2(6+a;=4.",_MGY_3C*gh)>gHZ]"9s-XN7bTu<`0$&b*p)FQdd/T%Ht!TQdhZk[93`Z8aSPQ[;upA@4&C"4qn;'
%+eR^?V("lN%gTL#DGk%obYbcI2lT+=hbsspbEK\:n<BJ)2Q(^,FBac?-H2qrN=]CfC*kgb6:15S=Ss<-'uuk(DGk%fEY;fGq[YH-
%$%gf@-8ijU`mULEQI?7"<E*,;F-rOXAl=9XA*3>=Al<440IPd8P:CAH(j1,akVK1#Au!'S)^0q[:T5rV8[LlJaVmAm^<uYuePBpV
%m_&)Ml6k+B5TUIpSF^ar8IatNjjm4BOJr_q\CP,G0+:)En<;j&2Uqu/T@>!Q*p\Y85H-EJ6je?"P[\<,7`]9l2,I;5!$7K#<#H/9
%o4]U1W36NplSOhEe.)qElX_JE7].^F$U^mZm9?MaVk_b7#4JK>q0'@7%QepH3_Bir0)E8iUK%&p4ZqbBf2tWhn=Ahm<JG,[9rao:
%TU)jTPf?OW;0Qia>Fj>ieg(9hn#$JJ$0mnQ(i&uE#+7)t5Ag0Cp^$'YmO'l&1*u0eKV-behD.afkpJ?%-C?=(XSPKtq+QIW:Q!?$
%7C@oEe?jPCH5>nae@bEDpJ<GULWOk?`]Plh2O%B&"J6fua(d"[W+I_m<=Pc/*2D/k2*8e94JgV*C4MDN*lhh?2=RVB"Z;$4"(H.G
%?E9dLO9lAaVjjC0TNU'(94KA-cks*\jta@^W/[/2jsN$"/pE%Jj!Q^_idpNVS^^[FGN*=R-["Y.L&6F>2h"Xl5&"]h-T,:N"3q5Z
%)Kc]f4pNWDISp9L`"^T;ePBr$ZuS]7^\jl32j/gl?eH`X]:<*:r1o([`F9X4;MPb_"514>PSt[/+a@o6V$8S#iuEeOURmO[Ouqh)
%e?0<9(Vu<8V:<9sd3PZV;F?0QZQD,!W<&3\,u?&p"R6MaE'9`)4WcKibU+p&(:<t6]3"dY;/3=(<15F0.=T/pSCLJoj)^Z0j!Ze#
%h9:6+-oL2hJOsfA8e$=#a5'UM0+;/u3(aXWA*r%4.)d@18_"_O0o/?YBdgr^)mn-lC;::BD,0+>2..N5[>n,em\<IrePU'XZ%mls
%lR4V]PDLch3_BjMWZA`W*MirZOrj5>;/2J]1[Rq-WIYglMSp@]:OF+HEpG,2@$unY?$2Ck5TJHZ*MisW(YgEW*2OKp\5hQ;jcA.O
%4`j2HhTSB\iT2K,n\>o%*Mka-?tNc+;OiZ_2QJ0J^u/muesiGa!4Th6qVA,"K0!)">Mpo@s'eG<I>Xe!c>PE?HQ\gCmNG]$NQ]6_
%M-;kXfk+\I+['!@iA32RH/[H)%8_7h:uB/?#99RFH`?I2f"E@LV)B@c*+#@_Pk*11MG`[f28CJhU4oA,c=.Z$hV,iUI[HF)9<B?n
%ihO\+@Z!=FBU7R*FkeOEL5?,9p0?-GC-WiY)r4Ug%=1DO_I=sZoufr[KP)`,.2=$8R21=`?]$4<SSKY<>@ch(H3o0X'WT]!W3MR*
%7!.Pqg/<f4^=G\dUgRp0OScW;%F6IA6#3QZkY^S-koHT[_,Erh*FA1sh)qMNUdKg5Pc@LG#'m,HVpq@W?k%U=n<>D4RlTf4Vpp7I
%3!+rV;ef^H9Tsa_8>&7:`#T3GFLi%og'QM0[9[9NNS0Mn)&361H4H:<e1bClQI_P%e0&?MZ<'jo9pKZkSaO',&"lF7NiL88]\Yqj
%9kWZAOX<5I>&(]qabInA>hZ0$PX@,'/iR@FHpTZ&9U@LXU5,o.S(Q/ZGKc^g/B)66ZYu/(8^K.b]Imr0kc*&8or/PR/Sg5[q?`p=
%==55^D=SR6f!L,N]F9L[#K-C!l!rsrPEU\*EtA_Ii^=lb`DMAepo#7424f1a,Obp'p^"DMaAC6eC'R4NVQ9rb.,0rV[807)Y_8'D
%)-VX_Jq?e3OBJoT)og,kT%0($cb5kIiQ>\-JOUM?LcIV.6)`Nt`rRj=$,Wu^FIPiAB[=;82K:/A3]=g6C"$HbF^CiK54jVVm*W1s
%V0GDo0q\7$jSN#5NX1DUI%(?".d5A:6#t`Dr^L?,pa"aqf!2\3]6hBsS9[.*e[oO_nVlAWf"@sj*`7UNhS_3,D3<N]N2!^`hmT5*
%d97M20>:"/V8?a8qh$(X9Y8<]Bl-?Y$`?:2!/E%(&#Wh?N>g:-i\W'/`-[cm`bBCVM;Imij#"skCSuP)[Zo1I;HBMV4=GWsd70+\
%';Igt@HGE-gYL?%M'7fD)E4QL)H+f.cA<_%b3J0.d#+*!]@>,&,ZDFCg0'U@NO<AtPq^/o6M5F=Ug?>rf:"`0d[[NaS?>V>6mo>e
%>'GWcYrQ#ulSM.7@mrfGNkjl$ri[5%0sn3U=(`lk3A9O#FrI/d$;&A(m5.@6P`M<C'4Wk=>B?].#ui=q:3WUEOcRop.JG$B%S4CR
%U-B*Y"prE`#.G(<"-H^8dFI6556S5T9qDPu\8\-Z*0>mY$N8B)4:Oq-AF+D`.Kc`n=fort+Mh8M'84[F6]8h^`elRJaJ3F>Sq]ZR
%r=nm:f-ZCu(fXVfl_t:e_2W?VSd$Y7G07.>NC$4B5dptE'-"I^3D=fW1^4o`)MJO1m=>nE.SMbaTV<A@Ci,<LY='H&Zh3-Z7jgLc
%Y!HR^`2Gc$?r&7JoZPOt/h[lhYKamW[NW:(@1jeT1P)c)+5si,HpP[tB-!oi*qFt?)Q%;.bbL::r53/3);kF^7prG[Vp3_\mpgGu
%+L4!PK4i.eI9Mc_ZXCkaW>M<Qb]+89lc-T+"S(.STLJhR_u4+(\NDO7M60FdhriW5-N!dQGX6B;5pR7D)Q:%;h%1gO@^9A$e\ugD
%=fYi7l9U/dX!=R:LV;1qYTuB\P2g/QHY1eo8E9u1hI5b.S&WmeI\4-]F9a%c14\c\n"XXI:=4-J1&)=eXE<Rt.7f`WRq2Ao@@&eH
%%_F5/Z8qk(bm_<:_!K$dgWlL?i#$&(QBAa8pKiKI_cGdJ+8DOGa*$Q&ioJ)@`ZKLFE'@t'qk7;;T!$g#4#hRo2#$qeCi90%mV(L\
%qgNM[n^iZQXoi\*eD,0U3c6>5\PC9EnTr@hF`saURldc;gF.R;%6q#Y/FN9(P509b0&Ql4k'"5/fBjoh^_%_MD#HfJL+UX:p<XeE
%r,oUh`!#58h0bQ?ep=qiLZ7(eDu]73T9TA"]RBe.\$,hTB0Z4ej_$gR2dcK1q<$T7n>hW-ro(KH%7:POq;&6(o)hAA8)O5oA,3mF
%#eZF0k>>@(^FpN'q"LEZjE(=qD>reS`uiHJI.OZtIeW`Srlq@us5pdTI/CN?]_s-d?iSBk^\dh6^]!8`s8&5Uf73Jeq%l7kj#?)G
%bCBBQgV;2Zrg!IQo@"NPT<J:ZZ_./jro$*+J&XGXrSQ5aC*^dNf72/^rQ"J)s1OBidp!aJroWU_rjVFb=.bcXp^7?TWp'+X;+u@U
%]#uKkS:#.W7%Rpi.-j*:fe(&X8ko:3K>OE.mus!567qu"\Eh<7-9C,`mL:bs](.5,5BLH,s7YcJN\qpk]fP7e*o`HbIZWS7%EhPU
%['[ZE\g6#BNf)p)k38eTfdl_j^HjudphR3[2+Mr%7MV`"F:TTsc!&T&ln<t#>c*tGWif.k;b4rh0sbW:Z=fH.T2'CZ4Ge9h0$*<j
%%(t+'?O]#W4U<-S'XLY]M)I;KZ*;h4>B)2A[+4".4"78$NjcOE9Ht^M8.SZW@fEDrU,&oOM%-Sg3':Es3)W($`:0.j/!6`rqU"s%
%KnuJC>hOmu/\:ZpJ'agI<gh'cf&S1jMbD#uqd6:?0]0i!YnJk;ofG"[[Ftc<<F"PZ[EOC2D:i[uiU"h]Yslnj&=6Pscj"=FBEreM
%1'CA"-%:8KJ+TaHY#[#r\ifO=ESAS0l6"3/?cmh+'G4H5%.2f3j6_(T?Jg*+WR;3T6%::lERt_Z$)H`R,Ofhm7-_4c%Vs8Yn#`G'
%Y4dOYNVd-)Q-@!D4Y"K/g+Z94_RcGYU/lW`C<XM:<@kp)C!6rs\'lc\<.liZg2YWh!<J:WZ<6/s^FcHTeOr([1DUX#/*Nm-i#TC;
%UBiuNL7:CqY%j_pM>\SemHPj4LraaLe$qrHeMgr0@8(^7_6qpLcG=d0dM,9ZUX,Ne/9%[)[cPhW`+$t(%uE5I`p@p4JWbPG$":7,
%g+cF<(5Frl3\qr@FR0KS3V<[X81&srj?pIalKsHA%kK@!=#<K@7QAOcru1\Yf1sp_k8:?s>4P/[Y9ceKrHm2NMtsl@KQ:Jb$8`mD
%*!s!b=pas%5<aYhdZb-3(V_H]A`$"m5hc""`Ko]s#iiQTs2Po_SP4<Spa3Lq]R_T*S)$b#Pi&$Eha4uLoM/"s;(B%b$mgp-K(iPH
%Lj$_r&+"g9qLUd!a^1Js\t"E&gp6i>`lR[jZYWeoSapNj$qkO!d6b/i<pZVb9JUW^RgsA^FN2CL5O#ksI9D=3[9ZRuef4QMrFYF8
%iR\I#:qu(DW1YZjV?9@j:P#S<"*\h*LV2D#htje>q8Y^+6-(.3r8'2=CJ2/$mdE,[0t=glDXZVFqun'Hb9Ns_rg\1.4hF7sTBpd)
%F(r@M#VfRab*\FN.uA)iM7CPhn]loEY5M:af/m[bl?O$*XR_fRk]>r$jl10oD#9Pt&-U(^TZNE0NtMCT>05hI=2,U\(?.+cdZYri
%_Yp-,!tgVhZk"`#U1BXp4u!Y/k#j)%D0ur&@UbHcV@EWuUn.S/-:q\/j+re`q@G$2JKRFHH%%S=-V:ZKn#ZH?C,akB9iKaY^ODD+
%c,n@B4</+/*b<2]^S8Lj6rEMc`o)CZVR!V$D%&#p#_>#$GYKsm<qjiajXD0/N]]0b1K1TZk7AFlqte*p=I>=(DGeo?W1F6+S7B-"
%R,,X5l5X=Yfh&YM=bAs+F_LI6RC_M(9?Ej(dk2U"?!LYV&dU,Or:P0l'1JTo7qI7/9)u4?3KO"'q$qfKZV-ABbOPP'rGpsDB\'XW
%%5/O;G#cY;'BX</YEUOOl6LDjGD="R5$c!!7):8`)krkhTZ[-U\UR!Ykquol=GHLq&q?gt-+%EU-RO+SPAu?3!u&X#<Yli"f,D4C
%9,kVXC5#;1i?5+iG/"X-p^tiYN@lW)[D8;W1\&3@F[h(W7#gfUWq_U!)J,2q-jc.iF&!>=1hhf5^UTnIl(+,We[d*"5@'i`6kg]b
%U)km+/W#!M-r<Y*4=t^Be/s/&e^0o<6!:4`7.Sa[_Y_=4lr$D)]n;)HF6jkQ#O4*Ab,\'?b5EV3@&6CYaR>K6EfT91DrJTkr3AN>
%WM!KHPtA!^6n;WTVf[M$2\O,eLE:<`m$U+`o\n]`XN/bR6/S!&PF5CH:0&%h\f:LIkSNRuo\c[@he2_E9ZOb\\R!X(,e5/.k0%J[
%>i/,\\]_1Vk,NpNcDCE$rYZ*o^Ud&6ht0Oe22eI0e(*$.5'\3%9No4DFadI+NfZ_BRkF3.bJDpU0S5C+jY=`<Yb!Y+Uqmg;WcDHI
%Ea[s?=Gm*e?2TM2lleA,/:&rpXW7)FTOj0)(?&J2Jp$1]1tD0R`\bljkEtV/SK6Mf$YEZ1&fsLHER=8S`\<QC5or7fruLk2?We;4
%PDY<"MF^I*heQ3=m:+<+EZTj^/!s4@LU-2h6jEi2A;tV4Rqu/tBh/WIgI7&IQqgQm>0gJQ1"cpZSPQqF&u$\=XI4D\2Qq]8`b?][
%Fn/5%%#'e!NJlD9]u_sp5G>55hl,O"fb()AlMZHPHB9_Vc8W:Y19NXu7(mn)aiYPjVLR+O=!%*T:fXPcPAL'JCeBu`@]H\)-FSs0
%9$PQ&\=l8#2`s#J<]=_;J48ud26J@.eHu[YXT`>u(]`*P=;KsoGD*9=2a.dnHY\rol(C>:1_bS+:lcm3cqqgX7"+S`i%TN9"+/\V
%:pV&R)g[=>>)hf]ZdB^CI]4<oP^rCS^lDk_s*`dp3g+'TL*;eQ+ZLg#fm*F=jSJSoaU=ei$G)ml=^_9k^MlM/8<l4HU`\rPs7,\H
%ZW\f_`h1!Dlu.CR]ANPUlaP3Tr:5bATDnBX?i9Wlhs-803fni;_36aqqdIE<5$jOp$d1+bbLXjP$$(!:=FYLEks"X.=/5?gp"qSG
%PfdH0`eN`m9C-1,U?atEiU+G-BR3ku_gs3bSHpkCH<SJg^$:^2aK%dGTr3].XgO^leN1`'=k\f:#,_5kJjl*,<ngb/G!=j0*Z!2d
%#nV!Gkr1Ru_MT]-nam.cf^1#b1*hYKjob(0r4UUl:d5Ep/k)BVS0[634J3Na<%%FR6gOI,N<ceBMASMN:nEJbeAA-/$fE6_\<?2L
%1u^%XZ]^A/IRstrCgX$+5hpi[YHVFm[MT'.O>S#d$W5.QjETb.H'c8H*NT?g/0*X%jQ,oC4X3DHP;_AH:oP(K?58cOFuYDm8F<$p
%T7*lY=&KJ@9WPPt2*C?\0/4OTCde(R7V//epfDr3),X^Lq.e9F36n[;`]R7ZQCauX7Z$=CIWZk&6*`tDK6RmD9/FHrP5!5HX0BGh
%R63k*@[1+1W_J%(%!nC>L2f@UedH7o+qB-Jeijcb9Kuti$h'uC'&Ls]Z[.k8NV@+TiXa#CGT$@-p"b)"[[e_T4&ol8Ha+/>pL]=c
%&$MkaBl]`7)t`)b.3F`>F$s-coPu9SL_A1<C:,SE!rf7Ca7@YsU;B0ed;)!&dY:-<'GP&Ds4c;*KUi9,BZT<p]d5AVRH&H*?=J/O
%Ug)N*lG%8sre[KR+gY,^3]7/%M`Duq>:D';rXi7`Is*Q+=/0C$Wobj4n+rnd&h),2m??b>]AEP/H\hc%+2K&230YV)UJ72S!-$AD
%Le3uiWn/mm?AUkh9:>EG/%J>shidi$=)0)r#X`d&/Q8Ge&NC)F"*Vm^8;cadjHllmA!?lXiCfn1<uD-WeD+5l[B:mr>g0PA'qTX<
%O"[nUiV\20e7*SS<-!funF%MV$VX1"2aH_b9pj+tNpCS@!6Gjt'jTK7k%Z%(QoaPsjZh516o2.se_n"W0_Y!DQ?H]WkJ9msN0^O5
%`$7,4%)LrRUOWpI]r.Y"(d/tLmSc-rIaTP]0qoQ@Impp'[d_H"D1K%%XjN%)!24Xtf4t]U+%r'1SFb0?1LMd&.mI9]L[VmC>He?'
%YJGimd7T09-#>kD-B<CpE@Z8$b[E.gI>W^fXn+UF8<W*5\BBA"B>6M5+c4TJ,Ebor;:d?T.ts;>R^:+c6bEANrF#2Bpn22!`9Xlb
%3loQcg_N4krR0euQ8tfSGle=_dg]e*6X0ZT5i2b\;p$d8*DK.^"M*,ajh>I!dp"nAZmIb&(CQFNm^:V-71rT&Ae/VXdPX-BA7p%W
%"KH0lpq?DKc0+HiS:^W6`+)DhSb1g/>Q2#<N;PQ>[mRcO._<6u`9Yi8WY)%`26H.UbG)'(r+oc5'X.bU9=l?>]MJ<dNV;<GYeoOl
%SWWCU3IGKe-r8ageDkV+:ZfnGj6I5`Ob#bL0F([X?,<bNdQY&,hnlp^ZnsHgBh7L]mWC<2]ZZ%&MY^fY/pG+a*r>5XUdgK;ZHZ8r
%QkXm9dK2CVfeo*<ecTJ2/7fsa9Z<p[g0!1L&6hsYXQ5m?og"qg%n*Sf;#BKh=Rf"8L=8bO85EGq;VH8N$c/d];<\g30]q\mBC,!8
%l*n\>h+%+NC#3@#RoI"s.,7eaGo',/d"0^+La%$8YqLL$Sjnk68B%]'aeX"^Ef_#GlQkgCKc?@GOH\,VkKk6S=_H4+DaQ!Ui9;<Y
%Jk6[obeWiD,h6([2@oF"#,otec?qFJ]1@^>@&HW$I#&4a@KdURqLasj*42EUA*;4pMHIZC4c*8-Icbes]*YXK._&tujqi>(H,F\e
%N6djRcYiTGBll);&sQX=,YYZ[@I,g?or->4>P+.P-V9--Z_p4le[rhB1?R\SMnOIk8D8^`69_qhRJcEBTGe8V0qZjAV:k`s:X:o(
%?J9.D>"TO4as_("MoC:fQhFl0Sb&dUWrmok+/FJYht<mL\qq_a_H$>AOctQh5MFDKdP="u>K9A<1<>DP"kZX5Tm<XCZ^[[%2@UWa
%WN*!J,Zo"5\<jMY=!7!qr.JW[+:gRnNqd&1L&c,CA8,7On:]Jbs%@\[Im]d6*Z`41N')p.&ZMNtp.\T?/aLsb,a^'<iKJAT3Y\Yt
%P11q*V]JK!N,]ak5#=mOkV^)]8N\-1Gd@9A3"YeT`'7lQ=!\*)6P_@Iko6)3Z3"csd#+V%8)>a*&Mil"53jL[fn`P/,k;2Jh%d07
%Q.:6GU?K7_r2qda,jIFH)ksLfc&@>&";^QU7m?i"L!BY$f"Ma@62Pk]RH"PM)R[.jZUu(4Y:%[i='KN`!d+&CWr9'd-fd,ina:.$
%06:e9oi*,_ipf"FFQcPR&`?a=&R=U0:Zu6Z<MHBJn$WGr:p6FsZQ>\&1FVu2?V]J/G:(C\AX,$pBR>fU!)tmC\5%%G[.JYL3[^8\
%f,kL/![.]c?"9Lg4iC$>rT-@]l\Mt(WaiQtR#$c#CP7dk6*g[)/hFr(KQ;9g=XEE,qbj;ajZ'CdIX/u>l"L*9_0[Q=6^Z_)i,,e$
%59Df3`6"AcO!%>]^o^J*8X^fE>AID7U_uqa0[3:(!e\9HnID#@4R5bSh,U%f0"J4/";h8A6,GOV1$!sJ6Ak5O$9@/g17KQTJ5IC,
%,cmB,ARVTir/#Asl3M2Fett#Rc^Hu(X'h-F$U`V-kGVi(a^PX5>3e_caX1B'[M3D"QA@SArS]N$=G&gC_N==%ln'fHeA%5:27:3#
%2P<#rj_(k^Y6HS^&3S,.h+cMPVaWGZ]2X^R!kDZGME)ic_cRm;0[KoS67S?:NAXNh:MqFTG969=]9\84'NKe$h6IHY:QJ^BCT-Mo
%4WN+PU_2b1.J"2BNZcOk)q#^N,Q87tZ3TO;`PbE%X`IB)(\*i'ccP"H,g9kj:e,8I-'kGil*BLO.`A'1TqLD?S>&Z<Z!>g3Gd^ig
%GqlgY\Qs(r83nU;eAL&`H\BLm.P:1p,O+GTm([r:]m.7X5DH?+ok!I&POH/uSJSsq*H^J(c32UeLYeH(So\+K$@HctP[!Re[DOsW
%j:O9^nEmg@b@Y+%J@0*2*B.X90t^+R;<Tt.g,Atg[cqV;XH=a%'KteP<':SuP\#&/Ma/.AVX!O)G4hI#5G]oUB<dj9l$IA^c`bPH
%]Ps\nfDHq=4glr;6B0G+`W:s!nC``pVk]jrfI["hXAfE;O,eC>.7W\]0'E%c7.uRL_!>)Z%a&rC:H`3oHYgE3O]guT7XjfYU:YY]
%_7Gt0.4su`Rom!ef0l)g7*5H$*L2u"WOsVtgXd_m3"o1Zli`?Kb>L>uGK-[K@@k!!epl'lpKYgelhroOk.e>6,)6JJjePT5BQ@O=
%T`+br$:N7qK6[%gC$oe`lo8l2\dso&TT/YNe_O52b<SU!#*MD5?4$d+$';D$.BnqaT/qbo2fCHIECQ*+m7(')]l"V-+tkUcm0*QB
%"n'$IqO0&];&S_?bY:5?83mi^gJ6]<:&1,Dc"i8r-)G?DJtON]cBo!Rd=GCbdT]p9ga2TG$c5hSR=Uflcp!!-eu0GhDmi"uPT-9J
%j?[,pn5'T`^YIg2ZXXe@38\8;^5+oC]\`=492H[8M4CTi4QReZ,WOC%9S+h8X:*(#Aru!i:lj2`<&/n(/6G+eB:d;96D)B*PrMU_
%L9d3J[$<fT0>l:MU7sc:!.-Sa[g-L)'X_<U1Sr*?Q-V15?uS2h['^B.BT_@M6"3;X<R;,bf%8uk&IDC1RCB@[-#PD>KS!f[5Vs?*
%4@\:pS.Zp'e1r-9+t^$.=L>XPJMh)DpZPk&(Y5H*%OA+8&GhE@@O#q?iY.r@Y6QMB5RlQ9WB+MJGZ`t'/*!trP,GMBrgS-A>I"Hd
%W1/61HC#2J\NqK*s/SgI;**tZGmn'5UdEbo[^#bkXe76INO$Ou:+#ia>'7FW(`Dd<6Cfa05FZ12bErWlN]ZbfZk>e-fAV3HKaX+f
%2AgNAAl]jfn0qnL],X)([B&KKf5CPR16p<Mag,?+ChB:_f:J$ihc.=$?p)^a5"NYr=rS$pLD?Nq&7=I0\ImL>DoiDlLcO9)@f))p
%]j1QlG/fro4M\Js#)'d=mYpEV^8!;jB<q<TICo?`hrd-j-<',b(+kJABD<WnWCKaIYm!iCA:Dcg"NY`1VmAW2Ls.Q\6a4DQE31lq
%S64W*Z\a?HJZsIAeWUdH?=dH;F;tVb/No[k.!E_TPFVHULR&M*KGMiBj+\s\?+3NHrm4gM[>mNAnX!V2'VuD;L69[H)=Ug`JUs29
%$rZobk-")jF5diH?&B8]1B4)ChGt9Tda`:q%oWT2[]Cp8?D,4f;<YM,s-!"OX;=J'L(c*9Yp;,>_/XuP?AM(D)YfI-gTr?PTre;h
%lko#'1'T-mR:'gc@Qpn*Q+D"<)Y7+R2OD+9?a7`!#BkQAP?-Xbn,">n<We`LO$67_a9B4onVM!-i8Bb06&3EfPf8m:."_(KVn3^6
%2tfsCIRhYGJ`cA>bJ=qg1VR7P^Y(e>\3"2WTAT2,ZEE\pVk'=&FNIOt-6Li<htcOnI-7CM.`c)i"7$4nXa?9"LP-iW"0,)4ZBDrh
%Fr+@V[G.X5DqkF2?EJ8c+k;qb&n"4K<aB0Vl)\HfiPRZq.+gj9'6Bm3b-k>'GXcra6(e\6p?fG!Ol/(Vb8D[RgK9o!/q3%OiBoPZ
%flalA)3i]DfAf!3B1Ao+jiZrQk'ZMU#cTn4C`3D;=#*TVJj&+r5gX!9odr\=(!n]G&E+\u4JpLGJV)iPC/WQM0m22Y+#%k?;W@qB
%g$C]%h&J5hK[km*%jl)<`>\hX_U=Qa08,40KS"!R!1]Ck:93U%R86#%jn;@ILkSk=0piT#A3*:b`\ZQ/%pI__3gZX&?"P-9;@S@n
%@q6T%2YW%prE#)9B_Jl_'o^2s3FdVbGmB@cY)BUgA:X--RZb&h)V2J5GQD$tDBj'FL8Eu>iVUf(f!cW">_!oRb)]I-71SK6J?3/"
%"o9#=Kc0!i*WW,cRR=Y?[IF2nn`9;"+^fP7MZGF;BsN_KjZLb[Li"#.=apOeJZ<P\Q*fJ_RA(Up=V/OfS8^b>$_erEG^/LGl4_bs
%^6dnW:^UYcD9aXoJ/!['([#WQ0$K@55JRaaYU'KPoTQjF'GG?&L5oYESO2=t)Q'"51F6h`GGCT:+h4MQT5OVMOL:=L%eZKb+c@S/
%q"erV3M^M+8c+8+Ubf/qcPoTaPhbZWA_GD5PN3B9FSO<=/77&pT00U=L>a=/G)L>ARXJj*X$Na4O5Jbs66=h%;jZk3-[@;X7R?Ip
%pt45NZIf-INJ4&2c=)S&M/(/a%Q<'jIb\C#Mg\/@<>7aM[(C\fIL`.T:/iHJ5FjrWaqSFcVorH_7&_Z!e$$7f,IKWdO>jTOiGCbf
%#G:=S5qZf7i@iBSS@u1P(R"0/fp:T-_!$NKc'qJuSj]QD`/is</XLR9lj![X<?'![%pLNU0:38>d1c"7F:-SNLDf(c8FT$E?NO)f
%5#-beiOsA55B9,nB0j699!(^A7'._\\E$,G9Mo^7Q+ZK><MHfej9D$]D9^Nu=S8-=UL[%K4O@QU]p#'XD0$Up+V?a;h2F+T23TN^
%AkX-MHlaW]j2c8^MM[qnBT&D71sO<V*Z<kZ0Jm)u(9*/)7pVF2SNrK2e?dXE+)J'p[%sVOZd;IL^fl2Did9ad0NiW>p,mNb!K0"H
%I5k="D!<_V3KNOcTY2HM#RVkhBCXXF3>,MJRu;G9E1kTf8=O\qEKaa`K\d/dq_\URbM)JDqB9b?j*cf+/SmH#$djbO6Y4FZ8lBlb
%a4^3ErK0%<LGnT]rKdjaQkQl1c7.uKUDF:Y41hD*OY+O*$9GMdH?ORKH]"AMoL^Y9[C5\e/PB8BEo]QfS5?HR+4cn.Us5/ZW=^_&
%r++27`P,?M+llt[1C'Vt=Og'eh"OZ_gp15<JeiWJ'g-(p(9d*-PoM"1>uiFthV@k`kGSl&^gjdn(+O>T<5glVjcl0%;^%idX7gqX
%2<7HSk_,n.pC:+N;MgA!54oLpl"FilbJG$'mV?mk"L!EZ$anRCAhEpFD=@'ZrJek-rru`D3Hc%?Lks43BaMeD"VW_uaQI!t09%Ru
%%\aum\Lhi@3S_").^!QGf3+Y<)^%FGm4R-Lb`MUe(<u+gK$FNMBa*Ft!JJblC.CNeV25b%"OBN1?mfGV)=DXrThSOKUEq@s_TC>d
%l5U,EoP<*A.V$F9[VFkB%*eB'odRqnU80ZrRB\@KKU*fPcQiB8[oMnm_8dlG-e%l\`oQk;>kXHIMd&#eJ6eC/SASlVfngiLad^>0
%TZ<Yuhg>(22_YS[br(>8kFu[Bgt7tC&chXF=H"J2H-[Yngb6Z)*mWF"l9/M`m%G_$jaKtW\>,[>$i9-HE^gIn/b+sXCXnu!NGu_i
%6Ab&tqf'+n3)OVM-*$X#F7*a(A?4ij,Btm(M%(Spqa(,4k=95!%VOGZ-?/-ZXYLj'f^SBFR//oRQ:mI&pDFN&K$p;3>6Q3i)T-hE
%C)]%PSH/qd7sb8NG)D?=2_62pm,0ld9U;!?c^Q:[;0Vh[8'K<80??9Wi`mrSJb_b$pfne9kQ#@4FkPsoC7]9[Ad#d@,ptE3eXCD&
%J9\)#pBYR,&1TO:?BZ2'S\nTlbcUFOOqp.aSOf#;%F%%#N<W$:Etslr58PY\G19"XEg-\K7m;n3PCos%*!Fm\Umm6)eKWK(V-NM(
%BTAnmi"s!D1!R]&^E%;YGK&$*Z_])W-@Wq6"-:$m7hX2;Eg*iS@q[HOEDs3^U9I!LkJ-@<M5/"7UeH!4j)N9TgG&%c;&<$]70u\$
%%Ouh.N0'D\fU68]:7G`sA4-F,#4N^DaD(M/%pClk:&mH@gT[@fOI[4ZB(0b,gZEjqr<)%mR6:pH$2cTMH='X:^UaGn[aT_Pp\V.4
%I]7j79MIo'((-cCF(<JJFJC=R&UDdP(,0R+X0*8oHnL%Ue)6>!248NHY]mB/2i$XOCN"V-&/7HNcd9Os?$@A$1YE8#+dj#i<m(4l
%`A,+i`ZCmu!$R3FjMC3>fj\c;8=U'd.ND;DiYPa/T`?8+\;,VJ$lp6<Pp904W1!`WF5Yi$Idae#$Ai''WBtMfT7(cFWAebEDmj<+
%Dmo\6I^?]^_bVW^k?Ps<gDOAk\^Opa@j,0V;F$L'6]gJNF38k]re*1lq%:TaMB=i)hd&mpKB.(0/_PF3>H*b^iu:O_r#Z/MbJo19
%InXm*"7KG9Ga`ClHQR;if5Z)UP\rdLrS?Kagm1-/iU'QQkd[>7-\l&%+"htiL"k$G2nZ8u0E:V>h4)0nJ,T+kTWmlK]`.`OMq:2k
%5QL<9Vtj[QhS"F1iL`?KJ+M[;hgYJ,#q'"RGkpokJ,[pcJ+mlkN43$~>
%AI9_PrivateDataEnd
