%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: autumn.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Ленка
%%CreationDate: 2/19/2015
%%BoundingBox: 0 0 3055 1081
%%HiResBoundingBox: 0 0 3055 1080.5005
%%CropBox: 0 0 3055 1080.5005
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:ModifyDate>2015-02-19T20:33:33+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-02-19T20:33:33+03:00</xmp:MetadataDate>
         <xmp:CreateDate>2015-02-19T20:33:33+03:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>92</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAXAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AmPHOHe7dTFXUxV1MVdTF&#xA;XUxV1MVdTFXUxV1MVdTFXUxV1MVdTFXUxV1MVdTFXUxV1MVdTFXUxV1MVdTFXUxV1MVdTFXUxV1M&#xA;VdTFXUxV1MVdxxVX4YsLdwxW3cMVt3DFbdwxW3cMVt3DFbdwxW3cMVt3DFbdwxW3cMVt3DFbdwxW&#xA;3cMVt3DFbdwxW3cMVt3DFbdwxW3cMVt3DFbdwxW3cMVt3DFbdwxW3cMVt3DFbdwxW3cMVt3DFbdw&#xA;xW0T6eLXbvTxW3enitu9PFbd6eK2708Vt3p4ra+K0nmJEUbSECpCKWoPoyUYk8gxlkA5lEHRNU4R&#xA;v9Ul4y7Rngd++T8Ce2x3a/zOPf1DZGr5P1s2n1j0QNq+iTSSn+r/AA65d+SycN1+tpPaGLiq/wBS&#xA;Z2HkCZjyvpxGpAPCLdqnqCSKbfTmRj7OP8RcbL2oB9I+atD+X0QuH9W6JtxT0wqgMfEGuwycezRe&#xA;52YS7VNbDdOH8peX2g9IWoXagkDNzB8ak5lHR4qqnDGvzXdpda+QdPjkRrid5lAPOMDiCe243yiH&#xA;Z0Qdzbkz7UmRsKR0fk7QEld/QLI68RGzMQvuDWtfpy4aLEDyaD2hlIq02jtraKH0Y4kSECnpgALT&#xA;5ZlCIAoDZxDORNk7sW1jyPHLLPc2UixAjklrx25U3Aau1flmtz6CyTE15O00/aRAEZC/Nhz28kbl&#xA;HUo69VYUI+g5qSCObuBIHcLfTwJt3p4rbvTxW3enitu9PFbd6eK2708Vt3p4rbvTxW3enitu9PFb&#xA;d6eK2708Vt3p4raL9LFqt3pYrbvSxW10drJI3GNC7fyqCT+GEAnkgzA5uktZYm4yIyN/KwIP44mJ&#xA;HNRMHkt9LAm0bpOjyajdiBWCKAWkcitANumXYMJySppz6gY42zjR9Kh0y2aGNuZduTORQnalPozc&#xA;4MQxig6PUZzllZR1cv4minVx4lp1ceJadXHiWnVx4lp1ceJadXHiWnVx4lp1ceJaY/5k8vTahILq&#xA;3ZfVRQnpEU5bnflX3zA1emOQ8Q5uw0erGMcJ5MSutPuLSYw3CcJBvTrse4IzVTgYmi7aGUTFhcNJ&#xA;vzB9YFu5h68wppTx+XvkvClV1sjx4XV7ohfLWsNWlq2w5blRsfmfwyY0uTuazrMfegXtZULB0KlT&#xA;RgQRQjscpIIbxMHkt9LAm3elitu9LFbd6WK270sVt3pYrbvSxW3elitu9LFbd6WK2ya58qXCVMEi&#xA;yqBWjfCxPgBuPxzLnoyORt1sNcDzFOsvK00nxXTeiAR8AoxYdTuDtjj0hP1bLk1oH07shi0/T4mV&#xA;o7eNWUUDBRX782AhAcgHXyyzPMlVjhgjd3jjVXkpzYChNPHJChuGBkSKJUr+wtb6H0p1qAaqw2YH&#xA;2ORywjMUWeLLKBsJRF5SthJWWdmj7KoCmvz3zEjoxe5cuWvlWwR+m6Na2E8ksLM3NQoDHpvU9Ke2&#xA;X4sMYEkOPm1EsgAKY8syOJx6dyx4lp3LHiWncseJadyx4lp3LHiWncseJadyx4lp3LHiWncseJad&#xA;yx4lpRltrWV+csSSNTjVlDbeG+QkInmGcZyHIqq8VUKoooFAB2AyQkxLfLDxIpTuIYriF4ZRyjcU&#xA;YZGVSFFlCRibCQal5YUkPYgKADyiZj17cSa/icwc2k6xdhh1vSbH/R9swHP4lSCwuJ24wxs5HWgr&#xA;SvjkowMuTGWUR5lPI/KKfCZLg/5aqv6iT/DMwaLvLhHXnoFaHypZJOWkdpIqfDGdjXvUjJx0cQdz&#xA;YYS10iNhRVZPK+lO/JQ8a0pwVtq+PxcjkzpIEsBrcgCWXvleWGNpIX9YA7R0PKhNPpzGyaQgWDbl&#xA;Y9aCaOyHt/LmoTUJT0lrQl9jTuaZXDTTPkznq4DzTn/Cum8FHJ+QI5NXr47UzM/KQcP87O+ipdeX&#xA;NMlgKRRiGQD4JASfvqd8lPTQIobMYauYNk2mPLDxuPTuWPGtO5Y8a07ljxrTuWPGtO5Y8a07ljxr&#xA;TuWPGtO5Y8a07ljxrTuWPGtO5Y8a07ljxrTuWPGtO5Y8a07ljxrTuWPGtO5Y8a07ljxrTuWPGtO5&#xA;Y8a07ljxrTuWPGtIa4sbSeMo8ajwZQAR8jlcoxkKpshklE3a+1toLWP04V4qTU7kkmlMMAIigicz&#xA;I2Vblk+NhTuWPGtO5Y8a07ljxrTuWPGtO5Y8a07ljxrTwPVPzZ83Xrn0bhLGE9I4EFae7vyb7qZ0&#xA;WLsvDHmOI+bq56uZ8kqj8+eb0cOur3JI7M5Yfc1RmQdFhP8ACGvx597KfLn5w67FMsOqwjUIT9qS&#xA;NRHMo7n4aI1PCg+eYGp7KxkXA8P3N+PWSHPdF+YPzY1WeqaTD9StmqFuJFDStTwrVF/H54NJ2Xj5&#xA;zPEe4cmvUa2f8I4R5sWPm/zMZPU/St3yrWgmcL/wNaZs/wAphquGPycH8xk/nH5so8ufmxqFvIkG&#xA;sj61bE0NwoAlT3IFA4/HNdquyYyF49j3dHMwdoSBqe4R+t/nTZwSvDpNm1zx2+sTkxofcIByI+dM&#xA;xsPY8iLma8g5c9cP4RaSxfnb5gEtZbK0eKv2EEitT/WLsPwzJPY2OtpS+xrGtl3BksX5x6LJpvr/&#xA;AFSZb2tPqhI418RL/L/sa+2Yf8j5OKrHD3/sbJdoQA5b9zH7v83fMMrn6vFb26dhxZ2+ksafhmfD&#xA;sfEOZJcKXaOQ8gAr6b+cGqxyAahbRXEP7TRVjkHvuWU/cMhl7GgR6CQfmyx9pSH1C2YXH5leU4dK&#xA;Gom75ctltFH+kFh1XhXb5nb3zUjs7Px8FfHo7EavGY8V/ref6z+c2v3LMumRR2EP7LkCWX6Sw4f8&#xA;Lm3w9kY4/UeI/IOJPWSPLZjkvnzzfI/JtXuQT/K5QfctBmaNFhH8IaDnn3ouw/M7zlZuCNQNwg6x&#xA;zqsgNPEkc/ubK8nZ2GXSvcyjqZjqz7y1+cGmXw9HWIvqM4H99GGeFvuBZPx+eanU9kzjvj9Q+1y8&#xA;etj/ABbJjN+a/ldJOK/WJVr/AHiRgL8/iZT+GVx7IzkdB8UHtHEO9NtI86eXdWYR2t2onP8AuiWs&#xA;b/QG2b6Mxc+jzYt5Dbvb8Wpxz5HdJfMP5seXtLdoLSupXS7FYWAiB8DKaj/gQcyNN2Zlybn0jz5/&#xA;Jjl1cI7DdiE/52eYGkJt7K0jj7LIJHP3h0/Vmyj2Nj6yl9n6nFOul0AR+k/nbJ6ipq9gvA/amtSQ&#xA;R/zzcmv/AAWU5uxtvRL5s4a7+cHoEXmvQJdKGqrfR/UOnqk0o3Xhx+1y/wAmlc050+Xj4OE8TmeN&#xA;Dh4r2Yxe/m9o0UhW0tJrgD9tisYPy+0fvGbPH2NkI9RA+1wp9pQHIErrH83dDlcLd281tX9sUkUf&#xA;OlG+4YMnY2UfSQfsTDtKB5ghO73z75Ts7NbqTUYnRxWOOM85D7cF+IfTTMGGizylw8Jco6jHV2xG&#xA;+/O+zVithpkkq9nnkEf/AAqiT9ebLH2NL+KXyceWuHQIBPzv1IN8emQlfASMD99Dlp7Fj/OLD88e&#xA;5O9K/OfQblwmoW0tgT/uwETRj5lQrf8AC5i5eyMkfpIl9jbDWxPMUy6bzPoENil8+oQC1kr6cocM&#xA;Gp1CgVJI8Bmujp8spcIieJyZZoRFkikmf80fKasVE0rgdGWJqH76HMwdlajuHzcY9oYu9Had578r&#xA;6g4jhvkSVukcwMRr4VcBT9BynLoM+Pcx28t2zHq8UuRQ3m38wdH8uL6Uh+s6gwqlnGaEA9C7b8B+&#xA;Pth0eiyZtxtHvZZs8Ye986GQgkHYjqM610yF1LVEsrZpTu52jTxbMfU6gYoX16OZotIc+QRHLr7k&#xA;HoH5i3ul6rb3kllDc28TVltwXjaRaUK86vT58c0efXzyQMSBv+O96GPYOKJ4hKV/D9SO81/mnJrG&#xA;oLc6fpMOmQhArQtI07M38xcCLtQUplel1c8MaFFOTsPHk+qUvhQ/WpaDr+pX7SSXEUS20bJGZEqC&#xA;JJAxQUZjUHgfppmz0naMsk+GQG7qu0uxseHHxQMjLzrl8k99XNs87SnKeY2+0OmAkBsx2oxfE/xb&#xA;AdcRIHk2T2CL9UAU7ZJx3etja071sbWlsjK6lT9GBINFBM5Vip6jA5A3W+rjaUTbx8xyfZew8cLX&#xA;OdckYJFUUGw8BhaDu71vfG1p3re+K0h50FOSde64C2wn0KbXXlqWOzhvYkne0mthcC4Cc1FAeQNA&#xA;ooCp77ZqR2lWQwI3unY/lhw8QPRIFcswUdTm1cM7I6NhGnEH3PzyTjyNr/WxtjTvVxtaWuyutGxS&#xA;CQgZSY2ofoOByIm1vrYGStbr6h5N9gfjha5ypGCQKKDYDsMLQd2/Ww2inet75WcsR1DYMUj0KjcI&#xA;JasDSTx8fnkhR5JjIjYpZqEsHL4WrKNmA6fSc0uPtCQ+oW7g6Ifw7IKPRNC1SG8udV11tPmtQgtL&#xA;GO0a5ebm3FghEkY5KSCR1p06Zr9TnnlmOX6nd6I+BiJECR1LJYP+ce9butRuLS3vjHFBFBIl7eWz&#xA;28MxnUsEhIeRmZKUeoFDmFLKAAXJj2mD/CUr81/kh5j8s2cV3f6hYtDKZQDGbhqGC3kuWrSH/fcD&#xA;5LDLxDQ/G9fpSe08Y5gptF5WtdD8rLpd/brcX91bzaul/E7BIgphjhUVCs1VlDfF0OW4zIWQaogf&#xA;j5Ov1WpGTICBtX9v3pHBe3B3YKw99jlup7WlHYk/BGj7DGQcQAA80SuoQg8ZAUPj1H4ZXizjILC6&#xA;jSSwS4ZfYiBIjLyDAr4g7ZaNnGIbKfuxJSiN9l+x+Ry/HrpxNcV13tE9JCfT5KPINX02D060O+Z+&#xA;HtTHPnz+bh5uzMkPcsMrfLI5O0T/AAj5soaAfxFUkl0wW0YXUFbUmNXsAhBVPi+L1K8SfhFV60IO&#xA;YZ1uUyq9nLGhgI8XDsgJrqOv87ePb78I1eQdU/lodyH9eStRQe2TOvyIGkgqfpC7/n/Af0yP57L3&#xA;/YEfkcXd96qb69i4mVKBhVeSkVHtksfakj1EmE+zYeYWnX7RG4TusbDqKjMuHacf4hTUeyMpFw3V&#xA;k1vSyvI3cQ9uW/3YMvacR9O6cfY2U/UCEZfeTb3V/wAvLvznZ3vqG0nCrp8Dhylqu0jzcKlZasr8&#xA;T9lNz120eo7RnPIAdg7/AEelxYJeGY2TzJ7/ANX6WHW/njzXb6NJosWov+jZFdWgdUeiyfaVXdWd&#xA;QfBSMrI9XF1dodLjJuknFzcDpK4/2RyzxJd5Z+DD+aPk761df7+f/gj/AFx8SXeUeBj/AJo+TJdI&#xA;1q7mtQhlJkiorVAJI7HpmbDXZaq/uee13ZmKM74dpe9MV1K5WhajA7CopX7suh2jkHOi6+fZ+M8t&#xA;k2S11Q2X117R0t6cuZp9n+bj9qnvTIj2i0/H4d/vO7p82g9ly53sgzMs6gghlrsQa9NuoyyevyHl&#xA;s249HCPmt4r4ZR+Zyd5b/Bh3Im3W6K1iheZE3KINzTsD0qffBPtY4vqkPixHZ0ch2BWfpG2QPJdc&#xA;raOMc50NGkjXuCKip2+nM0dqXC63+xxv5LPHwg7WoHUD9Z41+Heo8Kcdvn8Wc5l7TzTlxE+ju6Vv&#xA;+p6/F2Lp4Y+AD95X1db2/WjZZkiTk/TsO+ZWTKICy6TFilM0FkF1HNXhUEb0Phjp9XZ9JILLUaQx&#xA;HqohMPI/kvRLq6tLnzXqTWltqE1wlpYR1HL6nCs0xmuB8MMax/Ed6kdxmIM8ssSY8o8208OMgD1T&#xA;Py/anGoeZPKdr5gvrSy1fT08kvbLax6bcwNcQRXClOdxDbR8pZZaIaO4UHly5N3PPGBw+u+bkY9P&#xA;l4+Mk33D9fRj2o/mH5O0XVtAuvLFtc6u+iiZJ59WJIlDBRD6NWYxCOjFQEUAnoThjA8JB6uSdNkm&#xA;bkeEdw/SuuPzZsNR8rPpFzc6pbXr38t59bkdbwiKVHQQCRmicKnMUovQEd8uhQnxUKqnCy9mTA9J&#xA;tl155l0DW7L6tBqcl/bX1pBFO4BhjgazWP1TSRQ3KV5R93XMLV5J48UpwHqifvP6nGOCUJiMhzeb&#xA;+Yba309re4sZ5JLAM3qq4PqgRtxO9BUE0O/UZjabKc1iYHiECu78dPe7PS6rw4gE1GJ+Nf2/YlTy&#xA;6hfXAtrZSJXA9PjQnkSTT6B3zKxzjhjxE+m92nW5znnQ6BX1bTdV0tUN0rcJjwDI3JansaHKtPqR&#xA;mvhly3cbLiMOYTq88xC/0z6nCEiSB4xBAKk8RFTfb4Qp29zXw3woabw58ZJJkDZ/zvt/Rs36WVyr&#xA;5JNb6j+7eRCQyLIzb0pxJop/4HM04pRkKNXXL4OfiyRlzANWd/K080qz1HW76006y9NJbyUQpdTE&#xA;0WpoX4j7VBuN98tx60wHDLcuFrsGMZbjtF6CPK2i3vk1vK8dzpSGDzFJpkeolp47n1VXk7BpEHqX&#xA;x/aRf3ZT4QwA2PiHj4/V9N/j+j9riynIHfkenk8rvvL+vafqt5pt8jQS2b8BLIjosvX405KKqRQg&#xA;gnrkcuqMaN8/cvCL25KDQ3kc8VtxEhlV2MlaAcaddv8AKGVjPxAzJ3jX2t8JgR4a52qidFmFv0oD&#xA;yP8AlDhT/k5kCZn951/t/U9BHHjA8GvTX2+n/ikwtbTU9f8AMFrpCzlI7i8aD67IhI4uURZAmx+F&#xA;E2Hc9Tk8MseH6a3A/T+v9Dzkp8R9XIWmPm3yBDcW/maLQ7iC6g8oPDxiiKNcGN1b62Z2UB2dGTkS&#xA;2woyrSnEZxyREYEg8Urv9DbotTLxSJfSeXk8pyTunoP5NecY9E8xNpWoD1dC15fqd/Cd1BcFUkp4&#xA;DkVb/JJPYZRqMdixzDiavFxRsfVFD6/+U3mSw8ySaVaxpLFNPOmmyPLErSxQmvIryqCEoWycJ8Ue&#xA;Lu5sI9oY6FndLk/L3XC/B5beP/TBpvJnYj62ekXwI2/v098t4T3fw8Xw70HtLF5ohPyy1djQ31kh&#xA;+vDS92n/AN6iOXDaE7f5XTGj3fw8XwYntTF5uk8l6loyC8kvLaRPrMljIiGWvqxGjj40StDlWTKc&#xA;fTpfwZRyQ1QMRtXU97I9KM2s3VhoMkaHi9sIkUfCC8lHep35cY2/4M+G+mNxkcsT6pGX3bD3bj/S&#xA;/LWSjR4T/Cyg6tE+rvpoHJnRU9Bh0CSTJMWXsPgA38RmmOklHF4h6H9ETH7/ALCy496TrXfyG8rw&#xA;W51DTZ7qwEYDy2SyNJGKn4vSZjzRqkn4mZf8nOpwa2ZoSY+LtyDzfVfKWtaKZ0sa6hbIkl3JPIhR&#xA;lDOSwLA+m7DrQcdugzYHOatqqB8k+tp47fTbbiVLFYAwrT++ZU5fSSc43NxZcsif6X2C3cQqMAB5&#xA;fakPmTycutail5ZTxRyemv1uFjxWZPiaMtR46gmPjsfDNz2RlkIGMuQO36WvPnEa2tjt3DJFrRgS&#xA;QPLCkhJjq0cnB1VWFfGg/DMoEDGTW3FX3/j5spZ5SIo1LgPx5V8f2K09/eSwH6xH6aD7MwVgA1Nq&#xA;4MmbjIGxcPS+knzC3Tf0lNZxypE1HRVqCBWg3app1OJy48OU797LJMzxge56b5bvLO40DUtDeSzt&#xA;9RuWEul3epQxTWsUoQ8zJ6yyKtQgX7J65h9n54wlUvpaswlVxO6YX3lzS2/SKWt95SiaRtP/AEex&#xA;sbNxEsUdNQ5fuCG9WT4k67fy5thqsG1+fX5NPHn/AJ0vtX/obSP0vdPy8nnSm1O1ktI/qkHqjTFM&#xA;n1qJ/wBxT1WBj4GvY7jB+ZwVz3o9evRePP3y+1x0jy5Jq6vJaeUhpx1OT1FSJVk/RYVfSoAAvrE8&#xA;uW1MfzGCvq3rv6pGXP3lI/Mmq2lE0rSFih0qAD93boERnrVugFRX7zvmm1WfiNA7N+OJ+qXNiurQ&#xA;T3Gm3EEFDLInFQTQb++V6WcYZIylyBZZATEgIsABw42cdGHUduuY/kzbmZp4xHMfUQHkFbeh8d/n&#xA;jH0mxsmRsUUI+m2rCUKpQzU9RlJB2FB+GXePLa96YCABsJRp2kw3WkXEAceoZ519bjuWEjAMQCOo&#xA;9+mbDPqTjzRlW3DHb4DZrgZGJAPMlkGnm70+6gubFhHPbMrwMFB4svT4SCM1xyb2Wc7kbKO0nVfM&#xA;mmSXElnJ8d1ePqUrSxxS/wClyAq06CZWCOVYglKbZZPWk8z0ppkB1Vtcvte1+7S71WZHmjjESEKF&#xA;ooYt0UAdWOY8tQEcQCBXRbfmskjFpFBCsABQNQkd+tBkDqZVQ5IMkul0rTz5ptkYE/6LLLwJpVlk&#xA;RVrTr9ommZkM8/ysj/TA+w/sbZauZI7wKtlGitaadq1lfGL4baeOVuIBYqjAkCvema+OUggktNlW&#xA;/KHTZLb8yvON9MpjsNQS5axErJ++Sa59RaqDuwQbj3zos+sx5cUBE+ofqaoggoi68iOsGrLBeWdl&#xA;Lc3CTac0SJF6EcbNVCVVT9kjp4Zkx1eKJjY5DfzWUshv1FlPk+yjtvM8sk2rJcQzrAlrZiT4UaKI&#xA;B34cuPKR1rsMxM+qxygIxq9/iiIN2SidYihfXrK6ltPVeJ7jjecwq2/qLvVajl6lOPTbJY5VAi65&#xA;bd6kbpNJDpYYc9PgUHVfrbk3aijKvw3vXqSoHp5P8zEfx/wV/wAd/ajh8uq1ZtOSariwSMahJduV&#xA;d5GI4EJMtBQSk0qOlMqlrMYH1fw1+z3J4SxzzLaaZqVjaWkrpNJFLNcTyWwkhUzSyc+QDGtfHfML&#xA;VdoeoHGelb7+TdinKAofikHpkP6Mv4L+yYx3FueURIVgCBToR75rxqZJlMk2UJe6tqN750up1eKC&#xA;6lt7a4uZYU9MyPFMxXnxPcKA38w2OZ5yjwIzIupyry2H49+7WD6vgyW88/eeri3nt5LmF4rhGjYL&#xA;GqlQwpVSACCOxrmMNUGzZjb3WvFGSW6lKOCrgksCDscs/Nk9WYjFKNamlisrdfXeL/SLeNnSgYp6&#xA;6uAKg7qRVT8x3y3RAGZ2B9Mj8eEj7evwbMkiIjfqPvRcttbSyCR4lJUBUBFQqqKKBWvTMUTkBzbC&#xA;AS4W1uJRMI1EqrwDgAEKTWny2w+JKuG9kULteyqylWAZWFGU7gg+ORBrcJQukWs9rptvbzkGWJAr&#xA;Fdxt4dMv1WSM8kpR5EsMcSIgFmo/5VRT/pov+5fmf/gP+2fY0/vv6Lv+QUf9/F/04Y/4D/tn2L++&#xA;/orx/wAql/7+D/pyyP8AgP8Atv8AsV/ff0W/+QS/9r//AKcsf8B/23/Yr++/orl/5VJ3/T30/U/4&#xA;Y/4D/tv+xX99/RXf8gh/7Xn/AE64P8B/23/Yr++/ou/5BD/2vP8Ap1x/wH/bf9iv77+i7/kEP/a8&#xA;/wCnXH/Af9t/2K/vv6LY/wCVQ1/6Xn0/VcB/Jf7b/sVPjf0VZP8AlUf7P6Z+n6p/HKz+R/27/YtZ&#xA;8X8WrD/lVtPh/TVPb6pkf8A/23/Ytfr8nf8AIL/+13/06YP8A/23/Yr6/J3/ACC//td/9OmP+Af7&#xA;b/sV9fk7/kF//a7/AOnTH/AP9t/2K+vyWH/lVHrCv6Z9fieP+8fPjXenemT/AMBr/LV/mo9fkv8A&#xA;+QX/APa7/wCnTIf4B/tv+xT6/J3/ACC//td/9OmP+Af7b/sV9fk7/kF//a7/AOnTH/AP9t/2K+vy&#xA;bH/Kr67fpuv/AEaY/wCAf7b/ALFfX5Nyf8qz5fvP05y/yvqtfxwn8h/t3+xX1+S3/kF//a7/AOnT&#xA;B/gH+2/7FfX5O/5Bf/2u/wDp0x/wD/bf9ivr8nf8gv8A+13/ANOmP+Af7b/sV9fk7/kF/wD2u/8A&#xA;p0x/wD/bf9ivr8nf8gv/AO13/wBOmP8AgH+2/wCxX1+Tv+QX/wDa7/6dMf8AAP8Abf8AYr6/J3/I&#xA;L/8Atd/9OmP+t/8Atv8AsV9fkhr3/lT/AKY+u/pb0+S8fV+pU51+GnLvXpl2L8nfo8e/Lh5dV9fk&#xA;pt/yqKv/AEvPo+qUyUfyP+2/7FvHjeTX/IIv+17/ANOmH/Af9s/2Kf339FTb/lUtdv8AEFPb6lT8&#xA;cf8AAf8AbP8AYr++/otH/lU9D/ykP/Tjh/wH/bPsX99/Rf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:DocumentID>xmp.did:62AA004E5DB8E411977AB74E911A0A13</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>65E38D5C5BB4C15794E54958DB2EBB22</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:62AA004E5DB8E411977AB74E911A0A13</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>derived</stEvt:action>
                  <stEvt:parameters>saved to new location</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ef7ce386-4e99-1945-b74d-a4b8c97d8195</stEvt:instanceID>
                  <stEvt:when>2014-09-30T20:51:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Photoshop Lightroom 4.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6BCDADBCCB48E411916BCD0CCC0DB0B3</stEvt:instanceID>
                  <stEvt:when>2014-09-30T21:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4C0ECA9A4249E411BA95DADCDDF235FF</stEvt:instanceID>
                  <stEvt:when>2014-10-01T13:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AE75CE60145AE411940DACFF9F76D31A</stEvt:instanceID>
                  <stEvt:when>2014-10-22T21:35:41+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:77A7FD04B4B5E4119F26A4B380991710</stEvt:instanceID>
                  <stEvt:when>2015-02-16T22:27:51+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:706C7F2257B8E411977AB74E911A0A13</stEvt:instanceID>
                  <stEvt:when>2015-02-19T19:49:49+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:62AA004E5DB8E411977AB74E911A0A13</stEvt:instanceID>
                  <stEvt:when>2015-02-19T20:33:33+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:706C7F2257B8E411977AB74E911A0A13</stRef:instanceID>
            <stRef:documentID>xmp.did:706C7F2257B8E411977AB74E911A0A13</stRef:documentID>
            <stRef:originalDocumentID>65E38D5C5BB4C15794E54958DB2EBB22</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:crs="http://ns.adobe.com/camera-raw-settings/1.0/">
         <crs:Version>7.3</crs:Version>
         <crs:ProcessVersion>6.7</crs:ProcessVersion>
         <crs:WhiteBalance>Custom</crs:WhiteBalance>
         <crs:IncrementalTemperature>-20</crs:IncrementalTemperature>
         <crs:IncrementalTint>-12</crs:IncrementalTint>
         <crs:Saturation>0</crs:Saturation>
         <crs:Sharpness>0</crs:Sharpness>
         <crs:LuminanceSmoothing>0</crs:LuminanceSmoothing>
         <crs:ColorNoiseReduction>0</crs:ColorNoiseReduction>
         <crs:VignetteAmount>0</crs:VignetteAmount>
         <crs:ShadowTint>0</crs:ShadowTint>
         <crs:RedHue>0</crs:RedHue>
         <crs:RedSaturation>0</crs:RedSaturation>
         <crs:GreenHue>0</crs:GreenHue>
         <crs:GreenSaturation>0</crs:GreenSaturation>
         <crs:BlueHue>0</crs:BlueHue>
         <crs:BlueSaturation>0</crs:BlueSaturation>
         <crs:Vibrance>0</crs:Vibrance>
         <crs:HueAdjustmentRed>0</crs:HueAdjustmentRed>
         <crs:HueAdjustmentOrange>0</crs:HueAdjustmentOrange>
         <crs:HueAdjustmentYellow>0</crs:HueAdjustmentYellow>
         <crs:HueAdjustmentGreen>0</crs:HueAdjustmentGreen>
         <crs:HueAdjustmentAqua>0</crs:HueAdjustmentAqua>
         <crs:HueAdjustmentBlue>0</crs:HueAdjustmentBlue>
         <crs:HueAdjustmentPurple>0</crs:HueAdjustmentPurple>
         <crs:HueAdjustmentMagenta>0</crs:HueAdjustmentMagenta>
         <crs:SaturationAdjustmentRed>0</crs:SaturationAdjustmentRed>
         <crs:SaturationAdjustmentOrange>0</crs:SaturationAdjustmentOrange>
         <crs:SaturationAdjustmentYellow>0</crs:SaturationAdjustmentYellow>
         <crs:SaturationAdjustmentGreen>0</crs:SaturationAdjustmentGreen>
         <crs:SaturationAdjustmentAqua>0</crs:SaturationAdjustmentAqua>
         <crs:SaturationAdjustmentBlue>0</crs:SaturationAdjustmentBlue>
         <crs:SaturationAdjustmentPurple>0</crs:SaturationAdjustmentPurple>
         <crs:SaturationAdjustmentMagenta>0</crs:SaturationAdjustmentMagenta>
         <crs:LuminanceAdjustmentRed>0</crs:LuminanceAdjustmentRed>
         <crs:LuminanceAdjustmentOrange>0</crs:LuminanceAdjustmentOrange>
         <crs:LuminanceAdjustmentYellow>0</crs:LuminanceAdjustmentYellow>
         <crs:LuminanceAdjustmentGreen>0</crs:LuminanceAdjustmentGreen>
         <crs:LuminanceAdjustmentAqua>0</crs:LuminanceAdjustmentAqua>
         <crs:LuminanceAdjustmentBlue>0</crs:LuminanceAdjustmentBlue>
         <crs:LuminanceAdjustmentPurple>0</crs:LuminanceAdjustmentPurple>
         <crs:LuminanceAdjustmentMagenta>0</crs:LuminanceAdjustmentMagenta>
         <crs:SplitToningShadowHue>0</crs:SplitToningShadowHue>
         <crs:SplitToningShadowSaturation>0</crs:SplitToningShadowSaturation>
         <crs:SplitToningHighlightHue>0</crs:SplitToningHighlightHue>
         <crs:SplitToningHighlightSaturation>0</crs:SplitToningHighlightSaturation>
         <crs:SplitToningBalance>0</crs:SplitToningBalance>
         <crs:ParametricShadows>0</crs:ParametricShadows>
         <crs:ParametricDarks>0</crs:ParametricDarks>
         <crs:ParametricLights>0</crs:ParametricLights>
         <crs:ParametricHighlights>0</crs:ParametricHighlights>
         <crs:ParametricShadowSplit>25</crs:ParametricShadowSplit>
         <crs:ParametricMidtoneSplit>50</crs:ParametricMidtoneSplit>
         <crs:ParametricHighlightSplit>75</crs:ParametricHighlightSplit>
         <crs:SharpenRadius>+1.0</crs:SharpenRadius>
         <crs:SharpenDetail>25</crs:SharpenDetail>
         <crs:SharpenEdgeMasking>0</crs:SharpenEdgeMasking>
         <crs:PostCropVignetteAmount>0</crs:PostCropVignetteAmount>
         <crs:GrainAmount>0</crs:GrainAmount>
         <crs:LensProfileEnable>0</crs:LensProfileEnable>
         <crs:LensManualDistortionAmount>0</crs:LensManualDistortionAmount>
         <crs:PerspectiveVertical>0</crs:PerspectiveVertical>
         <crs:PerspectiveHorizontal>0</crs:PerspectiveHorizontal>
         <crs:PerspectiveRotate>0.0</crs:PerspectiveRotate>
         <crs:PerspectiveScale>100</crs:PerspectiveScale>
         <crs:AutoLateralCA>0</crs:AutoLateralCA>
         <crs:Exposure2012>+1.49</crs:Exposure2012>
         <crs:Contrast2012>+66</crs:Contrast2012>
         <crs:Highlights2012>0</crs:Highlights2012>
         <crs:Shadows2012>-85</crs:Shadows2012>
         <crs:Whites2012>0</crs:Whites2012>
         <crs:Blacks2012>-96</crs:Blacks2012>
         <crs:Clarity2012>0</crs:Clarity2012>
         <crs:DefringePurpleAmount>0</crs:DefringePurpleAmount>
         <crs:DefringePurpleHueLo>30</crs:DefringePurpleHueLo>
         <crs:DefringePurpleHueHi>70</crs:DefringePurpleHueHi>
         <crs:DefringeGreenAmount>0</crs:DefringeGreenAmount>
         <crs:DefringeGreenHueLo>40</crs:DefringeGreenHueLo>
         <crs:DefringeGreenHueHi>60</crs:DefringeGreenHueHi>
         <crs:ConvertToGrayscale>False</crs:ConvertToGrayscale>
         <crs:ToneCurveName2012>Linear</crs:ToneCurveName2012>
         <crs:CameraProfile>Embedded</crs:CameraProfile>
         <crs:LensProfileSetup>LensDefaults</crs:LensProfileSetup>
         <crs:HasSettings>True</crs:HasSettings>
         <crs:CropTop>0</crs:CropTop>
         <crs:CropLeft>0.078038</crs:CropLeft>
         <crs:CropBottom>0.940594</crs:CropBottom>
         <crs:CropRight>0.852843</crs:CropRight>
         <crs:CropAngle>0</crs:CropAngle>
         <crs:CropConstrainToWarp>0</crs:CropConstrainToWarp>
         <crs:CropWidth>3570</crs:CropWidth>
         <crs:CropHeight>2438</crs:CropHeight>
         <crs:CropUnit>0</crs:CropUnit>
         <crs:HasCrop>True</crs:HasCrop>
         <crs:AlreadyApplied>True</crs:AlreadyApplied>
         <crs:ToneCurvePV2012>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012>
         <crs:ToneCurvePV2012Red>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012Red>
         <crs:ToneCurvePV2012Green>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012Green>
         <crs:ToneCurvePV2012Blue>
            <rdf:Seq>
               <rdf:li>0, 0</rdf:li>
               <rdf:li>255, 255</rdf:li>
            </rdf:Seq>
         </crs:ToneCurvePV2012Blue>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=121 G=109 B=1 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>121</xmpG:red>
                           <xmpG:green>109</xmpG:green>
                           <xmpG:blue>1</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=150 G=90 B=2 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>150</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>2</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=121 G=65 B=1 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>121</xmpG:red>
                           <xmpG:green>65</xmpG:green>
                           <xmpG:blue>1</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=121 G=65 B=1 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>121</xmpG:red>
                           <xmpG:green>65</xmpG:green>
                           <xmpG:blue>1</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=89 G=80 B=1 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>89</xmpG:red>
                           <xmpG:green>80</xmpG:green>
                           <xmpG:blue>1</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1080.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1080.5 li
3055 1080.5 li
3055 0 li
cp
clp
[1 0 0 1 0 0 ]ct
3055 1080 mo
0 1080 li
0 0 li
3055 0 li
3055 1080 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[-3.1365e-5 -717.548 717.548 -3.1365e-5 1527.5 728.999 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.929412 .564706 .305882 ]
/C1 [1 .929412 .560784 ]
/N 1.4517 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-3.1365e-5 -717.548 717.548 -3.1365e-5 1527.5 728.999 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2lprVc]nrVc]nr;?Kjr;?Kjr;?Kiqtp9fqtp9fqtg0cqYL'bqYL'bq>'j^q>'j^q>'j]
q"XXZq"XXZq"XUXp\4FVp\4FVp\4CTp@e4Rp@e4Rp@e1Pp%A"Np%A"Np%@tLo^qeJo^qeJo^qeIoCMSF
oCMSFoCMSFo()ABo()ABo()ABo()AAnaZ/>naZ/>naZ/>naZ,<nF5r:nF5r:nF5r:nF5o8n*f`6n*f`6
n*f`6n*f`6mdBN2mdBN2mdBN2mdBN2mdBN2mdBK0mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
~>
<~mHj0)lK[Wukih3mk2tdejQ,@]io8qUi8EMMhVR)Egt^Z=g=k65f\"g-f%/C%eC;srdaHOjd*U.ccd'h\
c-4DTbK@uMaiVWFa2c3>`Pog7`5BL0_SX.*^qd_"^V7Fq]tD"j]=YYc\[f8\\@8rV[^NTO[C!<IZa6sC
Z*CR<Yct=7Y-+q0Xf\\+XK/D%WiE%tWMlboVl-GiVP^2dV50o_USFTYU8"?TTqJ'OT:_aJSt;OESXl:@
S=H(<S"#k8R[KS3R@'A/R$X/+Q^3r'QBmf$Q'ISuPa%DrPEV2oP*1ukP*1riOcbcgOcYZdOH>QcOH>Qc
~>
<~O,f6[NK&mUN/NUOMMd7IM26tDLPLY>L4t>8KS5#2K7ec-Jq8K(J:N0"It)orIXQWmI!g<gH[C'bH?jd]
G^+IWGB\4RG'.qMFEDVHF)uDCEcQ/>EH#l9E,TZ5DJj?/D/F-+Ci!m&CMR["C2%BrBkV0nB4kjiAnGXe
AS#F`A7T4\@q0"X@U`eT@:<SP?smAL?XI/H?=$rD?!U`@>[1N=>?b<9>$>*5>$5!2=]ed.=BJX+='&I(
<`W7%<E3%!<E)ps<)cgq;c?Un;c6Lk;GpCi;,L1f;,L.d:f'tb:esk_:JXb^:JX_\:/4PZ:/4PZ:/4PZ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
3044.86 442.977 mo
3027.68 387.805 2958.97 393.931 2941.79 430.715 cv
2916.02 393.931 2855.9 418.455 2849.46 455.238 cv
2829.68 441.436 2805.87 450.749 2793.4 467.09 cv
2778.6 460.709 2760.58 461.649 2746.84 473.639 cv
2751.13 442.987 2714.64 420.509 2693.16 442.989 cv
2693.16 422.553 2643.78 404.161 2624.46 426.639 cv
2592.25 387.815 2536.2 414.379 2523.54 445.03 cv
2510.87 414.376 2472 416.421 2446.24 436.856 cv
2411.88 414.376 2381.82 445.03 2379.67 467.507 cv
2360.35 457.292 2323.84 471.595 2328.14 508.376 cv
2321.81 498.328 2294.73 502.129 2291.78 525.579 cv
2290.88 525.579 li
2264.84 483.72 2212.01 475.859 2192.87 494.073 cv
2207.9 455.246 2171.39 436.856 2147.78 445.03 cv
2149.93 412.335 2106.98 400.073 2085.51 414.379 cv
2083.36 369.423 2044.71 375.541 2025.39 387.8 cv
2008.22 357.149 1963.12 351.018 1950.24 373.493 cv
1937.36 355.102 1909.44 359.192 1909.44 385.756 cv
1864.35 348.972 1821.41 369.41 1819.26 404.147 cv
1802.08 387.799 1772.02 383.712 1759.14 410.28 cv
1759.14 363.278 1716.2 346.93 1699.02 361.235 cv
1694.72 342.842 1677.54 326.494 1647.48 342.842 cv
1683.98 306.06 1641.04 273.368 1617.42 279.497 cv
1623.86 248.845 1583.07 226.367 1559.45 248.843 cv
1544.42 169.147 1437.06 187.537 1428.47 222.279 cv
1413.44 203.889 1383.38 205.933 1387.67 242.716 cv
1361.91 199.803 1301.79 216.148 1299.64 248.845 cv
1286.76 222.279 1258.84 230.455 1250.26 250.889 cv
1230.93 189.586 1138.6 210.021 1134.31 238.627 cv
1119.28 228.41 1093.51 236.586 1089.22 263.149 cv
1072.04 220.237 1007.63 226.369 999.035 257.021 cv
984.004 244.756 966.827 244.756 949.652 281.541 cv
934.621 244.756 880.941 248.845 870.206 279.498 cv
861.616 271.324 840.144 269.282 833.699 293.803 cv
820.818 263.152 782.171 265.195 769.285 287.672 cv
728.487 259.065 696.284 299.933 700.575 334.673 cv
642.601 312.197 616.836 387.803 638.305 406.197 cv
625.426 406.197 614.688 414.368 625.423 440.933 cv
591.068 400.063 533.095 416.413 522.359 442.977 cv
515.914 424.587 498.74 424.586 483.711 440.933 cv
485.859 426.628 477.266 410.282 453.649 416.413 cv
421.444 353.066 339.849 367.366 320.526 408.238 cv
309.79 381.67 271.139 375.542 247.516 404.149 cv
221.749 379.629 180.956 402.108 180.956 436.845 cv
157.334 418.455 133.718 436.845 131.57 465.455 cv
125.127 453.193 101.508 440.933 95.0679 475.672 cv
92.9229 445.018 58.5674 434.803 41.3916 451.153 cv
34.7578 427.477 14.0381 423.318 0 432.065 cv
0 550.091 li
.000488281 550.091 li
.000488281 727.197 li
3055 727.197 li
3055 550.091 li
3055 432.065 li
3050.86 434.641 3047.3 438.326 3044.86 442.977 cv
cp
level3{
gsave
clp
[-2.23396e-5 -511.07 511.07 -2.23396e-5 1527.5 723.214 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .984314 .901961 ]
/C1 [1 .929412 .560784 ]
/N 1.4517 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.23396e-5 -511.07 511.07 -2.23396e-5 1527.5 723.214 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~mHs<.mHs<.mHs<.mI'E1mdBN2mdBN2mdBQ4n*f`6n*f`6n*f`6nF5r:nF5r:nF5r:nF?&=naZ/>naZ/>
naZ/>o()ABo()ABo()ABo()DDoCMSFoCMSFoCMSFoCMVHo^qeJo^qeJo^qeJo^qhLp%A"Np%A"Np%A"N
p%A"Op@e4Rp@e4Rp@e4Rp@e4Rp\4FVp\4FVp\4FVp\4FVp\4FVq"XXZq"XXZq"XXZq"XXZq"XXZq"aa]
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j_qYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'b
~>
<~O,o?`OHGZgP*;)oPa.N"QC!r*R$jA2R[]e9S=H.@St;RHTV/!PU8"BWUSO]^V5C,eVl-JlWMuntWiN2%
XKAV,Y-+t3Yct@:Z*L[AZa7$G[C*EN[^W`U\@B)[]"5Jb]=beh]tM+n^;%Ft^qde&_8=(+_o'F2`5T^7
`l?$=a2c9BaiVZIb0%oNbKS2Sc-=MYcHab^cd:%cdF$@hdaHRme'lgreCE+"e^i=&f@SX+f\"j0g"G'4
g=k98gY:K<gt^]@h;-oDhVR,Hhr!>Ki8EPOi8NYRiSieUio8tXj5]1[j5f:^jQ,C_jQ5LbjlPUcjlPUc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
288.172 638.863 mo
244.017 607.124 188.474 587.111 119.97 589.341 cv
77.7046 590.715 37.0308 601.384 0 619.766 cv
0 743.502 li
37.6094 786.358 66.3525 838.301 87.021 891.487 cv
107.77 806.127 189.497 702.384 288.172 638.863 cv
cp
level3{
gsave
clp
[-1.46669e-5 -335.539 335.539 -1.46669e-5 144.086 924.71 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.352941 .466667 .54902 ]
/C1 [.231373 .305882 .360784 ]
/N 1.4517 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46669e-5 -335.539 335.539 -1.46669e-5 144.086 924.71 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~4$,Mc4$,Pe4?P_g4Ztqk4Zttm5!D.o5<h@s5<hCu5X7S"5s[e&5s[h(6:+"*6UO4.6UO706psF26q'O5
77BX77Rfj:7Rfm<7n6'>84Z9B84Z9C8P)KF8P)NH8kM]J8kVfM91qoN9MA,R9MA,R9he>V9he>W:/4PZ
:/4P[:JXb^:JXb_:f'tb:f'tc;,L1f;,L1f;GpCj;GpCj;H$Lm;c?Un;c?Xp<)cgr<)cgr<E3%!<E3%!
<E3(#<`W7%<`W7%<``@(='&I)='&I)='&L+=BJ[-=BJ[-=BJ[-=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1
~>
<~:/4PZ:/=Y]:Jaka:f("d;,L4h;GpFl;c?Uo<)cgs<E3%!<`W7%<``@(='/R,=BJ^/=]nm2>$>*5>?b<9
>?kE<>[:W@?!UcC?=$rF?XI/I?XR8L?smDO@:<SR@U`eU@q0"Y@q0%[A7T4^AS#FaAS,OdAnGXfB4kji
BP;'mBP;*oBk_9qC2.KuC2.L!CMR^$CM[g'Ci!p(D/F-,D/F0.DJj?0DJsH3Df9Q4DfBZ7E,]c8EH,u<
EH,u<EcQ2@EcQ2@EcZ;CF)uDDF)uGFFEDVHFEDVHFEM_KF`hhLF`hhLF`qqOG'8%PG'8%PG'8%PG'8%P
~>
<~>[1N=?!U`A?=$rE?XI/J?smAN@:<SR@U`eV@q0"ZA7T4^AS#FbAnGXfB4kjjBP;'nBk_9rC2.L!CMR^%
Ci!p)D/F--DJj?0Df9Q4E,]c8EH,u<EH6)?EcZ;CF)uGFFEDYJF`hhMG'8%PGB\7TG^+IXG^4R[H$O^^
H?smaH[C*dI!g<hI!g?jI=6NmIXZ`pIt)rtIt*!!J:N0#JUrB'JUrE)JqAT+K7ef/K7ei1KS5#3KS>,6
KnY58L5(G;L5(G<LPLY?LPL\ALkpkCLkpkDM2@(GM2@(GMMd:KMMd:KMMd:LMi3LOMi3LOMi3LOMi3LO
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
95.5737 914.899 mo
117.454 914.119 li
108.078 913.468 100.433 912.919 94.7524 912.504 cv
95.0298 913.302 95.2993 914.1 95.5737 914.899 cv
cp
level3{
gsave
clp
[-1.46682e-5 -335.569 335.569 -1.46682e-5 106.103 924.711 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46682e-5 -335.569 335.569 -1.46682e-5 106.103 924.711 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
3055 743.502 mo
3055 619.766 li
3025.9 634.212 2999.05 653.42 2975.46 676.659 cv
3005.45 694.29 3031.9 717.176 3055 743.502 cv
cp
level3{
gsave
clp
[-1.46668e-5 -335.538 335.538 -1.46668e-5 3015.23 924.711 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46668e-5 -335.538 335.538 -1.46668e-5 3015.23 924.711 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
697.68 801.921 mo
720.052 745.516 756.437 685.3 812.49 646.416 cv
776.813 621.653 735.086 607.079 686.895 611.117 cv
645.109 614.618 607.78 628.153 574.797 647.538 cv
620.858 687.032 662.891 741.877 697.68 801.921 cv
cp
level3{
gsave
clp
[-1.36417e-5 -312.085 312.085 -1.36417e-5 693.643 922.535 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.36417e-5 -312.085 312.085 -1.36417e-5 693.643 922.535 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1509.51 652.761 mo
1456.79 612.915 1388.34 586.749 1301.7 589.346 cv
1224.27 591.668 1151.5 619.184 1093.18 665.104 cv
1195.46 758.583 1238.38 927.355 1238.38 927.355 cv
960.273 926.413 li
960.063 931.518 959.931 936.652 959.931 941.829 cv
1255.44 932.122 li
1276.28 822.37 1381.6 701.102 1509.51 652.761 cv
cp
level3{
gsave
clp
[-1.54153e-5 -352.66 352.66 -1.54153e-5 1234.72 941.829 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.54153e-5 -352.66 352.66 -1.54153e-5 1234.72 941.829 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2709.71 671.555 mo
2657.42 636.783 2589.95 614.131 2505 616.429 cv
2440.49 618.174 2379.23 635.706 2326.85 665.455 cv
2435.52 732.462 2494.64 865.615 2502.98 924.323 cv
2526.82 923.615 li
2548.5 835.143 2613.33 725.461 2709.71 671.555 cv
cp
level3{
gsave
clp
[-1.39055e-5 -318.121 318.121 -1.39055e-5 2518.28 934.389 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.39055e-5 -318.121 318.121 -1.39055e-5 2518.28 934.389 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2052.24 676.957 mo
2004.42 633.517 1944.92 604.29 1872.69 610.07 cv
1809.84 615.101 1755.82 639.141 1710.37 671.753 cv
1796.06 724.125 1867.97 826.369 1896.48 935.097 cv
1927.42 936.488 li
1935.38 855.775 1975.02 742.194 2052.24 676.957 cv
cp
level3{
gsave
clp
[-1.4855e-5 -339.842 339.842 -1.4855e-5 1881.3 949.184 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4855e-5 -339.842 339.842 -1.4855e-5 1881.3 949.184 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2209.68 949.184 mo
2209.68 949.184 2209.64 949.056 2209.58 948.83 cv
2208.42 948.895 2207.27 948.959 2206.11 949.025 cv
2209.68 949.184 li
cp
level3{
gsave
clp
[-1.48319e-5 -339.315 339.315 -1.48319e-5 2207.9 949.184 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.48319e-5 -339.315 339.315 -1.48319e-5 2207.9 949.184 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
669.121 907.778 mo
430.396 896.535 li
431.075 900.639 431.392 902.933 431.392 902.933 cv
117.454 914.119 li
224.925 921.582 557.838 942.356 717.241 925.59 cv
667.263 925.42 li
667.605 920.274 668.216 914.346 669.121 907.778 cv
cp
level3{
gsave
clp
[-1.51549e-5 -346.704 346.704 -1.51549e-5 417.347 931.962 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.270588 .407843 .45098 ]
/C1 [.352941 .552941 .623529 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.51549e-5 -346.704 346.704 -1.51549e-5 417.347 931.962 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~77BX677BX677BX677Ka97Rfj:7Rfj:7Ros=7n6'>7n6'>7n?0A84Z9B84Z9B84cBE8P)KF8P)KF8P2TI
8kM]J8kM]J8kM`L91qoN91qoN91qrP9MA,R9MA,R9MA/T9he>V9he>V9heAX:/4PZ:/4PZ:/4S\:JXb^
:JXb^:JXb_:f'tb:f'tb:f'tc;,L1f;,L1f;,L1g;GpCj;GpCj;GpCk;c?Un;c?Un;c?Uo<)cgr<)cgr
<)cgr<E3%!<E3%!<E3%!<`W7%<`W7%<`W7%='&I)='&I)='&I)=BJ[-=BJ[-=BJ[-=]nm1=]nm1=]nm1
~>
<~BP;'mBP;'nBk_9qBk_<sC2.KuC27U#CMR^$Ci!p(Ci!p)D/F-,D/F0.DJj?0DJsH3Df9Q4E,]c8E,]c9
EH,u<EH-#>EcQ2@EcZ;CF)uDDFEDVHFEDYJF`hhLF`qqOG'8%PGB\7TGB\7UG^+IXG^+LZH$O[\H$Xd_
H?sm`H[C*dH[C*eI!g<hI!g?jI=6NlI=?WoIXZ`pIt)rtIt)ruJ:N0#J:W9&JUrB'JqAT+JqAT,K7ef/
K7ei1KS5#3KS>,6KnY57L5(G;L5(G<LPLY?LPL\ALkpkCLl$tFM2@(GMMd:KMMd:LMi3LOMi3OQN/W^S
~>
<~F)uDDF)uGFFEDVHF`hhLF`hkNG'8%PGB\7TGB\:VG^+IYH$O[\H$Xd_H?smaH[C*dH[L3gI!g<iI=6Nl
IXZ`pIXZcrIt)rtJ:N0#J:N3%JUrB'JqAT+JqAW-K7ef0KS5#3KS>,6KnY58L5(G;L51P>LPLY@LkpkC
Ll$tFM2@+IMMd:KMi3LOMi3OQN/W^SNK&pWNK&sYNfK-\O,o?_O-#HbOH>QdOcbcgOckljP*1ulPEV2o
PE_;rPa%GuQ'IW"QBmi&QBml(Q^=&*R$a8.R$a;0R@0J3R[T\6R[]e9S"#n;S=H+>S=Q4ASXl=CSt;OF
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
384.825 752.668 mo
397.3 776.006 406.81 801.886 413.88 825.5 cv
444.792 769.538 498.003 692.671 574.797 647.538 cv
517.025 598.002 452.918 572.622 388.808 591.515 cv
354.479 601.632 320.423 618.103 288.172 638.863 cv
330.314 669.155 362.083 710.129 384.825 752.668 cv
cp
level3{
gsave
clp
[-1.51551e-5 -346.708 346.708 -1.51551e-5 431.484 931.964 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.51551e-5 -346.708 346.708 -1.51551e-5 431.484 931.964 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
430.396 896.535 mo
381.294 894.222 li
381.294 894.222 392.007 865.094 413.88 825.5 cv
406.81 801.886 397.3 776.006 384.825 752.668 cv
362.083 710.129 330.314 669.155 288.172 638.863 cv
189.497 702.384 107.77 806.127 87.021 891.487 cv
89.7378 898.477 92.3125 905.489 94.7524 912.504 cv
100.433 912.919 108.078 913.468 117.454 914.119 cv
431.392 902.933 li
431.392 902.933 431.075 900.639 430.396 896.535 cv
cp
level3{
gsave
clp
[-1.46668e-5 -335.537 335.537 -1.46668e-5 259.207 924.71 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46668e-5 -335.537 335.537 -1.46668e-5 259.207 924.71 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
430.396 896.535 mo
381.294 894.222 li
381.294 894.222 392.007 865.094 413.88 825.5 cv
406.81 801.886 397.3 776.006 384.825 752.668 cv
362.083 710.129 330.314 669.155 288.172 638.863 cv
189.497 702.384 107.77 806.127 87.021 891.487 cv
89.7378 898.477 92.3125 905.489 94.7524 912.504 cv
100.433 912.919 108.078 913.468 117.454 914.119 cv
431.392 902.933 li
431.392 902.933 431.075 900.639 430.396 896.535 cv
cp
level3{
gsave
clp
[-1.51552e-5 -346.71 346.71 -1.51552e-5 259.207 931.965 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.51552e-5 -346.71 346.71 -1.51552e-5 259.207 931.965 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
413.88 825.5 mo
423.328 857.056 428.415 884.553 430.396 896.535 cv
669.121 907.778 li
672.871 880.547 681.701 842.208 697.68 801.921 cv
662.891 741.877 620.858 687.032 574.797 647.538 cv
498.003 692.671 444.792 769.538 413.88 825.5 cv
cp
level3{
gsave
clp
[-1.36417e-5 -312.085 312.085 -1.36417e-5 555.78 922.535 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.36417e-5 -312.085 312.085 -1.36417e-5 555.78 922.535 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
413.88 825.5 mo
423.328 857.056 428.415 884.553 430.396 896.535 cv
669.121 907.778 li
672.871 880.547 681.701 842.208 697.68 801.921 cv
662.891 741.877 620.858 687.032 574.797 647.538 cv
498.003 692.671 444.792 769.538 413.88 825.5 cv
cp
level3{
gsave
clp
[-1.51551e-5 -346.708 346.708 -1.51551e-5 555.78 931.964 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.51551e-5 -346.708 346.708 -1.51551e-5 555.78 931.964 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
381.294 894.222 mo
430.396 896.535 li
428.415 884.553 423.328 857.056 413.88 825.5 cv
392.007 865.094 381.294 894.222 381.294 894.222 cv
cp
level3{
gsave
clp
[-1.46667e-5 -335.535 335.535 -1.46667e-5 405.845 924.709 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46667e-5 -335.535 335.535 -1.46667e-5 405.845 924.709 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
381.294 894.222 mo
430.396 896.535 li
428.415 884.553 423.328 857.056 413.88 825.5 cv
392.007 865.094 381.294 894.222 381.294 894.222 cv
cp
level3{
gsave
clp
[-1.36416e-5 -312.084 312.084 -1.36416e-5 405.845 922.535 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.36416e-5 -312.084 312.084 -1.36416e-5 405.845 922.535 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
381.294 894.222 mo
430.396 896.535 li
428.415 884.553 423.328 857.056 413.88 825.5 cv
392.007 865.094 381.294 894.222 381.294 894.222 cv
cp
level3{
gsave
clp
[-1.5155e-5 -346.707 346.707 -1.5155e-5 405.845 931.964 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.5155e-5 -346.707 346.707 -1.5155e-5 405.845 931.964 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
751.085 911.637 mo
752.252 914.545 753.4 917.451 754.526 920.354 cv
743.578 922.404 731.056 924.137 717.241 925.59 cv
960.273 926.413 li
960.341 924.773 960.412 923.133 960.501 921.5 cv
751.085 911.637 li
cp
level3{
gsave
clp
[-1.41114e-5 -322.83 322.83 -1.41114e-5 838.871 927.355 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.41114e-5 -322.83 322.83 -1.41114e-5 838.871 927.355 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
966.336 873.596 mo
982.67 787.926 1029.23 715.449 1093.18 665.104 cv
1053.16 628.537 1004.07 603.491 944.9 604.577 cv
891.817 605.552 848.17 621.664 812.49 646.416 cv
893.171 702.414 942.892 810.544 966.336 873.596 cv
cp
level3{
gsave
clp
[-1.41106e-5 -322.813 322.813 -1.41106e-5 952.833 927.356 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.41106e-5 -322.813 322.813 -1.41106e-5 952.833 927.356 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
697.68 801.921 mo
718.228 837.385 736.252 874.655 751.085 911.637 cv
960.501 921.5 li
961.396 905.132 963.372 889.149 966.336 873.596 cv
942.892 810.544 893.171 702.414 812.49 646.416 cv
756.437 685.3 720.052 745.516 697.68 801.921 cv
cp
level3{
gsave
clp
[-1.36417e-5 -312.086 312.086 -1.36417e-5 832.008 922.535 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.36417e-5 -312.086 312.086 -1.36417e-5 832.008 922.535 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
697.68 801.921 mo
718.228 837.385 736.252 874.655 751.085 911.637 cv
960.501 921.5 li
961.396 905.132 963.372 889.149 966.336 873.596 cv
942.892 810.544 893.171 702.414 812.49 646.416 cv
756.437 685.3 720.052 745.516 697.68 801.921 cv
cp
level3{
gsave
clp
[-1.41105e-5 -322.811 322.811 -1.41105e-5 832.008 927.355 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.41105e-5 -322.811 322.811 -1.41105e-5 832.008 927.355 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1093.18 665.104 mo
1029.23 715.449 982.67 787.926 966.336 873.596 cv
977.25 902.948 982.474 922.535 982.474 922.535 cv
960.501 921.5 li
960.412 923.133 960.341 924.773 960.273 926.413 cv
1238.38 927.355 li
1238.38 927.355 1195.46 758.583 1093.18 665.104 cv
cp
level3{
gsave
clp
[-1.54152e-5 -352.659 352.659 -1.54152e-5 1099.33 941.829 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.54152e-5 -352.659 352.659 -1.54152e-5 1099.33 941.829 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1093.18 665.104 mo
1029.23 715.449 982.67 787.926 966.336 873.596 cv
977.25 902.948 982.474 922.535 982.474 922.535 cv
960.501 921.5 li
960.412 923.133 960.341 924.773 960.273 926.413 cv
1238.38 927.355 li
1238.38 927.355 1195.46 758.583 1093.18 665.104 cv
cp
level3{
gsave
clp
[-1.41106e-5 -322.813 322.813 -1.41106e-5 1099.33 927.355 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.41106e-5 -322.813 322.813 -1.41106e-5 1099.33 927.355 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
982.474 922.535 mo
982.474 922.535 977.25 902.948 966.336 873.596 cv
963.372 889.149 961.396 905.132 960.501 921.5 cv
982.474 922.535 li
cp
level3{
gsave
clp
[-1.36415e-5 -312.081 312.081 -1.36415e-5 971.488 922.535 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.36415e-5 -312.081 312.081 -1.36415e-5 971.488 922.535 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
982.474 922.535 mo
982.474 922.535 977.25 902.948 966.336 873.596 cv
963.372 889.149 961.396 905.132 960.501 921.5 cv
982.474 922.535 li
cp
level3{
gsave
clp
[-1.5415e-5 -352.654 352.654 -1.5415e-5 971.488 941.828 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.5415e-5 -352.654 352.654 -1.5415e-5 971.488 941.828 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
982.474 922.535 mo
982.474 922.535 977.25 902.948 966.336 873.596 cv
963.372 889.149 961.396 905.132 960.501 921.5 cv
982.474 922.535 li
cp
level3{
gsave
clp
[-1.41103e-5 -322.807 322.807 -1.41103e-5 971.488 927.355 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.41103e-5 -322.807 322.807 -1.41103e-5 971.488 927.355 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
751.085 911.637 mo
669.121 907.778 li
668.216 914.346 667.605 920.274 667.263 925.42 cv
717.241 925.59 li
731.056 924.137 743.578 922.404 754.526 920.354 cv
753.4 917.451 752.252 914.545 751.085 911.637 cv
cp
level3{
gsave
clp
[-1.51557e-5 -346.722 346.722 -1.51557e-5 710.895 931.965 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.51557e-5 -346.722 346.722 -1.51557e-5 710.895 931.965 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
751.085 911.637 mo
669.121 907.778 li
668.216 914.346 667.605 920.274 667.263 925.42 cv
717.241 925.59 li
731.056 924.137 743.578 922.404 754.526 920.354 cv
753.4 917.451 752.252 914.545 751.085 911.637 cv
cp
level3{
gsave
clp
[-1.41111e-5 -322.825 322.825 -1.41111e-5 710.895 927.355 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.41111e-5 -322.825 322.825 -1.41111e-5 710.895 927.355 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
669.121 907.778 mo
751.085 911.637 li
736.252 874.655 718.228 837.385 697.68 801.921 cv
681.701 842.208 672.871 880.547 669.121 907.778 cv
cp
level3{
gsave
clp
[-1.36417e-5 -312.086 312.086 -1.36417e-5 710.103 922.535 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.36417e-5 -312.086 312.086 -1.36417e-5 710.103 922.535 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
669.121 907.778 mo
751.085 911.637 li
736.252 874.655 718.228 837.385 697.68 801.921 cv
681.701 842.208 672.871 880.547 669.121 907.778 cv
cp
level3{
gsave
clp
[-1.51551e-5 -346.709 346.709 -1.51551e-5 710.103 931.964 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.51551e-5 -346.709 346.709 -1.51551e-5 710.103 931.964 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
669.121 907.778 mo
751.085 911.637 li
736.252 874.655 718.228 837.385 697.68 801.921 cv
681.701 842.208 672.871 880.547 669.121 907.778 cv
cp
level3{
gsave
clp
[-1.41105e-5 -322.811 322.811 -1.41105e-5 710.103 927.355 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.41105e-5 -322.811 322.811 -1.41105e-5 710.103 927.355 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1603.66 761.008 mo
1605.66 764.458 1607.59 767.964 1609.46 771.507 cv
1636.48 736.364 1670.05 700.686 1710.37 671.753 cv
1658.98 640.344 1602.64 626.861 1547.74 640.704 cv
1534.82 643.963 1522.06 648.019 1509.51 652.761 cv
1549.67 683.123 1580.7 721.42 1603.66 761.008 cv
cp
level3{
gsave
clp
[-1.38229e-5 -316.231 316.231 -1.38229e-5 1609.94 951.509 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.38229e-5 -316.231 316.231 -1.38229e-5 1609.94 951.509 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1255.44 932.122 mo
1254.95 934.726 1254.48 937.325 1254.08 939.915 cv
1254.08 939.915 1734.92 966 1897.74 939.915 cv
1897.33 938.306 1896.9 936.703 1896.48 935.097 cv
1587.7 921.208 li
1255.44 932.122 li
cp
level3{
gsave
clp
[-1.38228e-5 -316.228 316.228 -1.38228e-5 1575.91 951.508 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.38228e-5 -316.228 316.228 -1.38228e-5 1575.91 951.508 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1524.28 918.355 mo
1524.28 918.355 1552.08 846.142 1609.46 771.507 cv
1607.59 767.964 1605.66 764.458 1603.66 761.008 cv
1580.7 721.42 1549.67 683.123 1509.51 652.761 cv
1381.6 701.102 1276.28 822.37 1255.44 932.122 cv
1587.7 921.208 li
1524.28 918.355 li
cp
level3{
gsave
clp
[-1.54153e-5 -352.662 352.662 -1.54153e-5 1432.45 941.829 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.54153e-5 -352.662 352.662 -1.54153e-5 1432.45 941.829 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1524.28 918.355 mo
1524.28 918.355 1552.08 846.142 1609.46 771.507 cv
1607.59 767.964 1605.66 764.458 1603.66 761.008 cv
1580.7 721.42 1549.67 683.123 1509.51 652.761 cv
1381.6 701.102 1276.28 822.37 1255.44 932.122 cv
1587.7 921.208 li
1524.28 918.355 li
cp
level3{
gsave
clp
[-1.38229e-5 -316.23 316.23 -1.38229e-5 1432.45 951.509 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.38229e-5 -316.23 316.23 -1.38229e-5 1432.45 951.509 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1710.37 671.753 mo
1670.05 700.686 1636.48 736.364 1609.46 771.507 cv
1644.71 838.323 1656.75 918.94 1656.75 918.94 cv
1587.7 921.208 li
1896.48 935.097 li
1867.97 826.369 1796.06 724.125 1710.37 671.753 cv
cp
level3{
gsave
clp
[-1.4855e-5 -339.842 339.842 -1.4855e-5 1742.09 949.184 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4855e-5 -339.842 339.842 -1.4855e-5 1742.09 949.184 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1710.37 671.753 mo
1670.05 700.686 1636.48 736.364 1609.46 771.507 cv
1644.71 838.323 1656.75 918.94 1656.75 918.94 cv
1587.7 921.208 li
1896.48 935.097 li
1867.97 826.369 1796.06 724.125 1710.37 671.753 cv
cp
level3{
gsave
clp
[-1.38229e-5 -316.231 316.231 -1.38229e-5 1742.09 951.508 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.38229e-5 -316.231 316.231 -1.38229e-5 1742.09 951.508 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1587.7 921.208 mo
1656.75 918.94 li
1656.75 918.94 1644.71 838.323 1609.46 771.507 cv
1552.08 846.142 1524.28 918.355 1524.28 918.355 cv
1587.7 921.208 li
cp
level3{
gsave
clp
[-1.54152e-5 -352.659 352.659 -1.54152e-5 1590.52 941.829 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.54152e-5 -352.659 352.659 -1.54152e-5 1590.52 941.829 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1587.7 921.208 mo
1656.75 918.94 li
1656.75 918.94 1644.71 838.323 1609.46 771.507 cv
1552.08 846.142 1524.28 918.355 1524.28 918.355 cv
1587.7 921.208 li
cp
level3{
gsave
clp
[-1.4855e-5 -339.842 339.842 -1.4855e-5 1590.52 949.184 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4855e-5 -339.842 339.842 -1.4855e-5 1590.52 949.184 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1587.7 921.208 mo
1656.75 918.94 li
1656.75 918.94 1644.71 838.323 1609.46 771.507 cv
1552.08 846.142 1524.28 918.355 1524.28 918.355 cv
1587.7 921.208 li
cp
level3{
gsave
clp
[-1.38229e-5 -316.231 316.231 -1.38229e-5 1590.52 951.508 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.38229e-5 -316.231 316.231 -1.38229e-5 1590.52 951.508 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2975.46 676.659 mo
2934.77 652.738 2887.58 638.481 2833.39 638.481 cv
2787.98 638.481 2746.55 650.954 2709.71 671.555 cv
2751.38 699.26 2783.41 734.659 2806.95 771.281 cv
2846.7 833.101 2860.05 913.743 2860.05 913.743 cv
2526.82 923.615 li
2522.98 939.274 2520.48 954.274 2519.41 968.174 cv
2519.41 968.174 2850.94 959.618 3055 956.629 cv
3055 918.303 li
2875.19 924.71 li
2875.19 823.83 2914.42 736.792 2975.46 676.659 cv
cp
level3{
gsave
clp
[-1.44114e-5 -329.693 329.693 -1.44114e-5 2787.21 968.174 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.44114e-5 -329.693 329.693 -1.44114e-5 2787.21 968.174 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2975.46 676.659 mo
2914.42 736.792 2875.19 823.83 2875.19 924.71 cv
3055 918.303 li
3055 743.502 li
3031.9 717.176 3005.45 694.29 2975.46 676.659 cv
cp
level3{
gsave
clp
[-1.46668e-5 -335.537 335.537 -1.46668e-5 2965.1 924.71 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46668e-5 -335.537 335.537 -1.46668e-5 2965.1 924.71 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2975.46 676.659 mo
2914.42 736.792 2875.19 823.83 2875.19 924.71 cv
3055 918.303 li
3055 743.502 li
3031.9 717.176 3005.45 694.29 2975.46 676.659 cv
cp
level3{
gsave
clp
[-1.44113e-5 -329.693 329.693 -1.44113e-5 2965.1 968.175 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.44113e-5 -329.693 329.693 -1.44113e-5 2965.1 968.175 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2806.95 771.281 mo
2783.41 734.659 2751.38 699.26 2709.71 671.555 cv
2613.33 725.461 2548.5 835.143 2526.82 923.615 cv
2860.05 913.743 li
2860.05 913.743 2846.7 833.101 2806.95 771.281 cv
cp
level3{
gsave
clp
[-1.39054e-5 -318.119 318.119 -1.39054e-5 2693.43 934.388 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.39054e-5 -318.119 318.119 -1.39054e-5 2693.43 934.388 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2806.95 771.281 mo
2783.41 734.659 2751.38 699.26 2709.71 671.555 cv
2613.33 725.461 2548.5 835.143 2526.82 923.615 cv
2860.05 913.743 li
2860.05 913.743 2846.7 833.101 2806.95 771.281 cv
cp
level3{
gsave
clp
[-1.44114e-5 -329.694 329.694 -1.44114e-5 2693.43 968.174 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.44114e-5 -329.694 329.694 -1.44114e-5 2693.43 968.174 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
95.5737 914.899 mo
0 918.303 li
0 956.629 li
43.1748 955.998 80.6509 955.614 108.065 955.614 cv
104.412 942.124 100.247 928.508 95.5737 914.899 cv
cp
level3{
gsave
clp
[-1.44112e-5 -329.689 329.689 -1.44112e-5 54.0327 968.174 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.44112e-5 -329.689 329.689 -1.44112e-5 54.0327 968.174 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
94.7524 912.504 mo
87.271 911.958 83.208 911.645 83.208 911.645 cv
84.0649 905.066 85.3569 898.333 87.021 891.487 cv
66.3525 838.301 37.6094 786.358 0 743.502 cv
0 918.303 li
95.5737 914.899 li
95.2993 914.1 95.0298 913.302 94.7524 912.504 cv
cp
level3{
gsave
clp
[-1.46668e-5 -335.537 335.537 -1.46668e-5 47.7866 924.71 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46668e-5 -335.537 335.537 -1.46668e-5 47.7866 924.71 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
94.7524 912.504 mo
87.271 911.958 83.208 911.645 83.208 911.645 cv
84.0649 905.066 85.3569 898.333 87.021 891.487 cv
66.3525 838.301 37.6094 786.358 0 743.502 cv
0 918.303 li
95.5737 914.899 li
95.2993 914.1 95.0298 913.302 94.7524 912.504 cv
cp
level3{
gsave
clp
[-1.44114e-5 -329.693 329.693 -1.44114e-5 47.7866 968.175 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.44114e-5 -329.693 329.693 -1.44114e-5 47.7866 968.175 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
83.208 911.645 mo
83.208 911.645 87.271 911.958 94.7524 912.504 cv
92.3125 905.489 89.7378 898.477 87.021 891.487 cv
85.3569 898.333 84.0649 905.066 83.208 911.645 cv
cp
level3{
gsave
clp
[-1.46667e-5 -335.535 335.535 -1.46667e-5 88.98 924.71 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46667e-5 -335.535 335.535 -1.46667e-5 88.98 924.71 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
83.208 911.645 mo
83.208 911.645 87.271 911.958 94.7524 912.504 cv
92.3125 905.489 89.7378 898.477 87.021 891.487 cv
85.3569 898.333 84.0649 905.066 83.208 911.645 cv
cp
level3{
gsave
clp
[-1.51551e-5 -346.708 346.708 -1.51551e-5 88.98 931.964 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.51551e-5 -346.708 346.708 -1.51551e-5 88.98 931.964 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
83.208 911.645 mo
83.208 911.645 87.271 911.958 94.7524 912.504 cv
92.3125 905.489 89.7378 898.477 87.021 891.487 cv
85.3569 898.333 84.0649 905.066 83.208 911.645 cv
cp
level3{
gsave
clp
[-1.44113e-5 -329.692 329.692 -1.44113e-5 88.98 968.174 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.44113e-5 -329.692 329.692 -1.44113e-5 88.98 968.174 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1925.99 958.754 mo
1958.93 961.619 2081.99 955.991 2206.11 949.025 cv
1927.42 936.488 li
1926.66 944.236 1926.18 951.684 1925.99 958.754 cv
cp
level3{
gsave
clp
[-1.46035e-5 -334.088 334.088 -1.46035e-5 2066.05 959.517 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46035e-5 -334.088 334.088 -1.46035e-5 2066.05 959.517 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2209.58 948.83 mo
2356.48 940.556 2503.71 930.496 2503.71 930.496 cv
2503.54 928.548 2503.29 926.475 2502.98 924.323 cv
2204.7 933.16 li
2207.57 941.897 2209.18 947.444 2209.58 948.83 cv
cp
level3{
gsave
clp
[-1.46039e-5 -334.099 334.099 -1.46039e-5 2354.2 959.518 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.46039e-5 -334.099 334.099 -1.46039e-5 2354.2 959.518 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2174.01 854.895 mo
2196.55 773.961 2252.82 707.498 2326.85 665.455 cv
2291.58 643.708 2251.1 628.914 2205.43 625.919 cv
2143.48 621.858 2092.7 642.77 2052.24 676.957 cv
2108.33 727.909 2148.35 798.406 2174.01 854.895 cv
cp
level3{
gsave
clp
[-1.4604e-5 -334.101 334.101 -1.4604e-5 2189.54 959.518 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4604e-5 -334.101 334.101 -1.4604e-5 2189.54 959.518 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2326.85 665.455 mo
2252.82 707.498 2196.55 773.961 2174.01 854.895 cv
2189.09 888.099 2199.2 916.455 2204.7 933.16 cv
2502.98 924.323 li
2494.64 865.615 2435.52 732.462 2326.85 665.455 cv
cp
level3{
gsave
clp
[-1.39054e-5 -318.119 318.119 -1.39054e-5 2338.5 934.389 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.39054e-5 -318.119 318.119 -1.39054e-5 2338.5 934.389 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2326.85 665.455 mo
2252.82 707.498 2196.55 773.961 2174.01 854.895 cv
2189.09 888.099 2199.2 916.455 2204.7 933.16 cv
2502.98 924.323 li
2494.64 865.615 2435.52 732.462 2326.85 665.455 cv
cp
level3{
gsave
clp
[-1.4604e-5 -334.101 334.101 -1.4604e-5 2338.5 959.518 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4604e-5 -334.101 334.101 -1.4604e-5 2338.5 959.518 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2163.22 934.389 mo
2163.22 906.688 2166.99 880.094 2174.01 854.895 cv
2148.35 798.406 2108.33 727.909 2052.24 676.957 cv
1975.02 742.194 1935.38 855.775 1927.42 936.488 cv
2206.11 949.025 li
2207.27 948.959 2208.42 948.895 2209.58 948.83 cv
2209.18 947.444 2207.57 941.897 2204.7 933.16 cv
2163.22 934.389 li
cp
level3{
gsave
clp
[-1.4855e-5 -339.843 339.843 -1.4855e-5 2068.5 949.025 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4855e-5 -339.843 339.843 -1.4855e-5 2068.5 949.025 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2163.22 934.389 mo
2163.22 906.688 2166.99 880.094 2174.01 854.895 cv
2148.35 798.406 2108.33 727.909 2052.24 676.957 cv
1975.02 742.194 1935.38 855.775 1927.42 936.488 cv
2206.11 949.025 li
2207.27 948.959 2208.42 948.895 2209.58 948.83 cv
2209.18 947.444 2207.57 941.897 2204.7 933.16 cv
2163.22 934.389 li
cp
level3{
gsave
clp
[-1.4604e-5 -334.1 334.1 -1.4604e-5 2068.5 959.518 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4604e-5 -334.1 334.1 -1.4604e-5 2068.5 959.518 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2204.7 933.16 mo
2199.2 916.455 2189.09 888.099 2174.01 854.895 cv
2166.99 880.094 2163.22 906.688 2163.22 934.389 cv
2204.7 933.16 li
cp
level3{
gsave
clp
[-1.39055e-5 -318.12 318.12 -1.39055e-5 2183.96 934.389 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.39055e-5 -318.12 318.12 -1.39055e-5 2183.96 934.389 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2204.7 933.16 mo
2199.2 916.455 2189.09 888.099 2174.01 854.895 cv
2166.99 880.094 2163.22 906.688 2163.22 934.389 cv
2204.7 933.16 li
cp
level3{
gsave
clp
[-1.4855e-5 -339.843 339.843 -1.4855e-5 2183.96 949.185 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4855e-5 -339.843 339.843 -1.4855e-5 2183.96 949.185 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
2204.7 933.16 mo
2199.2 916.455 2189.09 888.099 2174.01 854.895 cv
2166.99 880.094 2163.22 906.688 2163.22 934.389 cv
2204.7 933.16 li
cp
level3{
gsave
clp
[-1.4604e-5 -334.101 334.101 -1.4604e-5 2183.96 959.518 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-1.4604e-5 -334.101 334.101 -1.4604e-5 2183.96 959.518 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
2900.72 1002.7 mo
2907.33 994.968 2914.76 986.567 2922.98 977.695 cv
2890.9 985.567 2846.76 996.048 2799.24 1006.31 cv
2900.72 1002.7 li
cp
.501961 .45098 .290196 rgb
f
2924.25 756.07 mo
2859.97 757.132 2791.9 787.153 2730.01 826.459 cv
2825.95 866.067 2911.89 921.407 2951.43 948.499 cv
2979.88 920.707 3014.67 890.783 3055 863.557 cv
3055 784.484 li
3011.24 766.62 2966.61 755.371 2924.25 756.07 cv
cp
f
0 784.484 mo
0 863.559 li
22.8696 848.122 47.5215 833.555 73.8145 820.736 cv
49.8955 807.144 25.0923 794.727 0 784.484 cv
cp
f
2545.61 1042.71 mo
2571.54 1044.21 2609.87 1040.47 2653.12 1033.91 cv
2556.28 1032.6 2504.23 1025.14 2392.67 1018.06 cv
2453.84 1030.69 2510.82 1040.69 2545.61 1042.71 cv
cp
.458824 .411765 .266667 rgb
f
2680.53 1029.5 mo
2719.19 1022.95 2760.34 1014.71 2799.24 1006.31 cv
2846.76 996.048 2890.9 985.567 2922.98 977.695 cv
2931.61 968.399 2941.09 958.59 2951.43 948.499 cv
2911.89 921.407 2825.95 866.067 2730.01 826.459 cv
2658.69 797.012 2581.84 776.264 2514.43 782.292 cv
2456.69 787.456 2397.83 805.062 2343.75 827.141 cv
2503.89 888.26 2655.22 1002.02 2680.53 1029.5 cv
cp
f
2012.17 818.063 mo
1942.93 793.768 1872.41 779.187 1810.04 784.938 cv
1745.12 790.924 1683.6 811.192 1629.13 836.78 cv
1688.83 857.178 1754.39 885.225 1826.13 922.87 cv
1874.54 886.249 1938.89 845.285 2012.17 818.063 cv
cp
.501961 .45098 .290196 rgb
f
2360.48 1017.29 mo
2360.32 1016.95 2360.07 1016.55 2359.75 1016.1 cv
2308.04 1013.19 2244.22 1010.45 2160.63 1008.36 cv
2226.74 1013.32 2276.59 1017.29 2360.48 1017.29 cv
cp
f
1968.07 1005.23 mo
2042.24 1005.9 2105.7 1006.99 2160.63 1008.36 cv
2244.22 1010.45 2308.04 1013.19 2359.75 1016.1 cv
2371.3 1016.74 2382.25 1017.4 2392.67 1018.06 cv
2504.23 1025.14 2556.28 1032.6 2653.12 1033.91 cv
2662.93 1034.04 2673.19 1034.11 2684.02 1034.11 cv
2683.57 1033.08 2682.38 1031.52 2680.53 1029.5 cv
2655.22 1002.02 2503.89 888.26 2343.75 827.141 cv
2271.94 799.738 2198.36 782.915 2133.59 789.21 cv
2091.34 793.317 2050.53 803.812 2012.17 818.063 cv
1938.89 845.285 1874.54 886.249 1826.13 922.87 cv
1871 946.408 1918.28 973.7 1968.07 1005.23 cv
cp
.419608 .345098 .192157 rgb
f
939.364 983.632 mo
945.836 988.28 952.101 992.926 958.144 997.566 cv
966.192 990.293 975.426 982.096 985.642 973.266 cv
970.883 976.657 955.346 980.148 939.364 983.632 cv
cp
.458824 .411765 .266667 rgb
f
1267.58 800.058 mo
1219.28 785.968 1170.8 778.323 1126.41 782.292 cv
1060.06 788.227 992.217 810.587 931.854 837.294 cv
983.94 863.556 1029.44 891.459 1061 912.104 cv
1125.66 863.138 1202.6 814.411 1267.58 800.058 cv
cp
f
1157.6 1042.71 mo
1175.05 1043.72 1198.12 1042.35 1224.53 1039.35 cv
1179 1038 1136.47 1036.73 1098.54 1035.58 cv
1121.64 1039.26 1141.88 1041.8 1157.6 1042.71 cv
cp
f
939.364 983.632 mo
955.346 980.148 970.883 976.657 985.642 973.266 cv
1007.11 954.709 1032.9 933.391 1061 912.104 cv
1029.44 891.459 983.94 863.556 931.854 837.294 cv
843.808 792.903 736.971 753.213 646.962 761.263 cv
598.178 765.626 548.592 778.876 501.76 796.198 cv
676.467 834.051 835.113 908.772 939.364 983.632 cv
cp
.501961 .45098 .290196 rgb
f
985.642 973.266 mo
975.426 982.096 966.192 990.293 958.144 997.566 cv
973.479 1009.34 987.422 1021.06 999.789 1032.58 cv
1026.99 1033.41 1060.44 1034.43 1098.54 1035.58 cv
1136.47 1036.73 1179 1038 1224.53 1039.35 cv
1519.86 1048.1 1941.2 1059.99 2050.83 1059.99 cv
2022.5 1040.45 1994.92 1022.23 1968.07 1005.23 cv
1918.28 973.7 1871 946.408 1826.13 922.87 cv
1754.39 885.225 1688.83 857.178 1629.13 836.78 cv
1470.17 782.467 1352.67 782.336 1270.17 799.477 cv
1269.31 799.654 1268.44 799.868 1267.58 800.058 cv
1202.6 814.411 1125.66 863.138 1061 912.104 cv
1032.9 933.391 1007.11 954.709 985.642 973.266 cv
cp
.419608 .345098 .192157 rgb
f
999.789 1032.58 mo
987.422 1021.06 973.479 1009.34 958.144 997.566 cv
952.101 992.926 945.836 988.28 939.364 983.632 cv
835.113 908.772 676.467 834.051 501.76 796.198 cv
431.858 781.051 359.391 771.798 286.81 770.813 cv
207.856 769.743 136.218 790.313 73.8145 820.736 cv
47.5215 833.555 22.8696 848.122 0 863.559 cv
0 1080 li
407.981 1080 li
634.864 1057.46 869.475 1032.72 999.941 1032.72 cv
999.891 1032.67 999.838 1032.63 999.789 1032.58 cv
cp
f
2922.98 977.695 mo
2914.76 986.567 2907.33 994.968 2900.72 1002.7 cv
2876.2 1031.43 2863.09 1050.95 2863.09 1050.95 cv
2863.09 1050.95 2873.96 1064.98 2894.01 1080 cv
3055 1080 li
3055 863.557 li
3014.67 890.783 2979.88 920.707 2951.43 948.499 cv
2941.09 958.59 2931.61 968.399 2922.98 977.695 cv
cp
f
1181.85 914.805 mo
1181.95 915.244 li
1182.97 915.259 1183.98 915.273 1185 915.292 cv
1185.29 914.875 li
1183.98 915.079 1182.82 915.013 1181.85 914.805 cv
cp
.388235 .309804 0 rgb
f
2093.91 911.012 mo
2092.86 913.273 2091.72 914.718 2089.57 917.017 cv
2089.78 922.726 2090.01 927.706 2090.25 931.167 cv
2113.14 928.181 2136.02 925.59 2158.61 923.506 cv
2165.34 914.212 2173.92 908.739 2180.04 908.909 cv
2184.51 909.033 2190.5 913.653 2195.7 920.542 cv
2207.32 919.763 2218.82 919.141 2230.16 918.694 cv
2220.11 912.041 2213.77 903.473 2211.33 895.811 cv
2175.11 900.292 2134.82 906.145 2102.56 909.287 cv
2100.29 911.305 2096.71 911.552 2093.91 911.012 cv
cp
f
1449.79 908.333 mo
1452.41 910.251 li
1451.62 910.383 li
1452.41 910.898 li
1445.96 911.329 li
1445.3 934.879 li
1447.72 935.141 1450.13 935.403 1452.56 935.668 cv
1454.22 910.44 li
1452.8 909.898 1451.32 909.199 1449.79 908.333 cv
cp
f
1462.64 915.301 mo
1461.91 915.085 1461.25 914.831 1460.72 914.541 cv
1459.1 913.656 1458.53 912.25 1458.69 910.621 cv
1458.65 910.644 1458.62 910.662 1458.58 910.684 cv
1458.67 913.69 1458.76 916.658 1458.86 919.489 cv
1460.18 918.321 1461.28 917.19 1462.64 915.301 cv
cp
f
2249.04 918.111 mo
2252.31 918.039 2255.57 917.978 2258.81 917.937 cv
2266.21 917.845 2273.77 917.854 2281.45 917.954 cv
2284.6 896.391 li
2278.53 898.264 li
2280.61 889.782 li
2276.21 889.808 2271.37 889.991 2266.13 890.303 cv
2266.11 890.486 2266.11 890.672 2266.09 890.854 cv
2264.33 907.59 2256.75 914.337 2249.04 918.111 cv
cp
f
2769.51 899.317 mo
2784.01 911.208 li
2778.96 912.889 li
2772.8 946.512 li
2716.27 946.028 li
2716.23 946.331 2716.2 946.512 2716.2 946.512 cv
2698.27 945.953 li
2698.27 945.953 2698.27 945.926 2698.26 945.873 cv
2642.23 945.392 li
2642.13 944.64 li
2641.12 945.378 2640.05 946.062 2638.94 946.705 cv
2638.89 950.911 2639 957.089 2639.17 963.256 cv
2699.21 975.459 2758.02 989.17 2812.21 1003.15 cv
2812.31 1000.31 2812.38 997.594 2812.45 995.12 cv
2799.33 986.559 2784.44 974.382 2782.39 949.676 cv
2780.08 921.784 2803.85 893.458 2817.66 893.074 cv
2819.59 893.02 2821.68 893.405 2823.86 894.165 cv
2823.46 893.036 2823.17 891.829 2823.04 890.523 cv
2822.92 889.33 2822.96 888.213 2823.11 887.165 cv
2804.51 885.065 2787.03 883.255 2771.48 881.901 cv
2770.56 882.068 li
2769.51 899.317 li
cp
f
1688.23 964.896 mo
1688.2 964.41 1688.21 963.908 1688.26 963.395 cv
1688.19 963.438 1688.13 963.472 1688.05 963.513 cv
1688.07 963.971 1688.08 964.421 1688.09 964.877 cv
1688.14 964.883 1688.18 964.89 1688.23 964.896 cv
cp
f
2089.34 910.446 mo
2089.38 911.764 2089.42 913.081 2089.47 914.351 cv
2090.61 913.339 2091.57 912.361 2092.74 910.725 cv
2092.29 910.592 2091.88 910.443 2091.52 910.276 cv
2090.78 910.335 2090.06 910.39 2089.34 910.446 cv
cp
f
2661.71 883.349 mo
2659.58 883.587 2657.45 883.833 2655.31 884.087 cv
2661.48 890.967 li
2661.71 883.349 li
cp
f
2566.84 929.473 mo
2560.42 926.696 li
2563.7 948.874 li
2587.13 953.032 2610.6 957.494 2633.89 962.19 cv
2634.26 955.699 2634.63 949.676 2634.84 947.067 cv
2625.22 942.635 2611.14 933.033 2608.59 908.848 cv
2607 893.825 2621.28 887.135 2634.93 887.5 cv
2636.46 887.54 2637.92 887.662 2639.34 887.823 cv
2640.72 885.931 li
2624.55 888.081 2608.27 890.577 2592.42 893.153 cv
2594.87 895.425 2596.77 898.704 2596.44 902.694 cv
2595.86 909.64 2590.43 915.643 2586.48 918.612 cv
2586.58 922.608 2586.8 928.975 2587.44 930.666 cv
2586.19 931.436 2584.5 931.374 2583.64 930.762 cv
2583.64 930.762 2583.96 923.266 2584.13 919.206 cv
2579.09 916.969 2571.66 908.749 2572.93 900.643 cv
2573.2 898.892 2573.73 897.406 2574.41 896.133 cv
2558.34 898.835 2542.98 901.505 2528.94 903.843 cv
2570.45 923.425 li
2566.84 929.473 li
cp
f
1481.48 906.083 mo
1481.66 910.153 1481.98 917.599 1481.98 917.599 cv
1481.11 918.211 1479.42 918.275 1478.17 917.503 cv
1478.81 915.822 1479.03 909.525 1479.13 905.524 cv
1476.96 904.103 1474.62 902.303 1472.95 899.65 cv
1472.65 899.636 1472.34 899.623 1472.04 899.61 cv
1471.39 900.361 1470.73 901.073 1470.07 901.751 cv
1473.99 903.202 1477.48 907.322 1475.81 911.148 cv
1473.79 915.756 1468.14 916.434 1463.99 915.632 cv
1462.78 918.245 1461.46 919.915 1458.97 922.569 cv
1459.17 927.913 1459.38 932.693 1459.61 936.446 cv
1529.58 944.191 1604.32 953.576 1680.13 963.8 cv
1680.17 963.092 li
1663.62 956.742 1640.85 937.365 1636.34 914.164 cv
1635.19 908.217 1634.99 902.165 1635.83 896.351 cv
1625.9 897.131 1615.7 897.852 1605.24 898.486 cv
1605.66 899.736 1605.86 901.012 1605.74 902.232 cv
1604.75 911.608 1598.88 912.604 1595.28 914.031 cv
1595.54 918.149 1595.97 926.28 1595.97 926.28 cv
1594.95 927.47 1593.25 926.28 1593.25 926.28 cv
1593.25 926.28 1593.6 918.199 1593.62 913.458 cv
1588.18 910.372 1585.2 905.781 1584.86 902.232 cv
1584.77 901.377 1584.84 900.479 1585 899.575 cv
1575.79 900.01 1566.42 900.379 1556.85 900.64 cv
1535.24 901.231 1512.63 901.027 1489.66 900.281 cv
1487.5 903.166 1484.23 905.079 1481.48 906.083 cv
cp
f
986.404 928.596 mo
1002.47 926.631 1018.17 924.846 1033.43 923.264 cv
1033.31 921.581 li
1033.23 921.666 li
1033.23 920.551 li
1020.47 922.981 li
1039.64 899.413 li
1022.48 902.747 1008.09 905.747 998.425 907.683 cv
995.217 908.326 991.351 908.702 986.944 908.848 cv
987.575 914.499 987.466 921.036 986.404 928.596 cv
cp
f
1147.59 885.434 mo
1147.43 887.101 1146.87 889.44 1145.79 891.798 cv
1165.13 914.469 li
1159.48 915.136 li
1166.29 915.089 1173.38 915.12 1180.74 915.225 cv
1180.52 914.417 li
1179.02 913.839 1178.19 913.047 1178.19 913.047 cv
1184.37 907.684 li
1184.37 907.684 1187.46 909.543 1189.32 913.46 cv
1188.41 913.956 1187.55 914.303 1186.74 914.548 cv
1186.78 914.585 li
1186.33 915.313 li
1213.06 915.821 1243.21 917.266 1276.04 919.489 cv
1273.32 914.836 1271.37 909.236 1270.8 902.289 cv
1270.28 896.094 1271.5 889.878 1273.72 884.183 cv
1242.6 881.463 1216.24 879.518 1197.59 879.518 cv
1182.14 879.518 1165 880.663 1147.36 882.506 cv
1147.61 883.381 1147.7 884.356 1147.59 885.434 cv
cp
f
801.664 937.559 mo
801.915 943.384 802.193 949.86 802.444 955.705 cv
837.103 949.907 871.408 944.482 904.791 939.604 cv
904.09 936.76 903.562 933.779 903.247 930.643 cv
902.666 930.842 901.888 930.928 901.317 930.261 cv
901.317 930.261 901.922 918.764 902.132 916.188 cv
898.538 914.53 893.269 910.938 892.313 901.893 cv
892.139 900.242 892.488 898.867 893.183 897.742 cv
870.423 893.466 847.389 888.49 827.253 883.793 cv
827.865 886.37 828.388 889.047 828.82 891.813 cv
832.164 913.211 814.828 931.73 801.664 937.559 cv
cp
f
659.274 907.447 mo
658.953 907.35 658.662 907.239 658.428 907.11 cv
657.708 906.717 657.455 906.096 657.526 905.373 cv
657.507 905.382 657.492 905.391 657.475 905.401 cv
657.515 906.736 657.558 908.045 657.601 909.303 cv
658.184 908.786 658.675 908.284 659.274 907.447 cv
cp
f
1320.97 922.87 mo
1333.31 923.885 1345.96 924.991 1358.87 926.176 cv
1358.55 923.342 1358.43 919.978 1358.39 917.933 cv
1355.71 917.933 li
1358.35 915.988 li
1357.7 912.685 li
1355.71 914.094 li
1347.57 914.094 li
1375.84 893.278 li
1358.34 891.83 1341.24 890.3 1324.85 888.81 cv
1325.88 891.897 1326.7 895.169 1327.24 898.607 cv
1328.79 908.554 1325.86 916.601 1320.97 922.87 cv
cp
f
1437.22 897.768 mo
1436.56 897.728 1435.9 897.688 1435.24 897.646 cv
1441.43 902.193 li
1439.95 900.832 1438.53 899.35 1437.22 897.768 cv
cp
f
398.987 912.907 mo
398.751 913.034 398.461 913.149 398.14 913.243 cv
398.739 914.082 399.23 914.583 399.813 915.1 cv
399.855 913.844 399.898 912.533 399.938 911.199 cv
399.92 911.189 399.906 911.18 399.888 911.169 cv
399.959 911.891 399.706 912.516 398.987 912.907 cv
cp
f
1729.72 904.825 mo
1727.92 923.327 1718.49 937.465 1708.82 947.362 cv
1715.92 949.984 1722.21 957.435 1719.18 964.348 cv
1718.41 966.112 1717.32 967.527 1716.05 968.697 cv
1748.46 973.157 1780.96 977.749 1813.25 982.407 cv
1856.51 972.438 1906.2 961.801 1958.7 952.099 cv
1956.05 948.034 1954.03 943.249 1953.44 937.721 cv
1951.42 918.875 1967.4 908.139 1982.61 908.512 cv
2002.69 909.007 2010.55 928.966 2007.63 942.652 cv
2007.56 942.95 2007.46 943.24 2007.39 943.535 cv
2032.59 939.331 2058.18 935.439 2083.77 932.021 cv
2085.17 910.751 li
2073.84 911.526 2064.11 911.76 2056.71 911.205 cv
2029.79 909.18 1974.51 902.509 1923.45 895.864 cv
1926.43 898.296 1928.26 902.945 1929.13 908.512 cv
1930.38 916.516 1923.9 923.441 1918.98 925.62 cv
1919.23 931.483 1919.56 939.121 1919.56 939.121 cv
1918.58 939.819 1916.64 939.892 1915.22 939.012 cv
1916.01 936.934 1916.38 929.372 1916.53 925.137 cv
1912.57 922.124 1907.05 915.776 1906.47 908.787 cv
1905.93 902.299 1911.21 896.71 1915.22 894.787 cv
1880.55 890.235 1848.7 885.815 1830.21 883.038 cv
1819.53 881.432 1806.19 881.301 1790.46 882.081 cv
1791.27 884.61 1791.44 887.336 1790.98 889.672 cv
1789.88 895.366 1784.29 900.12 1780.23 901.675 cv
1781.22 916.68 li
1779.89 918.248 1778.81 918.006 1777.48 916.8 cv
1777.71 916.183 1777.93 912.19 1778.12 907.045 cv
1777.02 905.871 1776.44 905.129 1775.9 903.971 cv
1774.06 904.327 1771.56 904.027 1770.66 901.984 cv
1769.92 900.29 1771.46 898.46 1773.2 897.816 cv
1770.83 895.391 1768.52 891.92 1768.08 887.382 cv
1767.95 886.028 1768.01 884.777 1768.21 883.607 cv
1756.39 884.596 1743.54 885.879 1729.75 887.311 cv
1730.38 892.341 1730.37 898.151 1729.72 904.825 cv
cp
f
412.624 899.092 mo
411.517 904.785 405.932 909.539 401.872 911.094 cv
402.859 926.099 li
401.532 927.667 400.449 927.425 399.121 926.219 cv
399.352 925.602 399.572 921.609 399.763 916.465 cv
398.659 915.29 398.077 914.548 397.537 913.39 cv
395.699 913.746 393.196 913.446 392.303 911.404 cv
391.561 909.708 393.104 907.879 394.843 907.235 cv
392.471 904.81 390.159 901.34 389.717 896.802 cv
388.862 888.042 395.62 883.053 402.046 883.227 cv
410.536 883.457 413.86 892.731 412.624 899.092 cv
cp
265.615 971.734 mo
264.3 978.494 257.668 984.139 252.847 985.987 cv
254.02 1003.8 li
252.443 1005.67 251.157 1005.38 249.581 1003.95 cv
249.855 1003.22 250.115 998.473 250.342 992.364 cv
249.032 990.969 248.341 990.087 247.699 988.713 cv
245.517 989.134 242.545 988.779 241.484 986.353 cv
240.604 984.341 242.435 982.168 244.5 981.404 cv
241.684 978.523 238.938 974.403 238.414 969.014 cv
237.398 958.612 245.423 952.688 253.054 952.894 cv
263.135 953.166 267.083 964.179 265.615 971.734 cv
cp
139.463 899.092 mo
138.887 906.038 133.455 912.041 129.504 915.009 cv
129.606 919.005 129.824 925.373 130.465 927.063 cv
129.215 927.833 127.526 927.771 126.665 927.16 cv
126.665 927.16 126.981 919.664 127.157 915.603 cv
122.118 913.367 114.686 905.145 115.954 897.041 cv
117.303 888.403 124.511 885.962 128.371 886.07 cv
132.234 886.177 140.11 891.289 139.463 899.092 cv
cp
104.258 955.742 mo
103.358 966.595 94.8687 975.973 88.6973 980.612 cv
88.856 986.856 89.1963 996.805 90.1987 999.446 cv
88.2451 1000.65 85.6069 1000.55 84.2588 999.597 cv
84.2588 999.597 84.7534 987.884 85.0288 981.54 cv
77.1548 978.045 65.5439 965.2 67.5244 952.537 cv
69.6318 939.041 80.894 935.227 86.9258 935.394 cv
92.9624 935.563 105.269 943.548 104.258 955.742 cv
cp
471.132 988.345 mo
448.67 975.592 436.345 956.637 434.925 941.971 cv
433.23 924.443 444.938 902.622 463.134 894.444 cv
436.606 886.495 416.234 874.558 393.133 872.474 cv
377.721 871.085 359.264 873.541 340.409 877.233 cv
340.363 881.607 340.779 891.324 340.779 891.324 cv
340.779 891.324 339.08 892.513 338.062 891.324 cv
338.062 891.324 338.629 880.54 338.855 877.534 cv
324.05 880.482 309.047 884.147 295.113 887.28 cv
293.499 888.874 291.73 890.096 290.125 890.806 cv
290.375 896.669 290.704 904.307 290.704 904.307 cv
289.722 905.005 287.79 905.079 286.366 904.198 cv
287.152 902.12 287.529 894.558 287.673 890.323 cv
287.239 889.994 286.784 889.616 286.32 889.208 cv
276.847 891.219 268.043 892.831 260.36 893.6 cv
225.214 897.122 162.732 872.474 111.965 868.955 cv
91.6626 867.546 65.1172 875.714 40.5659 886.019 cv
38.8447 892.959 33.8062 893.913 30.5728 895.191 cv
30.834 899.309 31.2617 907.44 31.2617 907.44 cv
30.2432 908.63 28.5454 907.44 28.5454 907.44 cv
28.5454 907.44 28.8911 899.359 28.9175 894.618 cv
27.791 893.979 26.7969 893.265 25.8823 892.519 cv
16.4839 896.885 7.67773 901.352 0 905.439 cv
0 1080 li
193.65 1080 li
204.136 1077.51 318.949 1050.38 470.435 1018.81 cv
470.768 1008.71 471.083 997.145 471.132 988.345 cv
cp
f
604.15 917.931 mo
605.5 909.292 611.984 903.393 615.846 903.5 cv
619.708 903.606 626.569 912.654 625.922 920.456 cv
625.343 927.425 620.565 931.966 616.76 934.607 cv
616.903 938.848 617.281 946.36 618.065 948.431 cv
616.64 949.309 614.708 949.238 613.726 948.54 cv
613.726 948.54 614.054 940.902 614.305 935.04 cv
609.382 932.86 602.9 925.933 604.15 917.931 cv
cp
656.563 879.79 mo
664.923 879.549 668.551 882.245 667.696 891.003 cv
667.254 895.542 664.942 899.011 662.57 901.44 cv
664.309 902.083 665.853 903.911 665.111 905.606 cv
664.218 907.649 661.714 907.949 659.877 907.595 cv
659.338 908.752 658.755 909.491 657.65 910.669 cv
657.841 915.812 658.062 919.805 658.292 920.422 cv
656.966 921.628 655.881 921.869 654.555 920.302 cv
655.542 905.299 li
651.481 903.74 645.896 898.987 644.79 893.296 cv
643.554 886.934 646.722 880.073 656.563 879.79 cv
cp
728.749 928.223 mo
730.098 919.585 737.306 917.145 741.166 917.252 cv
745.029 917.36 752.906 922.471 752.258 930.274 cv
751.683 937.22 746.25 943.223 742.3 946.192 cv
742.401 950.188 742.619 956.555 743.26 958.246 cv
742.01 959.016 740.322 958.954 739.459 958.342 cv
739.459 958.342 739.776 950.846 739.952 946.786 cv
734.913 944.549 727.481 936.329 728.749 928.223 cv
cp
521.173 941.971 mo
517.088 980.701 492.868 984.819 477.972 990.711 cv
478.421 997.79 478.989 1007.72 479.5 1016.92 cv
531.669 1006.09 587.942 994.795 645.643 983.831 cv
644.099 977.722 643.597 971.415 644.58 965.123 cv
649.404 934.24 675.166 925.516 688.973 925.901 cv
702.112 926.264 728.233 942.842 728.732 968.485 cv
750.513 964.583 772.311 960.785 793.993 957.125 cv
794.563 949.919 794.915 941.967 795.108 936.267 cv
784.52 928.209 769.762 911.237 768.212 892.549 cv
767.583 884.981 769.925 877.87 773.646 871.824 cv
771.545 871.542 769.433 871.282 767.303 871.058 cv
766.891 871.377 766.479 871.698 766.014 871.966 cv
765.966 875.746 766.337 884.402 766.337 884.402 cv
766.337 884.402 764.85 885.442 763.958 884.402 cv
763.958 884.402 764.488 874.341 764.671 872.087 cv
763.858 871.713 762.948 871.222 762.03 870.567 cv
704.682 865.841 638.174 880.764 583.918 891.558 cv
583.918 910.246 li
583.918 910.246 537.263 919.686 524.906 919.686 cv
524.906 901.081 li
516.65 901.737 508.943 901.799 501.708 901.386 cv
513.725 911.58 522.677 927.71 521.173 941.971 cv
cp
f
2897.39 981.733 mo
2897.07 981.908 2896.67 982.066 2896.23 982.194 cv
2897.05 983.347 2897.73 984.04 2898.53 984.749 cv
2898.59 983.022 2898.65 981.219 2898.7 979.385 cv
2898.68 979.371 2898.66 979.359 2898.63 979.343 cv
2898.73 980.337 2898.38 981.197 2897.39 981.733 cv
cp
f
3017.23 988.176 mo
3022.54 988.324 3033.37 995.352 3032.48 1006.08 cv
3031.69 1015.63 3024.22 1023.89 3018.79 1027.97 cv
3018.93 1033.46 3019.23 1042.22 3020.11 1044.54 cv
3018.39 1045.6 3016.07 1045.52 3014.88 1044.67 cv
3014.88 1044.67 3015.32 1034.37 3015.56 1028.78 cv
3008.63 1025.71 2998.41 1014.4 3000.16 1003.26 cv
3002.01 991.385 3011.92 988.029 3017.23 988.176 cv
cp
2916.15 962.737 mo
2914.62 970.565 2906.94 977.101 2901.36 979.241 cv
2902.72 999.872 li
2900.89 1002.03 2899.4 1001.7 2897.58 1000.04 cv
2897.9 999.189 2898.2 993.699 2898.46 986.625 cv
2896.94 985.009 2896.14 983.991 2895.4 982.399 cv
2892.87 982.886 2889.43 982.475 2888.2 979.666 cv
2887.18 977.335 2889.3 974.821 2891.7 973.934 cv
2888.43 970.6 2885.25 965.828 2884.65 959.589 cv
2883.47 947.544 2892.76 940.686 2901.6 940.922 cv
2913.27 941.239 2917.84 953.991 2916.15 962.737 cv
cp
2949.02 915.012 mo
2949.12 919.008 2949.34 925.375 2949.98 927.066 cv
2948.73 927.836 2947.04 927.774 2946.18 927.163 cv
2946.18 927.163 2946.5 919.667 2946.67 915.606 cv
2942.5 913.754 2936.71 907.802 2935.55 901.21 cv
2905.85 897.273 2875.15 893.308 2846.18 889.848 cv
2846.2 890.874 2846.13 891.875 2845.95 892.813 cv
2845.06 897.377 2841.29 901.333 2837.74 903.527 cv
2846.86 912.624 2855.09 927.097 2857.85 944.753 cv
2862.38 973.704 2838.53 990.65 2820.85 997.115 cv
2820.96 999.616 2821.08 1002.47 2821.21 1005.48 cv
2921.75 1031.72 3005.45 1058.64 3050.03 1078.07 cv
2950.01 1079.19 2737.71 1079.74 2505.15 1080 cv
3055 1080 li
3055 917.113 li
3029.15 913.823 2994.82 909.131 2957.71 904.163 cv
2955.74 908.89 2951.97 912.796 2949.02 915.012 cv
cp
f
249.421 988.139 mo
249.141 988.29 248.797 988.425 248.415 988.538 cv
249.127 989.534 249.709 990.13 250.402 990.744 cv
250.453 989.252 250.503 987.695 250.552 986.11 cv
250.53 986.098 250.512 986.088 250.491 986.076 cv
250.576 986.932 250.275 987.675 249.421 988.139 cv
cp
f
1777.35 903.488 mo
1777.11 903.615 1776.82 903.73 1776.5 903.824 cv
1777.1 904.662 1777.59 905.165 1778.17 905.681 cv
1778.21 904.424 1778.26 903.114 1778.3 901.78 cv
1778.28 901.77 1778.27 901.76 1778.25 901.75 cv
1778.32 902.472 1778.07 903.097 1777.35 903.488 cv
cp
f
1451.62 910.383 mo
1445.96 911.329 li
1452.41 910.898 li
1451.62 910.383 li
cp
.721569 .686275 .396078 rgb
f
1424.81 923.794 mo
1424.81 917.933 li
1430.64 917.933 li
1430.64 923.794 li
1424.81 923.794 li
cp
1408.36 923.794 mo
1402.52 923.794 li
1402.52 917.933 li
1408.36 917.933 li
1408.36 923.794 li
cp
1385.95 923.794 mo
1380.12 923.794 li
1380.12 917.933 li
1385.95 917.933 li
1385.95 923.794 li
cp
1402.52 880.807 mo
1357.7 912.685 li
1358.35 915.988 li
1366.12 910.251 li
1374.26 910.251 li
1360.92 917.933 li
1358.39 917.933 li
1358.43 919.978 1358.55 923.342 1358.87 926.176 cv
1386.55 928.72 1415.46 931.642 1445.3 934.879 cv
1445.96 911.329 li
1402.52 880.807 li
cp
f
1424.81 917.933 mo
1424.81 923.794 li
1430.64 923.794 li
1430.64 917.933 li
1424.81 917.933 li
cp
0 0 0 rgb
f
1402.52 923.794 mo
1408.36 923.794 li
1408.36 917.933 li
1402.52 917.933 li
1402.52 923.794 li
cp
f
1380.12 923.794 mo
1385.95 923.794 li
1385.95 917.933 li
1380.12 917.933 li
1380.12 923.794 li
cp
f
1374.26 910.251 mo
1366.12 910.251 li
1358.35 915.988 li
1355.71 917.933 li
1358.39 917.933 li
1360.92 917.933 li
1374.26 910.251 li
cp
.380392 .0941176 .00392157 rgb
f
1355.71 914.094 mo
1357.7 912.685 li
1402.52 880.807 li
1445.96 911.329 li
1451.62 910.383 li
1452.41 910.251 li
1449.79 908.333 li
1447.01 906.756 1444.13 904.674 1441.43 902.193 cv
1435.24 897.646 li
1402.52 873.628 li
1375.84 893.278 li
1347.57 914.094 li
1355.71 914.094 li
cp
f
2776.72 880.948 mo
2763.83 831.071 li
2763.83 826.028 li
2762.71 830.118 li
2776.72 880.948 li
cp
.831373 .792157 .458824 rgb
f
2672.43 815.875 mo
2672.43 815.875 li
2671.89 815.658 li
2671.89 819.127 li
2656.25 838.917 li
2671.93 819.302 li
2672.43 815.875 li
cp
f
2763.83 826.028 mo
2763.83 825.468 li
2762.71 825.468 li
2762.71 826.028 li
2763.83 826.028 li
cp
f
2761.36 825.468 mo
2761.03 825.468 li
2761.03 826.028 li
2761.36 826.028 li
2761.36 825.468 li
cp
f
2761.36 830.118 mo
2761.03 826.028 li
2761.03 830.511 li
2742.17 876.891 li
2742.19 876.9 li
2761.36 830.118 li
cp
f
2673.3 846.948 mo
2677.54 846.202 2677.54 863.014 2677.54 863.014 cv
2670.25 863.321 li
2670.25 863.321 2665.05 848.403 2673.3 846.948 cv
cp
2662.12 891.552 mo
2685.08 873.611 li
2680.9 840.597 li
2662.97 840.038 li
2661.71 883.349 li
2661.48 890.967 li
2662.12 891.552 li
cp
f
2747.97 881.648 mo
2769.51 899.317 li
2770.56 882.068 li
2747.97 881.648 li
cp
f
2670.81 915.131 mo
2676.42 914.572 2674.74 931.383 2674.74 931.383 cv
2668.57 931.383 li
2668.57 931.383 2665.21 915.691 2670.81 915.131 cv
cp
2734.69 915.691 mo
2738.06 916.251 2739.18 931.942 2739.18 931.942 cv
2730.21 932.503 li
2730.21 932.503 2731.33 915.129 2734.69 915.691 cv
cp
2759.35 916.251 mo
2763.27 917.372 2761.03 933.064 2761.03 933.064 cv
2753.75 933.624 li
2753.75 933.624 2755.43 915.131 2759.35 916.251 cv
cp
2655.12 931.942 mo
2653.32 932.081 li
2650.54 936.757 2646.86 941.182 2642.13 944.64 cv
2642.23 945.392 li
2698.26 945.873 li
2698.08 944.233 2695.31 917.933 2707.8 917.933 cv
2719.71 917.933 2716.78 942.327 2716.27 946.028 cv
2772.8 946.512 li
2778.96 912.889 li
2660.81 909.825 li
2660.33 914.663 2658.66 921.584 2655.3 928.412 cv
2655.26 930.476 2655.12 931.942 2655.12 931.942 cv
cp
f
2674.17 815.875 mo
2674.17 804.732 li
2681.31 804.732 li
2681.31 802.991 li
2674.17 802.991 li
2674.17 794.804 li
2672.43 794.804 li
2672.43 802.991 li
2665.29 802.991 li
2665.29 804.732 li
2672.43 804.732 li
2672.43 815.875 li
2672.43 815.875 li
2674.17 815.875 li
cp
f
2762.71 826.028 mo
2762.71 825.468 li
2762.71 817.848 li
2768.24 817.848 li
2768.24 816.5 li
2762.71 816.5 li
2762.71 810.163 li
2761.36 810.163 li
2761.36 816.5 li
2755.84 816.5 li
2755.84 817.848 li
2761.36 817.848 li
2761.36 825.468 li
2761.36 826.028 li
2762.71 826.028 li
cp
f
2656.84 895.671 mo
2662.12 891.552 li
2661.48 890.967 li
2655.31 884.087 li
2648.01 875.966 li
2640.72 885.931 li
2639.34 887.823 li
2647.09 888.7 2653.15 891.354 2656.84 895.671 cv
cp
.380392 .0941176 .00392157 rgb
f
2689.31 838.917 mo
2675.3 819.864 li
2674.17 815.875 li
2672.43 815.875 li
2671.93 819.302 li
2656.25 838.917 li
2662.97 840.038 li
2680.9 840.597 li
2689.31 838.917 li
cp
f
2662.12 891.552 mo
2656.84 895.671 li
2659.91 899.251 2661.38 903.955 2660.82 909.755 cv
2660.82 909.778 2660.81 909.803 2660.81 909.825 cv
2778.96 912.889 li
2784.01 911.208 li
2769.51 899.317 li
2747.97 881.648 li
2740.3 881.506 li
2742.19 876.9 li
2742.17 876.891 li
2712.28 852.366 li
2685.08 873.611 li
2662.12 891.552 li
cp
f
2742.19 876.9 mo
2740.3 881.506 li
2747.97 881.648 li
2770.56 882.068 li
2771.48 881.901 li
2776.72 880.948 li
2762.71 830.118 li
2763.83 826.028 li
2762.71 826.028 li
2761.36 826.028 li
2761.03 826.028 li
2761.36 830.118 li
2742.19 876.9 li
cp
f
2677.54 863.014 mo
2677.54 863.014 2677.54 846.202 2673.3 846.948 cv
2665.05 848.403 2670.25 863.321 2670.25 863.321 cv
2677.54 863.014 li
cp
.0901961 .0509804 .00392157 rgb
f
2707.8 917.933 mo
2695.31 917.933 2698.08 944.233 2698.26 945.873 cv
2698.27 945.926 2698.27 945.953 2698.27 945.953 cv
2716.2 946.512 li
2716.2 946.512 2716.23 946.331 2716.27 946.028 cv
2716.78 942.327 2719.71 917.933 2707.8 917.933 cv
cp
f
2734.69 915.691 mo
2731.33 915.129 2730.21 932.503 2730.21 932.503 cv
2739.18 931.942 li
2739.18 931.942 2738.06 916.251 2734.69 915.691 cv
cp
f
2759.35 916.251 mo
2755.43 915.131 2753.75 933.624 2753.75 933.624 cv
2761.03 933.064 li
2761.03 933.064 2763.27 917.372 2759.35 916.251 cv
cp
f
2668.57 931.383 mo
2674.74 931.383 li
2674.74 931.383 2676.42 914.572 2670.81 915.131 cv
2665.21 915.691 2668.57 931.383 2668.57 931.383 cv
cp
f
2655.3 928.412 mo
2654.69 929.642 2654.04 930.87 2653.32 932.081 cv
2655.12 931.942 li
2655.12 931.942 2655.26 930.476 2655.3 928.412 cv
cp
f
566.686 866.243 mo
566.647 866.229 566.647 866.249 566.668 866.288 cv
566.719 866.274 566.735 866.26 566.686 866.243 cv
cp
.721569 .686275 .396078 rgb
f
549.924 866.288 mo
549.919 866.243 li
549.427 861.028 li
550.95 861.028 li
550.95 858.214 li
547.007 858.214 li
543.153 858.214 li
543.153 861.028 li
543.153 861.268 li
544.292 861.268 li
544.102 866.288 li
544.102 866.288 li
549.924 866.288 li
cp
f
583.918 910.246 mo
583.918 891.558 li
583.918 885.755 li
587.847 885.141 li
521.674 887.308 li
524.906 887.308 li
524.906 901.081 li
524.906 919.686 li
537.263 919.686 583.918 910.246 583.918 910.246 cv
cp
f
566.668 866.288 mo
549.924 866.288 li
544.102 866.288 li
544.102 866.288 li
521.674 887.308 li
587.847 885.141 li
566.668 866.288 li
cp
.0784314 .0196078 0 rgb
f
614.305 935.04 mo
614.054 940.902 613.726 948.54 613.726 948.54 cv
614.708 949.238 616.64 949.309 618.065 948.431 cv
617.281 946.36 616.903 938.848 616.76 934.607 cv
620.565 931.966 625.343 927.425 625.922 920.456 cv
626.569 912.654 619.708 903.606 615.846 903.5 cv
611.984 903.393 605.5 909.292 604.15 917.931 cv
602.9 925.933 609.382 932.86 614.305 935.04 cv
cp
.211765 .2 .133333 rgb
f
489.046 893.506 mo
490.218 891.826 491.114 889.804 491.315 887.375 cv
491.801 881.523 486.655 874.739 483.758 874.658 cv
480.862 874.578 475.999 879.002 474.986 885.482 cv
474.666 887.535 475.033 889.489 475.791 891.242 cv
476.297 891.208 476.8 891.165 477.312 891.151 cv
481.15 891.048 485.125 891.909 489.046 893.506 cv
cp
f
2946.67 915.606 mo
2946.5 919.667 2946.18 927.163 2946.18 927.163 cv
2947.04 927.774 2948.73 927.836 2949.98 927.066 cv
2949.34 925.375 2949.12 919.008 2949.02 915.012 cv
2951.97 912.796 2955.74 908.89 2957.71 904.163 cv
2958.37 902.555 2958.83 900.857 2958.98 899.094 cv
2959.63 891.292 2951.75 886.18 2947.89 886.073 cv
2944.03 885.965 2936.82 888.406 2935.47 897.043 cv
2935.25 898.44 2935.31 899.837 2935.55 901.21 cv
2936.71 907.802 2942.5 913.754 2946.67 915.606 cv
cp
f
657.526 905.373 mo
657.455 906.096 657.708 906.717 658.428 907.11 cv
658.662 907.239 658.953 907.35 659.274 907.447 cv
658.675 908.284 658.184 908.786 657.601 909.303 cv
657.558 908.045 657.515 906.736 657.475 905.401 cv
657.492 905.391 657.507 905.382 657.526 905.373 cv
cp
655.542 905.299 mo
654.555 920.302 li
655.881 921.869 656.966 921.628 658.292 920.422 cv
658.062 919.805 657.841 915.812 657.65 910.669 cv
658.755 909.491 659.338 908.752 659.877 907.595 cv
661.714 907.949 664.218 907.649 665.111 905.606 cv
665.853 903.911 664.309 902.083 662.57 901.44 cv
664.942 899.011 667.254 895.542 667.696 891.003 cv
668.551 882.245 664.923 879.549 656.563 879.79 cv
646.722 880.073 643.554 886.934 644.79 893.296 cv
645.896 898.987 651.481 903.74 655.542 905.299 cv
cp
f
892.313 901.893 mo
893.269 910.938 898.538 914.53 902.132 916.188 cv
901.922 918.764 901.317 930.261 901.317 930.261 cv
901.888 930.928 902.666 930.842 903.247 930.643 cv
903.145 929.64 903.065 928.624 903.007 927.59 cv
902.208 913.39 904.175 902.856 907.737 895.052 cv
906.217 894.358 904.338 893.969 902.166 893.911 cv
898.561 893.814 894.851 895.04 893.183 897.742 cv
892.488 898.867 892.139 900.242 892.313 901.893 cv
cp
f
763.958 884.402 mo
764.85 885.442 766.337 884.402 766.337 884.402 cv
766.337 884.402 765.966 875.746 766.014 871.966 cv
766.479 871.698 766.891 871.377 767.303 871.058 cv
771.285 867.971 772.893 862.778 773.173 859.875 cv
773.62 855.269 770.2 852.741 764.701 852.594 cv
760.233 852.475 755.562 854.664 756.081 859.579 cv
756.701 865.449 759.396 868.691 762.03 870.567 cv
762.948 871.222 763.858 871.713 764.671 872.087 cv
764.488 874.341 763.958 884.402 763.958 884.402 cv
cp
f
340.779 891.324 mo
340.779 891.324 340.363 881.607 340.409 877.233 cv
340.41 877.194 340.409 877.151 340.41 877.114 cv
346.074 873.837 348.239 866.953 348.592 863.295 cv
349.103 858.031 345.195 855.141 338.91 854.974 cv
333.805 854.836 328.465 857.338 329.058 862.957 cv
330.013 872 335.281 875.593 338.876 877.25 cv
338.87 877.33 338.862 877.44 338.855 877.534 cv
338.629 880.54 338.062 891.324 338.062 891.324 cv
339.08 892.513 340.779 891.324 340.779 891.324 cv
cp
f
2265.88 885.077 mo
2269.66 881.822 2272.98 876.489 2272.06 870.558 cv
2270.71 861.919 2267.06 855.46 2260.36 856.127 cv
2257.93 856.37 2253.93 859.072 2251.48 862.997 cv
2258.59 868.197 2264.48 876.702 2265.88 885.077 cv
cp
f
1472.56 899 mo
1472.68 899.226 1472.81 899.436 1472.95 899.65 cv
1474.62 902.303 1476.96 904.103 1479.13 905.524 cv
1479.03 909.525 1478.81 915.822 1478.17 917.503 cv
1479.42 918.275 1481.11 918.211 1481.98 917.599 cv
1481.98 917.599 1481.66 910.153 1481.48 906.083 cv
1484.23 905.079 1487.5 903.166 1489.66 900.281 cv
1491.39 897.97 1492.4 895.038 1491.84 891.436 cv
1490.61 883.589 1485.53 878 1481.71 877.118 cv
1481.68 877.487 1481.67 877.827 1481.64 878.204 cv
1480.79 886.841 1476.95 893.758 1472.56 899 cv
cp
f
2823.04 890.523 mo
2823.17 891.829 2823.46 893.036 2823.86 894.165 cv
2828.32 895.729 2833.14 898.941 2837.74 903.527 cv
2841.29 901.333 2845.06 897.377 2845.95 892.813 cv
2846.13 891.875 2846.2 890.874 2846.18 889.848 cv
2846.08 883.915 2842.61 877.143 2835.37 876.948 cv
2829.82 876.798 2824.03 880.507 2823.11 887.165 cv
2822.96 888.213 2822.92 889.33 2823.04 890.523 cv
cp
f
128.371 886.07 mo
124.511 885.962 117.303 888.403 115.954 897.041 cv
114.686 905.145 122.118 913.367 127.157 915.603 cv
126.981 919.664 126.665 927.16 126.665 927.16 cv
127.526 927.771 129.215 927.833 130.465 927.063 cv
129.824 925.373 129.606 919.005 129.504 915.009 cv
133.455 912.041 138.887 906.038 139.463 899.092 cv
140.11 891.289 132.234 886.177 128.371 886.07 cv
cp
f
286.366 904.198 mo
287.79 905.079 289.722 905.005 290.704 904.307 cv
290.704 904.307 290.375 896.669 290.125 890.806 cv
291.73 890.096 293.499 888.874 295.113 887.28 cv
298.45 883.989 301.123 879.091 300.28 873.699 cv
298.93 865.06 295.28 858.6 288.585 859.267 cv
284.74 859.651 276.965 866.171 277.614 873.973 cv
278.131 880.196 282.56 885.905 286.32 889.208 cv
286.784 889.616 287.239 889.994 287.673 890.323 cv
287.529 894.558 287.152 902.12 286.366 904.198 cv
cp
f
399.813 915.1 mo
399.23 914.583 398.739 914.082 398.14 913.243 cv
398.461 913.149 398.751 913.034 398.987 912.907 cv
399.706 912.516 399.959 911.891 399.888 911.169 cv
399.906 911.18 399.92 911.189 399.938 911.199 cv
399.898 912.533 399.855 913.844 399.813 915.1 cv
cp
402.046 883.227 mo
395.62 883.053 388.862 888.042 389.717 896.802 cv
390.159 901.34 392.471 904.81 394.843 907.235 cv
393.104 907.879 391.561 909.708 392.303 911.404 cv
393.196 913.446 395.699 913.746 397.537 913.39 cv
398.077 914.548 398.659 915.29 399.763 916.465 cv
399.572 921.609 399.352 925.602 399.121 926.219 cv
400.449 927.425 401.532 927.667 402.859 926.099 cv
401.872 911.094 li
405.932 909.539 411.517 904.785 412.624 899.092 cv
413.86 892.731 410.536 883.457 402.046 883.227 cv
cp
f
28.5454 907.44 mo
28.5454 907.44 30.2432 908.63 31.2617 907.44 cv
31.2617 907.44 30.834 899.309 30.5728 895.191 cv
33.8062 893.913 38.8447 892.959 40.5659 886.019 cv
40.7642 885.219 40.9292 884.36 41.0313 883.392 cv
41.624 877.774 35.5186 870.953 30.4126 871.089 cv
24.1289 871.256 19.6426 878.125 20.1523 883.392 cv
20.4253 886.206 22.3828 889.664 25.8823 892.519 cv
26.7969 893.265 27.791 893.979 28.9175 894.618 cv
28.8911 899.359 28.5454 907.44 28.5454 907.44 cv
cp
f
1145.79 891.798 mo
1146.87 889.44 1147.43 887.101 1147.59 885.434 cv
1147.7 884.356 1147.61 883.381 1147.36 882.506 cv
1146.39 879.106 1142.91 877.247 1137.91 877.114 cv
1136.48 877.075 1135.04 877.25 1133.71 877.635 cv
1145.79 891.798 li
cp
f
1317.58 874.231 mo
1318.98 876.232 1320.29 878.411 1321.48 880.754 cv
1320.92 878.107 1319.4 875.893 1317.58 874.231 cv
cp
f
3015.56 1028.78 mo
3015.32 1034.37 3014.88 1044.67 3014.88 1044.67 cv
3016.07 1045.52 3018.39 1045.6 3020.11 1044.54 cv
3019.23 1042.22 3018.93 1033.46 3018.79 1027.97 cv
3024.22 1023.89 3031.69 1015.63 3032.48 1006.08 cv
3033.37 995.352 3022.54 988.324 3017.23 988.176 cv
3011.92 988.029 3002.01 991.385 3000.16 1003.26 cv
2998.41 1014.4 3008.63 1025.71 3015.56 1028.78 cv
cp
f
739.952 946.786 mo
739.776 950.846 739.459 958.342 739.459 958.342 cv
740.322 958.954 742.01 959.016 743.26 958.246 cv
742.619 956.555 742.401 950.188 742.3 946.192 cv
746.25 943.223 751.683 937.22 752.258 930.274 cv
752.906 922.471 745.029 917.36 741.166 917.252 cv
737.306 917.145 730.098 919.585 728.749 928.223 cv
727.481 936.329 734.913 944.549 739.952 946.786 cv
cp
f
86.9258 935.394 mo
80.894 935.227 69.6318 939.041 67.5244 952.537 cv
65.5439 965.2 77.1548 978.045 85.0288 981.54 cv
84.7534 987.884 84.2588 999.597 84.2588 999.597 cv
85.6069 1000.55 88.2451 1000.65 90.1987 999.446 cv
89.1963 996.805 88.856 986.856 88.6973 980.612 cv
94.8687 975.973 103.358 966.595 104.258 955.742 cv
105.269 943.548 92.9624 935.563 86.9258 935.394 cv
cp
f
2584.13 919.206 mo
2583.96 923.266 2583.64 930.762 2583.64 930.762 cv
2584.5 931.374 2586.19 931.436 2587.44 930.666 cv
2586.8 928.975 2586.58 922.608 2586.48 918.612 cv
2590.43 915.643 2595.86 909.64 2596.44 902.694 cv
2596.77 898.704 2594.87 895.425 2592.42 893.153 cv
2590.08 890.979 2587.24 889.725 2585.35 889.672 cv
2582.27 889.587 2577.07 891.133 2574.41 896.133 cv
2573.73 897.406 2573.2 898.892 2572.93 900.643 cv
2571.66 908.749 2579.09 916.969 2584.13 919.206 cv
cp
f
1906.47 908.787 mo
1907.05 915.776 1912.57 922.124 1916.53 925.137 cv
1916.38 929.372 1916.01 936.934 1915.22 939.012 cv
1916.64 939.892 1918.58 939.819 1919.56 939.121 cv
1919.56 939.121 1919.23 931.483 1918.98 925.62 cv
1923.9 923.441 1930.38 916.516 1929.13 908.512 cv
1928.26 902.945 1926.43 898.296 1923.45 895.864 cv
1921.81 894.521 1919.82 893.843 1917.44 894.081 cv
1916.79 894.145 1916.03 894.397 1915.22 894.787 cv
1911.21 896.71 1905.93 902.299 1906.47 908.787 cv
cp
f
1778.17 905.681 mo
1777.59 905.165 1777.1 904.662 1776.5 903.824 cv
1776.82 903.73 1777.11 903.615 1777.35 903.488 cv
1778.07 903.097 1778.32 902.472 1778.25 901.75 cv
1778.27 901.76 1778.28 901.77 1778.3 901.78 cv
1778.26 903.114 1778.21 904.424 1778.17 905.681 cv
cp
1768.08 887.382 mo
1768.52 891.92 1770.83 895.391 1773.2 897.816 cv
1771.46 898.46 1769.92 900.29 1770.66 901.984 cv
1771.56 904.027 1774.06 904.327 1775.9 903.971 cv
1776.44 905.129 1777.02 905.871 1778.12 907.045 cv
1777.93 912.19 1777.71 916.183 1777.48 916.8 cv
1778.81 918.006 1779.89 918.248 1781.22 916.68 cv
1780.23 901.675 li
1784.29 900.12 1789.88 895.366 1790.98 889.672 cv
1791.44 887.336 1791.27 884.61 1790.46 882.081 cv
1789.08 877.722 1785.78 873.953 1780.41 873.807 cv
1774.97 873.662 1769.32 877.214 1768.21 883.607 cv
1768.01 884.777 1767.95 886.028 1768.08 887.382 cv
cp
f
2898.53 984.749 mo
2897.73 984.04 2897.05 983.347 2896.23 982.194 cv
2896.67 982.066 2897.07 981.908 2897.39 981.733 cv
2898.38 981.197 2898.73 980.337 2898.63 979.343 cv
2898.66 979.359 2898.68 979.371 2898.7 979.385 cv
2898.65 981.219 2898.59 983.022 2898.53 984.749 cv
cp
2901.6 940.922 mo
2892.76 940.686 2883.47 947.544 2884.65 959.589 cv
2885.25 965.828 2888.43 970.6 2891.7 973.934 cv
2889.3 974.821 2887.18 977.335 2888.2 979.666 cv
2889.43 982.475 2892.87 982.886 2895.4 982.399 cv
2896.14 983.991 2896.94 985.009 2898.46 986.625 cv
2898.2 993.699 2897.9 999.189 2897.58 1000.04 cv
2899.4 1001.7 2900.89 1002.03 2902.72 999.872 cv
2901.36 979.241 li
2906.94 977.101 2914.62 970.565 2916.15 962.737 cv
2917.84 953.991 2913.27 941.239 2901.6 940.922 cv
cp
f
250.402 990.744 mo
249.709 990.13 249.127 989.534 248.415 988.538 cv
248.797 988.425 249.141 988.29 249.421 988.139 cv
250.275 987.675 250.576 986.932 250.491 986.076 cv
250.512 986.088 250.53 986.098 250.552 986.11 cv
250.503 987.695 250.453 989.252 250.402 990.744 cv
cp
253.054 952.894 mo
245.423 952.688 237.398 958.612 238.414 969.014 cv
238.938 974.403 241.684 978.523 244.5 981.404 cv
242.435 982.168 240.604 984.341 241.484 986.353 cv
242.545 988.779 245.517 989.134 247.699 988.713 cv
248.341 990.087 249.032 990.969 250.342 992.364 cv
250.115 998.473 249.855 1003.22 249.581 1003.95 cv
251.157 1005.38 252.443 1005.67 254.02 1003.8 cv
252.847 985.987 li
257.668 984.139 264.3 978.494 265.615 971.734 cv
267.083 964.179 263.135 953.166 253.054 952.894 cv
cp
f
1584.86 902.232 mo
1585.2 905.781 1588.18 910.372 1593.62 913.458 cv
1593.6 918.199 1593.25 926.28 1593.25 926.28 cv
1593.25 926.28 1594.95 927.47 1595.97 926.28 cv
1595.97 926.28 1595.54 918.149 1595.28 914.031 cv
1598.88 912.604 1604.75 911.608 1605.74 902.232 cv
1605.86 901.012 1605.66 899.736 1605.24 898.486 cv
1603.71 893.981 1599.12 889.822 1595.12 889.929 cv
1589.85 890.07 1585.86 894.911 1585 899.575 cv
1584.84 900.479 1584.77 901.377 1584.86 902.232 cv
cp
f
1697.84 972.45 mo
1695.65 977.168 1693.27 980.186 1688.77 984.984 cv
1689.18 996.11 1689.63 1005.89 1690.1 1013.02 cv
1717.19 1005.75 1760.44 994.577 1813.25 982.407 cv
1780.96 977.749 1748.46 973.157 1716.05 968.697 cv
1711.31 973.045 1703.75 973.591 1697.84 972.45 cv
cp
.529412 .443137 0 rgb
f
1659.11 1021.56 mo
1659.11 1021.56 1665.31 1019.77 1676.65 1016.66 cv
1680.13 963.8 li
1604.32 953.576 1529.58 944.191 1459.61 936.446 cv
1459.87 940.842 1460.14 943.826 1460.42 944.578 cv
1457.43 947.297 1454.98 947.84 1451.99 944.305 cv
1452.56 935.668 li
1450.13 935.403 1447.72 935.141 1445.3 934.879 cv
1415.46 931.642 1386.55 928.72 1358.87 926.176 cv
1345.96 924.991 1333.31 923.885 1320.97 922.87 cv
1315.2 930.247 1306.71 935.157 1299.56 937.771 cv
1300.03 948.656 1300.88 968.567 1300.88 968.567 cv
1298.57 970.204 1294.05 970.372 1290.71 968.31 cv
1292.41 963.817 1293 946.978 1293.28 936.276 cv
1287.16 932.28 1280.54 927.213 1276.04 919.489 cv
1243.21 917.266 1213.06 915.821 1186.33 915.313 cv
1184.92 917.566 li
1185.27 917.616 li
1183.01 934.5 li
1194.3 938.785 li
1182.76 941.218 li
1180.25 978.927 li
1088.77 977.9 li
1059.56 979.965 li
1059.12 977.567 li
1037.29 977.321 li
1033.43 923.264 li
1018.17 924.846 1002.47 926.631 986.404 928.596 cv
986.023 931.302 985.547 934.11 984.912 937.084 cv
979.261 963.523 964.927 972.816 951.211 981.305 cv
952.157 1003.22 953.851 1042.74 953.851 1042.74 cv
950.155 1045.37 942.888 1045.64 937.529 1042.33 cv
940.931 1033.34 942.302 997.077 942.633 983.926 cv
941.183 982.823 939.575 981.423 937.92 979.748 cv
924.03 972.921 909.809 959.963 904.791 939.604 cv
871.408 944.482 837.103 949.907 802.444 955.705 cv
802.867 965.589 803.213 973.659 803.213 973.659 cv
800.588 975.528 795.423 975.718 791.612 973.365 cv
792.657 970.606 793.431 964.23 793.993 957.125 cv
772.311 960.785 750.513 964.583 728.732 968.485 cv
728.757 969.786 728.737 971.103 728.625 972.45 cv
726.566 997.281 707.143 1018.75 693.021 1029.35 cv
693.383 1043.65 694.169 1066.41 696.458 1072.45 cv
691.995 1075.21 685.948 1074.98 682.871 1072.79 cv
682.871 1072.79 684.006 1046 684.631 1031.48 cv
670.531 1025.22 651.208 1005.85 645.643 983.831 cv
587.942 994.795 531.669 1006.09 479.5 1016.92 cv
480.217 1029.85 480.82 1041.31 480.82 1041.31 cv
476.609 1046.22 469.592 1041.31 469.592 1041.31 cv
469.592 1041.31 470.026 1031.18 470.435 1018.81 cv
318.949 1050.38 204.136 1077.51 193.65 1080 cv
1659.56 1080 li
1614.62 1079.96 1588.77 1079.93 1588.77 1079.93 cv
1659.11 1021.56 li
cp
f
1155.97 926.807 mo
1156.15 924.31 li
1178.51 932.792 li
1180.56 916.941 li
1181.23 917.037 li
1180.74 915.225 li
1173.38 915.12 1166.29 915.089 1159.48 915.136 cv
1154.8 915.688 li
1154.81 915.849 li
1154.81 915.847 li
1155.4 926.63 li
1155.97 926.807 li
cp
f
1182.4 917.205 mo
1183.58 917.374 li
1185 915.292 li
1183.98 915.273 1182.97 915.259 1181.95 915.244 cv
1182.4 917.205 li
cp
f
1688.23 964.896 mo
1688.18 964.89 1688.14 964.883 1688.09 964.877 cv
1688.25 969.844 1688.41 974.725 1688.57 979.418 cv
1690.95 977.307 1692.95 975.263 1695.39 971.85 cv
1694.08 971.459 1692.89 970.999 1691.94 970.476 cv
1689.52 969.158 1688.39 967.195 1688.23 964.896 cv
cp
f
2821.21 1005.48 mo
2821.83 1020.03 2822.6 1038.29 2822.6 1038.29 cv
2819.53 1040.48 2813.48 1040.7 2809.02 1037.95 cv
2810.9 1032.98 2811.76 1016.72 2812.21 1003.15 cv
2758.02 989.17 2699.21 975.459 2639.17 963.256 cv
2639.47 974.012 2639.92 984.702 2639.92 984.702 cv
2639.92 984.702 2635.39 987.882 2632.66 984.702 cv
2632.66 984.702 2633.28 972.833 2633.89 962.19 cv
2610.6 957.494 2587.13 953.032 2563.7 948.874 cv
2566.9 970.549 li
2467.13 966.159 li
2469.66 982.181 li
2469.66 982.181 2408.63 980.079 2374.89 982.53 cv
2373.89 982.605 2372.91 982.68 2371.96 982.762 cv
2371.91 982.767 2371.86 982.772 2371.81 982.776 cv
2370.86 982.857 2369.94 982.942 2369.05 983.032 cv
2368.98 983.039 2368.91 983.046 2368.84 983.053 cv
2367.97 983.143 2367.12 983.236 2366.31 983.333 cv
2366.23 983.341 2366.16 983.352 2366.09 983.361 cv
2365.27 983.461 2364.47 983.564 2363.71 983.672 cv
2363.15 983.754 2362.57 983.83 2361.98 983.901 cv
2361.82 983.922 2361.66 983.94 2361.5 983.959 cv
2360.97 984.022 2360.43 984.08 2359.88 984.135 cv
2359.82 984.143 2359.75 984.149 2359.69 984.156 cv
2329.53 987.138 2272.38 979.948 2272.38 979.948 cv
2281.45 917.954 li
2273.77 917.854 2266.21 917.845 2258.81 917.937 cv
2255.57 917.978 2252.31 918.039 2249.04 918.111 cv
2245.21 919.99 2241.33 921.135 2238.13 922.404 cv
2238.83 933.42 2239.97 955.161 2239.97 955.161 cv
2237.24 958.339 2232.7 955.161 2232.7 955.161 cv
2232.7 955.161 2233.63 933.55 2233.7 920.872 cv
2232.47 920.175 2231.3 919.444 2230.16 918.694 cv
2218.82 919.141 2207.32 919.763 2195.7 920.542 cv
2202.5 929.545 2207.96 942.428 2206.98 954.248 cv
2205.43 972.89 2192.66 985.02 2182.48 992.076 cv
2182.86 1003.42 2183.88 1023.52 2185.97 1029.05 cv
2182.16 1031.4 2177 1031.21 2174.37 1029.35 cv
2174.37 1029.35 2175.25 1008.92 2175.92 993.246 cv
2162.76 987.417 2145.42 968.898 2148.76 947.5 cv
2150.24 938.088 2153.98 929.895 2158.61 923.506 cv
2136.02 925.59 2113.14 928.181 2090.25 931.167 cv
2090.43 933.795 2090.62 935.551 2090.82 936.072 cv
2088.23 938.425 2086.11 938.895 2083.52 935.835 cv
2083.77 932.021 li
2058.18 935.439 2032.59 939.331 2007.39 943.535 cv
2004.34 955.391 1991.56 965.202 1982.19 968.467 cv
1984.53 1000.77 li
1981.39 1004.14 1978.82 1003.62 1975.69 1001.02 cv
1976.23 999.696 1976.75 991.103 1977.21 980.036 cv
1974.59 977.504 1973.21 975.911 1971.94 973.419 cv
1967.59 974.183 1961.67 973.538 1959.56 969.144 cv
1957.8 965.493 1961.45 961.563 1965.57 960.182 cv
1963.13 957.913 1960.73 955.22 1958.7 952.099 cv
1906.2 961.801 1856.51 972.438 1813.25 982.407 cv
1760.44 994.577 1717.19 1005.75 1690.1 1013.02 cv
1690.51 1019.33 1690.94 1023.57 1691.39 1024.75 cv
1685.98 1029.66 1681.56 1030.64 1676.15 1024.26 cv
1676.65 1016.66 li
1665.31 1019.77 1659.11 1021.56 1659.11 1021.56 cv
1588.77 1079.93 li
1588.77 1079.93 1614.62 1079.96 1659.56 1080 cv
2505.15 1080 li
2737.71 1079.74 2950.01 1079.19 3050.03 1078.07 cv
3005.45 1058.64 2921.75 1031.72 2821.21 1005.48 cv
cp
.521569 .435294 0 rgb
f
1975.37 972.377 mo
1974.81 972.653 1974.12 972.896 1973.36 973.102 cv
1974.78 974.906 1975.94 975.986 1977.32 977.098 cv
1977.42 974.398 1977.52 971.567 1977.62 968.702 cv
1977.58 968.68 1977.54 968.663 1977.5 968.64 cv
1977.67 970.193 1977.07 971.534 1975.37 972.377 cv
cp
f
2071.04 878.84 mo
2074.77 889.118 2082.81 896.132 2085.97 898.592 cv
2088.23 864.241 li
2088.23 864.241 2088.45 876.924 2088.81 891.645 cv
2090.69 889.53 2096.47 882.12 2096.47 871.07 cv
2097.58 880.792 2092.25 890.307 2088.87 893.973 cv
2088.98 898.191 2089.1 902.514 2089.22 906.728 cv
2089.26 906.708 2089.29 906.692 2089.32 906.671 cv
2089.54 904.475 2091.31 901.808 2093.69 899.622 cv
2095.13 898.309 2097.21 898.271 2099.17 898.995 cv
2103.8 894.252 2108.32 887.475 2109.19 878.607 cv
2110.86 861.498 2103.77 856.233 2087.44 856.703 cv
2068.22 857.254 2062.03 870.659 2064.44 883.082 cv
2066.61 894.204 2077.51 903.476 2085.45 906.515 cv
2085.71 902.45 li
2081.13 898.801 2073.76 889.941 2071.04 878.84 cv
cp
.788235 .564706 .00392157 rgb
f
2093.69 899.622 mo
2091.31 901.808 2089.54 904.475 2089.32 906.671 cv
2089.18 908.083 2089.68 909.3 2091.08 910.067 cv
2091.22 910.14 2091.37 910.208 2091.52 910.276 cv
2091.88 910.443 2092.29 910.592 2092.74 910.725 cv
2093.64 909.464 2094.67 907.813 2096 905.455 cv
2095.19 907.89 2094.57 909.607 2093.91 911.012 cv
2096.71 911.552 2100.29 911.305 2102.56 909.287 cv
2103.21 908.713 2103.75 908.011 2104.14 907.129 cv
2105.59 903.816 2102.57 900.25 2099.17 898.995 cv
2097.21 898.271 2095.13 898.309 2093.69 899.622 cv
cp
.721569 .517647 .00392157 rgb
f
2083.52 935.835 mo
2086.11 938.895 2088.23 938.425 2090.82 936.072 cv
2090.62 935.551 2090.43 933.795 2090.25 931.167 cv
2090.01 927.706 2089.78 922.726 2089.57 917.017 cv
2091.72 914.718 2092.86 913.273 2093.91 911.012 cv
2094.57 909.607 2095.19 907.89 2096 905.455 cv
2094.67 907.813 2093.64 909.464 2092.74 910.725 cv
2091.57 912.361 2090.61 913.339 2089.47 914.351 cv
2089.42 913.081 2089.38 911.764 2089.34 910.446 cv
2089.3 909.221 2089.26 907.981 2089.22 906.728 cv
2089.1 902.514 2088.98 898.191 2088.87 893.973 cv
2092.25 890.307 2097.58 880.792 2096.47 871.07 cv
2096.47 882.12 2090.69 889.53 2088.81 891.645 cv
2088.45 876.924 2088.23 864.241 2088.23 864.241 cv
2085.97 898.592 li
2082.81 896.132 2074.77 889.118 2071.04 878.84 cv
2073.76 889.941 2081.13 898.801 2085.71 902.45 cv
2085.45 906.515 li
2085.17 910.751 li
2083.77 932.021 li
2083.52 935.835 li
cp
.168627 .164706 .12549 rgb
f
1441.43 902.193 mo
1444.13 904.674 1447.01 906.756 1449.79 908.333 cv
1451.32 909.199 1452.8 909.898 1454.22 910.44 cv
1454.53 905.744 li
1449.23 901.528 1440.72 891.294 1437.57 878.474 cv
1441.89 890.344 1451.17 898.446 1454.82 901.288 cv
1457.43 861.609 li
1457.43 861.609 1457.68 876.26 1458.1 893.262 cv
1460.27 890.82 1466.95 882.261 1466.95 869.498 cv
1468.23 880.728 1462.08 891.718 1458.17 895.953 cv
1458.29 900.825 1458.43 905.817 1458.58 910.684 cv
1458.62 910.662 1458.65 910.644 1458.69 910.621 cv
1458.94 908.084 1460.99 905.002 1463.74 902.477 cv
1465.4 900.961 1467.8 900.917 1470.07 901.751 cv
1470.73 901.073 1471.39 900.361 1472.04 899.61 cv
1472.21 899.411 1472.38 899.206 1472.56 899 cv
1476.95 893.758 1480.79 886.841 1481.64 878.204 cv
1481.67 877.827 1481.68 877.487 1481.71 877.118 cv
1483.22 858.244 1475.02 852.371 1456.52 852.903 cv
1434.32 853.541 1427.17 869.022 1429.96 883.372 cv
1430.98 888.648 1433.72 893.56 1437.22 897.768 cv
1438.53 899.35 1439.95 900.832 1441.43 902.193 cv
cp
.788235 .564706 .00392157 rgb
f
1460.72 914.541 mo
1461.25 914.831 1461.91 915.085 1462.64 915.301 cv
1463.68 913.844 1464.87 911.938 1466.41 909.213 cv
1465.47 912.027 1464.75 914.011 1463.99 915.632 cv
1468.14 916.434 1473.79 915.756 1475.81 911.148 cv
1477.48 907.322 1473.99 903.202 1470.07 901.751 cv
1467.8 900.917 1465.4 900.961 1463.74 902.477 cv
1460.99 905.002 1458.94 908.084 1458.69 910.621 cv
1458.53 912.25 1459.1 913.656 1460.72 914.541 cv
cp
.721569 .517647 .00392157 rgb
f
1463.99 915.632 mo
1464.75 914.011 1465.47 912.027 1466.41 909.213 cv
1464.87 911.938 1463.68 913.844 1462.64 915.301 cv
1461.28 917.19 1460.18 918.321 1458.86 919.489 cv
1458.76 916.658 1458.67 913.69 1458.58 910.684 cv
1458.43 905.817 1458.29 900.825 1458.17 895.953 cv
1462.08 891.718 1468.23 880.728 1466.95 869.498 cv
1466.95 882.261 1460.27 890.82 1458.1 893.262 cv
1457.68 876.26 1457.43 861.609 1457.43 861.609 cv
1454.82 901.288 li
1451.17 898.446 1441.89 890.344 1437.57 878.474 cv
1440.72 891.294 1449.23 901.528 1454.53 905.744 cv
1454.22 910.44 li
1452.56 935.668 li
1451.99 944.305 li
1454.98 947.84 1457.43 947.297 1460.42 944.578 cv
1460.14 943.826 1459.87 940.842 1459.61 936.446 cv
1459.38 932.693 1459.17 927.913 1458.97 922.569 cv
1461.46 919.915 1462.78 918.245 1463.99 915.632 cv
cp
.168627 .164706 .12549 rgb
f
2628.02 935.326 mo
2625.2 934.283 2617.26 930.366 2615.4 918.84 cv
2618.56 927.539 2622.76 929.696 2626.19 931.01 cv
2623.09 922.999 2620.99 913.149 2622.67 904.304 cv
2622.67 910.774 2624.43 918.891 2627.12 926.08 cv
2628.35 924.415 2632.28 918.674 2632.66 912.935 cv
2633.37 919.005 2629.6 925.636 2627.95 928.195 cv
2630.43 934.241 2633.54 939.403 2636.75 942.005 cv
2642.2 937.917 2647.65 929.741 2651.28 917.931 cv
2649.46 931.557 2642.65 940.189 2639.02 943.821 cv
2638.98 944.618 2638.95 945.596 2638.94 946.705 cv
2640.05 946.062 2641.12 945.378 2642.13 944.64 cv
2646.86 941.182 2650.54 936.757 2653.32 932.081 cv
2654.04 930.87 2654.69 929.642 2655.3 928.412 cv
2658.66 921.584 2660.33 914.663 2660.81 909.825 cv
2660.81 909.803 2660.82 909.778 2660.82 909.755 cv
2661.38 903.955 2659.91 899.251 2656.84 895.671 cv
2653.15 891.354 2647.09 888.7 2639.34 887.823 cv
2637.92 887.662 2636.46 887.54 2634.93 887.5 cv
2621.28 887.135 2607 893.825 2608.59 908.848 cv
2611.14 933.033 2625.22 942.635 2634.84 947.067 cv
2634.88 946.661 2634.91 946.323 2634.93 946.093 cv
2633.06 944.391 2630.42 940.46 2628.02 935.326 cv
cp
.74902 .282353 .00392157 rgb
f
2638.94 946.705 mo
2638.95 945.596 2638.98 944.618 2639.02 943.821 cv
2642.65 940.189 2649.46 931.557 2651.28 917.931 cv
2647.65 929.741 2642.2 937.917 2636.75 942.005 cv
2633.54 939.403 2630.43 934.241 2627.95 928.195 cv
2629.6 925.636 2633.37 919.005 2632.66 912.935 cv
2632.28 918.674 2628.35 924.415 2627.12 926.08 cv
2624.43 918.891 2622.67 910.774 2622.67 904.304 cv
2620.99 913.149 2623.09 922.999 2626.19 931.01 cv
2622.76 929.696 2618.56 927.539 2615.4 918.84 cv
2617.26 930.366 2625.2 934.283 2628.02 935.326 cv
2630.42 940.46 2633.06 944.391 2634.93 946.093 cv
2634.91 946.323 2634.88 946.661 2634.84 947.067 cv
2634.63 949.676 2634.26 955.699 2633.89 962.19 cv
2633.28 972.833 2632.66 984.702 2632.66 984.702 cv
2635.39 987.882 2639.92 984.702 2639.92 984.702 cv
2639.92 984.702 2639.47 974.012 2639.17 963.256 cv
2639 957.089 2638.89 950.911 2638.94 946.705 cv
cp
.168627 .164706 .12549 rgb
f
768.212 892.549 mo
769.762 911.237 784.52 928.209 795.108 936.267 cv
795.166 934.573 795.209 933.073 795.24 931.856 cv
789.543 927.519 780.459 916.971 780.882 900.21 cv
782.079 916.689 795.676 927.352 795.676 927.352 cv
795.676 927.352 796.627 889.644 797.357 873.538 cv
798.683 884.86 799.79 904.879 800.407 918.764 cv
808.949 912.53 814.108 899.76 814.765 886.555 cv
816.331 901.106 810.826 914.834 800.979 921.68 cv
801.105 924.561 801.364 930.593 801.664 937.559 cv
814.828 931.73 832.164 913.211 828.82 891.813 cv
828.388 889.047 827.865 886.37 827.253 883.793 cv
822.754 864.854 813.308 851.653 797.546 853.224 cv
790.996 853.875 780.185 861.201 773.646 871.824 cv
769.925 877.87 767.583 884.981 768.212 892.549 cv
cp
.768627 .694118 .00392157 rgb
f
800.979 921.68 mo
810.826 914.834 816.331 901.106 814.765 886.555 cv
814.108 899.76 808.949 912.53 800.407 918.764 cv
799.79 904.879 798.683 884.86 797.357 873.538 cv
796.627 889.644 795.676 927.352 795.676 927.352 cv
795.676 927.352 782.079 916.689 780.882 900.21 cv
780.459 916.971 789.543 927.519 795.24 931.856 cv
795.209 933.073 795.166 934.573 795.108 936.267 cv
794.915 941.967 794.563 949.919 793.993 957.125 cv
793.431 964.23 792.657 970.606 791.612 973.365 cv
795.423 975.718 800.588 975.528 803.213 973.659 cv
803.213 973.659 802.867 965.589 802.444 955.705 cv
802.193 949.86 801.915 943.384 801.664 937.559 cv
801.364 930.593 801.105 924.561 800.979 921.68 cv
cp
.168627 .164706 .12549 rgb
f
1270.8 902.289 mo
1271.37 909.236 1273.32 914.836 1276.04 919.489 cv
1280.54 927.213 1287.16 932.28 1293.28 936.276 cv
1293.34 933.652 1293.39 931.39 1293.43 929.778 cv
1288.44 925.981 1282.42 915.375 1281.31 904.229 cv
1284.68 918.199 1294 925.542 1294 925.542 cv
1294 925.542 1295.05 900.114 1295.69 886.006 cv
1296.86 895.923 1297.87 916.51 1298.42 928.67 cv
1308.4 923 1311.79 914.246 1313.77 904.362 cv
1313.48 917.918 1307.27 926.106 1299.36 933.167 cv
1299.41 934.35 1299.48 935.937 1299.56 937.771 cv
1306.71 935.157 1315.2 930.247 1320.97 922.87 cv
1325.86 916.601 1328.79 908.554 1327.24 898.607 cv
1326.7 895.169 1325.88 891.897 1324.85 888.81 cv
1323.9 885.956 1322.76 883.261 1321.48 880.754 cv
1320.29 878.411 1318.98 876.232 1317.58 874.231 cv
1311.24 865.14 1303.22 859.787 1297.18 859.954 cv
1289.92 860.155 1278.98 870.693 1273.72 884.183 cv
1271.5 889.878 1270.28 896.094 1270.8 902.289 cv
cp
.6 .321569 .00392157 rgb
f
1313.77 904.362 mo
1311.79 914.246 1308.4 923 1298.42 928.67 cv
1297.87 916.51 1296.86 895.923 1295.69 886.006 cv
1295.05 900.114 1294 925.542 1294 925.542 cv
1294 925.542 1284.68 918.199 1281.31 904.229 cv
1282.42 915.375 1288.44 925.981 1293.43 929.778 cv
1293.39 931.39 1293.34 933.652 1293.28 936.276 cv
1293 946.978 1292.41 963.817 1290.71 968.31 cv
1294.05 970.372 1298.57 970.204 1300.88 968.567 cv
1300.88 968.567 1300.03 948.656 1299.56 937.771 cv
1299.48 935.937 1299.41 934.35 1299.36 933.167 cv
1307.27 926.106 1313.48 917.918 1313.77 904.362 cv
cp
.168627 .164706 .12549 rgb
f
1982.61 908.512 mo
1967.4 908.139 1951.42 918.875 1953.44 937.721 cv
1954.03 943.249 1956.05 948.034 1958.7 952.099 cv
1960.73 955.22 1963.13 957.913 1965.57 960.182 cv
1967.95 959.383 1970.47 959.426 1972.2 960.873 cv
1975.09 963.282 1977.24 966.22 1977.5 968.64 cv
1977.54 968.663 1977.58 968.68 1977.62 968.702 cv
1977.77 964.059 1977.92 959.298 1978.05 954.652 cv
1973.95 950.614 1967.5 940.13 1968.84 929.419 cv
1968.84 941.591 1975.85 949.752 1978.12 952.083 cv
1978.56 935.869 1978.82 921.897 1978.82 921.897 cv
1981.56 959.739 li
1985.39 957.028 1995.12 949.3 1999.64 937.981 cv
1996.35 950.209 1987.42 959.967 1981.87 963.987 cv
1982.19 968.467 li
1991.56 965.202 2004.34 955.391 2007.39 943.535 cv
2007.46 943.24 2007.56 942.95 2007.63 942.652 cv
2010.55 928.966 2002.69 909.007 1982.61 908.512 cv
cp
.6 .321569 .00392157 rgb
f
1973.36 973.102 mo
1974.12 972.896 1974.81 972.653 1975.37 972.377 cv
1977.07 971.534 1977.67 970.193 1977.5 968.64 cv
1977.24 966.22 1975.09 963.282 1972.2 960.873 cv
1970.47 959.426 1967.95 959.383 1965.57 960.182 cv
1961.45 961.563 1957.8 965.493 1959.56 969.144 cv
1961.67 973.538 1967.59 974.183 1971.94 973.419 cv
1971.15 971.873 1970.39 969.981 1969.41 967.299 cv
1971.03 969.895 1972.27 971.713 1973.36 973.102 cv
cp
.478431 .258824 .00392157 rgb
f
1999.64 937.981 mo
1995.12 949.3 1985.39 957.028 1981.56 959.739 cv
1978.82 921.897 li
1978.82 921.897 1978.56 935.869 1978.12 952.083 cv
1975.85 949.752 1968.84 941.591 1968.84 929.419 cv
1967.5 940.13 1973.95 950.614 1978.05 954.652 cv
1977.92 959.298 1977.77 964.059 1977.62 968.702 cv
1977.52 971.567 1977.42 974.398 1977.32 977.098 cv
1975.94 975.986 1974.78 974.906 1973.36 973.102 cv
1972.27 971.713 1971.03 969.895 1969.41 967.299 cv
1970.39 969.981 1971.15 971.873 1971.94 973.419 cv
1973.21 975.911 1974.59 977.504 1977.21 980.036 cv
1976.75 991.103 1976.23 999.696 1975.69 1001.02 cv
1978.82 1003.62 1981.39 1004.14 1984.53 1000.77 cv
1982.19 968.467 li
1981.87 963.987 li
1987.42 959.967 1996.35 950.209 1999.64 937.981 cv
cp
.168627 .164706 .12549 rgb
f
2230.16 918.694 mo
2231.3 919.444 2232.47 920.175 2233.7 920.872 cv
2233.71 918.174 2233.69 915.873 2233.61 914.28 cv
2229.98 910.644 2223.16 902.016 2221.35 888.388 cv
2224.98 900.199 2230.43 908.374 2235.88 912.462 cv
2239.08 909.861 2242.2 904.7 2244.68 898.653 cv
2243.03 896.094 2239.25 889.463 2239.97 883.392 cv
2240.35 889.132 2244.28 894.872 2245.51 896.538 cv
2248.2 889.347 2249.96 881.232 2249.96 874.762 cv
2251.64 883.607 2249.53 893.456 2246.44 901.466 cv
2249.87 900.154 2254.07 897.996 2257.23 889.298 cv
2255.37 900.824 2247.43 904.74 2244.6 905.783 cv
2242.21 910.917 2239.57 914.848 2237.7 916.55 cv
2237.79 917.393 2237.95 919.542 2238.13 922.404 cv
2241.33 921.135 2245.21 919.99 2249.04 918.111 cv
2256.75 914.337 2264.33 907.59 2266.09 890.854 cv
2266.11 890.672 2266.11 890.486 2266.13 890.303 cv
2266.26 888.588 2266.17 886.835 2265.88 885.077 cv
2264.48 876.702 2258.59 868.197 2251.48 862.997 cv
2247.1 859.791 2242.25 857.836 2237.7 857.958 cv
2220.89 858.405 2208.9 876.773 2210.26 890.854 cv
2210.42 892.438 2210.79 894.105 2211.33 895.811 cv
2213.77 903.473 2220.11 912.041 2230.16 918.694 cv
cp
.768627 .694118 .00392157 rgb
f
2237.7 916.55 mo
2239.57 914.848 2242.21 910.917 2244.6 905.783 cv
2247.43 904.74 2255.37 900.824 2257.23 889.298 cv
2254.07 897.996 2249.87 900.154 2246.44 901.466 cv
2249.53 893.456 2251.64 883.607 2249.96 874.762 cv
2249.96 881.232 2248.2 889.347 2245.51 896.538 cv
2244.28 894.872 2240.35 889.132 2239.97 883.392 cv
2239.25 889.463 2243.03 896.094 2244.68 898.653 cv
2242.2 904.7 2239.08 909.861 2235.88 912.462 cv
2230.43 908.374 2224.98 900.199 2221.35 888.388 cv
2223.16 902.016 2229.98 910.644 2233.61 914.28 cv
2233.69 915.873 2233.71 918.174 2233.7 920.872 cv
2233.63 933.55 2232.7 955.161 2232.7 955.161 cv
2232.7 955.161 2237.24 958.339 2239.97 955.161 cv
2239.97 955.161 2238.83 933.42 2238.13 922.404 cv
2237.95 919.542 2237.79 917.393 2237.7 916.55 cv
cp
.168627 .164706 .12549 rgb
f
2405.07 854.09 mo
2398.79 853.617 li
2397.45 871.36 li
2406.08 874.477 li
2405.07 854.09 li
cp
.0901961 .0509804 .00392157 rgb
f
2506.93 864.927 mo
2499.2 862.764 li
2495.92 888.267 li
2504.86 892.485 li
2506.93 864.927 li
cp
f
2534.21 922.274 mo
2534.36 941.242 li
2524.93 940.531 li
2524.67 923.133 li
2534.21 922.274 li
cp
2442.92 875.899 mo
2423.51 880.783 li
2462.04 894.718 li
2462.9 904.262 li
2457 902.13 li
2467.13 966.159 li
2566.9 970.549 li
2563.7 948.874 li
2560.42 926.696 li
2442.92 875.899 li
cp
.733333 .698039 .439216 rgb
f
2423.51 880.783 mo
2442.92 875.899 li
2560.42 926.696 li
2566.84 929.473 li
2570.45 923.425 li
2528.94 903.843 li
2504.86 892.485 li
2495.92 888.267 li
2446.89 865.139 li
2412.09 876.654 li
2423.51 880.783 li
cp
.380392 .0941176 .00392157 rgb
f
2369.05 983.032 mo
2368.98 983.039 2368.91 983.046 2368.84 983.053 cv
2368.91 983.046 2368.98 983.039 2369.05 983.032 cv
cp
1 .956863 .54902 rgb
f
2363.71 983.672 mo
2363.15 983.754 2362.57 983.83 2361.98 983.901 cv
2362.57 983.83 2363.15 983.754 2363.71 983.672 cv
cp
f
2371.96 982.762 mo
2371.91 982.767 2371.86 982.772 2371.81 982.776 cv
2371.86 982.772 2371.91 982.767 2371.96 982.762 cv
cp
f
2366.31 983.333 mo
2366.23 983.341 2366.16 983.352 2366.09 983.361 cv
2366.16 983.352 2366.23 983.341 2366.31 983.333 cv
cp
f
2361.5 983.959 mo
2360.97 984.022 2360.43 984.08 2359.88 984.135 cv
2360.43 984.08 2360.97 984.022 2361.5 983.959 cv
cp
f
2361.75 884 mo
2372.86 883.258 li
2374.46 903.914 li
2358.52 905.874 li
2361.75 884 li
cp
2457 902.13 mo
2369.1 870.337 li
2284.6 896.391 li
2281.45 917.954 li
2272.38 979.948 li
2272.38 979.948 2329.53 987.138 2359.69 984.156 cv
2358.32 984.291 2356.89 984.404 2355.42 984.5 cv
2356.97 946.042 li
2377.88 943.667 li
2374.96 982.526 li
2374.93 982.527 2374.91 982.529 2374.89 982.53 cv
2408.63 980.079 2469.66 982.181 2469.66 982.181 cv
2467.13 966.159 li
2457 902.13 li
cp
f
2284.6 896.391 mo
2369.1 870.337 li
2457 902.13 li
2462.9 904.262 li
2462.04 894.718 li
2423.51 880.783 li
2412.09 876.654 li
2406.08 874.477 li
2397.45 871.36 li
2368.24 860.792 li
2280.81 888.957 li
2280.61 889.782 li
2278.53 898.264 li
2284.6 896.391 li
cp
.380392 .0941176 .00392157 rgb
f
2374.46 903.914 mo
2372.86 883.258 li
2361.75 884 li
2358.52 905.874 li
2374.46 903.914 li
cp
.0901961 .0509804 .00392157 rgb
f
2534.36 941.242 mo
2534.21 922.274 li
2524.67 923.133 li
2524.93 940.531 li
2534.36 941.242 li
cp
f
2377.88 943.667 mo
2356.97 946.042 li
2355.42 984.5 li
2356.89 984.404 2358.32 984.291 2359.69 984.156 cv
2359.75 984.149 2359.82 984.143 2359.88 984.135 cv
2360.43 984.08 2360.97 984.022 2361.5 983.959 cv
2361.66 983.94 2361.82 983.922 2361.98 983.901 cv
2362.57 983.83 2363.15 983.754 2363.71 983.672 cv
2364.47 983.564 2365.27 983.461 2366.09 983.361 cv
2366.16 983.352 2366.23 983.341 2366.31 983.333 cv
2367.12 983.236 2367.97 983.143 2368.84 983.053 cv
2368.91 983.046 2368.98 983.039 2369.05 983.032 cv
2369.94 982.942 2370.86 982.857 2371.81 982.776 cv
2371.86 982.772 2371.91 982.767 2371.96 982.762 cv
2372.91 982.68 2373.89 982.605 2374.89 982.53 cv
2374.91 982.529 2374.93 982.527 2374.96 982.526 cv
2377.88 943.667 li
cp
f
1105.23 821.508 mo
1108.68 820.58 li
1108.55 813.127 li
1077.7 812.818 li
1077.84 820.889 li
1081.99 821.357 li
1081.98 822.402 li
1105.22 821.622 li
1105.23 821.508 li
cp
.74902 .717647 .45098 rgb
f
1105.09 844.08 mo
1105.22 821.622 li
1081.98 822.402 li
1081.73 847.649 li
1094.62 831.802 li
1105.09 844.08 li
cp
1 .956863 .54902 rgb
f
1114.61 918.539 mo
1114.61 900.867 li
1128.74 901.338 li
1128.94 918.227 li
1114.61 918.539 li
cp
1126.56 960.03 mo
1112.51 960.881 li
1112.96 942.018 li
1127.92 942.488 li
1126.56 960.03 li
cp
1082.05 900.018 mo
1080.92 918.318 li
1067.86 918.177 li
1066.29 900.157 li
1082.05 900.018 li
cp
1181.73 944.036 mo
1173.66 947.4 li
1169.95 943.868 1173.83 940.837 1173.83 940.837 cv
1177.53 940.331 li
1177.58 939.952 li
1155.4 934.529 li
1155.97 926.807 li
1155.4 926.63 li
1154.81 915.847 li
1094.62 850.041 li
1033.31 921.581 li
1033.43 923.264 li
1037.29 977.321 li
1059.12 977.567 li
1058.4 973.622 li
1064.51 973.422 li
1063.62 935.439 li
1085.07 934.178 li
1085.07 972.751 li
1094.92 972.43 li
1093.18 977.587 li
1088.77 977.9 li
1180.25 978.927 li
1182.76 941.218 li
1182.13 941.066 li
1181.73 944.036 li
cp
f
1033.23 920.551 mo
1033.23 921.666 li
1033.31 921.581 li
1094.62 850.041 li
1154.81 915.847 li
1154.81 915.849 li
1154.8 915.688 li
1159.48 915.136 li
1165.13 914.469 li
1145.79 891.798 li
1133.71 877.635 li
1105.09 844.08 li
1094.62 831.802 li
1081.73 847.649 li
1039.64 899.413 li
1020.47 922.981 li
1033.23 920.551 li
cp
.380392 .0941176 .00392157 rgb
f
1155.97 926.807 mo
1155.4 934.529 li
1177.58 939.952 li
1178.51 932.792 li
1156.15 924.31 li
1155.97 926.807 li
cp
f
1182.13 941.066 mo
1182.76 941.218 li
1194.3 938.785 li
1183.01 934.5 li
1182.13 941.066 li
cp
f
1080.92 918.318 mo
1082.05 900.018 li
1066.29 900.157 li
1067.86 918.177 li
1080.92 918.318 li
cp
.0196078 .0117647 .0117647 rgb
f
1128.74 901.338 mo
1114.61 900.867 li
1114.61 918.539 li
1128.94 918.227 li
1128.74 901.338 li
cp
f
1112.51 960.881 mo
1126.56 960.03 li
1127.92 942.488 li
1112.96 942.018 li
1112.51 960.881 li
cp
f
1183.42 917.616 mo
1183.58 917.374 li
1182.4 917.205 li
1182.58 917.951 li
1181.56 918.288 li
1181.23 917.037 li
1180.56 916.941 li
1178.51 932.792 li
1177.58 939.952 li
1177.53 940.331 li
1173.83 940.837 li
1173.83 940.837 1169.95 943.868 1173.66 947.4 cv
1181.73 944.036 li
1182.13 941.066 li
1183.01 934.5 li
1185.27 917.616 li
1184.92 917.566 li
1184.26 918.625 li
1183.42 917.616 li
cp
0 0 0 rgb
f
1181.56 918.288 mo
1182.58 917.951 li
1182.4 917.205 li
1181.95 915.244 li
1181.85 914.805 li
1181.36 914.7 1180.92 914.568 1180.52 914.417 cv
1180.74 915.225 li
1181.23 917.037 li
1181.56 918.288 li
cp
f
1186.74 914.548 mo
1186.23 914.7 1185.75 914.801 1185.29 914.875 cv
1185 915.292 li
1183.58 917.374 li
1183.42 917.616 li
1184.26 918.625 li
1184.92 917.566 li
1186.33 915.313 li
1186.78 914.585 li
1186.74 914.548 li
cp
f
1185.29 914.875 mo
1185.75 914.801 1186.23 914.7 1186.74 914.548 cv
1187.55 914.303 1188.41 913.956 1189.32 913.46 cv
1187.46 909.543 1184.37 907.684 1184.37 907.684 cv
1178.19 913.047 li
1178.19 913.047 1179.02 913.839 1180.52 914.417 cv
1180.92 914.568 1181.36 914.7 1181.85 914.805 cv
1182.82 915.013 1183.98 915.079 1185.29 914.875 cv
cp
f
1085.07 934.178 mo
1063.62 935.439 li
1064.51 973.422 li
1085.07 972.751 li
1085.07 934.178 li
cp
.380392 .0941176 .00392157 rgb
f
1094.92 972.43 mo
1085.07 972.751 li
1064.51 973.422 li
1058.4 973.622 li
1059.12 977.567 li
1059.56 979.965 li
1088.77 977.9 li
1093.18 977.587 li
1094.92 972.43 li
cp
.188235 .14902 .14902 rgb
f
688.973 925.901 mo
675.166 925.516 649.404 934.24 644.58 965.123 cv
643.597 971.415 644.099 977.722 645.643 983.831 cv
651.208 1005.85 670.531 1025.22 684.631 1031.48 cv
684.733 1029.09 684.822 1027.02 684.89 1025.47 cv
674.318 1016.03 666.013 1005.08 665.635 986.954 cv
668.277 1000.17 672.809 1011.87 686.157 1019.45 cv
686.88 1003.2 688.245 975.669 689.798 962.412 cv
690.652 981.277 692.064 1015.27 692.064 1015.27 cv
692.064 1015.27 704.522 1005.45 709.024 986.779 cv
707.543 1001.68 699.489 1015.86 692.819 1020.93 cv
692.872 1023.04 692.934 1025.96 693.021 1029.35 cv
707.143 1018.75 726.566 997.281 728.625 972.45 cv
728.737 971.103 728.757 969.786 728.732 968.485 cv
728.233 942.842 702.112 926.264 688.973 925.901 cv
cp
.788235 .564706 .00392157 rgb
f
709.024 986.779 mo
704.522 1005.45 692.064 1015.27 692.064 1015.27 cv
692.064 1015.27 690.652 981.277 689.798 962.412 cv
688.245 975.669 686.88 1003.2 686.157 1019.45 cv
672.809 1011.87 668.277 1000.17 665.635 986.954 cv
666.013 1005.08 674.318 1016.03 684.89 1025.47 cv
684.822 1027.02 684.733 1029.09 684.631 1031.48 cv
684.006 1046 682.871 1072.79 682.871 1072.79 cv
685.948 1074.98 691.995 1075.21 696.458 1072.45 cv
694.169 1066.41 693.383 1043.65 693.021 1029.35 cv
692.934 1025.96 692.872 1023.04 692.819 1020.93 cv
699.489 1015.86 707.543 1001.68 709.024 986.779 cv
cp
.168627 .164706 .12549 rgb
f
1636.34 914.164 mo
1640.85 937.365 1663.62 956.742 1680.17 963.092 cv
1680.73 954.583 li
1671.17 946.966 1655.79 928.475 1650.1 905.313 cv
1657.9 926.76 1674.67 941.399 1681.26 946.534 cv
1685.98 874.843 li
1685.98 874.843 1686.44 901.313 1687.2 932.032 cv
1691.11 927.619 1703.18 912.157 1703.18 889.095 cv
1705.49 909.385 1694.38 929.242 1687.32 936.895 cv
1687.54 945.688 1687.79 954.728 1688.05 963.513 cv
1688.13 963.472 1688.19 963.438 1688.26 963.395 cv
1688.71 958.811 1692.41 953.244 1697.38 948.68 cv
1700.38 945.938 1704.73 945.848 1708.82 947.362 cv
1718.49 937.465 1727.92 923.327 1729.72 904.825 cv
1730.37 898.151 1730.38 892.341 1729.75 887.311 cv
1727 865.43 1712.05 858.314 1684.33 859.112 cv
1653.42 860 1638.67 876.818 1635.83 896.351 cv
1634.99 902.165 1635.19 908.217 1636.34 914.164 cv
cp
.788235 .564706 .00392157 rgb
f
1688.23 964.896 mo
1688.39 967.195 1689.52 969.158 1691.94 970.476 cv
1692.89 970.999 1694.08 971.459 1695.39 971.85 cv
1697.27 969.219 1699.42 965.773 1702.2 960.853 cv
1700.5 965.937 1699.21 969.52 1697.84 972.45 cv
1703.75 973.591 1711.31 973.045 1716.05 968.697 cv
1717.32 967.527 1718.41 966.112 1719.18 964.348 cv
1722.21 957.435 1715.92 949.984 1708.82 947.362 cv
1704.73 945.848 1700.38 945.938 1697.38 948.68 cv
1692.41 953.244 1688.71 958.811 1688.26 963.395 cv
1688.21 963.908 1688.2 964.41 1688.23 964.896 cv
cp
.721569 .517647 .00392157 rgb
f
1697.84 972.45 mo
1699.21 969.52 1700.5 965.937 1702.2 960.853 cv
1699.42 965.773 1697.27 969.219 1695.39 971.85 cv
1692.95 975.263 1690.95 977.307 1688.57 979.418 cv
1688.41 974.725 1688.25 969.844 1688.09 964.877 cv
1688.08 964.421 1688.07 963.971 1688.05 963.513 cv
1687.79 954.728 1687.54 945.688 1687.32 936.895 cv
1694.38 929.242 1705.49 909.385 1703.18 889.095 cv
1703.18 912.157 1691.11 927.619 1687.2 932.032 cv
1686.44 901.313 1685.98 874.843 1685.98 874.843 cv
1681.26 946.534 li
1674.67 941.399 1657.9 926.76 1650.1 905.313 cv
1655.79 928.475 1671.17 946.966 1680.73 954.583 cv
1680.17 963.092 li
1680.13 963.8 li
1676.65 1016.66 li
1676.15 1024.26 li
1681.56 1030.64 1685.98 1029.66 1691.39 1024.75 cv
1690.94 1023.57 1690.51 1019.33 1690.1 1013.02 cv
1689.63 1005.89 1689.18 996.11 1688.77 984.984 cv
1693.27 980.186 1695.65 977.168 1697.84 972.45 cv
cp
.168627 .164706 .12549 rgb
f
2817.66 893.074 mo
2803.85 893.458 2780.08 921.784 2782.39 949.676 cv
2784.44 974.382 2799.33 986.559 2812.45 995.12 cv
2812.54 991.609 2812.6 988.585 2812.66 986.428 cv
2805.99 981.353 2797.93 967.172 2796.45 952.271 cv
2800.95 970.948 2813.41 980.764 2813.41 980.764 cv
2813.41 980.764 2814.82 946.768 2815.67 927.907 cv
2817.23 941.166 2818.59 968.689 2819.32 984.948 cv
2832.67 977.367 2837.2 965.663 2839.84 952.448 cv
2839.46 970.572 2831.16 981.52 2820.58 990.96 cv
2820.65 992.542 2820.74 994.663 2820.85 997.115 cv
2838.53 990.65 2862.38 973.704 2857.85 944.753 cv
2855.09 927.097 2846.86 912.624 2837.74 903.527 cv
2833.14 898.941 2828.32 895.729 2823.86 894.165 cv
2821.68 893.405 2819.59 893.02 2817.66 893.074 cv
cp
.6 .321569 .00392157 rgb
f
2839.84 952.448 mo
2837.2 965.663 2832.67 977.367 2819.32 984.948 cv
2818.59 968.689 2817.23 941.166 2815.67 927.907 cv
2814.82 946.768 2813.41 980.764 2813.41 980.764 cv
2813.41 980.764 2800.95 970.948 2796.45 952.271 cv
2797.93 967.172 2805.99 981.353 2812.66 986.428 cv
2812.6 988.585 2812.54 991.609 2812.45 995.12 cv
2812.38 997.594 2812.31 1000.31 2812.21 1003.15 cv
2811.76 1016.72 2810.9 1032.98 2809.02 1037.95 cv
2813.48 1040.7 2819.53 1040.48 2822.6 1038.29 cv
2822.6 1038.29 2821.83 1020.03 2821.21 1005.48 cv
2821.08 1002.47 2820.96 999.616 2820.85 997.115 cv
2820.74 994.663 2820.65 992.542 2820.58 990.96 cv
2831.16 981.52 2839.46 970.572 2839.84 952.448 cv
cp
.168627 .164706 .12549 rgb
f
434.925 941.971 mo
436.345 956.637 448.67 975.592 471.132 988.345 cv
471.155 984.178 471.12 980.622 470.997 978.159 cv
465.382 972.542 454.858 959.212 452.054 938.162 cv
457.666 956.408 466.086 969.036 474.505 975.352 cv
479.452 971.332 484.263 963.359 488.096 954.019 cv
485.553 950.067 479.718 939.825 480.82 930.443 cv
481.409 939.312 487.48 948.176 489.376 950.752 cv
493.534 939.644 496.256 927.106 496.256 917.113 cv
498.841 930.776 495.595 945.992 490.817 958.365 cv
496.114 956.337 502.594 953.003 507.484 939.567 cv
504.611 957.372 492.34 963.421 487.979 965.032 cv
484.274 972.964 480.204 979.038 477.312 981.665 cv
477.456 982.967 477.692 986.29 477.972 990.711 cv
492.868 984.819 517.088 980.701 521.173 941.971 cv
522.677 927.71 513.725 911.58 501.708 901.386 cv
497.733 898.014 493.426 895.293 489.046 893.506 cv
485.125 891.909 481.15 891.048 477.312 891.151 cv
476.8 891.165 476.297 891.208 475.791 891.242 cv
471.315 891.551 467.072 892.672 463.134 894.444 cv
444.938 902.622 433.23 924.443 434.925 941.971 cv
cp
.768627 .694118 .00392157 rgb
f
477.312 981.665 mo
480.204 979.038 484.274 972.964 487.979 965.032 cv
492.34 963.421 504.611 957.372 507.484 939.567 cv
502.594 953.003 496.114 956.337 490.817 958.365 cv
495.595 945.992 498.841 930.776 496.256 917.113 cv
496.256 927.106 493.534 939.644 489.376 950.752 cv
487.48 948.176 481.409 939.312 480.82 930.443 cv
479.718 939.825 485.553 950.067 488.096 954.019 cv
484.263 963.359 479.452 971.332 474.505 975.352 cv
466.086 969.036 457.666 956.408 452.054 938.162 cv
454.858 959.212 465.382 972.542 470.997 978.159 cv
471.12 980.622 471.155 984.178 471.132 988.345 cv
471.083 997.145 470.768 1008.71 470.435 1018.81 cv
470.026 1031.18 469.592 1041.31 469.592 1041.31 cv
469.592 1041.31 476.609 1046.22 480.82 1041.31 cv
480.82 1041.31 480.217 1029.85 479.5 1016.92 cv
478.989 1007.72 478.421 997.79 477.972 990.711 cv
477.692 986.29 477.456 982.967 477.312 981.665 cv
cp
.168627 .164706 .12549 rgb
f
903.007 927.59 mo
903.065 928.624 903.145 929.64 903.247 930.643 cv
903.562 933.779 904.09 936.76 904.791 939.604 cv
909.809 959.963 924.03 972.921 937.92 979.748 cv
930.429 972.161 921.944 958.718 922.432 939.404 cv
924.113 962.589 943.246 977.589 943.246 977.589 cv
943.246 977.589 944.584 924.537 945.608 901.878 cv
947.476 917.806 949.034 945.975 949.902 965.508 cv
961.919 956.737 969.179 938.77 970.1 920.193 cv
972.307 940.665 964.561 959.979 950.706 969.613 cv
950.814 972.09 950.993 976.226 951.211 981.305 cv
964.927 972.816 979.261 963.523 984.912 937.084 cv
985.547 934.11 986.023 931.302 986.404 928.596 cv
987.466 921.036 987.575 914.499 986.944 908.848 cv
983.533 878.297 958.619 873.62 947.008 873.295 cv
936.551 873.006 916.881 875.017 907.737 895.052 cv
904.175 902.856 902.208 913.39 903.007 927.59 cv
cp
.74902 .282353 .00392157 rgb
f
970.1 920.193 mo
969.179 938.77 961.919 956.737 949.902 965.508 cv
949.034 945.975 947.476 917.806 945.608 901.878 cv
944.584 924.537 943.246 977.589 943.246 977.589 cv
943.246 977.589 924.113 962.589 922.432 939.404 cv
921.944 958.718 930.429 972.161 937.92 979.748 cv
939.575 981.423 941.183 982.823 942.633 983.926 cv
942.302 997.077 940.931 1033.34 937.529 1042.33 cv
942.888 1045.64 950.155 1045.37 953.851 1042.74 cv
953.851 1042.74 952.157 1003.22 951.211 981.305 cv
950.993 976.226 950.814 972.09 950.706 969.613 cv
964.561 959.979 972.307 940.665 970.1 920.193 cv
cp
.168627 .164706 .12549 rgb
f
2180.04 908.909 mo
2173.92 908.739 2165.34 914.212 2158.61 923.506 cv
2153.98 929.895 2150.24 938.088 2148.76 947.5 cv
2145.42 968.898 2162.76 987.417 2175.92 993.246 cv
2176.22 986.279 2176.48 980.248 2176.61 977.367 cv
2166.76 970.52 2161.25 956.792 2162.82 942.242 cv
2163.48 955.445 2168.63 968.215 2177.18 974.451 cv
2177.79 960.567 2178.9 940.545 2180.23 929.224 cv
2180.96 945.33 2181.91 983.038 2181.91 983.038 cv
2181.91 983.038 2195.5 972.375 2196.7 955.897 cv
2197.13 972.658 2188.04 983.206 2182.34 987.541 cv
2182.38 988.787 2182.42 990.333 2182.48 992.076 cv
2192.66 985.02 2205.43 972.89 2206.98 954.248 cv
2207.96 942.428 2202.5 929.545 2195.7 920.542 cv
2190.5 913.653 2184.51 909.033 2180.04 908.909 cv
cp
.74902 .282353 .00392157 rgb
f
2196.7 955.897 mo
2195.5 972.375 2181.91 983.038 2181.91 983.038 cv
2181.91 983.038 2180.96 945.33 2180.23 929.224 cv
2178.9 940.545 2177.79 960.567 2177.18 974.451 cv
2168.63 968.215 2163.48 955.445 2162.82 942.242 cv
2161.25 956.792 2166.76 970.52 2176.61 977.367 cv
2176.48 980.248 2176.22 986.279 2175.92 993.246 cv
2175.25 1008.92 2174.37 1029.35 2174.37 1029.35 cv
2177 1031.21 2182.16 1031.4 2185.97 1029.05 cv
2183.88 1023.52 2182.86 1003.42 2182.48 992.076 cv
2182.42 990.333 2182.38 988.787 2182.34 987.541 cv
2188.04 983.206 2197.13 972.658 2196.7 955.897 cv
cp
.168627 .164706 .12549 rgb
f
872.406 997.048 mo
872.437 996.169 872.466 995.268 872.497 994.38 cv
871.365 994.218 870.246 994.057 869.106 993.893 cv
870.176 995.012 871.253 996.025 872.406 997.048 cv
cp
.6 .470588 0 rgb
f
1127.13 1029.78 mo
1061.97 1021.76 1005.97 1014.42 972.918 1009.3 cv
948.266 1005.47 917.704 1000.91 883.314 995.938 cv
886.81 1049.06 li
880.539 1056.47 875.408 1055.33 869.137 1049.63 cv
870.231 1046.71 871.271 1027.82 872.172 1003.5 cv
868.393 999.478 865.91 996.534 863.859 993.143 cv
776.183 980.616 667.672 966.019 568.533 954.231 cv
568.844 980.355 570.523 1019.55 570.523 1019.55 cv
570.523 1019.55 561.27 1026.03 555.719 1019.55 cv
555.719 1019.55 558.027 975.706 559.453 953.157 cv
520.801 948.602 483.747 944.506 450.096 941.157 cv
448.685 963.027 li
412.61 996.888 li
409.083 1021.55 li
385.68 1032.08 li
385.473 1032.73 li
384.207 1032.74 li
383.95 1032.85 li
383.959 1032.74 li
75.8525 1035.55 li
71.1602 1016.79 li
49.8262 1017.78 li
33.7495 932.247 li
22.8867 932.543 13.1938 932.837 4.9082 933.104 cv
2.97656 934.247 li
3.81787 933.14 li
2.5083 933.182 1.23535 933.223 0 933.264 cv
0 1079.88 li
117.409 1079.73 473 1079.3 818.09 1079.08 cv
849.877 1074.54 993.256 1053.79 1127.13 1029.78 cv
cp
f
2623.2 993.627 mo
2569.68 1004.64 2516.05 1014.74 2464.55 1023.85 cv
2540.68 1037.72 2602.47 1051.77 2645.2 1062.34 cv
2645.8 1048.23 2646.79 1025.06 2647.43 1010.15 cv
2639.91 1006.82 2631.44 1001.09 2623.2 993.627 cv
cp
f
2989.74 937.493 mo
2983.83 941.837 2977.83 945.169 2972.43 947.242 cv
2976.83 1014.15 li
2970.92 1021.13 2966.08 1020.06 2960.17 1014.68 cv
2961.2 1011.93 2962.18 994.125 2963.03 971.19 cv
2958.1 965.942 2955.5 962.643 2953.1 957.482 cv
2944.91 959.064 2933.75 957.723 2929.76 948.619 cv
2928.97 946.803 2928.77 944.956 2929.02 943.153 cv
2898.63 946.326 2864.01 950.445 2826.93 955.745 cv
2827.63 961.536 2828.46 966.262 2829.46 968.883 cv
2823.52 972.554 2815.46 972.253 2811.37 969.342 cv
2811.37 969.342 2811.56 964.848 2811.86 957.947 cv
2772.46 963.822 2730.66 971.018 2688.48 979.804 cv
2679.32 991.01 2669.27 1000.26 2660.51 1006.84 cv
2660.98 1025.34 2661.9 1052.9 2664.24 1067.14 cv
2689.1 1073.52 2704.75 1078.01 2709.78 1079.48 cv
2817.73 1079.4 2934.37 1079.33 3055 1079.26 cv
3055 933.264 li
3053.17 933.324 3051.4 933.383 3049.74 933.44 cv
3048.06 933.499 3025.75 934.55 2989.74 937.493 cv
cp
f
2963.25 965.102 mo
2963.44 959.497 2963.63 953.654 2963.81 947.705 cv
2963.73 947.66 2963.67 947.621 2963.58 947.575 cv
2963.9 950.795 2962.77 953.575 2959.56 955.323 cv
2958.52 955.894 2957.22 956.399 2955.79 956.825 cv
2958.46 960.561 2960.65 962.795 2963.25 965.102 cv
cp
f
195.404 832.655 mo
193.015 850.915 li
172.075 848.667 li
169.108 830.692 li
195.404 832.655 li
cp
241.26 823.506 mo
236.966 843.884 li
221.493 843.362 li
218.489 824.713 li
241.26 823.506 li
cp
315.619 870.606 mo
315.806 899.478 li
296.912 897.792 li
293.66 874.458 li
315.619 870.606 li
cp
359.769 829.312 mo
357.527 863.01 li
347.338 860.865 li
345.07 830.76 li
359.769 829.312 li
cp
387.333 829.863 mo
385.831 864.869 li
373.741 864.839 li
369.958 831.458 li
387.333 829.863 li
cp
386.577 878.932 mo
346.004 873.699 li
348.399 868.199 li
387.563 872.164 li
386.577 878.932 li
cp
386.238 910.517 mo
376.862 911.015 li
373.468 885.001 li
387.532 884.256 li
386.238 910.517 li
cp
386.983 924.582 mo
352.544 921.036 li
352.965 916.313 li
387.333 918.521 li
386.983 924.582 li
cp
349.957 884.905 mo
365.289 882.75 li
362.021 909.788 li
351.905 908.981 li
349.957 884.905 li
cp
216.866 874.009 mo
233.377 864.403 li
266.509 857.039 li
271.842 865.796 li
260.709 868.142 li
259.213 899.555 li
406.479 936.664 li
404.771 819.993 li
403.354 824.143 li
140.554 809.502 li
144.864 839.835 li
148.32 837.751 li
216.866 874.009 li
cp
1 .956863 .603922 rgb
f
434.407 957.665 mo
433.194 922.132 li
445.422 912.081 li
442.723 949.834 li
434.407 957.665 li
cp
423.246 899.153 mo
416.056 902.893 li
414.392 884.175 li
424.681 875.568 li
423.246 899.153 li
cp
443.514 812.779 mo
440.78 849.865 li
427.811 858.614 li
426.598 823.08 li
443.514 812.779 li
cp
446.558 756.2 mo
448.049 784.331 li
440.226 788.775 li
437.359 760.047 li
446.558 756.2 li
cp
437.874 723.085 mo
404.771 819.993 li
406.479 936.664 li
426.977 941.829 li
419.708 947.26 li
412.61 996.888 li
448.685 963.027 li
450.096 941.157 li
460.336 782.491 li
437.874 723.085 li
cp
.831373 .796078 .501961 rgb
f
404.771 819.993 mo
437.874 723.085 li
460.336 782.491 li
465.427 795.955 li
472.282 786.179 li
434.953 706.457 li
322.586 706.755 li
322.427 707.709 li
311.361 714.342 li
272.447 715.061 li
271.426 706.891 li
188.043 707.113 li
116.708 808.173 li
140.554 809.502 li
403.354 824.143 li
404.771 819.993 li
cp
.47451 .113725 .00392157 rgb
f
212.674 886.502 mo
212.622 886.477 li
99.3828 950.663 li
119.362 946.132 li
212.674 886.502 li
cp
1 .956863 .603922 rgb
f
50.8169 930.322 mo
72.2832 929.855 li
70.7402 951.431 li
54.0688 953.658 li
50.8169 930.322 li
cp
154.815 877.791 mo
151.761 908.851 li
127.688 910.796 li
124.678 879.39 li
154.815 877.791 li
cp
45.252 962.935 mo
84.7402 953.982 li
85.6196 950.363 li
203.255 881.927 li
141.848 852.096 li
31.0083 917.665 li
33.7495 932.247 li
49.8262 1017.78 li
71.1602 1016.79 li
57.7358 963.109 li
45.252 962.935 li
cp
f
141.848 852.096 mo
203.255 881.927 li
216.866 874.009 li
148.32 837.751 li
144.864 839.835 li
15.415 917.869 li
3.81787 933.14 li
2.97656 934.247 li
4.9082 933.104 li
31.0083 917.665 li
141.848 852.096 li
cp
.54902 .133333 .00392157 rgb
f
213.451 886.007 mo
212.622 886.477 li
212.674 886.502 li
213.451 886.007 li
cp
f
256.719 874.403 mo
255.846 895.941 li
243.796 909.34 li
241.564 879.908 li
256.719 874.403 li
cp
235.582 873.463 mo
236.926 919.478 li
237.951 919.246 li
257.753 899.187 li
259.213 899.555 li
260.709 868.142 li
235.662 873.417 li
235.582 873.463 li
cp
.831373 .796078 .501961 rgb
f
235.582 873.463 mo
213.451 886.007 li
212.674 886.502 li
119.362 946.132 li
236.926 919.478 li
235.582 873.463 li
cp
1 .956863 .603922 rgb
f
212.622 886.477 mo
213.451 886.007 li
235.582 873.463 li
235.662 873.417 li
260.709 868.142 li
271.842 865.796 li
266.509 857.039 li
233.377 864.403 li
216.866 874.009 li
203.255 881.927 li
85.6196 950.363 li
84.7402 953.982 li
99.3828 950.663 li
212.622 886.477 li
cp
.54902 .133333 .00392157 rgb
f
385.473 1032.73 mo
385.68 1032.08 li
384.207 1032.74 li
385.473 1032.73 li
cp
1 .964706 .690196 rgb
f
340.845 1017.03 mo
340.692 988.83 li
364.132 987.584 li
361.641 1016.6 li
340.845 1017.03 li
cp
301.823 1015.74 mo
301.707 988.21 li
323.244 989.083 li
321.281 1015.38 li
301.823 1015.74 li
cp
255.999 1012.8 mo
253.167 984.74 li
274.106 986.986 li
274.046 1011.17 li
255.999 1012.8 li
cp
210.388 1013.87 mo
208.225 985.781 li
235.014 984.359 li
237.81 1011.75 li
210.388 1013.87 li
cp
99.2339 982.156 mo
99.9849 1008.98 li
81.1978 1009.31 li
76.3926 982.024 li
99.2339 982.156 li
cp
140.97 983.974 mo
140.979 1009.5 li
120.852 1009.89 li
119.467 983.771 li
140.97 983.974 li
cp
186.582 982.897 mo
184.054 1011.24 li
164.563 1010.93 li
161.167 984.917 li
186.582 982.897 li
cp
389.3 967.685 mo
57.7358 963.109 li
71.1602 1016.79 li
75.8525 1035.55 li
383.959 1032.74 li
389.3 967.685 li
cp
f
392.322 967.727 mo
389.3 967.685 li
383.959 1032.74 li
383.95 1032.85 li
384.207 1032.74 li
385.68 1032.08 li
409.083 1021.55 li
412.61 996.888 li
419.708 947.26 li
392.322 967.727 li
cp
.831373 .796078 .501961 rgb
f
257.753 899.187 mo
237.951 919.246 li
236.926 919.478 li
119.362 946.132 li
99.3828 950.663 li
84.7402 953.982 li
45.252 962.935 li
57.7358 963.109 li
389.3 967.685 li
392.322 967.727 li
419.708 947.26 li
426.977 941.829 li
406.479 936.664 li
259.213 899.555 li
257.753 899.187 li
cp
.47451 .113725 .00392157 rgb
f
311.361 714.342 mo
311.322 684.09 li
268.5 683.469 li
271.426 706.891 li
272.447 715.061 li
311.361 714.342 li
cp
1 .956863 .603922 rgb
f
311.771 684.096 mo
311.322 684.09 li
311.361 714.342 li
322.427 707.709 li
322.586 706.755 li
327.208 679.122 li
311.771 684.096 li
cp
.882353 .858824 .654902 rgb
f
311.771 684.096 mo
311.188 666.844 li
261.184 667.3 li
262.036 683.375 li
268.5 683.469 li
311.322 684.09 li
311.771 684.096 li
cp
.74902 .717647 .45098 rgb
f
311.771 684.096 mo
327.208 679.122 li
334.222 676.86 li
335.943 658.636 li
311.188 666.844 li
311.771 684.096 li
cp
.529412 .505882 .317647 rgb
f
273.167 665.323 mo
286.42 661.933 li
317.967 661.602 li
308.063 664.815 li
273.167 665.323 li
cp
335.943 658.636 mo
284.268 659.361 li
261.184 667.3 li
311.188 666.844 li
335.943 658.636 li
cp
.74902 .737255 .631373 rgb
f
286.42 661.933 mo
273.167 665.323 li
308.063 664.815 li
317.967 661.602 li
286.42 661.933 li
cp
.290196 .278431 .172549 rgb
f
236.966 843.884 mo
241.26 823.506 li
218.489 824.713 li
221.493 843.362 li
236.966 843.884 li
cp
.129412 .160784 .180392 rgb
f
193.015 850.915 mo
195.404 832.655 li
169.108 830.692 li
172.075 848.667 li
193.015 850.915 li
cp
f
243.796 909.34 mo
255.846 895.941 li
256.719 874.403 li
241.564 879.908 li
243.796 909.34 li
cp
f
151.761 908.851 mo
154.815 877.791 li
124.678 879.39 li
127.688 910.796 li
151.761 908.851 li
cp
f
70.7402 951.431 mo
72.2832 929.855 li
50.8169 930.322 li
54.0688 953.658 li
70.7402 951.431 li
cp
f
99.9849 1008.98 mo
99.2339 982.156 li
76.3926 982.024 li
81.1978 1009.31 li
99.9849 1008.98 li
cp
f
140.979 1009.5 mo
140.97 983.974 li
119.467 983.771 li
120.852 1009.89 li
140.979 1009.5 li
cp
f
184.054 1011.24 mo
186.582 982.897 li
161.167 984.917 li
164.563 1010.93 li
184.054 1011.24 li
cp
f
235.014 984.359 mo
208.225 985.781 li
210.388 1013.87 li
237.81 1011.75 li
235.014 984.359 li
cp
f
274.106 986.986 mo
253.167 984.74 li
255.999 1012.8 li
274.046 1011.17 li
274.106 986.986 li
cp
f
323.244 989.083 mo
301.707 988.21 li
301.823 1015.74 li
321.281 1015.38 li
323.244 989.083 li
cp
f
364.132 987.584 mo
340.692 988.83 li
340.845 1017.03 li
361.641 1016.6 li
364.132 987.584 li
cp
f
315.806 899.478 mo
315.619 870.606 li
293.66 874.458 li
296.912 897.792 li
315.806 899.478 li
cp
f
357.527 863.01 mo
359.769 829.312 li
345.07 830.76 li
347.338 860.865 li
357.527 863.01 li
cp
f
385.831 864.869 mo
387.333 829.863 li
369.958 831.458 li
373.741 864.839 li
385.831 864.869 li
cp
f
346.004 873.699 mo
386.577 878.932 li
387.563 872.164 li
348.399 868.199 li
346.004 873.699 li
cp
f
365.289 882.75 mo
349.957 884.905 li
351.905 908.981 li
362.021 909.788 li
365.289 882.75 li
cp
f
376.862 911.015 mo
386.238 910.517 li
387.532 884.256 li
373.468 885.001 li
376.862 911.015 li
cp
f
352.544 921.036 mo
386.983 924.582 li
387.333 918.521 li
352.965 916.313 li
352.544 921.036 li
cp
f
448.049 784.331 mo
446.558 756.2 li
437.359 760.047 li
440.226 788.775 li
448.049 784.331 li
cp
f
440.78 849.865 mo
443.514 812.779 li
426.598 823.08 li
427.811 858.614 li
440.78 849.865 li
cp
f
445.422 912.081 mo
433.194 922.132 li
434.407 957.665 li
442.723 949.834 li
445.422 912.081 li
cp
f
416.056 902.893 mo
423.246 899.153 li
424.681 875.568 li
414.392 884.175 li
416.056 902.893 li
cp
f
2793.36 833.545 mo
2794.38 854.132 2802.43 874.039 2815.75 883.759 cv
2816.7 862.117 2818.43 830.899 2820.5 813.249 cv
2821.64 838.358 2823.12 897.149 2823.12 897.149 cv
2823.12 897.149 2844.32 880.524 2846.18 854.836 cv
2846.84 880.965 2832.68 897.411 2823.8 904.169 cv
2823.85 906.115 2823.92 908.526 2824.01 911.25 cv
2839.88 900.247 2859.8 881.32 2862.21 852.263 cv
2864.91 819.741 2836.3 782.027 2820.2 781.58 cv
2804.1 781.133 2777.07 805.727 2771.45 841.743 cv
2766.24 875.104 2793.26 903.974 2813.78 913.062 cv
2814.25 902.201 2814.66 892.799 2814.85 888.307 cv
2799.5 877.632 2790.92 856.231 2793.36 833.545 cv
cp
.74902 .282353 .00392157 rgb
f
2829.46 968.883 mo
2828.46 966.262 2827.63 961.536 2826.93 955.745 cv
2825.32 942.471 2824.43 923.566 2824.01 911.25 cv
2823.92 908.526 2823.85 906.115 2823.8 904.169 cv
2832.68 897.411 2846.84 880.965 2846.18 854.836 cv
2844.32 880.524 2823.12 897.149 2823.12 897.149 cv
2823.12 897.149 2821.64 838.358 2820.5 813.249 cv
2818.43 830.899 2816.7 862.117 2815.75 883.759 cv
2802.43 874.039 2794.38 854.132 2793.36 833.545 cv
2790.92 856.231 2799.5 877.632 2814.85 888.307 cv
2814.66 892.799 2814.25 902.201 2813.78 913.062 cv
2813.13 928.327 2812.35 946.469 2811.86 957.947 cv
2811.56 964.848 2811.37 969.342 2811.37 969.342 cv
2815.46 972.253 2823.52 972.554 2829.46 968.883 cv
cp
.168627 .164706 .12549 rgb
f
2953.6 931.481 mo
2959.05 936.471 2963.09 942.561 2963.58 947.575 cv
2963.67 947.621 2963.73 947.66 2963.81 947.705 cv
2964.1 938.096 2964.37 928.208 2964.61 918.589 cv
2956.89 910.222 2944.74 888.501 2947.27 866.307 cv
2947.27 891.529 2960.46 908.439 2964.75 913.268 cv
2965.58 879.668 2966.08 850.716 2966.08 850.716 cv
2971.24 929.131 li
2978.45 923.514 2996.79 907.502 3005.32 884.047 cv
2999.11 909.383 2982.27 929.605 2971.82 937.936 cv
2972.43 947.242 li
2977.83 945.169 2983.83 941.837 2989.74 937.493 cv
3003.62 927.281 3016.91 911.534 3020.37 893.726 cv
3025.88 865.364 3011.06 824.006 2973.21 822.984 cv
2944.55 822.208 2914.43 844.454 2918.24 883.508 cv
2920.21 903.749 2930.52 919.214 2941.09 930.039 cv
2945.57 928.384 2950.33 928.483 2953.6 931.481 cv
cp
.6 .321569 .00392157 rgb
f
2929.76 948.619 mo
2933.75 957.723 2944.91 959.064 2953.1 957.482 cv
2951.61 954.276 2950.19 950.357 2948.34 944.795 cv
2951.38 950.179 2953.73 953.948 2955.79 956.825 cv
2957.22 956.399 2958.52 955.894 2959.56 955.323 cv
2962.77 953.575 2963.9 950.795 2963.58 947.575 cv
2963.09 942.561 2959.05 936.471 2953.6 931.481 cv
2950.33 928.483 2945.57 928.384 2941.09 930.039 cv
2935.2 932.218 2929.81 937.447 2929.02 943.153 cv
2928.77 944.956 2928.97 946.803 2929.76 948.619 cv
cp
.478431 .258824 .00392157 rgb
f
2971.82 937.936 mo
2982.27 929.605 2999.11 909.383 3005.32 884.047 cv
2996.79 907.502 2978.45 923.514 2971.24 929.131 cv
2966.08 850.716 li
2966.08 850.716 2965.58 879.668 2964.75 913.268 cv
2960.46 908.439 2947.27 891.529 2947.27 866.307 cv
2944.74 888.501 2956.89 910.222 2964.61 918.589 cv
2964.37 928.208 2964.1 938.096 2963.81 947.705 cv
2963.63 953.654 2963.44 959.497 2963.25 965.102 cv
2960.65 962.795 2958.46 960.561 2955.79 956.825 cv
2953.73 953.948 2951.38 950.179 2948.34 944.795 cv
2950.19 950.357 2951.61 954.276 2953.1 957.482 cv
2955.5 962.643 2958.1 965.942 2963.03 971.19 cv
2962.18 994.125 2961.2 1011.93 2960.17 1014.68 cv
2966.08 1020.06 2970.92 1021.13 2976.83 1014.15 cv
2972.43 947.242 li
2971.82 937.936 li
cp
.168627 .164706 .12549 rgb
f
2647.83 1000.78 mo
2631.35 986.067 2618.4 968.994 2617.81 940.739 cv
2621.93 961.344 2629 979.589 2649.81 991.408 cv
2650.93 966.062 2653.06 923.147 2655.48 902.478 cv
2656.81 931.89 2659.01 984.884 2659.01 984.884 cv
2659.01 984.884 2678.44 969.58 2685.46 940.467 cv
2683.15 963.698 2670.59 985.798 2660.19 993.715 cv
2660.27 996.992 2660.37 1001.55 2660.51 1006.84 cv
2669.27 1000.26 2679.32 991.01 2688.48 979.804 cv
2702.33 962.846 2714.08 941.439 2716.02 918.128 cv
2719.62 874.647 2675.72 846.153 2654.2 845.558 cv
2632.67 844.958 2592.51 858.559 2584.99 906.705 cv
2579.82 939.78 2600.65 973.205 2623.2 993.627 cv
2631.44 1001.09 2639.91 1006.82 2647.43 1010.15 cv
2647.59 1006.43 2647.73 1003.2 2647.83 1000.78 cv
cp
.788235 .564706 .00392157 rgb
f
2660.19 993.715 mo
2670.59 985.798 2683.15 963.698 2685.46 940.467 cv
2678.44 969.58 2659.01 984.884 2659.01 984.884 cv
2659.01 984.884 2656.81 931.89 2655.48 902.478 cv
2653.06 923.147 2650.93 966.062 2649.81 991.408 cv
2629 979.589 2621.93 961.344 2617.81 940.739 cv
2618.4 968.994 2631.35 986.067 2647.83 1000.78 cv
2647.73 1003.2 2647.59 1006.43 2647.43 1010.15 cv
2646.79 1025.06 2645.8 1048.23 2645.2 1062.34 cv
2652.04 1064.03 2658.4 1065.64 2664.24 1067.14 cv
2661.9 1052.9 2660.98 1025.34 2660.51 1006.84 cv
2660.37 1001.55 2660.27 996.992 2660.19 993.715 cv
cp
.168627 .164706 .12549 rgb
f
546.277 918.96 mo
540.528 916.838 524.342 908.857 520.557 885.377 cv
527.001 903.097 535.548 907.495 542.535 910.169 cv
536.234 893.85 531.95 873.784 535.362 855.766 cv
535.362 868.944 538.955 885.481 544.433 900.125 cv
546.934 896.735 554.938 885.041 555.719 873.35 cv
557.174 885.716 549.476 899.223 546.121 904.437 cv
551.18 916.751 557.522 927.267 564.044 932.569 cv
575.149 924.242 586.251 907.584 593.656 883.527 cv
589.952 911.286 576.074 928.871 568.672 936.27 cv
568.59 937.908 568.538 939.915 568.509 942.202 cv
599.392 924.357 611.159 886.801 613.086 866.87 cv
615.863 838.187 594.581 822.443 560.345 821.531 cv
532.535 820.789 503.451 834.415 506.679 865.022 cv
511.875 914.293 540.576 933.855 560.164 942.884 cv
560.232 942.044 560.293 941.369 560.345 940.899 cv
556.532 937.429 551.161 929.422 546.277 918.96 cv
cp
.74902 .282353 .00392157 rgb
f
568.509 942.202 mo
568.538 939.915 568.59 937.908 568.672 936.27 cv
576.074 928.871 589.952 911.286 593.656 883.527 cv
586.251 907.584 575.149 924.242 564.044 932.569 cv
557.522 927.267 551.18 916.751 546.121 904.437 cv
549.476 899.223 557.174 885.716 555.719 873.35 cv
554.938 885.041 546.934 896.735 544.433 900.125 cv
538.955 885.481 535.362 868.944 535.362 855.766 cv
531.95 873.784 536.234 893.85 542.535 910.169 cv
535.548 907.495 527.001 903.097 520.557 885.377 cv
524.342 908.857 540.528 916.838 546.277 918.96 cv
551.161 929.422 556.532 937.429 560.345 940.899 cv
560.293 941.369 560.232 942.044 560.164 942.884 cv
559.976 945.179 559.731 948.76 559.453 953.157 cv
558.027 975.706 555.719 1019.55 555.719 1019.55 cv
561.27 1026.03 570.523 1019.55 570.523 1019.55 cv
570.523 1019.55 568.844 980.355 568.533 954.231 cv
568.48 949.747 568.467 945.65 568.509 942.202 cv
cp
.168627 .164706 .12549 rgb
f
862.177 961.394 mo
867.949 966.686 872.235 973.142 872.762 978.458 cv
872.849 978.508 872.92 978.548 873.005 978.596 cv
873.313 968.406 873.599 957.921 873.857 947.722 cv
865.662 938.846 852.781 915.815 855.457 892.277 cv
855.457 919.025 869.454 936.959 873.997 942.079 cv
874.876 906.446 875.408 875.746 875.408 875.746 cv
880.879 958.902 li
888.531 952.945 907.979 935.964 917.025 911.088 cv
910.433 937.958 892.582 959.402 881.492 968.236 cv
882.142 978.108 li
901.343 970.745 927.755 948.271 932.985 921.354 cv
938.83 891.276 923.111 847.419 882.969 846.333 cv
852.582 845.513 820.63 869.102 824.67 910.519 cv
826.764 931.983 837.699 948.384 848.913 959.864 cv
853.657 958.111 858.709 958.215 862.177 961.394 cv
cp
.6 .321569 .00392157 rgb
f
864.493 988.27 mo
866.014 987.819 867.39 987.285 868.5 986.678 cv
871.899 984.823 873.1 981.874 872.762 978.458 cv
872.235 973.142 867.949 966.686 862.177 961.394 cv
858.709 958.215 853.657 958.111 848.913 959.864 cv
840.686 962.904 833.387 971.549 836.894 979.567 cv
841.117 989.221 852.955 990.642 861.647 988.965 cv
860.065 985.567 858.561 981.411 856.595 975.514 cv
859.822 981.221 862.309 985.218 864.493 988.27 cv
cp
.478431 .258824 .00392157 rgb
f
881.492 968.236 mo
892.582 959.402 910.433 937.958 917.025 911.088 cv
907.979 935.964 888.531 952.945 880.879 958.902 cv
875.408 875.746 li
875.408 875.746 874.876 906.446 873.997 942.079 cv
869.454 936.959 855.457 919.025 855.457 892.277 cv
852.781 915.815 865.662 938.846 873.857 947.722 cv
873.599 957.921 873.313 968.406 873.005 978.596 cv
872.841 983.974 872.672 989.253 872.497 994.38 cv
872.466 995.268 872.437 996.169 872.406 997.048 cv
871.253 996.025 870.176 995.012 869.106 993.893 cv
867.617 992.338 866.141 990.575 864.493 988.27 cv
862.309 985.218 859.822 981.221 856.595 975.514 cv
858.561 981.411 860.065 985.567 861.647 988.965 cv
862.352 990.48 863.075 991.846 863.859 993.143 cv
865.91 996.534 868.393 999.478 872.172 1003.5 cv
871.271 1027.82 870.231 1046.71 869.137 1049.63 cv
875.408 1055.33 880.539 1056.47 886.81 1049.06 cv
883.314 995.938 li
882.142 978.108 li
881.492 968.236 li
cp
.168627 .164706 .12549 rgb
f
2664.24 1067.14 mo
2658.4 1065.64 2652.04 1064.03 2645.2 1062.34 cv
2602.47 1051.77 2540.68 1037.72 2464.55 1023.85 cv
2427.27 1017.06 2386.55 1010.31 2342.94 1004.03 cv
2343.92 1026.9 2344.87 1048.99 2344.87 1048.99 cv
2340.23 1052.3 2331.11 1052.63 2324.38 1048.48 cv
2327.08 1041.36 2328.76 1020.63 2329.73 1002.15 cv
2274.51 994.425 2214.88 987.5 2151.89 982.219 cv
2150.22 982.08 2148.54 981.947 2146.87 981.808 cv
2141.59 1023.29 li
2141.59 1023.29 2066.23 1032.42 1968.03 1039.27 cv
1883.74 1045.15 1819.59 1052.98 1819.59 1052.98 cv
1781.58 1035.18 li
1614.06 1048.41 li
1577.85 1033.75 li
1577.82 1033.99 1577.81 1034.12 1577.81 1034.12 cv
1541.64 1019.77 li
1541.64 1019.77 1541.61 1019.51 1541.58 1019.07 cv
1518.15 1009.58 li
1515.45 970.942 li
1477.95 973.046 1442.71 975.737 1410.37 979.006 cv
1404.77 984.721 1398.82 989.435 1393.33 993.243 cv
1393.96 1011.63 1395.59 1044.19 1398.99 1053.16 cv
1392.81 1056.98 1384.44 1056.67 1380.18 1053.64 cv
1380.18 1053.64 1381.6 1020.53 1382.7 995.125 cv
1377.25 992.713 1371.36 988.97 1365.7 984.138 cv
1334.1 988.258 1306.21 993.048 1282.92 998.516 cv
1238.83 1008.86 1183.83 1019.61 1127.13 1029.78 cv
993.256 1053.79 849.877 1074.54 818.09 1079.08 cv
813.939 1079.67 811.696 1079.99 811.62 1080 cv
2711.56 1080 li
2711.55 1080 2710.94 1079.81 2709.78 1079.48 cv
2704.75 1078.01 2689.1 1073.52 2664.24 1067.14 cv
cp
.6 .580392 0 rgb
f
2117.76 1005.21 mo
2106.55 1006.81 li
2105.75 989.196 li
2120.96 989.997 li
2117.76 1005.21 li
cp
2077.73 1010.01 mo
2063.32 1011.61 li
2063.32 994.8 li
2078.53 994.8 li
2077.73 1010.01 li
cp
2021.7 1015.61 mo
2020.1 998.802 li
2034.51 998.802 li
2036.11 1014.81 li
2021.7 1015.61 li
cp
1973.8 973.985 mo
1971.07 933.459 li
1991.09 930.758 li
1990.17 973.985 li
1973.8 973.985 li
cp
1984.08 1021.22 mo
1972.07 1022.02 li
1970.47 1004.41 li
1984.88 1005.21 li
1984.08 1021.22 li
cp
1928.65 975.585 mo
1923.04 937.365 li
1945.46 934.76 li
1943.59 974.716 li
1928.65 975.585 li
cp
1940.8 1021.31 mo
1926.39 1022.12 li
1926.39 1005.31 li
1940.8 1006.1 li
1940.8 1021.31 li
cp
1880.02 1026.82 mo
1868.01 1028.42 li
1866.6 1010.05 li
1882.12 1006.95 li
1880.02 1026.82 li
cp
1863.2 937.961 mo
1881.62 936.361 li
1879.21 977.188 li
1866.41 977.188 li
1863.2 937.961 li
cp
2039.16 929.157 mo
2035.96 972.384 li
2023.95 973.186 li
2019.95 932.358 li
2039.16 929.157 li
cp
2085.36 929.369 mo
2080.71 971.261 li
2069.85 969.709 li
2065.19 929.371 li
2085.36 929.369 li
cp
2130.35 927.818 mo
2125.7 969.709 li
2114.84 969.709 li
2111.73 929.371 li
2130.35 927.818 li
cp
1835.58 927.367 mo
1826.4 907.704 li
1819.59 1052.98 li
1819.59 1052.98 1883.74 1045.15 1968.03 1039.27 cv
2066.23 1032.42 2141.59 1023.29 2141.59 1023.29 cv
2146.87 981.808 li
2155.41 914.659 li
1835.58 927.367 li
cp
.831373 .792157 .458824 rgb
f
1826.4 907.704 mo
1771.64 790.338 li
1729.33 847.194 li
1748.8 847.434 li
1810.46 950.206 li
1795.38 951.31 li
1787.62 1034.71 li
1781.58 1035.18 li
1819.59 1052.98 li
1826.4 907.704 li
cp
1 .956863 .54902 rgb
f
1729.33 847.194 mo
1771.64 790.338 li
1826.4 907.704 li
1835.58 927.367 li
2155.41 914.659 li
2180.42 913.665 li
2102.77 769.784 li
1893.72 769.784 li
1892.02 785.066 li
1852.8 785.066 li
1845.59 770.656 li
1836.79 771.457 li
1836.58 769.784 li
1771.64 769.784 li
1713.3 846.996 li
1729.33 847.194 li
cp
.47451 .113725 .00392157 rgb
f
1695.06 1007.3 mo
1688.83 971.746 li
1723.13 971.746 li
1720.64 1005.43 li
1695.06 1007.3 li
cp
1665.75 1007.92 mo
1640.18 1008.55 li
1639.56 976.111 li
1666.37 972.368 li
1665.75 1007.92 li
cp
1771.16 968.003 mo
1763.05 1004.8 li
1743.09 1006.05 li
1745.58 970.498 li
1771.16 968.003 li
cp
1795.38 951.31 mo
1623.2 963.908 li
1620.2 958.395 li
1614.06 1048.41 li
1781.58 1035.18 li
1787.62 1034.71 li
1795.38 951.31 li
cp
.831373 .792157 .458824 rgb
f
1571.57 928.707 mo
1551.62 921.846 li
1546.63 893.778 li
1564.71 878.808 li
1579.06 899.391 li
1571.57 928.707 li
cp
1620.2 958.395 mo
1566.1 858.852 li
1511.46 913.672 li
1515.45 970.942 li
1518.15 1009.58 li
1541.58 1019.07 li
1541.17 1013.81 1538.52 979.175 1538.52 963.635 cv
1538.52 946.793 1552.86 934.319 1561.59 936.815 cv
1570.33 939.31 1582.8 954.904 1582.18 977.358 cv
1581.59 998.468 1578.25 1030.05 1577.85 1033.75 cv
1614.06 1048.41 li
1620.2 958.395 li
cp
1 .956863 .54902 rgb
f
1620.2 958.395 mo
1623.2 963.908 li
1795.38 951.31 li
1810.46 950.206 li
1748.8 847.434 li
1729.33 847.194 li
1713.3 846.996 li
1563.82 845.151 li
1497.55 913.992 li
1500.96 924.203 li
1511.46 913.672 li
1566.1 858.852 li
1620.2 958.395 li
cp
.47451 .113725 .00392157 rgb
f
1561.59 936.815 mo
1552.86 934.319 1538.52 946.793 1538.52 963.635 cv
1538.52 979.175 1541.17 1013.81 1541.58 1019.07 cv
1541.61 1019.51 1541.64 1019.77 1541.64 1019.77 cv
1577.81 1034.12 li
1577.81 1034.12 1577.82 1033.99 1577.85 1033.75 cv
1578.25 1030.05 1581.59 998.468 1582.18 977.358 cv
1582.8 954.904 1570.33 939.31 1561.59 936.815 cv
cp
.180392 .141176 .0666667 rgb
f
1546.63 893.778 mo
1551.62 921.846 li
1571.57 928.707 li
1579.06 899.391 li
1564.71 878.808 li
1546.63 893.778 li
cp
.247059 .278431 .301961 rgb
f
1640.18 1008.55 mo
1665.75 1007.92 li
1666.37 972.368 li
1639.56 976.111 li
1640.18 1008.55 li
cp
f
1723.13 971.746 mo
1688.83 971.746 li
1695.06 1007.3 li
1720.64 1005.43 li
1723.13 971.746 li
cp
f
1763.05 1004.8 mo
1771.16 968.003 li
1745.58 970.498 li
1743.09 1006.05 li
1763.05 1004.8 li
cp
f
1881.62 936.361 mo
1863.2 937.961 li
1866.41 977.188 li
1879.21 977.188 li
1881.62 936.361 li
cp
f
1945.46 934.76 mo
1923.04 937.365 li
1928.65 975.585 li
1943.59 974.716 li
1945.46 934.76 li
cp
f
1991.09 930.758 mo
1971.07 933.459 li
1973.8 973.985 li
1990.17 973.985 li
1991.09 930.758 li
cp
f
2035.96 972.384 mo
2039.16 929.157 li
2019.95 932.358 li
2023.95 973.186 li
2035.96 972.384 li
cp
f
2080.71 971.261 mo
2085.36 929.369 li
2065.19 929.371 li
2069.85 969.709 li
2080.71 971.261 li
cp
f
2125.7 969.709 mo
2130.35 927.818 li
2111.73 929.371 li
2114.84 969.709 li
2125.7 969.709 li
cp
f
1868.01 1028.42 mo
1880.02 1026.82 li
1882.12 1006.95 li
1866.6 1010.05 li
1868.01 1028.42 li
cp
f
1926.39 1022.12 mo
1940.8 1021.31 li
1940.8 1006.1 li
1926.39 1005.31 li
1926.39 1022.12 li
cp
f
1972.07 1022.02 mo
1984.08 1021.22 li
1984.88 1005.21 li
1970.47 1004.41 li
1972.07 1022.02 li
cp
f
2020.1 998.802 mo
2021.7 1015.61 li
2036.11 1014.81 li
2034.51 998.802 li
2020.1 998.802 li
cp
f
2063.32 1011.61 mo
2077.73 1010.01 li
2078.53 994.8 li
2063.32 994.8 li
2063.32 1011.61 li
cp
f
2106.55 1006.81 mo
2117.76 1005.21 li
2120.96 989.997 li
2105.75 989.196 li
2106.55 1006.81 li
cp
f
1852.8 785.066 mo
1892.02 785.066 li
1893.72 769.784 li
1896.2 747.442 li
1852.1 747.442 li
1852.8 785.066 li
cp
.831373 .792157 .458824 rgb
f
1845.59 770.656 mo
1852.8 785.066 li
1852.1 747.442 li
1852 747.442 li
1832.68 739.245 li
1836.58 769.784 li
1836.79 771.457 li
1845.59 770.656 li
cp
1 .956863 .54902 rgb
f
1852 747.442 mo
1851.22 725.026 li
1824.78 709.015 li
1825.58 736.234 li
1832.68 739.245 li
1852 747.442 li
cp
.74902 .717647 .45098 rgb
f
1852 747.442 mo
1852.1 747.442 li
1896.2 747.442 li
1900.83 747.442 li
1903.23 725.026 li
1851.22 725.026 li
1852 747.442 li
cp
.529412 .505882 .317647 rgb
f
1874.68 715.078 mo
1887.44 721.666 li
1852.04 720.84 li
1840.1 713.43 li
1874.68 715.078 li
cp
1903.23 725.026 mo
1875.21 711.417 li
1824.78 709.015 li
1851.22 725.026 li
1903.23 725.026 li
cp
.74902 .737255 .631373 rgb
f
1887.44 721.666 mo
1874.68 715.078 li
1840.1 713.43 li
1852.04 720.84 li
1887.44 721.666 li
cp
.290196 .278431 .172549 rgb
f
1389.37 858.427 mo
1372.63 857.963 1344.53 883.534 1338.68 920.978 cv
1334.65 946.805 1349.2 970.048 1365.7 984.138 cv
1371.36 988.97 1377.25 992.713 1382.7 995.125 cv
1383.18 983.833 1383.6 974.058 1383.81 969.389 cv
1367.85 958.29 1358.92 936.041 1361.46 912.456 cv
1362.53 933.856 1370.89 954.556 1384.73 964.662 cv
1385.73 942.158 1387.53 909.706 1389.68 891.355 cv
1390.86 917.46 1392.4 978.58 1392.4 978.58 cv
1392.4 978.58 1414.44 961.299 1416.38 934.588 cv
1417.07 961.755 1402.34 978.854 1393.11 985.879 cv
1393.16 987.902 1393.23 990.408 1393.33 993.243 cv
1398.82 989.435 1404.77 984.721 1410.37 979.006 cv
1421.59 967.543 1431.37 952.076 1433.04 931.917 cv
1435.85 898.101 1406.11 858.893 1389.37 858.427 cv
cp
.74902 .282353 .00392157 rgb
f
1416.38 934.588 mo
1414.44 961.299 1392.4 978.58 1392.4 978.58 cv
1392.4 978.58 1390.86 917.46 1389.68 891.355 cv
1387.53 909.706 1385.73 942.158 1384.73 964.662 cv
1370.89 954.556 1362.53 933.856 1361.46 912.456 cv
1358.92 936.041 1367.85 958.29 1383.81 969.389 cv
1383.6 974.058 1383.18 983.833 1382.7 995.125 cv
1381.6 1020.53 1380.18 1053.64 1380.18 1053.64 cv
1384.44 1056.67 1392.81 1056.98 1398.99 1053.16 cv
1395.59 1044.19 1393.96 1011.63 1393.33 993.243 cv
1393.23 990.408 1393.16 987.902 1393.11 985.879 cv
1402.34 978.854 1417.07 961.755 1416.38 934.588 cv
cp
.168627 .164706 .12549 rgb
f
2305.44 919.319 mo
2307.55 948.412 2331.56 967.238 2331.56 967.238 cv
2331.56 967.238 2333.24 900.663 2334.53 872.226 cv
2336.87 892.214 2338.82 927.562 2339.91 952.076 cv
2354.99 941.069 2364.1 918.522 2365.26 895.208 cv
2368.03 920.899 2358.31 945.137 2340.92 957.225 cv
2341.14 962.312 2341.6 972.96 2342.13 985.261 cv
2365.37 974.968 2395.98 942.273 2390.08 904.492 cv
2383.7 863.708 2366.47 833.21 2334.86 836.36 cv
2316.71 838.165 2280.01 868.957 2283.07 905.79 cv
2285.8 938.785 2311.86 968.753 2330.56 982.979 cv
2330.66 979.987 2330.74 977.338 2330.79 975.189 cv
2320.73 967.535 2304.69 948.91 2305.44 919.319 cv
cp
.768627 .694118 .00392157 rgb
f
2340.92 957.225 mo
2358.31 945.137 2368.03 920.899 2365.26 895.208 cv
2364.1 918.522 2354.99 941.069 2339.91 952.076 cv
2338.82 927.562 2336.87 892.214 2334.53 872.226 cv
2333.24 900.663 2331.56 967.238 2331.56 967.238 cv
2331.56 967.238 2307.55 948.412 2305.44 919.319 cv
2304.69 948.91 2320.73 967.535 2330.79 975.189 cv
2330.74 977.338 2330.66 979.987 2330.56 982.979 cv
2330.37 988.473 2330.1 995.149 2329.73 1002.15 cv
2328.76 1020.63 2327.08 1041.36 2324.38 1048.48 cv
2331.11 1052.63 2340.23 1052.3 2344.87 1048.99 cv
2344.87 1048.99 2343.92 1026.9 2342.94 1004.03 cv
2342.66 997.679 2342.39 991.273 2342.13 985.261 cv
2341.6 972.96 2341.14 962.312 2340.92 957.225 cv
cp
.168627 .164706 .12549 rgb
f
.5 .5 mo
0 .5 li
0 0 li
.5 0 li
.5 .5 li
cp
0 0 0 rgb
f
3055 .5 mo
3054.5 .5 li
3054.5 0 li
3055 0 li
3055 .5 li
cp
f
.5 1080.5 mo
0 1080.5 li
0 1080 li
.5 1080 li
.5 1080.5 li
cp
f
3055 1080.5 mo
3054.5 1080.5 li
3054.5 1080 li
3055 1080 li
3055 1080.5 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (\713\745\755\752\740) ()
%%Title: (autumn.eps)
%%CreationDate: 2/19/2015 8:33 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2NJdPcD8qmu\Ij;eXAQ!%*iR4L7"0c8X^n@i9R"NUiT9;6e0q=+CW'6dteWMD"\SiQ9(R:iV0)cF5d*g)kQNujRt\"0j+
%kG$K)a*KB,90Xe`bXp\,3T12!h)gZ=]kAEEqr@@^K&[f(ap$\q\V3s9T&ZN4>B!hSTl$X\\@ld'"p_hZUY5+&]BsL>^RctU<U]!T
%eM$-UHL=_<h<t91/%+]&.r&#<ohT>)G-fce?.T<A<H,Ip4lOELqUCB`^s?HbDPtmr4_l*8qrZT"21=BFDh8Z%jet0Vd)9WtJJfKr
%P`h55cT1o+qJt6$B_;VDqOlC+Hs9(jii]S>*]7m$p'^/EqOu4JI@7,mcg/(-JXoMQ=GqVJ/EbC!9('q59)@=8d6N:J:AD*/#osgM
%T=hsh_eSG.n?^?L3R<_,E)=@fdT01>c6H<:8#2R_4'LW8!f"b?l^N'Gct)bUa)MH8c58qK-@^k%'6^lpi5gN9)P-I%;ZQ*Z#ms9b
%1o_p[*)tQu8-R7&>0T:`F"a!TZXtjYG-NtcCAeYd<RO_A:\_ofD7eJJf4b["HBQI1`Q,%I=gMu8)0Shlf7Dm+N;2;7`c8\9d2W]8
%GMBSla*LM$UV+=ShQQt0"BhaDO>f,Cc>iSA:GqT%*mqOa\iHZ2*ENo_N0c>\NmK-.S.I#ucDYAtK2/0/"9&CE*=uMjl*W-ISb6ZZ
%_9#HUFd=.N-h/9>0Bg>]'E&AQ9^<c/R[j^26CsEK%Jq=X^,j-@e]q=.HOWr)737_Mj?(9hmI!F<mI1qkNk2a6$!5"J-a1/3T[c?K
%GON2Qhs$>Wp+:^'e*GlIlup[dGOI'tcap%!gi9OSTUNDMVa$X[@Ypqc@//3uD/7KLe6=lT1V0:qp6n#=/N)]ul2TrAs#f\*=%T%n
%40YR3c6(;SpEn:->Z1$\jZ_1@2tM,dZDUXijnObDn,:fZoM(m,2=,`n2HR@U2E(auDT$\;L6tj^n^Ul3eH_EdJt&=;Ib_R6F_pWW
%E1S\Crjk;\[Ti^r\AMiKr:?Gb)`2o42]Y!)hJN9JGMMSoLOcTD_QS\bmL=!%^Wdm@jfALHbJ.uYja+Pp]'.[_/mF=:r\M9L#Fa"_
%/h1Tie?_Uar@/j>h;[lX%KLq6lB(#KZ.'^ZY'YR!o."s+=hd6WC=X"TL].&s,c$Vj31ms4a30`/8KkdrX.Qdj`inQkhK:mPlfM@<
%+tUkCl6iWs1lTYDcL0QbEqdlAh)gWYpIEO#TcWBsk6V&Ka+nu2X56tI$hS]<c8,h9*I\]NK(,NJ+$]9mN]6O@(OtH%W5i<q+?95P
%n2((@&DCV?$U?Wi/u`b:_*XKqd98'fCJRSTZkHDk8l-"TJI+/92_+=\is(Z3<)Zds;.Wa*7Ssg6.&B$PPou/gr>PX:gqDa7rM"6.
%J3Ud:OZ27qJj<?-Wq<98-*Ki])U>+tT's4]UlXQekYlUSDM^PG=48O9PtNHo93'&<'D-9TNBUA=Pj)*jDoG89[\W.Zno`<A`#lf;
%J=t&W$@g4r.G_Z^9)LF;_lt8Y9e\u8Q11"8;]C1#cH&M7I,rA(QZVt^rBGeEOcMa#;5m?QqWOBF*qe1+A:BD75Gd=oH7Y'T*`>MQ
%3!:@<>iQ]B%o$Fg3=\JV11aB=<>r`JO!r/F91\`6WYcFmd1l,K<%Jh9`@;>X0Xt\N?r?JeIS#e+qWO(k'he=#/lbMD$s[r]5sVPV
%p<#coAQ95_RQdTBSWuk0Ek+N/C:RBJ<?.\(m[]62O'<dEWq[;QcO,eQ7FT:VB_VpWN@#D<!Es9(>1MRB#_P^JlLK_PZV!DYe`W"!
%+,5K9HZW0NYqU;-%QOt!\UO1':F(];#UlB&81)"C>_,f5#c$>,q(VXcF9/08jS+!Lom(rD.Sle$,a=snms-\XU=Rb;!akgMh6[EZ
%1*G2nc]-0,\,3r\8sQ+@MNlT&$;7s:VTM5N>%r7,imc-a^E\?`chPGTe>!cC_p>:F%h]sIp06[7PtBQ9-N&ghk_ug0&+sT_I:p<U
%Q'cQIZ^_A"Z6KLo4'22DM1@utOnc%Pe8=l/PV.e^73^1$+plL$d6+4gj2)2t8B:ufXb6h[+i.A0&I_7mG_5"Z7fqBl%A5l%K"F^(
%7Y7/G-qN2]\GO"7:I$+rpto_eAS"]MH\XjY_ibF`UfX?E!`C!`,=mBMLf9/B(q;D6aDY*9cl2\SksNmRe529l&O+.`GONnnOF[uD
%Ab^94-_]&4oXCQqr3mGn:5#@c$8_Sh6BMJG#-h2;72pna)</nu\@ZreaB:7\@[U=$M`M,*bmbn[#GHpf'p>h%QEs=;!$u_+M*Ng6
%8.7frW`U*)*,6+BdAItA`\NIm$Alg''p9gh"URf!*9o<qQt.t6d#:.pr:-OXUuVeD2>_$bdOL)L3W:9]_GG"noh2636@G*J;PRDH
%WT-H*TKD_$2(/'1IhH65BDdtCbjd(@%nUp@Viq"88;DXH':at\;q9EK.+BW8i0'*3<JS@g,qW"AC]M5)FA+sr`[B$kOq&*>LB1I&
%F]0Wg'o@qV2Pe"fdUPHa"/q>I?AQf4,8nQ,l9PW3Lr*XGO\@M?'2b#dW_=/l%hYRF_@)_:I2GmNPf26KU(3rQVGAIB@8`uJRBZ2d
%U`M5C.jBJ8fmnm@rWQNIn.Q[/U!+BX"2ml@WA:e]&Y5'O#[W5`#R_8]#V-O2,RC(^>*EN$>`ikqCK86S,a'EbO/u!r@_`;P9\>c;
%1s=)d78,YI3+6kX8/rBp0G#O7TE=\RXNqg>U%f1.R.A(-bd4riSnMf.U)WubV&W^>XtR\R^k[4UlB*7K<hiHFF[4s35tK<<T(Y`c
%('5,Pb(fg,HI\dedLWM@CFq?%KR^/"rs2iFcScO9ED(joTEsYR_[I<c=G8&7.:tCM1Rhr70O2P:1"-_ueX5`5_%=4HO^$m&iSq%s
%>pJYV'q&GeCHR]YCL*a_9r]m=Ore7fe@pf1Yf'lV?*$rVc]I3NG.(r:O6rn`p7n%KrK*+tJ3gc4<21$r7_i;-lmTDT(H<[=X6^[g
%89Pj0gOM8?k`'Bb!C%//Q7Rt%5Y@YXCt%laM85@`]V6"*O"et3D$F)OL>=um\]iVlKc(-PO2G"O?tKN$Ts5]o'*6ZPCG=>FLdiMs
%Ra?X71W4(6"lZccTL/MV[R5o="pcC)%"^&79Zned&s2<4Ree<r#('d7l!ZfO]d3K2H3i8[<^rse7,g(GQI<W:"knL5>rU-5Dn280
%*f0'._@oOhn/'_-qE[];%Jag>D#DJfZiVLL%LI6W!b=@iKBG3(q@h"q]`>Ym!Fu_TJcNU#MW[&j>?R2\gV9DfIo`?JR1^f:#o(:+
%Ve5rb?k'8*/aflp($Y9km)1(q;s_l,9k`P&fMa>K<%*9u#dQcF&k%j9i_Mt2XN@0TMlarD*U^95#4W!0"uu8D:eN%M'<n&4ane]D
%/t:,80/PP+4Z%;@M7gd<HDms(bQQK>\#^;uF3l:HQrp,=g74p,<g_:LOZ&7'RL+Zm`1tlCOu57A\?oG0Ue6Wb)`2i.`EZtJM[(g$
%F=8X::i*B.M+&"#9noE:2TFfsFK%qL]Er(@LakuV.94J=69M6g##GkgaA>E20mWLg-n;@'[,M]"'-^A[Z/DnFFD^M=7"72S(<q``
%>@nZZ+c".`&i>ircB]7Rd(.+C#tPZ^/!1)X$;hPl3BI(+jALq#0s%D1T,#?upL%4kY]bkC:k<,sT!CmHG(,6?*K"GAc@j"H1CQ?j
%Q4=OfT$*bIh$^22VQM&1'p!'!']E_S30FT55dh":$L^N5ZN)@FXbP,rLttO]6)0f+^a5GO=uNU-.K$Cma:R2t=W']YU*PY%5uW<0
%<J1dEPdDLLLeT8WA=@lFMV^[^XiX=KWU=H*"]-9@@TD>G>Td=Bl53]aoYV@Fn6a](4JFoY5<<kLA4@MJ^Va3-_-_&L+Ba'El2KAp
%hfA%Y"MTPe4h`N2em=P$aK8@2UXo*4],=[jEc:GCnnc@e3_Bl"d(U_B/0p+\b<I-'@KUhs$_)PqU-Wm/j5XMAD3'/B8S*D21r-0I
%QZ#Xeln3]Xh=;DYLXtfeo>]TJ\M]g)Ic+cL-k_H,%@r,t]/^]bm4o/HkF_MD#o\Q6a8Z2$`fJ[j1si@;85`&\l;Djj3sUqf,ZBZb
%oD`CsKB&'2.2eXKLKc#WF$!TX9S(WXi(YfXV^n"T`f#GQ<ahUG]%Q$b8omK2)TUP?;5_>J4'RFfDbDGS,QXgjB-7U"M[>do^`h<C
%T$joFp,n2%PLCL)Qgmm_Ne?uGKepXqFsKEr"?UGY!8nir;BsQtGIFk71=/=$M")=cM_W(4+`;u.dq!$jr$L;-a*q``"/)^p-Ru%>
%`_.\=&5G8IB2ki@l4?C";#tnT^U>%'_0YRRYi+QBrR]l3k(KosE_HGBDKi$G^-3D+>,Si^Aq(\G:R-jO?N'n=2ufUL'(m00XnGo$
%fa2H9gtFB3.fL@d%0"+u1k342\C3\<UYb<TO8qD;&NU`'FoSDLDr]"8U-G=qN9RQQ31Kp2YQ+<hl?#,4H(`[T2QiK]F+Gd?])&m<
%i+\*FK8Opi8MkM<*5(Fabd#N*om\8br:</cdt'7r-sH;mG&o:]Qj;+?^D"KD6=KhRq8EF#r]LN.lYPAM#Mn^\Jb]-BPXO.#FkF(J
%Tu;`X;sOAl^>X.`J$8\GB<cLWr6N+YIK(6Wnp\4$ps0Q4_[@K#LWt-l)WKpIqVO\WLY#I:0C,gPQM&keA6H(qq_OT2BBsAQ3S1RR
%RX^6l#tO$eafNHe2HpuaF6S:dlJH)s\[>>E4)JQ,h#SB2qp"_`]c])^)Uj]F2YI7]b+nBAYL2DmA:G,BK(RjU@NO.G62c`nXae/t
%bWe7Y#A7JTA1j<De@*W:]P=%GDQe-!CKB=**>NdPaMmZd^0$U-D_3hn\V"4ph]1\i?CqmN8o`JDDX'/[WSb;$D0$8.%0!2'mgW%(
%p"iiSJK&&1OcM<.)lnR[qUsQs:tPC>eMs>tDn:SkHM)G3@O'KE_F^9RZjL68(DbCtH:*2tGB:aX5rX!imgkl#f)NZD6+P^/<t^(_
%>jqSfmiN">.A&HM`!,<lmW=7Wlpg6]F_.lHb^Oo`'VH;2&cQi'_KUFTUe[C!'o:H&3t\^En#L(#11%T+-97ldklY15\rEcYm3$U]
%0/j=`5OABomGN_6bSX_7@"sT)M/%ZL^!j`q'=0RqU.M`;L_g#'DI?iDRPC/SKQaZ,(]am58FMUOm^W(R6*>Ob)UqPemFL4!+n3?d
%e"!jRmp+Z!0:KG(mS+,+Zl(p)'98OK(\Ih%7,9bJ]9PR0SZP-9])1;Q]a[.HWL^,1%*o5I7tO,'"]94OZJqmo>J"a]UG]]&pA2:G
%4,B9Gf.lP(fA(=po&LA)^A<o,:bGJA%#$]>2[OFNG92YiU:k`Ne'.Ii^$\n%6Cf"%#DB"ZC,!U%8C\cFC]4j5'Oh$KhQD&@.9g5^
%btUS2h*7@A)[+%T1KlWhXW&H<\FokE$GXB1j;9TSRmsl2ei_+uMVQqOmU5[6Oef;J_,9XFZrtHi8\I&+4H:aTDku+W&8[3>CmFOq
%7Kiul-f)tI,t3d!2DgTJIWeKp`0-3t@riNk`Ug(<gF5:TW_!%XEo^\1L]+:)bpa7Aeai@sopQ#CIM3+RbrNg8g@T#Q2QE18n4"sb
%Yg^,64iPCK>_8/.;J13b6NYN?3_Y%ZIVY$6hMg5FW3dOBl/;o5cF,=7LM?HMOor8#eJ)ff/aJZk=YHbcD"VK9RI:;`>rJij7Pp9F
%[1?0RbtGEQ\XdI];C"@.&F%?jb`uG8XZ(+-o9aFZ@iB_b6"]F9$o?XS%\Wb19AeOs$9!Q!Kj.C<bjKUCqSW(3=%8AnYFG0T[3l;n
%@a,KLFK*\NVcB>M:B/I:HDHUJbLsOaQCSVg38JpkHm4biND(N(86h(tSXC[2FB[q#g:b?\Gn!^8e2o1&HP_D#'+ZT^HND!O=KPB-
%7l0RMB#R!39qQ4WZl=KhTb^k3dHOF1.9.:JTb\TeRDaAjI9#K@4+1-U17jX5H$6#RYBr':hWLFqiN,2"S]j_)gXCCaDUr4o6CZJ$
%HQ#EI$`>R1lEiSG$_?EK*JW8>>)dE4^jE-2.^]G%9mr*=0k1sqQUjKl9F07oC+uGEc$i9n-EI+*VNA+?Z7<[)Rkf>jdCj79B@Z3A
%K)jL_]:Da+O#<HDdprt#3,Ug;WPX4%eN9>SELp'FVEf$(-`+m^\P!^k=g%I1kHH@egt/CYUGk1VPo&NC\o\q\lgf_Z;+ERYmWg>F
%0UY'BR4HN_,-$bbp6F;_)2V)=77h'Xd<0rcN\h-u7'Y.*h(Pd`ob'f`;YT;^E,'UZT>f(.b[)lIL,H:tM,ZqPWKp'jS.Fb_3JceG
%FT#ripC^YF\sBbsD*2pKcKq-ppR>)oCpiDM]hB[JXP%MtFHZ0n/..<[n^B013jhbdR3^Lc($khIf&4,'9u*F)XjkN"^18^5P.>+q
%$kN]62I0:A%K99Oo9u?d]04f$oiX)DRcbqQ0>"ptM'ut&20LWBHCJ;9cn*rERlRR1Yi7K$J^nVDK:'Z#G-ZF^q'gm@.<PqsK@XFd
%q1A5pW?-2=V;VT:)1gJ)Kcf"mcYZ^r?K0Js9R?lhX4)Bu5F)+Uo7csR[]C=F4d6b(<:5_a\[/;s8..;[rcPnueK::V*4:PXT;-FI
%k&XKDR<b\"26tT`I^@I>Pjmuq::Aa4:%,aLREG&9O'P,7oOj6kR9IkOQl.c?S<)>G]p*&:h_M7t`EY_<As\ckK61cU]:oc,c*E!l
%ffml4ZkcU(2u!2J#&!hO7eRbPIn^ZL_j]DtATMC?+V)g4U\`(49eou9%qEN_Xa`1^#L2+N1Tn8hC.6EjnYj+4X8NAcfOoTsrK6jP
%c/UH-Rif)1Ct(\Pm^\D9j@e7@Sa4JlMpB#Lg:c%5-fnCBd!r"N]r7q9leClOT"X]dYO?shnnPd\gB_Ooq+<jaT(g$?qN[\<McJs!
%p;ZjDe*YE1S,RU2V-Kd([Q!pKoqGW:K@7_s\,4pL?Lt,Ng3V>K'FIVg;If*dIA-ap9't#Pn9JYCq>%/RIEo#3YIj]1ipP4PEoi^8
%E*KAf%mQ;-[\%r?@4LHchJ$S?%g-ko]RTh?C[no>GX$K'AA.YSgRD9PDqjUV_Y$N4p!IVnC$4iQL1,>WI[n']Xdjn<&<to'm>pSr
%V9;1#1AECi+S+Q4V'5P^D/VUfo"fK;PO=dP?[V=j:QL!*G0b@#Q1Fe7_r=Pm6,ua[A,Yb[L+toZ<Z9MCs)tAhl()X,(*C)J=%]Yt
%J#mIQT=h4iS$u1c^#+0U\^>*?YOGJ+V0]k*BnmJL>!;)W*r]8[IG[+:[3%P]P4,N#]e/Xo4oU-=/8oIn?+MkOg3EX7]@^g[\R*s8
%[BUKPJ)+iC_-6lo/bU*p@c_?1`*G8NHi<[A\_p%8pu"2Gl`K_]SWGC/D(XjNS#(:IE,F4rC&cS(H$AkrL[(o0EF#9DqaEYm(6lGg
%=#Ss.I9Do7&&*%ucT7,#8^Go8#=-HKog-:Y!*%9:=3E'8''T5!I7J[3n>`cphgA\@\+7(b@2-HNcFn03)TFeN^[(DC/'ht"iD5pb
%W\85fnnRiQm7i%m]0sIWSX!j6WiNGrr*h2Ckel!6`nA\ih\hpRN2aQN,sN<&C6eMP.=<(05qHjnU/ob'1B1[[El-b;2#GT^oi_60
%'TXb/="<BK07R!fod:8ClL`oebnlY/B>roS`h7SGYjn`</7"?&1&1J,!Auq8>lFHXq/$Nd9=uM!qYb0]Rr0$g0-[3?l;l2kWb2`<
%lF4L?o'F34#E'o#9Z'h*`6.t?pMmCFh<S@\o@@8sGg9F>I]K@PK25QM8mV%:*1EWq:P(b3Psm=:U1#r\[VhFHQ*r)$Hi?))ZfAE/
%8'f\!GC/@pE5-Y12n2RLEt"NEcpuagfXlpEA&u#aKiW15<4@X[=^-3"ZWt4DLS(WFcK<SJZe&E(RKm%9nOtK%@W:]&'MnE*e(eR7
%7h%$HZ;B6Q):V#&@'Q_mIU0]>^A2)]<@a^1Bh,fu4fajoY!90:c+q4lWNETm$p.OCrN4DB(WR&p`[4!hcodb8.Q^^mRP`UM9aD]i
%3FDg5:!\$r?A!]1*UMS:5;d%a_g=NNPDrkR4NadT9<m^)IlWV6%sD:gf<s"2IsasQICK\0HaU/epN\D1p#7LD1mbq)[/Y5\E,p,-
%4Sl<a=_hk+eSGKR:L:!ZnZ2)spA<n+HEF4)I\^C1=.JR-(a:ohea@3UH`Yd_'&mh([;km*EAR_Q9"Su[o]%T#p.8;&4XhG\Dk8<A
%]rf$l;>A';%POFiMD%17+b<rdU.5qn[Z?']Dp%slNl?e]H2>$k?@;<l6mWi(C+%4!/pSTcJ3-J7/cTqZgP>u/iG(dP,apqD[CXhh
%Xr]O1#`rsh&;u$c\FOH/\bp=7BQ^pcDRJ>m@<)$<jgamPjbnM'Zg'48\%J/fV]B"Apso)5;L?_=!+0)fN#LpCXf(%LqpVt2i5M`a
%EVfW>d=$E2@9"pEr*C.#jo'&ooSb2(CcTbhp#fe,WVek2HUbo32R6>n%)8)N+j8Z(IoT#9nh%T3io]b:AX&Hr=2iF3/b&@s6[A7u
%VMZjmOO0qeP"Ii;$+4(M40lb3^sP?Sj68dd>AS6n9]prh`07uOW2$)X$s%,pN+i;Xa!f^#hM/pe+6-27UpEPP?R)5;bG.pbEha(k
%b6rSZKVkl1fi^R`/iMS+5WE57`kuU>=#7eQZ`3_j)]<.QTOGj%@2f5R_p3NN%'!0\D"5)k^N*EGco]-:cnM4#I?m<H;pf&%bs025
%ZD.nZ%4Nlm4Q`:G<8N\f25HRYaphE.&RJ[bXis'C7(.iN7ccR3E#iFk)C>[Kf%<T)YcNoZnU,F>j^DBmG&5Y62a[dCd*2i2T+-XD
%.g$X-%$oS&Vg&c2&PK._C2+/MmWVuV-RLR5BGg"W!PgJYr)o=BjMf)#\em.W:-tUj`Zst(&![pRDtk]<Jp=DKH=&WZEW4Dr'qm("
%MML@20?N."Gr)<^MT>0mG&#bu+JJe[UR`&"Mnc&#(<c+"8"6oM_=?"A%Hl[+9(i/'(QiUY5>9]H#tn^^NCqb(6,RWF7La(nQ%\`U
%$op-t9Bli:KZd^L\m*"jkP\T3]m@3/?Gboh<nMhn@<?_>$**gOF0G0*q(FB]9^/?U4R='$.io.CYH'2NCJ1G[[VOX[d7r\C*%hcX
%1HWJAQfDGl2s&Hg>;i2*FZfdFE`6D;NNP-IJHQpOGDF/qleZ&]YP7ZZ<X2(n`OF[_b7AN"6\f`0pZQ@is/+HWD8L^$,$"WM&A&^3
%l)r!I^Of1?aL+9O61F;Ho4@%]D?":OFmt)YlKYRY29&pIs3#M&BqhXr_^)pl+e`@bee.paHrI*Dr,>POrD[POkLYbIaRjm1#V=;N
%"Ms&"(UM9qc)/k)4_fHcFp3I-Hi)-04Ohh>E:BrLO^EQT7sO>`q`tGARj[=@Pu$MLf!DLO&7;3*)KAc[M#%LeTskGuQGg\W$Ut/V
%l97It@GfL^8>D$09_(1b5I9E7jF`($D)`S(pL)K085.Q=2.)Y`8S9Q]+",B.A`m!2:0p$1:[WJ2`qt12Du&^d%hhiE2&c81gWK?(
%PoZ%A[>J3QX'/P7G8;[E=<[BdoC:?VrX*Dt^HI!AX*/B1a@GAr7jP=LqJbh[%N>4kV7-]a[$jeBYJWW@mAEIn\$(kLf.+sVd2,0=
%mlkoHX4u)*BE.)Xc-VXq%o13l=27Q+o'=!^Q"N0+-P:cT.hEU,02#BM<ljbp3$0pE3heCe9360"hXHF_@,S,Y?+1j<Ph,p1k@%Tu
%:1;0+s6?:F"6t#lM/N`>=.[11s,'9*%^n<&I_&<-k2j;(cJK=sG0YOLDROk3qqXEQG[Me5/`"Pr#k+:uJ4t<=ftV)lS$sYPBpe@3
%lJoB]4h20&gDfUQ'G<\hl*p,"SDPCc/0;R,J"dP+gJ7/%[S,(pOcO)HGc1`7[!&Qu5)F/F>kL'cj(*(LZEZJ(KUg?0N`=!<PuFl3
%1m<n41BAG%J=p]$#ORLS`W%JjSpgJ/1u775d==X"q[#/5m@RW=8:d7CC@AT/3'>B&YJ:'^($hr2FhcKVLXAL6_>MQ]DQC):EFV'3
%l'(8`Ab5d0J@$EDDPscTMUN)?4uC#*?,([)O3o5tOk3q(c)pl2^jXk=Xuo_I#o,@o4qNs)pu%Lq?N9Mq[;l3*oO<1G@kHB!Q/C03
%2lDI!6]5lcISqi/o7T:<X#`o7c4:hH_p99ek09BD[P?9aII@3ZAEDqCX8Bg)KD4d3A(#bN+')1-cF:slE<QC&l>$(DD:.5nI]548
%g<3u,<#ElmG]ZC&e_C]3CTlV3O8$-"O!^KjroVXP05k`d#D[*Pem%&)3FVm(;rB!2oiV1"[758Es-1`nYO?3R)jb@#UWR5aXpNPn
%pU5Q7D`!5V!+33(I<os3&22nDL1Q$MfP/A:J)tH=?*cZeSN,H_Q,>dpQ&A5KcBm8:c8cK]eS"PkrQV8-N>j+jM[Si*DQ%<ChfbVe
%XMn2jcd#:8V5o!h<ugi-8ZgcI=2j2l?'O(>JTg,>YL`FDS%!6(>#O"KBSgpl[Mg7&&G&k-'b?A7J#*J46,24/HI^nZY<AndkN_)&
%q/uN3o@RkYOhM,[>E(;$h8\D>anm1c.I;P6E0$6?o<u*7pO(l2pf\Vi#',O@!g251[INfrn[ro4i0tOah\=4D,dj3R]<^QAH96%g
%6$lrsQQJCP!Kh;$:Y.efN1/jODYj.u_kYr-K?$Kh_Nh=Tmlq$d%U5er\hg:VQC]_V0^GoCgb6Y,j2^m`8ET_ch!]\/e-]o"hhpLY
%f<5jdjMcaT\bM/#a6d/##A]UT@m:GZgA.2<@eI5JR)9<lr?tt#1/#p2.aSQGpeo<2cK]Cc[ZR2*r;QNBp?&\#C_N)f*TqE3+3i6a
%PJLSIqfMkoMlj2>PI]6_g4(?\//>ni0NYliaZZVHP74Cu]?lUc#a!JdIJ3bf&>.4OO*./b]rir:3Z&Q<IM-:M;7BlG5-(2ZS(3WA
%&";5c$2lea(IMnQ7<8.CV4V/KGjiP-hj)gLT9XK(f<1W-D*9ZO5C/g,@_6]RA#Nm*!trD(i;2d1g=OKjQ^_dAL6HP:o!PJW?`L4E
%&+<"jrNJ\Ii-7t5eV_[FlHtSufr__*V*n2X@%!\Zm1=lW:jKTu++^RL:>/sd4nr"2Fp9=Ips*U@hU>IjIdT9S16OW<rB^AV>UTAj
%T.V^"#;eCM^.6pbgQ0@_n3T*Ne<Y9]MrsTrlNai?_5j?bUDo9Tb_P?"[TiUp%@JuYNp*C7h8L=a`SfrG\O_3WCiAGDbLse+f&IbR
%RD2Y%WgdV/#?O?4WV!@)e3Em9R3KZ0jn)V=1D5Lro:I??F0o;;bNHp6I>B7tB5jqZ(;#oOSgIaDBe7HW+$50T)'FsoJ)MCNi(I,9
%7lt(%*pn@(6o7uSM9:JLg,C4,m>#MMn5^pkct`GXV=<Vf1I8\"e7uJdFEplKFlY\0:Lh#]H^5UFds)u&j/K_9agEI*(!gH.A+fiJ
%cVIJC;O-.0S_'06m[,8sR:P3(I=O!)`M:nOF6cXpFoS1XI:*"J(f8s?DLTRk3RfuMbQi?u*c/K;F&5!1I4*JN`pZoNY?QG'A#3t0
%@U%B3]R"*8>6Srr2\G7'^H1,!OH&kQd*SZ%eu50`?fYkL4+@+d>IFH?pO;@Qj`*V"a-;mo8Y3]r8Eaq;c2imsQ=.MX>+o?L:C*(9
%T)KpTI.qcbUfj)alok/HH[L1h/:"]NEeVRX:Uogtja'L^3%\+aV4Ts_[O\t&D[2Q@V55+(;g7WS;mBWCArEWLGeAAV)L;qKWu6*J
%I[4sm>.D6NB:uuhinL@YUb`tA+t9&VD?nJTQ^uAU[YRsOAkV0/rUop6gY._Wnf!bT`d@<LP6A;D/1%Y(38R!]O`U2LFN):sb5((e
%#AWaKYZ3c!(Y2'2Bmj@%+H5rb#4(/JNj,:c16*;t\`8j8i73bBP:'W\5.k,NlCInSk7G_]gT>t\mOs(&?[93Vm8p-pq>L:(C"=O(
%iK;hX^EH2>F\T!1^3MhZF0mgcID'l&3uNFhf=%;.O%4Ed'_=sGCa-XQJ@+umr_h3qX#iD8p$pZ!l#H5\jhcN&)O"^:&<#UNXLPCR
%$IMa_FPucn[PH$m?T*DaM?hlpl`^/oh9fo1;SRlFX>J)mX3/oB=sM[AX3KqmoA+.$dc;lJ`;<%^kc/r+k6q"r2;)CEAq>-p3B7$.
%@]`\A/b8Vt>;AR;j=@W5nJ,cfj5n_>`b%Ck>K47e+CTJ9H[I_6$t:Mmf]h/f-%EI[F#MRTou]]iFG:Nj+,#^c_=t*Wf\QS$T)Dj,
%8ikN'F6Ug/IWb<fkoR6tf>E\&_i(nlf+ro1m+9_"b3?t/+gKk0(H\6aDLSh*N7hkGoOA#XOi8mbkP<g6eU.2Q3>k628RT=2<T6$X
%+]\>]B`P0e<::=BeqdnpXk"PM-1\4r*j/Q;m[ZG]2;$&16G<DA?=XLBHaFlrO*)LF#,TikJ%k,GcF_t737*m-p^SU"8L(6_]Q7;e
%q-JIEH!(YL!(RBf<#`=@^[!g3ggfBImVUHK<o:*AY9r]$\Cqs%jeEjp-sp61SmW(7O%_V&i(!)J]>+2X3&:'%nu_TL_8t4%:_^#"
%e_e+[JmcOMIS7->X4ic.8$s/bZ/7qje;&g5b218C5<3h4n?CV+>s74X#p87"Yk\(o@po<>L>:o^N;Qna^%"78><FMC-fg\eOX%T+
%Y8=giAo0LhgP`[Cgt:KYp9#*OG)o)RgVl+#./'UQ]b^91U>t0j(pUJ?CEB`YX0ou0q_uEf:5+%Uc$Q;\=r6H`s66kkhTM8:/j!_=
%LZ[S`O!aa5WRPgO7(II/b7jBib1"A6MXrOZ@?p<=.mFd010i]aBAhV1%`5?/K_p7j%1hVngmX1n"O:",nUnMe&ABi$WJ+F>E;I%Z
%l]#7n9QlQ2i#%j"%Ihb[M)5;*hX=/[35i'gRbC>T"+@Z7^?(Qph&`_me'uP5)g`I9eK!H!9N946c7Oq?W`U5f@k[bH]:C`AoY#V&
%ljR(\XVo_?7U+n^4$QK"'A520Dp2m?cu$7hhA(t&o*`QL5%][^ZZES`a5Y^RkA<21[:5o_4fo7]CW+]Vc+a'=8&Hdbc82Y#/TN`*
%cTKcADjlLh2o=]Q,I,%\WX'!kh-'U213eE)1(S\$mG@?_P?P/:?0i%"m.RTBVk5?/f^<_0dIN,G9/Fo7:MdU,4=]eo+jjBI::G47
%c'mbQJb#/0:3<ksb<,crCgH<)fs-AAq9errBfEauR!m=D4nPt:X?5,DFc`!e[&,puqHo'_^V-`sdWnADJP"ju;q@Ie@QqEo6E:Ql
%f7Z/b"^36\1ju@Yn@."1eiM'ua-X`)3BSoX\8:<E]5bB1piq,Qcc]oJf<>2T`iaN+ctU\Y0%+PIb.2g??Oi?GPe*`RHe7G@l/03l
%2q%5'h:p]o8[]U1RANu\4:U'07D76n[5ta%/tl$AF#7jk6)R;sHdG2ONFo?4fbWk`G29V($]/ri2`INaX>K8#2D-`Ch+iZBX:77t
%,DY:kO5JBe]B@'<[JIGgc5"de(FDd:<`[^kUY!(Kb1rsU_KF[8Ai?-[h?g',al,4)X*Q7j6)2p7c/["%ldJVBeXgrd-'m2Z"$SP;
%hm]&(cH@&m&jZ:Lfn(!f9\=$bA4G]8dfp['1ilG&m1u'n1^"-b3T,8>CL+]l9r9r9*]>\6Xi^VqNEeoAC`8Eafq!R,DJ2K/?!PV5
%GaMKJd\XVH21B5a\rmi:i7hE31[`8B<'FQclf74Gksjs(AmI&/STLoR28-05U*71#(0-p*SW@Ya@8M&-K0opJH+;GZ=iZAX?.3$&
%aP8Uhfl9'I3R%5m6(L-[h@-_5&tYm)=BLV$q(kHWeEV7+W4CW8O*UZrH?uTAW&c*]jsJ)+\\V6Y/`:[9o*o,;Dl8TXkrS)TmkdNn
%fT,6H1gcBJDNPniN[6U;aRF!Z0;=Cg'_)H)9d!6ch8F@LlmLK\<CHU%$iVf-58P17kL^Tjp.t/6=lRRa\X_FCY`hfQaia/NDRVr-
%\#k'F[;AmY3MGa1ead[N-[:,p++j=`-g"7<M'&(PqdgW/]2$1eNgGsL/NBmdF4YX)$rd,EV>JA4]ZYq:L#QMW'8i!%PYNs^8M;q;
%>j4=p^a*R^+Jhu-CK(^DI]Ddek(./>*6/f)5Qh8J$\FmAe)JtS*8u3(R]%\qGkssV1h/HU\W>?>4#cYLg@mF1PjpLJ@YOWn3*sFB
%Paa0\IW*<U!^i]UE0VjHg?/L_J[\O60mj(28uI3[flDh?lM+N`9a!#VTS*n;U]#e?NcTI;X'dVu':=Aj4;?2-"+4fF8J$(#>aa<W
%7MLgPFJ>MqMLrkFTZ6_>-@uMk&4029,T:bk<Gbs\0.:"]Ta&43R7L%H*C%U_.19&&ntf<_i$.K\U"T]h4JA`Bf,i1=?nP&L4]`Bf
%mP>T7Ju_m:7FXo%?('/rqS5a"gf+I]-QkHZ(jK6IUbGQ[%qmf[9BnnWYmH-GON+]9Pb%?KeAk45&f$*L&2n6O8f)S7lR+PWU\OnS
%)@l)[f0[q>$tSVLr#D0<n:[OmF9/Rbk(KFr&m8$_WUU*Q%kET>";W"X1m0>7JVAjK'd:mj>?\08Lo(T364fBlXk#d($f`SfC7gUG
%A'31A<(*YrY00Z8V06][lA2]QKO5!IJi@gFbLIY"cOkCGOk<YIM)ta#O&hhm!GuOuC-lc[i"Z<f#+?HT;&_!)/9-M3;'kJ+S>PCm
%^7B8:Pauen\;ru&$#upNQ\+]XPQhC%cl:>X'b-je"$ncD"&3;T/bkQR$eco$Zd_LqW+4HPL4Bn/\qEMK8)^V,Cl+<gZ&2#+8.iS%
%"X@[m-BNBRi=j+S5(+<D&T)rgk37*k?9\O=&HrQHTCN:iL1]ciTA\rI(jRUTHF,61os@d35)h'4!k\^l'8?rN\ASK:KP(Nc<saqT
%*q(!05W7hm)[j-*f5T-)!5qZ3\^\6l*A/R=G_G9hR3=Q4^t@3j_-)@\*(Xf*dWgp%lZt$aM,Yno$Uh&D&j;?o\!7)<7uEDH>p*7$
%9SmY<1m.o>i;/aA#^/Uh+e[jn)T%"_W@?596+B+5`A3R2>S%dG41m%=$pd:8`e*F^`9@i:'&aC=#iE&f8Kp_l;P5c'fTQ_sW#dlF
%6lG5%H5n+k'.E-:#l7+#1ag?o'`dTrIp<.H_bWIQ(iG?@Rdj(0/`:2TW^'kL]e:k1d>9:!S<i@OeOT;.*Slj&oh3b),Z--A%ACjo
%,U]`?.\Xk`6tfJ#(Z%\]]Q!!9%1ZpRK]g!)LlOkHM?5<-ZuRa2$fU)608jIP#9j9.<04C3b]l.2*5mb;.8_qHKZK2W&IEEE=;j%+
%J2g_<@PRsu$Pj)V?>2iW!1Xo2!Q:.6V-r4Xc[k/b&McIX4d')E\hmn5n%b+O'1@GD!i0'L:X&qE\U3hY)TEmS"5CnpA`HKW<)g:b
%?P-`C)NuC4,0mH16%t[5M>+fIE:[ab]ZM*8.*-\,/6\"O4jTm^7tZXV4J!S8"_JBF^'-V*R4KO:6"5m(6Wh&l>Ch!r/`DBu>m@CW
%$%NXu=m/7Q`GJmIO,pacnO=l4-:&A$/WI7*Lm/23/kc8>9f?jEG:XB#BoJdi[>mL;W0\csBO+_p"2'icQ6*CE,`i*gTNl?AP_Wo@
%0J3s2$%QTMEtT[cR_"f\8CeRG+t&1M;d3s)LX<,cM2`Jf[h+Z)WB`nX9es'^ZNOe@&W\Ec![If3P/BV==+?&Q=Iqj\Et+S3EM]3,
%2'_rE!MHP7-G%G>[M_6/&8=a^@7>?Ul;47g#-^ZR_h]MJaqNon-$36U!\Nm"q)cG[Ei_AT;hF)(d6/jB2$1('9dn$FLHJ-O6Fi&q
%7m$R<R#beqR0e+aRANEiSSSGM(>(jo:g<G':IqDO]\#Ej97TYQidV%1pcMneXb7k:)T5&VYi1_;[^'!=G/cAE971E/Wn@<p],o=S
%H;MA>m"@b='Hp$cgQ_1=J2Ca4/PgtVTL&bq=/7$3&sa;DLnqNr[l't*>mZF?BFe]ZhBW$oI;TujP_uCT.:^raKNS[6O3BjujM:%g
%+u2D$&l8Xdg6,:(d)JI^,cLbq[;?7J832kE7'$Z)kC)<Bb/ar"[%ZMGre)TcEmbuU1f7lYKTdT,PU[T,Bm%?_aY$<]0J&4H^nhYJ
%*q0\p19dL$dT4e+qB_;T1RPK(bEEqiZ#$&&o_cc<,(l-!EOHZO+SJC)3W\K9aY!mn<"^Ag?BD@)H*@Dt=[J=c+MrVZ\kksOBV?SB
%$Ok-`OFRltiJ=`X[%DT>P!.jQB-T52E'Np2n\;FUXql&re_H2[mG_Gs*bH*8mXQ$-$#[Xe\CC"UM!kE)-A1JHo<&J?:AQUdd7gDC
%fG%B!2CKc%_%=-Y<?>B^/74/r+0c^j?:fa8r$=+1KpU^J&qj:nNURZ#aUi@@q=hsq@:P]2\:D&MWCOHC`!AO4h=\SDV#D>N=<r\o
%[crmq"hYH4d"e.rZ[gUm&rM@3JdKM>8V:CXQNYJl+t?KSOCQK^!l(-p>XHkl+m6^VKR"JlOSXe2&d2"A"Yg:Ni"QJ_"G@(jF#g'O
%+c#,%M:NekiI?(8d_\@%7_OP542Ng*Y43?Oc@[,<$&uYjWt8&?D4hT[SC("/$6.9pS9u%OR1`6s=]iV)`0Sc@'%34Z)N&oDK]8Ur
%Bs*no#4RIoi'7n)nIVA2N4I0J0+fAL]eC9K8Ebp[_4V(VjBC[O-mY75&5FKL=@(Vc1Q]:,IYfbT9<4]7QAf!60AJ<"&K0f'GMmK-
%c5N)(13/?oPDBP,'s["GZ8?0-<`:8efoZb89kjBDP3llP0lfZ[0Qg2[_Og)olB*Vp2dd%cE3]kc,YBTjSq9:]/W/DL:H[s,kfK49
%%.',q:]qJj>mX.A`p52DF`Xee4W/g-7OI0A:-&Kdn/`$jA4D^#5.PCa3!c:0-o3l-Y$js2%r8^VNc?ZK3^n?MkEDDO#S:8dP!nXC
%H\rXQ00^[b-Q,D[V?D]>OD$:lA3I4'`uUDt5d;q3!8PHVP#0tjPd+-V3J9`OKTZp*5gk0i:R0!nV.S4+R:eA*5b`1;iRiC-#Dq'c
%"3I\u`e+(s8BNAZ&9rC;OUCBA$qpg,Oo<\Wg1C\;+t0tVToeHp-IN3G<^Ms),SO:+<8#>p=qV3X4(D/t"lb<50gpC*&.5OB2lS+&
%=r"hrL,4o:PD)IX/N>4G=MZd@CMAGoi0odg-Z)W0V'NEu8mnS&#Z=$!';@Lk7h,WDU;ML(Jd');el^9e7h%HPGQ=:*2#sg)C^)@6
%_q.Km>*rcc*O1G@9pR'9:tCmV2Kjn,&I\)UM=A#f\\TMK=s:cUM&^7u,@T`N-iq$MgG6i8.O.Re5(a(B+MbkY/)iR[/.i&"Xo8;u
%0ed92&kA&<8t?,RjlA--<VhM"O[n=S8tX$!30';Zeo\KE6@,+JOaOYpY_NKPIc*_jRqU>nh9gKq8<'-AhHJiVlboYS]fk?iP/o(h
%ZbX)I7E5k&N='g`:tZtc7=Hd"&e'$PpoJ97[;mGj"(9b/Ce@46N+8'71r$reD&oZ&(`jrK+CW@0LU\O[,%jn+`&J=O(5Oa[h%s<4
%hLKdR'0olPODn5(Fpc=C+>3iUImb[C)C$((eRV%$#(^;%a:Q^LYkFl7clXIq&AhZal4G1<10o=6A-8lI-!A`n5)GL8EqTU0kR8<P
%'OG=ZOkPbI(Ohk;aKZR*b6W00Z#'J^0)R1!+<1apO+aN"gaSrZ*4YCC?@d@V[)RA3\>5`/i>e1lM[WnfNM1oN%_muQ4.j_`hYViJ
%_3*eoNh[i/$71Dj$?@Nt+c@UC!50-$+XBou4tbo^6:daDT2c]$.:AS,6W,'-7MZc!%=&=:2]RaNWKPp-)4?XMr@ed8+dE>tY`,i(
%J4L(&I!uoN'J@pEb(6ldDSL+BpC;f!7)b6o^)&J3Oa%MiW$_mAjFjHO'EQql2"Q<RDU!^J*/"K_`cQoAVAW/Ld`K%UEZc88Ij5NR
%@PGUMB0i0F.4)T]X<6cL9l$9N#S</*FAqn^![F%\A)mVUEbl#?;O%<a_P2uN^CEn>L7m$!V#5%kn4EM=#U&(PEppQ5B;;4M-.Jq7
%Dafdbi"@D&J6.kGm1?.3Og++"A)o)NhEt")L00!B2;Ni&rYacVGoIA.%3!HIVNAe=5n<lNCcdj2-EfR1"([15)+^5W:hfo[J0Uc-
%)5!#U+NTR6TnGg'LPE$)`a[4\B[gJHSgT`F!&>Vc*H0)p"G&roE,8YIdj1iWN5YiX3![dL6]@N057"KS5g6-N"-J<P>/4NsalA.\
%EBlGE6&"YEmFsrL>/u7i%;CFm%&0;Ca(/[0]rENO/H$ag8Ob0ieH&"lg*'Ba@1tp?3()M]@&p'?[<i2&\T5Ws,me3t'j=:H9=Cs3
%mAs79YgC1^70c;8.^6MoUTk3tp;o*;]IRg*_'21s!e.FNNeqZcbqdp'J8"T]q!:q(A;sEJA%.5uJ)leqju<OQ>0%oKahVK0F7b,f
%)3i8_KGdNZ*W[kZ[p_qSJRb24@:3>%fJk"JU:C?[_Iiu)QO[6MH#2pERY42HB!UaVm/hGe@J#YhXsV*#nfZ,+W0UhIbsbMHe=Eh5
%S-mu1G6ZJLC.p!664K@UY`qN*J`!=/<>bUhU%7'#T*RVPfLhO@7K-tFR9$GK_4E;%!1M9#J;L`fmI"[(g!)NrC!hKaOQt&7`,&ZY
%1!T7.+`p,&6OGH$<!`1/s+lBH+nA#JftBnp%/S2@i[e&@i]KpQfd)dlZ"Cp_-Nn6kG]?(Ak,R7&JP3hW6AQGVU,%q-JZ5SV7VHdH
%>*l@a*tdfPK`;mDhToU[H$g6c$!rMB6"5Q(>to46UP:ZsT$MC1W7!t@KO'hY5-"(p.?+ob`qoJ3<`Z/5hP!RM&$713S,Q(Os%+IX
%$@-Zt&^lSNhDbF5Wb5IMr#)<N>CLIYl4Kn:oP[Y+6:7ZLIcf#"$@;)u;gk*RRI9%9\g/JI+:oS\hY;nn&_[e&`PJ>a3m(UV//sQ+
%*NI.!mUUDH+0daS6*sn?5\.o&dp^^)A2VP,8Qdi`K.#,#RNXhNHC[%n.Q@Vq1]6P#,bT$gbb=;:3&HK.ZN@@A3_9@mQkhWk/aNYZ
%2E`&;b7)542f`WkOb3sKf`0CI9KJ&!Os-M@gRVkGb;nq7?og>)$r=m@6\=.eVDXr98W+'A:.hjJSnNJJQ0q&,3(6IX"IJKYAa/^6
%\=[A)"k$')``QbtKn-Q#o_9(n)aqNZF(jN=R)IW`3&Xu!C=K31V"*+?Vk5<EKm*".d?iS5gmO^Wi6n>%7i%BbG=JB+]^'AGko/0E
%*h\7Lot79n9M9R;:6'=Mhn\8]j/10_CKqU2p4#R`7S^YE0UY9bP)2<s^fW/HaI\sF()]k1__[7qrt[gO12mS_ZN^nV4bWQ!2m71=
%6m?TJ_Xe5h]0a^^qlMQm4lbHE$LXr;`9["4WuRP.U`X!9A'7U$/PkpZm=kc-N<hg[bH#$0Z=c9V]$H<a:>,i9)Ogr\<3cm_]h`I?
%@XlO.CXqGYdd0S^Qu:>FRWc.ind/P0AIi&(U<iIkFGWosHsD5H0&f#7'(eX]b7"&h'/Um><I?u`XRjPNZ+oN7f*OT`=DG['98a92
%H2GZQ[!mZtE&_),7%#+an[O=AS\r#un4V8]j(6kLo\jY53J@oS%8+q"(\]4_WT)A>*qlTG$?p_J+4i[6ggN,L`.mM!W(`Cp<Hu+\
%QYXZl""_O(jc4;+"39jd%sbZI#9lV1HR5U\_"8kN688*A6Yq-uZRn'jp>Kct:&cZ39Hi7XhbnfS*#2!"LpOIoP@hHn"ssVqjfLgh
%ecb\K-aaBpFsT*%FhK>PR<RH7U>oF'iUbdp*7FA]IuS;UlkG),@Ig[f1"tL;8TSbt)b,+CK`a6L\L*?-\I\qsR#ub&K$T?f@Prl:
%1jNUR'cK;5PWj0\)om0,RAYf=U[(XZ'OreVA8`T1,:aTT7,ZQE`m-7l/FSAW5peL$TnDZ\JoI@H4jGp&9'4>9=+gd41B42E"_fA_
%>nXdG0bFT!gbqM29uY-u`T:P.*FA#LdEhsTQ51KBKQ9VDae?*<Tq9_:.]pgud14n<Q^\PgF*%ss8(\30W;k=79$8tpd`0Of$&%nT
%W<6Z-=m*rUl^T!ipO/QDMujK"Mg;XhF7E+./YR7Y&-W=KgM*RHF1DJoK=Ld<S&nBEaiGdqjTD:ra1:=P\$YA/d1K=M?`KMg22U^F
%JP`aoB*oLr'Us]_$n6h`R`a98flN758Y+=6ADGUbj*DAtSJ4,g1Qe9'NV>^-\@Tf/8/Vn4C<3q\dF_C`ZcifI[Y7dX&j5e0"[aE&
%7*<)K\9PNmUaNVScB+$9n)n7"(NYR>>&[Fo1bJ^o&B6FmNslna\,^0FS>cNtQBSJ?#"05jH3AA<Hoep#^+egf)RZs1W8<3kiSPW!
%EAV$4k;;6\hsbWal-e!Wr\Q<@#YSb12a!At4,gYaYiD64CY2Hal<p2kdtDS/o]`XQ$+'/SBRK`'4M8UFR)bsu)3LrCJ6"/dPn=nW
%n2Fqj#a%;YA(<#jW1(FfJA@i=gW-+bh"Vd%=_s[c+HYH0->PS["2]iQ$oQ^4EHB=]TK7*QAAf_U*4E64YeijSc1jm,s3aCc5`?AK
%b/)d&ffgDdo1q_QL/6t6;$I;rgbbl=*#$F*+EJ#s>&[U0dJ;)_NcO9ufZ\SY3\ZX**b90tVtZ6N>Ki!FA.9`A]$Wqu!h8@I3R+(M
%\DSDa/gMb$j+]p6"F@k/_ji0D/[;^Ao2(;MG#F]?p7UI45%@FUrFQ:[rr(1]Kn$L+mXiD*%WFMYm5*VQd:sS51U`Mb[^\5S">PfY
%FKn]`0fifDiD2EooP][ccaB_`QpY;2cOi\=VSY5YjtaE]4X]:a2ct0Q;,]S<I8o@VX<8EoiScnB$3ENu2A5?>0_Y_gJi:dl'tO%j
%T5o<P<Lebu1ZTu)rJ2)jiN*:Pp95Qo9D\brK7qGtSEoccPs,!S&oo?;*)d;Od_^`[=Tt74[fsi5'R30MK-Q.T.^"G'kmbqYj+J@B
%\<.k(S$%^X4q@?I\:fui',(2A2UXs97_p4U.3)Rt5`Rp['Hf(]1;Ga4\2eFk+g)B>*.F;,6p+50KZHdrl&<!,0.:kD1SgR>\<8(Q
%VS?Xs'-\5fkClhrPF?6,'QAi`ogML!0/@EZ_/\-FYj&ScW%NL^obrP&nCeEJXrYam#^2s.Aj-MPgic%')<=W1V+n\db?*9um`4:6
%WIsfEHp8+H,s]V,W$3iQTi;6+G_NLF&p>S([..-QNlQ."\]d]a%W5M@8I(sr/[`9>Rros"SfeuSMc7kp-O6XH$Do#uMJeK*G`f4j
%096,a_2(i`aShkRCUHoR$boR!KH(g_K,j"n\$YA/IRjqt]?fG?fR-<=Zgs*0O:5(ZEMal]p.7oIpFNF%6rR9>A[-2$YGWX4VW8T/
%BUu_kSYhF(KTlLgR6`+=o`?dA!@*kOV]KsB]@5h"\NZ\O`;@6*7AcVg3ll6m*%hh@OC^@>3^8c\a=%q)Pb5M%\1-r'I9\V:JKuK>
%92PWs6,glTN,+0G*]V9s9TA./`GCj[,.eKgjqJ)ZPLP0dQPLO-Be!%oAXG$AW@ZdNAH5FYPW6!!p6[gD)Ubnu[X4+#^dekWT6!Os
%^i3IQEG=^dG5>ZlVXZNZ8(#;LWCYYYBBFVJbmC"2QqfA**\Bj7MoiK=9Cp[d$ocfKdi.BO'8-q>]QQI$d&#V:g>9F_:H8$^PrrO'
%+V@2%kehE49^;o'o;<f^_nKP)q=YZF4S7U0ZTTipFG`9E(tsiX4YAqH=CV+t@<=^Qob/$>L.4fBreWHe,K6/l"N)cjY4#0>?]6r8
%OZ#Ogd$Cpm5^o'IR$#Uu09F!_*/bBlUkUi/Vf?9Ol3Trdjr1Y7fVii-!J5eg6u&R+M@_3=:*VJ\G!dfT!GRk`##(-]d*.3dCq2^l
%YiD[P26<=4/E>UnQ_C'@_B'jFA0NDm*.i>pIq6Z(5a<b<pYF`bb6>p,a6'ICjTH0b:?%&m,Z7fU1P.2qA1:!2GFS@1(MJ5mks,6E
%huWq!;$2ADWb<Z5*MSF9Sq2)L"!k8*P>WXqK+4Uf@Eg%a#'/3bj>ls+XX_7J&2q@='McaPntA*l'Nu[ha;M:3@L5fh,B9-lBMPC9
%$FiA!Bi7,B**'Fg7c;1%P`^k:=oq%27D938Gts`Xb+<!/VK7`S/t49,gkN=4bUJt;-PJ(`RKMo(+Q?&m_.V-4S(]*`Zojgh7WMsM
%KPOrr8\EE3R=9.I36K_fY-ArW0G:KUl/e#T)[WB3Q_-sAkTV6m@.ud\2+Hk!R<`FXTqP,o0m$*NF"fi`\?h9[_HqL3VUHD9D5,9S
%C<VV>RYtQ7Oc9j@ULpDWJ6NMcNI?pcCg_251Lk2nTGq+n$;W[$gi,mG]RaM8@E>ONG4Q2LqMh2Tdhhq[Tf^u.$%+bWH:bapVOp=g
%?CMFOAi7UJiGt,<^**s(d@J8(^>R)/h\b$%\NA*tBs#4@E,"^&<^GEM.O3hX<`[##\m^jYY*o!i2->1QJ'8<]GS5'8`]'HV#mBcp
%#bI`O#jo\1.:IYXWH/ii?o3EWP1/Ft,t.=$29ou"Eam&;;D("Pkr4@*#mA<?M#B!"KNKL]7#?!a\^Ll$ZDEtLN=<L]V_Wcp^3BF#
%KWrhMV;E-DM?JE&,YUaP*[e9i9(PGbACB-FpXjj\b"r\'GtU71YAi]UM`g@Kg>"=#'>l#!jRnU')l/J;E]-u`HYRqkh6T$=@QDd[
%?\`=OO&!e8K%&db$mG*tSmt)D*q/0C,1TJ$RSVraUoFL7j<Qt+1T<)V\ORuIUpS7ZqqOQ*(*5NBpDfa@qfkjWoSoEc!$4?7A2r5A
%aCE,<4_K+2K7#+C*!iDu3;eXiZM`&W`)M74FWS;Jk),!eK@18QUgH\a5Gq>L8=+#lM+U_"oJ:OUBB1D.[<nbfelJR`@Jm*+A0MZt
%DjCRK,Af4X:gaD6q[CH^[NI/YPYZOXBnC1^cbM!PRPjTQ`*!$cXPY/%88;i\WVAg&,&iB!gf/bQK%'Fo`-X\*TSk%CM\FZnj-CH#
%=&#o)1WX,??)7Q$rpH?$Zt*=]bHeIEAIr7<9N)Up.7npS0G#)YI/I`*Ga7m+i"\[cLQA8po9'O&cB9G`0]<F>+E.O";HlUMT=?\V
%NVGpH/hK,',Y=Nr>c.O((_9d)i4,ON3/Jt%17NPMF9^N!a$VH6?!JJeiQ9tCp`]g$,CJXhC/QOZs$27$&*"+;FSIb"_CUh0A8tNJ
%5KOIZgk)'9U_=?Si4.gU_Q7`)M0.]:iGfSC0E5a%.L=s+j-;HsJbK^rp5tLZ(R<Xji"P\7BuDBpPBYq4UH'#IZAW]7+76s@!f'3#
%-8T9Wfu(u5dh@#cWA3d\^'l&?r!Icj`^HT5p0L<G(V.b(4?^X[8CJL?20,;`JP)j2>%HjFD[[ZE`1AcVLH6YI4A`)`h$-c7\)$P4
%2Wl%`XcOQ_]e,IoS-B[a@)+p1`-F%VS(U<omHg/h3.8A)j9",;"3r.;=m.kkNI>gZ%MRtP39LZ6Ar?<cdSl_hc&'_b"4.Y^P#TWh
%JS+6T)OYXe]_rb<57$BpmV+&ofEaqP_0C3S)@r;c0su"-qhuAUcBGl]d&#V:RL)9=5Ck$JUnR;aLH\%1SeJgeJ.j8k2jgb#BTWSQ
%Wg3\=Lq\9SG/?$^aReHP:c=rW_Tj+.Kj51Z3Jaq4aM`?_T4c-bAT>FZiCY,r)^$jH593&R7Vp>S#DOP1@:d2(+acC^MMF1\kbXC=
%!#1]cS0*"R^/?RnWH/W4cbpX](&.YUl(opHnRQ_O:J^Se^`c4bIcb?W&J3gYiYQ)afKQ,d8J2PJ+,%o^T_X?qrPm3MJAs6RB+P(L
%."b\YBIXZ?!_rI6-/KY$/ekSuI/>``OguJX/P5_t?qTYP`bG8eS^^S"RC#(,$'=<\&'bK@e1u)6Z10eSO9bpY"7Q_SN+[)\LHC&%
%H.*[qE5C?ljeP\$0/E10E1(?P)o_Nk?c2Zr8/mDdjDguG7Wi=d%5@rN=c/!%f>,mfg&2ksZ09Q2h\b(iNRTt+7Apg@+4AtfZ;;t_
%E_l`C:W]kYM%&CRTg";g`l3@0,@kSMN2MT>*]Qc[Y1B*\2fg3jB)GZ"N2LkTbaE:Z-c8!fT^NR[k=R?.i\XTN=OHXj4PR$(I1U1-
%?$Q8]\o<GjcS1DCS5>d-R$=&tLYf@5Nm0Y-L3Yn&BH/)B^?>N_3<)1\)+dX@1+T5"3ApQ324r-86HM!q5U[8.b+DF?;eU98TuUkh
%StRN7mc/8pL3m)AAuNpi,0ceC1s(e'EfsK_>P&K^*&5LR5E8d)*#Ab&]#!SeOuNnk>2p2KLGQe@C7<c,o9?tY52eL$Ybd&/c/.si
%2o_^XL5`h)&??E]CM,/^C#J+%^s4@+.KV9#CL8$KKiL?cP\]\a9+-eAn\Mqh9;G&!DTEu^c6G[a83MACPmp;>%DZ*J(]]:X^it!P
%#HdS.4-%qG_e.Z+n*]$e\Y\EC`t*C_m*kEaMS&jZ[<&c`s/XhrkJMmLo:jdo,!]9V::00Rg:33eK3[?pT7+Sq'%bD@o_1GsaiR_k
%2lO)%K3#H[n,8MUkH^/Pp>>7<EpG_iqh/^&jHb\8_E"=To[Ru"'br[s%q](b59Kp<Hfl//]V0f^SjJ<5]UFRZ+=)sU-OE9!C'5,s
%7pt?Zd1;#iHB8=W\W:n*?roX"re98'kbk%Pp*VF>pF>q!S!,qG94&b"LerV[8;&5YZ(dT??'l]fHsC^4*#uKH@uZ@N$%?R<;]5o&
%po(O"F1@OR2imbS&s9]da/!eg<Q$=3NgnEuHq$\"n/'LsUO"&Jc1a"XQ[QlOoGfD$q]\A[a&]C="&AuP^.g:.-2'caTf?a358>fI
%K9sS@_=t&k[`d^h9mW>+nr]B^cB2_^<rd2KP#'S#&')*m^Sg>L6NC[]oLXHEO)q0BS;sD&J.9[C1?Rq-`:96i64VDF]u6KjeT`oD
%E3^e\3s1t>>g[@1F/4fU&e)mV@";d<^s`'ucTU]:jQM^H?7C6na?]r^X<;o8pK-taQ2nRE*"_.OBR*^d3&d;tEOskW:U=G%LK9DQ
%QF)*nj4?gR@MGU[;B+O*A]AQ/Q6iMKj%(NKJ3!ouCFLQ'.I"ASTcdm*(CZDaQ376Ri%1B*R&!<Z$+p/p&eI&(-\qauAMA@7OqS`S
%8mD_N%\Mr0-mF/,'KB4q[i5)HL--QdF2R=W7(UqSiTHq(J>\4:n?<r$mZ;CM\ElgA$gcnVaK.]9J4&b`C)3mjK2\e['7jS[)`":,
%O[c*tLNmLa^(PJ2l2>&$)r-E!+ijD+-)W$-j(c:<M(Qt4nYLq:(<^1*9TDQm#+O?TO*'E4L:!l*BO'oaE#u1hglT?1)9eB._?N6`
%%7_q!a$n:<6lpKk&,.o/]GD8)6t&da6CUb8"C@I6"OG?aqo_/fXNU'ToAN;.ZB)--!7uZV:<$_Kd)S5^3:p;_[mi3G?%F11O(1Z*
%'[aM5$R6##^emeJ^FtrXhW`t*qEC+,Zkqa_k;BHj^3?C>"4M'8pkB1u&'n)4F_QK`r*V,^HZ=Q=\U)27)D$[@88q0(?@Hr)GZ@js
%84+S6%mOKrXG5jfY0%,<-@G^-[?+(^$lm-c^a9Yqeu!P?A.Vd@$d^<F$_.\62!5/h>1%RUh3YVm`0l7t=)24m2!u+c-?\3`2d_?:
%S?U3`fK4?IMMiJ@%\^s]@qk!WdXf_5/5:CW6fUI@_Bk?qBtieh)b0sJo"!0F=TW7,r;ca`.p(]aIDk[(SneZH1D.9=pR_sk`Y6R`
%F%d,jbE,O1cS&_Ehnc]ha2alof2]nB$^kT@kIl!_Z61;7r#d6m06I3`&-E:n^k8a]bNaZ'kXdUg>HUBKi,4#'5/!`rLMp+,c[\h1
%P\@,fJd'StTN#AR7H<HpX[`iqTq8VrA@>/<cjVXu(<9GoBRAKt]!mH"V;RR4kfjRuQ3:n@jlp2NRH5mg$-Ic[jNU`aLF6f?'>m,!
%%#24.NcTZ(I)ljE$tLn%)%1iQ[DCZWnf'\hKjMRCMRRqd+r/=G'7HCtO`ju?=!SlHPp^6?CV,EjC0#?BBScX=#&:BP(h^2aDTq6H
%P.uCscK!.ER'CGJD8?*Tlpc'9edQ<k=(u[L#7MYT)uD6B;Tt:,6],P,oPA[hS2%f[U^M5&jPRTRn%gb)2ZUlhb4ad.JW,@:8\W!(
%P*M,eZ!a^)"tn2g&9`J.?(f'9i<0>>>,=PjMU>i:'Kjq,P07GZpeB#__B8jK8.H;fd<&OmokS""PL*ie=lJi\SgX8,GZe$,@02%V
%*^_P<6emkmW0-PBOJ4(JK\XWF#@pYO;Ph0RL(h$"\9s/[J;88`?fJatP43"kCO7<33YnIHGf\%0SG7LLSGEKVTq+)mcZb(FSbpM$
%M6$fY(#"odhqPNO8HVX0oLZ?=&&3)3!cS,e4@:uq-Oc&9")"cpb[IZF#7-di7.:@2l:l8)#$gRd-7FY6+<n(^h74X9`ckSFiXo78
%aBa6k4`K(FB%,'0(6Q0T4k7P:YIh,T2bc8Gil\&_,XR'!#i3f6f6=TM`u`Mj?VA[4?lI@*>"FhcXktEBL4fUlQjRar+@i(:n2l<.
%!$l%UWUMd1#jZUl5k-+OF?ft&88q*?Yl,pO->e=Ye\#E__.>uon"fJc5G8a/)>]HEGX9Rh,$_GEXIc'&AH)^rRKbf#ZVJVtZjb%l
%2($iO*(*%(80OEtTYaDejq<a?6iF<^,N$Nc$_\]A;W&6dH/Oqb/ZZZHTi%9$$0Z)882Er.YG`U^(2F.5'RW#l@3*A#!'Rm0[5J+D
%%IXEi-+o.%c2hREB"s2o49bdIHQVk^-BXu?TTCpN8=$+jf19_lVX;V:X#+\-@];miLf766W4p\d%`'@.O(E=<!]SY,LS%Hi(!UA-
%RA)^;lu=0n"(tqF>e`Q2%)B4]"B*6.AP/>e3>OqF`Rnne:QqiE==KsG'rOVV9qEd`DEuU0X4=T>9lVFONcE'51O!",+9G)#;<!^.
%gpaZ@J6[dbUk##S"0d'-$WfMB86hG?L7H$Z-V3ds.mM_3SgJ>g_p8Wc0-aBBi(-9dUlc8a84Q4nag_WdBcUT1HsC'c:QLh$;+8`k
%_O4+V^_*=%K>.]8H<)5'k4P[KCb_sGW#G+d!QTa$/S$+a87=Z?)l3H,kf3.;BJ(N[2\oWXVua_/&;.9Rbeco^r-1*K(FN;rr.#.3
%M:I?jfd0gFCrurnXA9o?AL'-!&l]ar0TLLV_e*&f[8bqT_-&)4!K(t9,7Q:6aF?*+luQhW\L]_<m<EG,==?'Ir(_'qE5?]WrD3%Q
%*/Q>nD[t_2A2JLl_c-1(faEOfnHb1=.o'Q6%uaiL6>\]8Dc=j>eJhcLEVO-A@+-hZ\7`Hi&k&XQ*4lBk-(_duKY2=<OXn-XK_mdb
%R6fg@>8'1?HD`qQfAc.^l%t,Q"?9)DC`O-bdRKDPI9,;uA\Ls9GlM(Ri>\fd%g>o?igH;D*BQCo:@PRZU6+mZf0t,.-:?l=_Zi-k
%\I8.iMNj+CiZ(1\6+!O0%AFYdns5=g@#5'"Q5!uN-a2@4kN3r!I0_gEF!P_hdc9Ss&]n6N)J>[Ep)<""^kI7?M1q\NI22f>)\4@X
%%!ts,G6E1a$n;.Z2ilaKbSoCmcZmj"!?=;djSNA7<h\H[n9%k`@Y^<*HDk$JR4Jq6grO>P&AlIl8\d1N3=05!j9l*t1<#eupps"g
%*8kS6(N,G!p2UuQ!DG-W/WhPQnSJ;;mQjqiZ"51LLXHRCd'='Z83]L5!U)fDr-B6Z#<</(,g.;;9.`X0\6W\`;?>S+CD7uJ`ekVR
%a?6><K88K[hbhJ([J.^V,"ItO'\H<l[XR/QAWU62`Q,5#/gLVf6^mOfDM"q*Q*#QMi!)1<XE,5p,6Za[<$;$NieGqQ"Emm3b__"A
%!>HZL_fNYYV%9$8R2JDBe&r3:i$+4/P<rY1q>h"lPok%W_4<fT#ijUmHd\UmN,'/bI=o?c-Nfjf_]XDq`6mMF&jQM?_64uVK\q*k
%$D8bl<Q#*]Z"5O5#FG3Z5'YE"ZNW[N"ho,2\1b9u0HNrSX7;GgYVAG\c9OH2'l`PX$9*W$#Vb7q,-Fl_^?uFI6MK-8`ZZ"QR/ke?
%,%tZ6V\GniP'fNG9B")&,RPhG#2H-:_f3W_N?B3pjK]*p845d.hSu6e@5oVr*f\0B*\P=4O<?_4p/PO>>)!9l8bbY46ES/&KLpb?
%_A;@FJ-1h<V93+Np6a03':)7;R"\1E!"LCH`4cH1VgLo91N[#.6V$a5c>km_HY>u\UC*>RC_71EBMqC^bXK$CKHa`[?#t6[*80AS
%0XTNQ>q>X$P0!^3`;rO@C'Cr]6b"4XZRG!g4Tqa=RCoJ_g;:N(%>sX?'D2@&_:,L(Gs:9jkKAX[._rk[#4L2g:q2bMRA_'TqJ?g\
%VRSVp,[(s@GJ`LrAmaI_5/e7=HTNdpq^<kE,(e2f36pjCMB(I.%ni#sQD7k@N%\BR=Gl+L&-u6gI0$LLm)B8FnPe4dhQCW)_qJ#^
%2Xj%toPHbWYFlD:hW3OH!)8WY`d9GqPg;_4Hpm`5;$T[i,)HSY55=96O!96-6-h4pq&-+dVo^%c6+e0d0`u-R:r)ONPmR0fp44e^
%'4P:V+h/tL/J3PFdhXu?Egge52iKi[o=f.M3JPEp/rn"3)#M\Cr&hTAH&8XZA&BK31']&!KnPl:cV'qP-t-&)8`SP20u'=(d:5c6
%L,)+ZhKYb-oS.Ron5suJ_AK-92c3LXLV.2ZK/IV0-16d2^6\rQM1XV5eLG*!Aq+"sQ[06t[QBuBc%.#/Yf.K@W'_p5*jc5u&DT98
%9\tCO`\S5?cVj@[(;ir,g:00%!q3V]@#5g;dX7M$lo%!'jd$c(>iZAR.CbU:$;O$fXT'nT(HWVn2n$fU]jpD/O_FUu%go%mn!7r"
%k@!3lj`32n[2E5[#\IJoPgH;<eDVpm>_J'Q4:s\g@>bt`R'@`j:+jMOTe2O<75+k2i+7_'`Q#>58.s^t4"EdU[\hAH%'T_@>K7L6
%:*H-T^>&sULCfo&=36A:c1!hD.ZusV>!(9tjUnmNIWg8qg$nqOkWrX:?S7Tr#94:-[WW1uTjD7Y88X:[3[n8l^>76#EL@iXP`O=e
%LlFp5GSh"VonJW3^g;R_!0Qg6#]F24RPR1qKE-VE)>a,^,A!j:SU0.8O[r<&%1Y:rb@-I'FKH$]Xg=W[:3\>.nY?mraHXQ--D(S%
%G<LA$bDkj09@OG<0A&SNj0M@8n6mfu?GFIKkVt2Udf[aIN]k+6M<Q7p_]mO6p43sT8-KlC@W>ghE=k^7@O]5aHqXNQEHs()gEIQ0
%Cq:D-?:fbRp4tp#`\RIkaKrKJCuf@NJ>,qUK7FM#XDan%Jk:Pe+V\$dn?=Gb:rJ:NSM#R0X[)FDV.hE"D1E'a0Xb*[>AR5p$nh`U
%"@*ZO`^a#K02t@MD[;%%i]uEaCDe#kE5`.#g;3n)js)m6oE'S4O>%XU^</i4dO+dAl%8[4Qe5R&LfhIM?jMi!_dO@AJjCp8(pNd%
%UXccAN[dZ8%#ZOf-:B:U&3+f[8skO<0n@%dCjdW;%LOC<liuG7dLKLY;R<FE$)@!+Uh)P#0mH7c(jd1;5*BT-%PH;aBRmG0_*)\Z
%=(p7$Ji!4o.u'a'p-fS^j9%$W_42Z8Z*Qqh3kX2T#[tCT(i5MTG2SQFpjn>7m7''l:UEd-+3iq'bXR'Ret.Qb6FW0''0N<bNc;i(
%Q#F=c#R05Gjt`\6mnjr?/e(Lo*^@XG-MK;Ve$:O8/Hg:TAcL&k>J7J!*.*9f@1kk_N?\/-*9tGY65b?p)X]05#kp#0[5I&c`8::A
%Wo,q2H^cu6K`RMDp46E]D5DP.4;O!L/2I!$UcmaJI,rE/m2I<!+Xe;BcNWWkk`JSJ"%6gYF,hJLd==R\KJ<gnZ.8U\%ncWiDM)^`
%>1bk=&8`?jel2`T=lpsEX]Phe8HQaOQWUX3@,K)4/+bg1Qh@j3W<fd8#CC8r#BnA%eK9+]]M6q\mJ%8/"qApj^]^*u,#]7)-H[9^
%3meEH*$dEN)"L/#&*5geWuo(L!p>JK>$tCK_gZ1_-1V?WO7-#WaM%j70OVF]FK`6n#4ZZ6+k/CqBW..q4&1'H`;P9%3#Qk+"$c=3
%6SBV+^`q]B5h>VBZ;4\uPV$/Nh'07>P_2UQA!he&$h+hd\m_7QU3MDI7q2VB@['K=2/9pg)Hkl!j=U2j!E011?EV7;#M;8!1d*,!
%L.VM;Z=cK::P=T3(:LYi@L.>IKC^[>&IeF8%#ugL2V?8C<YbmJKYuAM.fiSb5#?md@OkL6m;Nhg0M3Q?!QQtRB0rt/9g\EnEPc)k
%9'rK"(_:AOM[[Y*Z-/,D"4!d&&N0-E&U&R>EPd:*Yjnu/70J?I`M,ld:0Y[![3&T7SB*^rb$^1dllda%\&YdoHihFU"=.]3ZPTAe
%7Od,>0T(JDB8a!$$u#HIl.@2SH.VV\El&QD=^7?X<(`l$$\9cmEY[_2`,Z"+[=lhY[#0[["a'qJ6DULf:-pF?_d&3hi$D)/q&Igp
%hudmG]\(0:Wj1".W:2>IVp7P4+sfCS-,p._k?/hF&+X1nLn#*I4UsA642KRPFWf$nD6\\+]Sh!/=>'h9,_JF(!Nb%oI`9#Q'LDM;
%0C-R(66p.9R(#1'4(d3^+\'BU:m8@ZPa-dA`mK%COYmPF2Sj[f??j1*\E+?j!cT\6a#Kn>2R2aRSIL6tKeQ:/qgNdA/Mr,<h][da
%Vm>,6UIj+J05i&-KX:,m^9s1q+W)8G^e<lF7UYtp4M8+VDBQ'(`NiA2A%uI-KO]'1)f%'^6\i9Y#^])1\ah!gWY"kNET>.p5d$e5
%:^HA1P0E9Y,7NoGp(=BD<05Hd?,>npG<jh+:3Hb('#,N[[.'(:/HPSI-!#]81I5W2:C,*)p&KjO[br9]@OV%q]:89giYI28/DY?H
%h=a]r4bm2a3FMk8>Mm.;bK<_6M1[Jk(n]mLSH)%\KWW6S`qF8C<'e%EJ=Sk<,,jr)?Dto$ZNC5\LLYkK[Aj;b%qX007f3foP8mN@
%AqSnQ%d[EM#Ur-&EdB%`\$X4(qfn;A6"U^t9)Rs0>\GN9_D5%4]!fF[ic4?if9?tZ87A#uQAAgd&.'mr_E/7K"3UG(j-#/Q9sMi"
%Y(gSD&0\q[&eGXG:Du1rf^TGq%@B[L2W?G3cW7C(82P]`'BISp*:>5lraqu.1.6NOg(rE*ggldR";qFINr?f%&O7O4>imdR_uZb!
%1]c4F=^[a$F?RQ[V%-9fCY2C6Z_Mm+M&)=9YVDjCD6sQ<)._OBN]HQ%TL?"@$Vas76QQBss77BD`"*G@+p1`r'#\'P,(0_32G%a:
%Q`KX^9&Hu#3cC2dYjR@#1lgD+7l<\5/]$uf&Y`GaoV20ZXfJ2C08,L$/TDIcJI0:WV^'10O&B29NpRGH#mLs*52.0H'hi>MB<cac
%r`hu4)2^nlMNBoQ=3@\QB.[@&C'S2fq=t;OY(MC%g<(Z&Dj8mjH]UbV-9LpAfpUk&7'Hh?Ni"7BT:U5RAXYm$0So%!/qgUi/Etc6
%]FaN`#VK)t:rc)=Z0/og..:IcR?Rb(Yam-.70Z-cPfL5@ZC,_nAcS[M]$BEX-(put<=c`t=1/Q$`XrQ+IQe<r-*;m:JT3:Sg_D_L
%D!6cbIGaHL=_e?j7U&C+i,*1mp`@1kl4.=]\B6)7mC7+d3-3$l#`jtA!+Q%!Mi[R(mGSk5Q\MO5L%Pg6@]$!+8cUo@,OjEH%L1ot
%)*DWu%u#[Qf6U_qL]<^KGAFH8fs^M/&(H)20*]OC*fl*o=6\rtjTh1f#(t'%(itd;.O.;%K93Oh^NY(-oeA8cLd(+F];dc*equ?*
%4ebH][,)]Gg6XOBaq&9`*fctV5kBQGdX]Z[GFu#*LUWEq#bQ9(8R(R(Wl*fojm_(aO[3g,Zs<n+Tsi40Gmdbp?"dGO=!Yu""&7LW
%QVq.OlJ/3+1/jbYY3m4;=^f/grQC9cX@g?F.JMTP=W+-dXMsnLJ[:1Yq)VtPd]'+"Y\,l_iPS'/X>Jrk[7"**"WjI9<12JV=%_DE
%fZBXs"N,6#"5F=E&5*ks*EI3G91'>kl?+)^RiFUm-^,%U%*I>a-]-i&\..?PUS+V:MhRX&]`9qD$mSarl%_`o6OarrP1S%]>"EdU
%D^%BNSp['(J,9d#_Qh,C>[s]^Nl2C#[d7Kq)eb/K_^Mj@W62iqjiD+\89A:YTZt*T8)%GT<0*6Opu-fJA;H5d6X/&Aot@!<:6X!P
%KU[^`7_3CrQ645,o%$lU9'K)H<Ih8Xg8@DECjmkP&I';_[jk(EqM@fF/g[+kA\lXUV>eAQm[L:D\u*X_q.-dfQEbV":NcAVNPqD@
%U/a,#1fMr1EId"V1(aBs39U^PoO-XINCuK=^Hlm#9mX$lZr$Wr`X1R]Z:6s%s#*L`p/.AA2M3lE#CYDg#7hHq$2oJE3_R@M&2iN?
%eb[Fn?sg=Rn.q6P`aNh$7K$(u$Mb=&>`=6nE<YW)ic0g#;FhP1=^QUN]bbOu8d;B'95Q_UD8.,5SZ73t</4Et:_rNH;"H#+Q;r04
%*Qojn/Yh_f@7Y<4pO&Ju7chI(3sDVdh+?-0^`?3CkA)_YrjAlC]N$M0`]i>GQY1c^"PdmSKE=.>ZlkkX#5SRR[1>u/hbau:^iO5I
%E"+mXeq`YsI+[kX8Q/A('XK9^E93b*.!doL8f1.%*dtH<^8+B>9s8<#,F?)0M)1"Bn!OdbroX+5'Ui3"d7'PqEJ/]m30o3@$t.GW
%m"'=/d<NI.?R;77:L)H=()NUA,8MU$FKB/t(p*#@!E^rO$UV_+2>[[To-p?D!US1367':cJr?Zs<Fo]Y3J"u-dS[=h<;&:phbOYW
%0W8b%Gc<9GW6gVn>P<NH"nb.idXGd3aUE]!luU7Y+#TbeQ:W#LH#$qkgsWR@5/*dT;#p!<kIqg2>8j^boU'Un!omB2:o[NK+CbS>
%;rI>8H"0CDKi6N8kW_'n069Fpm)k5aNuILF(P?=Bi8I!rF"q#<>u,D\:*C^c:lMNY3\Ng%.a)<p]bRG=FA5/GQGYLKeX:W@!eh%6
%#1QA$MEN@0+WZAWqFE\(q<M*cO&5pujKB5BBui`(2<m"ZgU'F@/!nQ%<eIYX[uY;icVL-dPX$=I*K"BdWf&p"4R:sZY]^6$<%4X,
%B<ol`<1V71SS0JB\`aqmdmk$_nZf)-PN7qj=I$_+p+E00jf>OR6gLktTrhiS(3]a,hlRK)XQpfXk6L>%IWsa&0F\pulA3cir2G^)
%:,$rg\h%-gFc1Mh#J?46'deP>XsBD.d%e+$[%5:@.Q^L-"1M7-LKsA;/Td*@^YY@Xqu6`Qnm;``$]dUh3dClLK8X6CWX=QTlH98N
%gqJ1bR4GD/#?r4/5!+umhZm9E.D-N2oTVcd`0>:52OXqkH.L(l$-Q<'3Ofs=@/6k?.m$3kmo5g+E``=G*sI<J5lZOdPkGnG=]C">
%CD$WQi)IQXDiif$!!RmK4j]kd2P-0AG2HSg*[P%.HIc`V:u*@RgAn;Pe.8NkOPe_=Qa\$7M[9*&rpEkdNbZ^I=pdu.%G>_'n1Z;X
%o;E>*j5I(lK(__%hMZ^?Pis71ql"WJF3Bo2L=-<?rag5fW[d>Po8)"Y6"M*#"<;-6SUREGHt]k?[&bT,SqbtYSg\H"5P7*C+']'1
%CsiLuF\/dWo$!=*;SF2m-MD(BMLKbCOW7F14!Q4n.:&r,=k01M)V]@3U2"eRJY=9:0P]F[9JcHM6eYFNFo&X9oYF.$-'bYWqtVp&
%7IOqGW:!N:gfH1K(q%Hg&h[^Tl@=HO%G'T4GLSY%*](qRa%QlgCs;U.fU,6qChaAWRJ,S>%;XeONmJ+Dh>G[;6q$hAE:K7u6u%Ip
%m=QuY4VRGLeA[%se\%pu[CI]\6h+?:gOpUKV"nC>3C?S5*3-RGTm%/Z1NJEbc,)6flORtUFr*>g"LS&]"o0d![_>GS>^\:6G!gPP
%`E1n?=\0==M;@+B,<TJDS.?%5?oPqtp*gW(/0u3W<'d02o1e+M%=dj6[V)84\DLZnlY&;QOd/Ge>/^oM6U`U)<%8r*DR>"WSI1T;
%@hgYR/mnE2ZAp2@J5?P&45.lei'Y>J;CC4mE[#"kS<J36/*`'#1:jXh6smUbje1r5fXuVrjL_UQ0^?!7Y#4*m!bWtU(01-i^Hf8Z
%meq^o[aV/)8:'^Ef<K["InFkHNS)-qPdtOBVMA.;iGsl:<kZChTl/8k,+c-U3qAIQRa<@td?8@qN1^DiU078IP`D&[3R]7G[Qnbk
%1FpM[!j$V+MK&`-ib=-)990>E[@t4]8V?HDW%]\rX,96WIsGOO`EDeoo&DGbV5iU#niaYa4ns>O3k8@eP3&T2Tm]bsBpEOb1q-8.
%!O!U9Sm<QG0u%H)B[lnqmZ7jSqR)RWSg0TQLF?HP7^o"lqYK/7a!c<Nr,@Wp1.)2\%jm1'l'@N+:1NRW+X*\&M2kPZTk_^1kk("i
%)A-NoqMF:sK3E-lijS$Ag-T5I<s1l-W8e,H<_DoK2o8<S#Y5B*(T)q@,1U?Hj8FlsjhX>^1H)!0fK[/+*j]l__1A5+Mtfh.%UH5i
%!,`.t'k!tg95'c5MfsqWp]s-J];+(M<LK+A547q$cEG/mZW#)m3Ag\T/ZYB.PWjDd(,"B3;o3TepJ[O73TXs>\%4.h1.#GNm?2dK
%RC,&efW(XI^iFt#((oO.ct2r<G4e8'Uokk@r"TuufBP`(rHmC`]KI?0aH#fEK4O@Hku/=N""?CIeq7'njqc.6.[E!)rFF!HCk:?>
%@q?!ehE\qB^i2X7XHbCt\Ln9RR!'jrO0#i@)T8p"-E=&]OHMNgOu6LOWgl(E?jWWjT&H+):ejen@T%^^YJRisX5$,Y6)%tlS\86=
%B6X'gS,IK0`#Jh'@)1'sFUmV#02Pu[gdBH)<=TOdoqjQNF_R&@J5WOFLD?S.AG;ODEr,0$V&$PY,V%<!fQ%fABLd>(M:='#>h8M*
%JEkZmaGOO>A>h/`h<!V<f2VTB5ZfQd$*l@\3)A!8SNh-R8NcEc6>$V/&$>9+eEWZu$,rIGAL)kJLCe7(budST+qGfL?MeM3"F8e`
%Z]<+c."8F:/uNes*4@sPTMTf_+`/pE.]E;o[q@-3k!9=3Qi_iFP!+/jJ2+*JZPn/SlN6!/al,cZkooo;F?"6kI`AjaMTTmn[h'Pf
%oiZ/2iNh\UQ-$F+]G1$KNjC%+V18)"@\WLs_U]V"0Vt/!4KQsSh5WZ3]HCltS`r!oJ/.I9b?.9bYbDAdU[?'7$`qIkKU-[`,?aq0
%?Oktk$"mb2*%FGQhGBHXi/jbgYus\JO=5c!M6`?GTk@\`.\IP8M*aLXO/Sl&Ah,Kn3X$",g'fW4QqQRiG+Xa-GVIUY0XsQCC-CNH
%:tZL#IY]e7etmo%C_HRhc.ngG<1T#2<SQpU$?0nrVN+u`.2(\5'Y';.AdB[CqUC57EHg[K)m<MV$D\6u1U>3#-jI?,d*0,.=PN+Y
%2!bWoCC^,'l%I;][CuhT)EnnR8&VO"dK`L0c+,p12E,J&&#$d];6>J8K>;4)W+ph?E\)A:],4M2(rp>X?DJGF::?e,da"c32Fo#A
%;C1BP)3cYpLlc;/1ub`#Q_8r!MGpoDYW24uLL&DF-:^o6)[G],GcLb/+C`CcDITpZJDU*s?i;49>*%<')!UaB=1k?2lW<c'qSh^5
%"Kl[#D#HWIJL$ZtS=V),3P`7\NO"Gs8psPN"6Mk9d6YW#>0`/A]f;m:K=0_*iZf4:p8cklQ@B#j#[+2cRd`0'/"N7d#3%,:3"OCj
%6sro<Lkf.l<eHFNgd=$/<N`T2o+C,4deXacClq"a>@@!PJ29##OH6RV6>ODN/s(!!hKlS9-+>H/8*.kTk[9SJ<iPY(4bD29U\U9T
%_Kr_m8\gE;E8PEod)*a>.7]X$V4=[j\%hSf&jf.B]t/IrkB_>Z9,JT$?UTF`,brt?()XZp`m9Hg#t]-b.8Gc$DkWZ5JM"[`l@ecU
%KJBHV#1r.s@r'FE+?^5EW#VkuE1'a6:2h^Q`/2E<ot+2h&*r+)5$GCZT-Wd&ohR6]nC"(Z"\AeY(^de9d"[t7D:5[Lao/qZ+2iAf
%p6!Fd><"Q$G@4sHfl*J+K^pUgkY->GH?-#rPNdrT8sL(qkH6.nc<d#<_'F3ek\o9/E!X(rhn+SdftMs/?ne=C0gG_2[Kts/7+ltA
%"VfndDKGH,73\.]P?)t(Tt+#m;b%sp(A4b+[X[ub7]hcgD(k>A1Ug7\T<*BGeO)rO>.Nu@8$Bm.='i3b'CO/QEBsY]@L&jqegDj9
%3)8"9*EO5uo%5E".,hiCedF-<3u.F;;+'iAB;K)e,<0*t.`oXqRpeVu=#NSactak\=b+?KFRV-?<RHX-_oWAhAk=3,C8l&(>_hIY
%HFTtM"_!J)p;rOf&>c,@HMBQ;'VVDAKiM\V"E-0#VA][=+\8EDeC3(rJ/"/^NZI&6p(M!;+or.DcJ2*(+]h`j,sEH!,++9u%R:jg
%PK>i],Hf2oX5jpKnf0e1b!CT@;YMYils\33rR<62e`$E\"U'u?+L2;q86"RJ-UXQjqO2];\.h1WL3NUXT`G2\[^R]#Bi>J?GjqQB
%6'[3*jAg4B.hHDLe6j=TAG7[sjkk/n[@>k!'XMSeC-qgXe`is3!)+Sm_9q"5b/Q"o9/rVuLciVM;cJ_MY9@I68.;EuGoeJ])3(dl
%*.!E=-aIe7g04F<lkIg?U4tb0RliR(bu^6K,*0CNVb9aWo%c._S`=\=<)nKUUGlI$;@QWA+E+D=B]r9s6&m1gI<7sKjp@<%Lu8O[
%,QOslEKn^80&%nu&T15`<*Dn@p1h0rlK0lK3ER["9$/3W+p9aX<Q.mq"gp=MW7#EZc#J[&KO,YO#X4h^6-*Y=LgML575>PKmYV!D
%Lbcc&JU6usMr_M@nJZFLkoNjS4qp-\b!lUqN);NoaH(*^WJ%)#MLEeXg2Gf$`BK5V3%l0J3Kk>>.^WI7C%U,u!%@9<BPm.AHa&X*
%Qd1>'(*QtK#oo?=2-BLS#>SV\a`0qF1FDr=V$T`4X'JYn20:4_!GG#K;,Sbh2f0j:V$`M6Rt.)1hFsQQYTri:8WS?#'Tj*1A.mMC
%:ThM>6&o$Bj;$iJX+_^:-QYA&5j5Z%7.AqqcBEhdd7i(=`HXCj9V*I.GWXI"l&M:pjpFJb3cXYZTE)FuNFi8i`2B>[A6/*kcr.EW
%WGdXRb'Fe%Jd+41Rj[HZ&c6gnnl5BTlJEb:Ze2qKQ\R+s1KrY4@/%$C@U#;WN7UH;e4deOZ*Lei,!1P5dls_Dcj"GP9j7-HW^"^C
%Qo$NAJ/i]aT$.Z%3].SC0c;A0?13n4e^1\X[L.[hFT_5G,J8bWH3Mo7a`tlJR9EUQ1"f=:+'csc='of9L!e@[LTs.BDt2tf6PWL]
%Yu:7k.`k2%85gUM1e"GJYf3*0;H0V%$/77/#>.L\QpeH;m+`Q]+j?Qn5[rl![np/&R#Q17JtGj]NI@)JYd?B1O/XLTcpP"#:TCk#
%npF0L<;?e(n"Ud"5n6^>7TjTNVdbA_:IXnYeWQS,9!t.g9*KPrZPM9Jp@+bEYo*_pcGlYPJ1$9+k!4Z&H6-$GKUYOq86Qa=[B\;E
%*=8HGUW@P50lXT>&@73#1]*@d7E:i<.5G?I+3_?ANGO67NQ_F%6ro/`GSDAo7/b,#.>W5@&:K_B6X<n".;/'?i+[uD>JTQ5JTgWF
%aesY3+3$/gi2:^hHj"eNc&cVh<0>iM[uMaVj3(:sickW9WII%ceZ7)8JJN_ajau!N:DBU>PEL_1&[jD,D+d'U>^mFZW]FMCo[Mrb
%<VRdL/Kd2D=A9l/CVIm3R\N=]/PB&lZlV@eBo?)!]0D>k5$k"$Md3`!nf!\HQA3JlBP;f8.K1/![6W;&9>6;tD/m][GtSa7JO5Ks
%V+m)Zr+CtW*(/#XYTle/Zj[7UXeFFDV8kA0j("Ps>^#f(C;`PVas1X[X6P(K*brk)=BSC0LWFd7M]X"W0N!ZXLPHu\F8"OfL=U%/
%,,ZPX7h(<DA38aa3h6o2l:5+Ef<HNndH2s$dP=;o?&>gL!'@Bf.WQ!sFgP-_ZKqQQUp=3WE*1g)b9>lG%6e._Y1=Y68CO[;3QqTH
%Y"%EBcT@/YPftMKrV>l7mSo`Y'"4T`0JB'-JE[JG/P_Qjs2d.*07a7N)$G(iR,fc&q\@b3%M&:&&L0J+am#$jJcH-G]W[k=WqsZs
%n:O1WUUU/DN\BPnbE:FC0FHN/lTu23ljaS9M%2?O^4.7&rda1Zg"<cdM0Z'V*CkIiddu&(?g0TGrN+>_e%sXO*E.%gID=@bi3tK^
%dqXWXI.5m)a)esZm5&XP)49$i$YsVOTW1*@r=AjBXRf$Sp@#<Apq/W_c#'78S35MDg$AULH"m*?9g;&>aaVD[c"B3VdQ*LdY&#$1
%'J6WsK(icC7<mX*B9h<;J+!l(q"?'(lNI5DH"Jj(oIn'?(mjpYSH6gD0Q-_E&d+5`MTi$sQM#7Q)R+$HkEb`^j%B2X<P&m,Bs:'m
%Q$s_GU/MR8(!IR[eC[0?)&h3\?LR`0f']sm-#Hu1g0?HTb'oGTKg9qD<D=`)HFV:iU\)r%J\IP,prS4Br=X9tF(iWd[V&E:Lk$j^
%T`bG%rVPpE2_ljT'^G-k&=<gpR.7Q"N`$FMJ6sA]/RIs[2CKUWT[6q[g!$Pi3nW6RD(6<!faBpO,)-#>4QNtEF8ke0k"<CbO7mi>
%?1?;r%t$>4mH#UsbST&dOoIP#0=X'9^RY/TkdOK?4$u2XT&F]UJ#;1Nhp1a3V+<hk>tE\0^oBmI-+Mbnar\c71]Q?WXc')$<<^j*
%mD4^ZC!bJ6P58?(2.dk6$">9Tks/sbpGdfr"cOKgViu/lh"(2EDrI0a+H;-`q'2EZcXfs%-;cg6PXE0Eo[$M"%FM=EmnD\l\5E5(
%SpQ[+qb%B#:i_u=HmNG&CK(N?iE.<:p3B/\Fi0Sh4b!;9-%P3T]I@1P+[I8""IQ*"Fg%)L9P<dJh'HDBr;d&YU9mV8iDaj?M<"lh
%\T?8^EQW0_,]=@sI,!C+LuV47_)XoN=]>e(^9NP1DkjC#jd[l?6E$e]>tVht'D3)4?q,/B*e'-+=%<CrjE]QjW\.>pR\cVB;F0TS
%7fHPCH4-f3iAJ[%o(1V[XON]5A`;FTAS-m[V.rTel>$t6658b>:X+_u(lTpTlLdbJ`,7IOkO"#Ir$BQXRG=no<[4nX\pe?_G+ZOP
%<Q/=-EI9o;Xm-fJ+,iHCa]Dc>oT7&aU=CEtb[8Zo@s+dNH)k8=2;#=&fOFa)'TN'4n]pTg)+^jlW)mR;C:NkMa`Y>"9[54gppuAH
%7r]!2r35u(8s#N>!USs97aEmGN:'IUhUbMg%t6`lNeY*6d?j_k:QQ(#DU7"on7&!$cZOI0r,:4Z`AP5tr0Xh<]Q^+OQbAn4*JKD]
%CR;.Q*IL!k:Mh3!qAfH_?XIG:7phlIhoHI\i_ORnjY&V_\o$R2r4LbqD`>um;4dN<Ae<3<M"VF=.q`Q8(u<In\0_<(PLR-CRJ,ji
%<m`&#s0jZlCI#c'#Tb;CAWWJ@$*"<uG,kP%-TZL8\^QtX-+O7:h!F8LkK_KEd(\@GdB)$S5]&;]ZqLjQ>Jt:o,(SCSB[up'DIdOA
%&p_EW3Cj96(j<O#gO8UHlo+T>'%`od^nUdir,[k^P<5/203Y;%9CJfSmK@pPpF:+:^[ZWBpU?GP78@08TfKfGO`&%8Ik:0eDhnf#
%OVm*4`KE/4_a@_>3P+RLFB,pDQmI3n6O5Hji(07AOsQ%D]GR6V>JBX-1Uf@<T<F:Kch'!Uar:1I?%;K"1FMh[XaWB\fRZZj46*Va
%BHUr:5=\3Zk?%-E0Ccr\(H]4>R8<`B*a@WF%F1AH[_\)Q^N'$d4LQ2aFn@WufC\8#H2D\nch0!e]=Gg?H@2Wop?E[4hmef:+.,-K
%fB`>sc2#?G[l'd?KuG]aL`@A"!i%iW;6XOUG")nDiPBS**oi'C$ig'9'f,V3ekf7U$^Xs:Fkp1fqkTMK2.2eB5A&VZ^hbq<d=&,?
%4f>g"RKl5Zpj/X$d@c2u=`L<7%kYj"r8G8BXNsKTib@j,hb\41J2*Cpm-J9[b8AdjUU?SrYOd1%Fh_n'=F*t/qJdOFk5'I]I,sjo
%2IdQMmcV'A'AE?_I;JM@rsl(KhdX!le_sg*@0k'0/+%t]!8hVZ)sDJG#JVVlilh<"4Em!3_Q8Op&o'u:Y[QA;-bn;Lm45_%*N'HK
%HVV?E;s?)d;u\F&3.:Sg/R:%*g_.6Z?+BXCNp(qG=Lh-E=mHR2h1S')`CXWSq(E'u(HC;bK)$@9JNn;8.sc0Q(M4f.!NA%d))K(g
%'br_1-ZAL><uC(MeBHj@"6OYmKdLcY&bC6971Se_/\2i:@gtkE<c-#$["\pM%3H;OFuB'_BQPWOAjk'$i\_iP;"#Gg(:uZgh<cNf
%=^gfD[j!sXPb!\%PgjkhAi/`P4B^lp+cBAhN@E8U8,%eg1oN$Z`FP\O[_l#[gk'tX:e5CXZ`^`,lg\:Tq54.Zcp1Ld2f:Z$Y)>)&
%iL\%.jm*c9k7B<L((kD>P4F&5l\L4<(JaVCpbj?L)psG5^YH[??f6l-j*(Ul0`af,.*<6A3IijuUfe$r97UeZJ=BbJk#6%I'Q>oD
%e@X79X;V`(_9Gn)cnb)NXWbu_=f+7m@b"bX`lkbd3#>-(qT9PsPCa:RR8*eH'FhI=;+7rG5\CBGj`(FKOjQGKcUQ>u8?3=fS?T7C
%(=\*dT[=?T3m<2bf7`dP:)A97(!$=A?XD+I,9T1hbn'%7&V-M5oLCn@#l.7X",7#3Z,n-W7CY6,$nVp4SI_%kM55tPmBmcl15;Zc
%%*Y>Orfb'HZ$@JV0GqA4L?\1:s#KX&IX5t/B=q,%VG*$g+lnnF18.N<L__X3N%%n>`p&l[5,Rt6,E(X(1jLCCN5YB[%/S*(Ps0:4
%(`d9\hf?0R/#hdZpt:AuFQ>s:=B(RZRj10bj)I-^X2S&'#jo&j`b>q-V@V.ZRc`mOh3G.A^<nimE'5I)Y0Oq0DgO-h3RQu,+_efE
%.WpTZK8t#D4Ci`3kt,^q;m?Id*%\>MS+$F:CCISM+8usUo$r\lFl78Ii9$lT:tt62%l&!']QQ,<gE)(A*4mH9%a&R^V1G5h//'jF
%ST775d+h,<`[OABYXS(ZF,!["67o5\%-L#!T]GeBRjOD%6"m<-OrPAbo=8!jWWpioK7Rejk3-+7X4uE6i$8k8KXAa9"IuQl?W&I&
%U^pWr[20<?7J&sBV%La85N^>!3OEtDrK;;R%U\a=1uJml8tYjr9<SauIlVua@>ID;bdmXJZmIH@OqXQj9Wa)CJ^TSY5[mA#6\IWK
%Zo$3j9-i?Un:!rVYmE^r/scJANQ_mT8d&%$FqOq(;5*dGUCrCo`NTt[fFJU"ir.eWOq-'i1mQ/IZ+t`<qoA!DWfDc<BjaqOAoVgi
%_gRl/6.+/!!=4Z^p/IaA:[4qK`ImJhA>B"2B<?Jg\%6.e9'ERVj+gg9*!i:3`>DlKTuEfTQo:ZV<73!^+umKfQUDnHel7XZ=J-"f
%=%:n0IGN>ce*kEplu&;G]Ghr,253Qq&cuoROQLF5)bmEP#-=P/eU=Z3e(16(dR%O[77"b?=\.hLP.$sghlF9Va!^NqKd)A1la@AG
%qXi]\3j`L5Daq0HYn2LDDaq\ZFTu/p;%i,X<+0>P@S*q1&k/-apgk.p\OafSh$M?=.Ot?g+F_jH8>I-+$4a]QT[u't["M[GW9lLN
%BmJ;!'C"R5,P=BGghN)b.qWqAF3pS>*Fp>WoB=bl&k9gA9,^_7a)]#&dn"1:%Sq_.AL#)Za$YbKcLmDKLm5V;f,iFOg<%A1&b4t]
%?DecaU2kHX_&J[1i$8hR/nuWt71Cu\h)[sQTrfJV1/#4+?JF"J>2#.r\$SNjV3C=mW0et++:[ZrYm8b)&UiIMTlc+pX*8)ueq*>2
%U2+3d'53(Y@Y$]u8i1$)idN!4$br\Ak$!=;;*ec!Y1,ta\r7=p$'EXVj&/4g1_;X+9M]SNPYeR-;*X`[KO?:'Tt99b)MkLnqQ#Q&
%CZ*Y[3O^b-W0B7kTpJAbW'hphE#!g+iS^!M0HiWm&1#!G'.LXN/rJjIULkM@)[Ds)T")Xa4U&<SB'f[9"q_._5r82,C24Qg,?jT^
%6VE]n]327'f?b%"q5^:X;-OUeZ3uNp7E<:C<j]!;@#`&=%dq6bbMo54Y[oU#(N=IIo>H)d2+ZYV;na)#5uUe#htRf@B-;L?fc]`c
%,85CF.gKY&<VaLa3mn4\#"d7.?RT>+\tLWHG`>2dUDoYtO\[E9?-;E"7NSIYlfj-:.cHC[(oD='Wg'h>@CF<,YS++?KMh&-^%E/u
%m?OR7?$&jeT3"AU26oC,XAC-c<(8Y9Uk'L'r'+\5T__Fe!H*Pm&qPU2KjZ%^:W`H37fOFms$S(S;%gqr#=`Q^7)<8m3]O_s8#F_\
%4%dsPpZ\l*,cOj'<W@#G>tq8##7ai&e3lMkYVhnn<ZXu)9F.K;P_R,M0-E20cGrCeYoH=B!=oZ[rh;G5jb@%H%,Q,.8e*B1M("61
%nfTu]jlt,Y9$Lk60Kr]h]dBLiP?Y@s&bD\AaL29^\K$?d^=AQEG[;%AfF)K]gHE185XR%ZYcF^heA+Q@Y>HAm;.$mHBc;Yp?M0mR
%I)UOilU2b(Z.H9C>Nh`l)hD#+Y%@Q(3cH5,,n=Q:giUHE,$ZO5gG<#?VmnQ.l2l@V*rJ/XD(n.G[#";3P9IZGB$P-K^.hA+5!N9A
%7]N,QFBQ4[U\Tm/@Ppa0UphQeHtT]B<-2;M06UC//hPSF^Z:C*f7n,'kd&M$Z+W5;"&Jd4PHOJXrB0=C:V5<O[eHI[53\e;41s$C
%n>'LjVR(Yd5u/EL0-B4BMn\ag)&AHuA%cnr$-tI_D2i(2$"MRXl]k=sN=95?Ok@`4Q84V_`+9%]=iu:R;Pf@pC)I')8/!lmM-XG6
%Pi5-P@Vo?V[;eN`S.d30KZXVgo"`TLG#.2sb4mLpn;J8H+ct!;V@uSeKXa'S\5'!,'>j*paZ62F:5GT"#&/p`%g(-&gImd,#Kc5&
%EVNP'3`E8sPI_elYuBcN9O`@ui_C3"Dkt':$1Le>Hk7"lLs*p\W7&h+Y@eLm7F"9j;j:Z0pa0e)?XUrNaH$t)cU8Fp$,J@D/LS]o
%3d+KTc=FG+^$\bM4-BOaVSQK`s'<TW5%AOCXVmsPEXeO4/16S0agH=^NLiPZk>h!6m7nG\+s6HXIQ,=V-"98dW^VcWd8^9_e4NWD
%qUd>h"049nf",:B4LS'P0;eD&r%$b!52qiD<lWg0gAO'teeQ$n^*U?U3],4pb#F*b251nGa/B=9)5C:#Qpb=/=/&83CD('F>QH47
%b.5[ZjJk:u3mSr,PO&,lJj?;O:o5m&l4AqY79<2.+*lC$HC&a%TTbUs.HRR&UH6jHi,mLpq?XX/8NZO-:q>#X?cZK6);CYBRMrFd
%,O4aLTs>E5iZ5iq1S:tf,eL+UA-Uk_O3ejb"GRO,U-u3KM)ZC+CebV6JbE^:`lU5_'!e']Os_EKadHpBI[_9#S<5NRj4-^-GS6mF
%N6gZZr,\\<*uM[Zi0Fq(Ab9@ZO''7X2KFuBggpf6fuSi41SuJJC*Na`cIA.6\g=_%3Bpb8,aZm&jh,[AJ_eCfG@e[=Mbj&hSG+X4
%`(7/"&Fj<gCai^q_Wj%B^O7g;%XauuMs6LN1a+6[+Yb"Y:(p7LOV0LK%S[7!F!f=gZ?5.bc1t-KU==ikFl6OG\bZP*M9ca[\;F'-
%&f%sA73["3k[N?2B+-g?R2AGsg+g`s,U+?iC*AG880U6\X-=lM-AgqX.ZT[JW$G7kYDOlLn]bCJ>L_DhLqJ[=0UW>?WY^hsMIc9&
%c]nFESp)s`%4liN'jjG_Qgjhtm!f<B?I"e%o''_mHPnnP_VpiFrJdn/$$Y<m@kcJE+j+hkSq*$+jekS+?T*83?rJ=i"@j0JO^b*m
%?U<h@3.0J?c-^3'@V<,FX!(uGeEF=HNDpVNm`HmX7`Rk=?5>`gq86S46TU5;KB_JlBo#ep?!9cQs"GQL,2bo!\4ld11G%[<UA$iN
%%)%$P0tn-m%b95c$)%2`d;*PM!4*(sV7)(_dBVF<9!q:$capq=BXOd-#Z<N/.#;uUnmOR[?sk:JX)$aAq/IpsES5^b/U6\o?EG%.
%:FGer7QVXs.Li@FZ3?%>q7s7cqA\.#FkC0i5V:GGe4oY:?DDg3#,Y?,QJGhDV/.lc,au@NJ;insrIqpf7^SE/$#ODX3fngq^2-Fs
%"UB%@6!YPY(:.0h@P,S>WVrM$OW!4V;?Fh[kRr_QT//\g3aSZHD)7W*(<LqRrL@RiO%Rj2jE.*ID':o6_+2<+_Y7\l1F,>S]Ve;,
%:oDmn6Y*;-X^3,<);RMkpu+'u&YD+HLV/Rn5A#.#ZQjut'XGDfmS8d$0Uma\'=-;ClmP$OVp[lKL\.CAb=@/G_4?ZQ/e<g%U]7B&
%O0e-/qR^JH9!0dd<"!ZWfZa3cIn0T>9u`+K2O%mTcZ%YT6@O]i#b)d/e2R3K+BL+V"_?d[C02utA:\i_,`EgeZ!FmY'0aHfp5oFX
%80-^5g[,F;]M(oL&H&kr2kbK;'u8a8V8VaL;*uT.9rVj]:PEQOPW?'eMikiuZ`Y'tAPaLV>(Dhig$j[*6"ZG@DEmsMg"\Yh`S2?Z
%c[L+(-?nb`@3o(#EEi*&fT[.fSeB[D##mQ0s"0/8XXBQ'9FLjr>7WofOp0BqZ/&5fhR:3FiMgWd0i3QDS7&!0=JBu6Hp3tNF[)T:
%;!>m4-<KiRf?MFaXW!tAP)WRrj',h6SWIA/-[/]$@`"Mtma3>Zc%No-rH1R)\*DgHIOO9[kb3mU:0-os]6!IQ17Q?/gXBu4:;VRY
%/M;Y8kc0gq#*ja:dVcIb"6cUOlu@&_W?/GOF.tLUki).k%o"\FH'k<tgYA3sT]sLYY1XD6IlG59R.7Gk"\CeATH!O=8Xc"?8'-YA
%Fhmb$V_ded:"fJoU,b=u=_s-s=J?:-MLG5?3O1L7rT,dI8m2G5W3D'OnWP%l'#X79*(8A0Jh&um$oF@7'ctQ[&*<l;>up,;-j[D`
%8QD['8M-dC-rk*r.>cYAa))D":D'-4$IVTBm(t*8Zd]#=@(4`2>J*[ZA4[Em&8g]D.X]uc(O@=C=+cE`En0VjC//nqdj(eaI3`p7
%fIuaX];O7[ib0nTS7FNXqOTV."pcj(d_(&@1K01`eh]MDm(?>0`XiCXrPs;f@cX`<'s-s%lA>eP^0l)m(8=u\#@-XIA$^6EX[.n]
%eE]_<]bil!CD/NVnKWE,+:_,R$pkE;gUX",P>A[=g@S5G"pT<9m4B#WqqnYIX#($LMmhuG4A=jJ=&R?iM!:?/</9PHWX2)t"$C.#
%cah.Ti$de,#c%[nMHV<VJL[Qt(@iY<LPa<@j2;kRD8LOK3@X$42SsAYh`%Ie=eJuuWp7_hdk@S?[!WI+>a]uoT^aq=^nk4S[,d+e
%P?/u-_$I%L5ELj9)95PIda$?j)s(8GIZNTTLA:a(5s0Fji801!]P?\7iHgU@9n[d^"lHe.?'Z;WLAo:A^HRX_RM@3k6o(S!f?_t6
%0ohu`iBUnc6_AbSCC=!PN2X0F=nUGuD-!"_>Y\49QNG3`ieRdt!u*",EUG4e\$I0UY/VU?c".:>NIDQ,*#MN^E3U-3VE+oAm]_s[
%0m"n>Lmc/V4;nWCOqP-`*Xa)jg%Q=/9t/X)&=.JL^:oAI5B-SGd063:.,GL)(9%g#PF,`r<K%K5W\4!hs3eR\d?(K$eW*A^nQ.kU
%PV"g!LZ;Cl_g<[8<.b/^Bu&c$kGZgJqpT$[ZnU2"M!r;M.\UWkO#aV>alB?<IAS0Q)p.3?HE!TLMN$KI9g]oT(W<Hu0#j=ob`0F,
%.UPJ)UY)BMa\n!?e'bL33(R4.\pu*uZ-CBY72tI5oj*OP0a6IV7t`GaUo3@)oc;6-V\s7'IjFLIm0pS;ff_`bgLiOKPQY:JK/ng@
%Xrp-s)a$+=.JRrhq3K>D<Uks>_3c">TK7j4Men+2D</bhfF&a18#q?T"jRlNlD:Z!AsN!tV+0W^XTG;LopM^+0)'>,I0U*Q!Z85`
%hR<\!;TD]%F;g,ZHP(pB0pe4b7,GL7g76-[d4:<D)H@]E>uB"ZL3+3ja**&FkW5Y<(^8ikDVSLV5C[=J3D)EV)GWcLCIn6(&g];^
%f40M*?Jp#m3CGHIg(XRUB*t3@_s.-1##sA>BOImKBC@!jf)9Q7+4P+Z^8hbs:+RgV\=!5iliInr`aReG'f`;&qNU1j$2,0a2]jZ-
%1TLGY5.$e!Pp+]<qTp"75$Y'=$Gq`/*2cXfJf7PdgI#h9+_HdiQH4+5`))X[Q-&(gI4/:tPQ5==lU/!51E)^@#k9<sS0me=()K?P
%'k+U$1btl(\ots%I;E:<)&9;E6gF#JBN&LI@W;Bs)OWo5PsJCqQ&V,@V2"2@Ee;$-*`<kD6ecuPDK,]X$!uEM66DY*<jI,:@Hm1i
%WLq/=r%))..bQ#V#pB3CclON-Sc_0t:@fiAZTR/ER?^X'BGtGnBZO>'i[dk7?o2`j)\<e9a$tQL7Z4ul$WN!u'T90,"<qfG%N?M%
%Ql=bJ>eT:.(ltO;-/LIHD*gVE&YF8./IW(N"9iN_P_6$hC,[M9?iO@&$;b"dT4.cIiFX.YXjHU6*^VGk%=q/NcefKHCAg;ud6h$k
%;l<J4OhNiG%F+OtBrZ$cgXU;d:lR[5XVMj#ksd(*["2[A`GY48ksMd+.EM^_70AO,A-pW6.P/C_2k8g-R)r4O9*=aFh%@#T')pJL
%PE<O4^E[pN<T#1`<]-[01Y`VCNW#k!m[f#h.[KKiRus\-d@#-*-kaffE/U/`pU]Nac2o%P@\n!gc%QOf<G9-PaW.;f6TmFpT7(el
%=S*$]R]P,@$AYo/F:V6#?HHU_,nC'9fSklu+tBHAIL>gWFaW4!OV2sDQbto55"0'g@nME[YD?M[i6\Ft"FsH#Y!N1Uk\C%Z@lK*o
%NqGH*UY+%NWZ)Z5,-q:Gct!q[iQ2[Z)XA$-JuZ(DP8[=#M,NR"FRojXQ>apI<sal2^r_(X/!Wm,ctq])P%,jC;'0'GU'3ah8cLtr
%SE)HMIHg\;F0r!m?Xu+RpDlO5):7a!]dXO2(amFSdU26bVVI*'\Vc"B;/;V3<hj7pYYF*IJC82R4aU:peVl\G"H#!+;&UmFfr>N-
%DC=9/Z7,ao\^V7d""=HiF$!5LA&X@c[,R:?QE>]528U!7'])n'(50r']Yn:W=&E%oqFJd9fhl622#uYjTd/OV2n<;%f9Hi2Q8FlZ
%%Ci'@J0H(AgF<,oCmUW,S*(elOFfX"fqUSn^TL>Qb(LYJF]u3s&]#HeP"";6=Ba\UZoAKZ_r@u:r_T,0S=M)_(!@RG7HF\F:rG%F
%"9cP"2Mt"M;pm$c53j8G=Tg_$6Tn[0.seCN2F9pLS5pOD1EaOT0UY@31tg>Um8<)IChEg9'kch5\iEn:,Gn:?'B?1NSp`kUC))_o
%TRnf+S8bYlPCOB=ZLia@%,(P(jaU2J!#?i!2fuX[nKWVh7GEUH<H@Qq4O.<Al;D.f0LV"S@+F2_<jP[c\O2UPT9Plo6J^I6Q/q;h
%oA'<V%'(F-"O8q<p*C3h'TG_C-\:E<,%DtSGba^e$:-"ZOf>MEDjo\)IEd.LV&;I,iiC+JR\[[r6R.>hYr<4ABdouMXINUTN0+Tm
%;O<gh#pQMaJ.N(9?@C'p/Rq2WR(f<o>&&QiQuIYE/)**R^U](5j13l"57\LE;M0"kFf5?HL+qC$RD\6\Jclu,SY+@+F,`fupnFDp
%o/j[aZT&1+F&O@:hnu<FEU"lthF7IrG;%&:\l%m"r@7nd?];"c]CT=/l;M<iX:2COZQ8a1cj:)RHJ)PiodmiZ*LPk-S<b6)IA1^<
%-otfLp^3(i"?VaDcK(3.Ru%QOH@uQ4TYCeFYet=N?R'<a>$Yb*UFkEs[*+QX-nrZ1B8T_g7JpCjN"+pq1#--2WW[1FlX,'NEU$?8
%23K=*'$IG&S&jagd'Jk!;)6rGWc^,Z;kmj>6Ym>Q$@6ZN\l+N?"&>m-;(a]>NDgDHRu'SAghn*BlP>Aq.dV`0V(GHgYKd+W;+p1A
%b2*:p5e(D6*f5[S\(rp^mLPic!q>pZ5(o$V6dQNr65Go9F`A8pNhtuK3F*5ZBZ,6sggGL':l?0'&I*87Hci3&B-EqaZn@PnX8PPi
%oO`[[F]/(_l=,nV_Ra0`Hn9h5A//i72SfK7;<i7PfFgn^>GRrM)jfdNkIl,,=VOi>h3!g8CjK>'B2YUMlS,<jNCVr"GRm?DfmRA0
%?-5Xghds2)T2Ve-r9DDJ\5&`YF8D"P?j;O@N=gH&VY=8+:F]pE-m]m")l->Z&WqHKLGWOB#)6SBDh\gZ.eO5<)%Gdts#03h>&7f>
%TWX/0d#cEPPd&=%S"+=4OI9pR$/606:J43ABT#>f\SHOP-Z=!m730nc%QN%N<&=n;;fr7h,N94qU%ao`QXA@;=78Le:\hqE'Y4Y*
%'hd?;(,0gl\1Yd*(*lO?MKM@^-W7R12H)il@f3X#%.*=b$^g=dSX0m9[[M)U>cAfRd=rB!Y5?F."InceHsEk@Y'dP%'-CgqA+j^j
%i_n>L@W*[3ms)-Er,YZad>^qLrB)DtK821uG`>,:BeDnDNT@V,)DXXKTPUnC=O%D:e`kesR&_F@O:Vm^##3=d>iCGOh8u2W-Q"44
%2?i]_3_nsNl47[k>[P[]\q[7*PMb607C0aL"0rR!5GbNrcX/bsliTHd`na"i=9h.1GW$p]Ess_oI*\N%jT\^JnrPCI1OV8Ba4HmO
%4Ef@4a*fi&J&dO0g!4O0rP:]hS;=5PEUN[[;tAq\r/=A2e^*b41AF53c]i8il!BS?8Aj#$DJ66.gj>![-I0Z5TcTSVd[)9Yr^Zq-
%;//o/Z@a?0U0;dV2uKm<UAG+]J"Qg.!H!F.!.Ms]!'Xpk7.!,a).cVn73N5'VgK\q@:g`q'd$8-ktodRPhJWpB##QTT<<(?igEIO
%$"AZ,k,;ogWaO'_<)K]#U(nimj.B-qg`s(:]R+V"eP&JBgHB3URtH*1F3+ID<4(4"[fAS`Hu_rtIS+hSEs)OEH!aei^M<Esd8E)'
%&TNG1Z+8n@#+9;YJ'b=C?Yq^4n6oVX^i0oJ1"(\2CLX`k&-r^t>7AO)^W:+lJ;6JgifQ6-.F9Q,*m7F>c*K:W[09,tA)mn".q\_=
%SF&W7BNE^LX9(6l+VD[sN(D4@Q^K=,DCM!uI5[]X#HT^4Yf@`>$kAM!AYdA`AilT:GSNh(pPs'mLbk^d1=<e?q2DC^*&j%5,m7Zp
%buhhOQI(nF-T0@]L\&0:g::WURiIMoC8Tmt1+3(5g0$F.UmES76AIR[%k=Ol5!90sM?!m(8Wb#6`fY[OimtchHPk"[KX:Lo2l[hQ
%;R;\c_K:j:;AZq&m+R6O-<\cLb+.?fFh?UG6U(LRVp4iH8Nho>SeJFu$h5s@7TOI:7eS..fn,<jI(ENqp>l`VXP$6EmJ'.sEWDPs
%<`>rQ"G#%e[T?.(i:`SPZT*p=);Z28\k*nj16*S,2eVs.BFr@5g/YJ?-Gb=?irg=RJg/Z)L\If([\cJL;lXM``=+`lr!o$3HcP6B
%=[0'h@HF<n1g.lZ>/+0m%pK/oiS`_:$O0tlm@l``!?[)Xph..Gj#\'Zj7$cGc^0+B@5<cTAscXASriWpq,(.[-S?MWPZ5Yjd+b(*
%IDJl<W3W6\.S4sO(!?d=jnVkWo,Vat[.<6P0^]apXtjfUq=ZZ3@cL4-h%/E6?1YY<rq*Z!Z4"G%LUc^$j*mS<qh')HH4X.B,CGPR
%LZJCL]mRdZ^\dL.*'/XEB>Ed_pj.U+?W#T#7WAf1#;E/dC`/B4/*2B:oKh9^\jQkcc#ZnS,8DW"MIK=sm])WX"<CRo\R,.i,]+f(
%/f9RZa*6'/JNOsYnJ+!h?1kb$5XOk+pDA=#W-c&=RQCLShd9a3!J%UZPAhTnY-Q9pQh0$'_$2c41+5lSLN`D"Mq=FC.T.E"nl4t"
%YB0a&&XXj7d*9V6!NS=C]mMlc5GHBcL\a2<6SY<sf/<`LC^MgYXnBtr*0t8u/5u$ZbU;q^?n6tF;mKtHHm)Y2*&]gu&T5Rn%k">d
%+'J`RJjXWN,)js266SsQF.bY=FAc)F#`!L_L$mBVYi$Bk$c6F?g<lc2P-`nKT/F5WdXWH8/V1QI'53#c<+u2o:=6>@X2?,hJ%%R?
%I$J>REk@I@PhC3()T#^mX;\=U:<N!3WH^RaVarp0%.,3Yp4VW2(ioLC-"rM?<S=)M#;e4e4Acdkcjc&A_jNLS<BJCE%N8Q.&D'o@
%91NT?^8'o\X&u),bU!u;h8N6a0i;sboH(3QOQVg6AMY!>bs@%^a,6`E<07GJ2!s)FYt+bu_YRmdK0<iALK7aJFCH,W7#dofb3BHf
%]p:hrc)L:@1"<JfIFZIR5G(tA&XU?cd-EOcZH?j]>dj(`9UqhkK3>W7EI76s&D&Eng%15lFRprs4RK$5Y.JK#?AZhhZt_pa_(`V%
%8Zkpr4?h*=E?,L(/Qn4rb"^I]N?K,j7UfG>"-cofbb!pN0<pUq*R,%2@[Ro,SK%E67nE?5]+$+?M2(uoDIXW/^iZ3m2q2:!:%ma\
%[cWd"R/-Ob\QMPBH@&qa+*"6a;m6cb7kA'>hPb's4VG9f`uQ`'![#+.RHAJ<'XmjqDuIkiX/SOG9hP@/>)u.b<'`d4Fo)nBDaXd@
%Wt`(=Mg[/+/LF=!b8.1I0!hR$UA1==;AF!*ie3l&-BKQR6"R]`6uPS`@bsh7,Yhf4)N"(-P@>j\UB0UBi&<hip;t1CC7OBFZJ9fN
%6np!EMFB+Bl>L4%d%Mn22978!:lde\a"/T\9D#BB:u(J>#^Y9m2:BH9?r])RDO-dm.0.qc2K$s9YdFaoV3_$;\ONJT6ac???1QL;
%i@\g@<Woc6.^oJ%<=+BF&DJmJd+9=$HlP]:HRg]V.V\rih-GmNq$T*.P0]$Z5m@Iu:*j_G(O%Ef)S0g[WQQ3Fque8<*CM":Q:9WL
%\iXISns:\<o@Y:l$@ZsADehm4S:'i82@!>ll@@r)<u$\\<bl@Mlo.jdWj@TuA`46agBH]?qH(U6MD64@MC0]GO+20;5l<i`eX5%S
%Bp>TT@REEV;K$"(TN%SuiXaAi>oe1LdTWIa,P%m<4iX_i&+fbGauG>eMNp#Id.*moF(:S(j"sDA@kqc=M1(fkDttU!f$_(hL6]ki
%)AhnQaAZ<)RuFCJH*oe_H4l-/GR,/d\cne4)Y\K8YsD+uD="#:HgS,)]WlN2l0c1U!5@QcK%Gao^\DFg6`f\QBUd\GEPBrp4"g%6
%gP4)g>cgG(<4n>5Pms;kg!kBo.FER,4>6<>SLN61HO-&nS!4+bA=FUWUCPaFJ/$Z+6$941>$t$OOg1=ahga'q4SC)amE:9+SYFO8
%A&=&TJV!_saOQ(l)s2s.F<Cm.nfI;`@jJKo&(E4GH0AiuOU*j$Zq5%8#GSc9DdU^(lHjF"`!%Wm2X\pg&Dn?Cp.^A.(8;Jm!a(op
%\/+8g$;$\'M[HRgrUAl+&Xdk_(4_C6:gA/0i<&_hNJ<s2L[XPS;ZfE9,HRBV.6$d]SToJ/OkUrIU\n,h4`0K?W;D:?OC8T5SaB2G
%1Z1'sbrGX6kC%0++5>t^:%iurm$"q4bUb]:HJ7&E$q#Tg^/*1JS`_9W32'#-4n<Zu(lBhLVlIRD$+""]R8d932AHHWo+/D;$.\Nb
%.-5XX#b"\5F=Y6h&iY<-\G:j6H";DRASpQHkRBJ9UGjE>2OTMHPH4jcL<K^e0*X`mBnJ)MJfHV?jUlAe18%PMd#+&0X"@5?!=\ts
%R[fj-8<hHUe6H+-aV03B\<d/rrGe?_T7-eoF*3kofp#8J`jg8rC[<WYMV3S%Qh@TZ=g4Z`(_'&SD_eXUR]]^"pL.Nd/!%S5ooKeQ
%%(m/S[DY<qnWrcG>aP.kr3OcP$q=\_-)8FNXAWN?rq`0XN;u_@T<tPhJYEs>P>Ukc'TsS5l)5mB&dnN=a\>@2(TTf:eB2'Y-&=Sd
%+%/;u<.>);*O,#o1]tu5aSHm-0-3\Ih%DQ97GYjMe7d*\U*@m>H$8qsn2qeD`AY+V&Lc,^/I?OgW@QA?EXQ=t_9N?23^ld_4$s2P
%B150'Bh-h<GrFnLdkIS_i28_i)%-%KnNX&@88Fn&VcU]&#^S/ThQIEGEti1eEUiN"/-:j/JFKGYq)As+9"2Ot3G<^t$iW=/5pQKT
%(@j7B7a*A+]bNDeJE!QE]5F39F2/DTeJ#A_);SQ6!PHiLWRC1.TVr@/MqFbjeLsPOXff2R."4-PG`1hbg?7Ib)>[d)VO;4@NM[',
%G;P;J#m?od+]k289htD.81F-Gk[#@C>5Hk#g%9?Cm'e$BI?N;T(?E$`FM!;+#&sgC,0LmS]8<2\D\PnrIbAEC]e&`JA)M/]\@*.u
%r<EZ.5/lca@/ea]EumBDXE"4#$T2/9ah#5*#htZMQR?MBaW#ke#,7p:kb]A7Zf&3:lZit'6u25R2n2Zi:C2%a"r@oqqOJaYCA\n7
%PdaQHVf,7Hg'[E6+CU&%W%!o]fjnO+0)sC>]\85:4*0t-FaaesHo4]V&\G;kM-1gXB5V:%F.=*7(ZTtint^[\BsPjlEK[c$Z+4NB
%oNi]Y$qY'Yh/p8(b@L$I-i$9"QV27'd_Ie"q'D#N8\8Be=#fmqN_PBu2rjAn#fH)hI:CuDP0GE.[/OGG3pBG+$uOS:S?t@bqkDts
%E<EVb[5d[jBfr3I7sm"<@'s-qq0L_b>4AeT6-Ue6&R,1TP%#"kYeO(X,\iT<j;aA/6[`)c3g*nq]A08K_"S:5gam"]LM=!dABHDC
%MM?+VXG'].#iASg',Gh:n[/23e#?#&HdD8f/5K]d,*(.:bY-4K%-,:8Nq?7db/^Ycl;24s3+jiV@H$WUWoj(Z\rPNkV@;!F+,Zc:
%XI=QNnO_*B;:tboBQrjt`s1SEP;6E.SGa.QU@1J":FU\:)Jb0OL)(!`Y9jJ1L`p\Eb^N)WfSh>-=>Ls(f1mbf@%iJ7BJY$+Jof!.
%P!tjL[aTOb?aBJ.:_-EMpEhdR+s`JBpn6j??hI/b=R8>J^WE901YjK3Tcn@99=(C8b:PE2&0t3Y"/itjT!q0*MhpnFcgt\QFmt$$
%(Pc:)_JDg>FUp]%UKSWk-a2q8+_tEDWj:.ndQR&mno,WhnpDSF[lDrmYO357RQa>!qp;B_F!C$7W'KZ>@1BXX\W`l.$6hT;ZlG,&
%m/op:Hoj=paO7Fu=BfK#F`1[urYEVRiBaTWF(Ks;]dH8apdg07rQ>VKb<\0+U1@E#$$G*SF,eSf)SpnYkNY7.V&D1i>X`*As/_GY
%10HiZ&e20nSGW++8QJcqk&(stFU]_ar72u!Q6WdjR3>0R<asZYq`!6N`1#PMh8DL<<rCP(?h]7jpIMc]EB>*5XF,(^G/81!]\??5
%]f4]>?afNd?Z*AM1<u,;>NO#D,0H./X6")@rt6\!/9GXI#D;L,g#$*<pXn*^,%BZ9*jZXB:(3i+op@uV6`*;ii2^(hn'Tdo0JhkT
%gtoM2J.(=s4HS3in0&,5X;&53_')fSiKN)Jme?@d60EEaWN[tWee6h[]gF&Ndjej3K@dJk(4S3=LoPD4Ki:qF%W!<;i&s0hql;mk
%aO"hjWdVoTG,m]gk!eShADV.WpeS>8#Id#QdfIM(hUMW;WU:"pS6VQ?'d;of(iZmFdf%OZ]EK*e$^TEHg=6BLeBQRidHXdYOlBd3
%952%Z`ik%9bbO?uTg7[p(H"=nq_ucV$-cZiUZ*M[6D#uISR2\)1ok+['<%?bhG!Omi$oag3X3[k]VhZUJ'u/sL;E4P<$t45+Hfm.
%Rkf;_\LQ(NkGXinM/PV-K$V%Vc/4E8X2VEe6a0:2FLB6L@FUS-8"<:@`KhuNWo'51q%Tu,M7Y%>Sm6)Y!3P`_fSSJRAs\h_e0e7'
%FVCrmRB_@-ih<+dZF/rY!K$LX)ApmdJ,,iJC$?.ldgaN;=FlUPm.6Q.b$gV60KEFUSYd>E\Ec>.q4l_fkms!,%@h^XTaSEdk:_=L
%>V>t`Ek3d!SNkblr66="FdMr37K/VN0]A0f8EX<4f1,)j2mlc@PB*Lo'%+GPVTeb<P`s[+:(VX2P1+.c8`rQd3Y<]r075^bSQ\hd
%:_g'&$83S.g[SIDK"2-JpmVbqjq\V4nM'3Dfu]b`Iuk9TjXlNgVl7Dlg&E&BXYWMF9HtofUO'cjU.9WrJIliINr41/3T^.j;eCtA
%l-:]k,Z!apZj5l%Q#DR$lfNf.*$O`X2<(G:NPtPGk*#?8WI)fBAaX3_bs$T_k@ac[mRu@%%(Y8\qe/7C"9O+K4,Ah'3#FT]cY`eF
%#OPcSVpB^<U%n(G4$:F06-GSCTB):J'B"']9/Zh=-;-8%IS3t:cTAo'cGrN4U!.TS/R?\ppM58_'CYJGX$'%5:<K,qPADRFSGtgt
%p15&]\O'4md=ci<:Yjo,'%MqUp!;GPF3<-g=S>PaYB#NUKLki5p0)K/i/ouYhfs$^W,Wc'g$[_b[RQSk."*^7D#g;l4drhAWW>`"
%h\la/Zi>C'M6TComSH;UQD!.2A5'[8h7c3U\p,e^.+o#r0og2ri0RXEL@Sh?N>.PD(t?UgE+QX<aFo?"MUK`2;P"(i!F(dABKgff
%h[i!d:!\0,Q[_GS^cAd>/2\49kKUuo])nPQ?hFqSrT$O).'_(na21/YhY"n3>b^jjB9Es`%.GbF@3Ggj8%>;?a7gc6K3iep.BCt/
%eL"AR7e2aA[FhbJ,F_Hq(?=En52H.ZN%b';\rDpls+Wm*@G?8q3d`6/YDdKpSHVD5VB(#uO`O*:?W)Flg9Bc&HKF`#@Huu<JAg)=
%rK?g(2sO>]e;^X0C3Nb7b95%Y_#^kJpUjX`6i3I(H+7ofG;R@)cP1:QBq-+OSNV?m?N2J)o6j)UF!igW%l)ES*khr2Z%*L#'ta!!
%QJAPo!dDP_poM;(f4$!N2^c,TF8CJ=\X%kd8'u@_!84YNggi:6JgBBg#Nb^e,9CK"5sFM8g19oRp["EaeoFHeHFT,VT_$d.FZnan
%1OMnt]@G)`6-BKa+[bpoSb(2"OI=$t2bi.&ZeX`e@'QTqm2AM2bDh7qNS)4KMK.1mOO5JB>7qh[p+lng3Or.IbJ8FXB@<084\b[:
%.lD=G/Yq*o6@mcsF;]IO$]5$)=tCmR^<?9.P:XgLf4a,@&X-2^jEC_m?5Mbeh%IHLb8Q)BZF-i@C[4'lp?Zp3H&..YEX%19>?0OG
%\7*f:/:E@,?[pFE*,NFRc-"=K5\_l+]CK17"Rd+A\cgL$RP*p`14/V<@ms:BP?Oj5LA<>NJTC.lTO**IZF+-CHITBt&i,/=#jgbE
%FIZfT[q[Xc_@(uC(fBj83Gj5+TNl+>6B4-YSOA;^ea+/T7HPX"Nl7L#n`lA:3pop*Rp!061,6@F[;LkR2ih(<VqTG^lTa"fjW/g,
%^$G<c>kE;NCtj1.f$p?5@F1Q192l5n-6fQ.h%#<>qF^'_bI\MlZZBuZoG`j4J]C+i<a>?'B(sGXYXiBmGrP6M*G(8#m\eIe(0`/?
%kLI3S[lR"#*)9garaG@nGa0\9_+c4^Sn0nm^HUTOi7Il+o\fBsa&d7Di<KTcFf`<aO;08T#,8>T^PFZ>.aD/pk&?+K>9#&4i\T(+
%4E%Q.Dh-eqH81ihR(s!?HE>J'$&YNF&TsTfJ+45`cD5Hg>pn`hVf\!]b\0![/ga/i)LW<q*QGS`"UY0\hU(1]J)9tXWM?']hjLA`
%Bst_j.a>Ct0Oe`!d%a&i*7gW&?7Z]PQER6*E9ogXDBY&jZM5Z*<&2kE<$!h)/$]09%l0HS-Tf_g3QECOg(L2WI8C@XOA*$,hLb)[
%lFp3<geO?b5k^qF5J7p\.P(`f'533bBF%lR.Xi?rCAj-<J:h[2E"_NYFFB<JRO&%kR=r"7b\$VmGo!BACgSl^-"M?AA>.!Y(ZU+X
%#K-#RQgXdYT:fPh0E?QZJtV$\U35.^%2Hqdc<G"0ZItfP[c2g,qeqIc2lj,2AHf3Z.Rb$b<5Fd&f$Hce:&#n):i7,L[#'d88QTf7
%`ZH5P2!dgC?rrN8'G9-5<+^SZmP%&V\*-74l6epkO=c7%5#-#"GnMo3M:[]jA!MKFqiUll0t@>UK'URe-80t8UL`JGZ=PA53D*h2
%f?oPpbV'0SfHE3nS`nUl$DeKWl2IU>]7q.$R=1Cnj!EUX1)#-09"iN:EDC(DDk*NC/C*DSF[:t%-='g>$63.3lXIj@N)H?N5uG=t
%6$@@7-HuZe8"%h'$?_`T+#3SHaaRM*j-gjPf!tX48b;Y2%6=VUDK+[uD,E%QdB(MD5fm*.ZF$;%T2-Gt,gN6s"BPI\749!Q59MNd
%'"!("PSGI0FZLeuF&\rl]"3OD7/JZ^WMOk<P+nhbn[H,V!/[m&>U[fJku\NEW-qIi0.)kHk?+T[G;9kA./#eY-Um[<LZrMqR6D;n
%a'rk^+s7?h27c4F`'aJ*rHQl-,k,X;q<&=!_E!:KHG!Wd><G'V=%gW_9]5Dgq@0$\?Si`0alU-PAt)Vt,O$'Tq-DAa1.dq3%isrp
%!ej^.c<K"nU43q:YD"67WU;/g#aUUN&G>mBfkr.5jAomQ?mW25c/'q\H6SgW&1n05CGZc@,DY`>!1,d=I#WQ3Bi*,M]'R80Y6Zgc
%7_9<f>ND3_VBU?\!a6-bLostM_\.p;J6.@sXcKXID&:;SV&Krq?kIC@8]Suu7qhb;pThEpCOmgqGLZ)"ZaVMihl?->&VA#Cd`[g1
%e`1*>n?LO>/^je(O@?@h,\&D6<(*J,<1S5olU#hAgp%-/W<hdEG5#]k7BS"@QKQQb#6ZaK-"4!?W2"0D0!@=WYU3PU2kmJ"J7Dl;
%R8\uHP?H?kQO),I[^]*Z>)7O_@^;u^MBAk!\QGt59n,H7Y:E.Qjln;jfY^-r3T"T'ii<GCT`-8%j`O?[p^#DA'd?^M>+%_hMDA2_
%R(EfEVHFn`9g_R@"-B`QB%KO?DjTnNQ+EnH'!*8$)H4`ZdBUec9%I4\0ZO?eXn&MQpc)oEGTk/2el+``&n*n,>r20/5KuP65G2V(
%p8*uKOADBWL*cH\3anY%r?>=5M&PRBa/MaQ,,Y:<\pSs\aak*[rd;jE$]Il>(dVZ;(OX.bP&)&YeroAca_$fTC$FK@Cm*gR3pa@p
%G?aZ]&!ooaFh?8FT""r\o8l$OUGJ(C/;%k^H9AB[d!L^T08B<4/ZKjdL$&Z&](^HhX.%imH$:KmQY>So6@5nfI%E3RST@6OTb21b
%K1>S;1I-##1RM_\0tC3#Muh;bW+I@+>11i1M<m'k,g6%pZi)bo&J]RR),qMJ`5++GD/"JtU8%#X0,taq!.HM#q5Z2]\RYE1,:"mp
%:sW="[)\%i&EYUi*?9"F3CubGFfPF>n[lG*K7!>W[lnuA22%>t"7*`bouI`]P@gj+/Uk)qF\;1)\A1eQaNhHp7]Jfdg6/ofn>VL=
%WCL240q_1=L,V:^4%[[J00VhrF'Ym\d"dK?/PJFCbOO+U'i[\'.dE*1c+uhjZ0[=A(IP=;!g(bci4@\Q]QNeCpuX)Pl.YA$n@l/q
%)RlD.-K$k?U$&,21/>g%qs%AQBA3i?ik<FipWLE*6W=JY0/BRL<EMp/:!lR#o"._pe7BLp$h%Q'PV5'Z:Who?p:U)Nhg4Nr#O?H=
%O2qZc*4,(LT\%,->5dlL#+''<)tE8A0hLEhiQ^.R/(kV9Qjqf`LZfF0QjStJ'?9#<dj.!bUPbk][Q34p.7^Whi60IYV[m3)eiadh
%Z7Q!VNB-fXT,J`anMh-O)3[gtA--(MlJ'RJcKBY^8;>Zj\XtFbA9$J-ibZ"M-K2pcI)M.AW'M$s'NHthiHZX9U:<WZVQF'TB\(4A
%-3_qk_S!"T)_/nW+AZ<[Z"B?\)nG,0I"+EY[%Xk,VG;OaK=+!U!g'PF:=N+mcp!hL0t5:=6BPCr*."tXAb7YG6Y1G0.fW!i6ik,n
%PgbY&>alh?W5fXC/G%71,_dO"0:<jWK0Age'7X`96Xu`1I%s"o%Uhhi9b4m6=<m>a`=29%ostLl3'S^l2$ihT#ZJB;NASU.eHLU2
%*rqK)=D0X_iF=mec)/T7EY%kV\bU?n1"RIC)+_+DTaT3*#J+B"mo'eM#K7cEfl?I%'QLrA94Bdl[h";Bj`Yd-H,D(X[*rt+;1P<g
%1jFO>UC5`)1jtDuJH:OW=FrPu)JQ02/'`X[cd`N3-L/e?MGMMY>hjcI%qHHWa=t7*omk_0D^J!d=bj.N*C<OA>ag_b\[PO-S.+3)
%#kc^4p=Vri&Y0mln-<?n&#cth3FX\L;]a^MoVuYI$oU`'Aop*fPiDIjL/jN+<:/naJ!ALZ<:9&4pj1:S8F]4oj/TTB?Z-N\f\oq_
%V\Tq.dD>'8lfIS$ShlKejW,i#,V/smq]Nd>gR\_:XETOF$RhuX/fEm]feuUKSrlV&;YJ6oa#bj_@@3a_7XMr1cQAOJE-XQZ&mh?7
%Y9i_T"0-:J=BH,qlqo*.J"RF2WI!'U:D'U:[YOR,A%Abn3gqHS5K)8/XUkie]MWJbOD=T@ON`,t\lg7f=2O&(e*)mL*sS=rmeL</
%:dU#Vk#3+V6/EA%RmgP>[5oBhhs9]/.pVr?d^?4g[NAW"UDmmq]Bk`$edlNZ$E?q"%"5+1!iTR*-EhC"81FZ-*0fldQ2.aEpgJ2N
%^4mL^:9o7"%T@P@f'2NC(Wj1Ko(=mlb@Kk7.ss#RUTqmWb$]Nbo9<Ia_:X_O0t3X)Go]UuC8kQVq-`I9m9nR'`f2;#I`>)3h8ipr
%]3$oL1VsaVn]j+BGQ+O3c1[8:dIen%#(5AQD#h^7:fgK4@Dn2>@XGF,ZZKiu&A&*#<TWi$4Fd'?bkG91F0d2CDciFRVJ*`jr4h_W
%LalA&>HH)caP(h7EAb4n+'rHPBcYIeeO]]p73B1@"3M-c@A7PNTa%O#50j^A1a9dLM4h*<0hAohY7_Eh4t[["%p,NFaX#2?h%doP
%(n]fQh<aFT"/l9r^is!?#P52p[O"\E0\HFV@W',)e=V/TB#.m[3-&ZUC`-s<Irl^j-;+604_\)1Tb\DeR0)CQGPSrWg4GGN1ZSSf
%3QRT02ZZ&qd<@;ol`^3nIs!W]WCdg6HC%?oW%E*;+NKkM'9_W4i%?:!(X&qtgoi\,6=lfR`V[MO0oAtpO2L)c!l3AiT44CnP0E70
%ZR><@dWe)LdDel6$k!RJKnQO>%?65lf%\*b3b;1&-5;hi]uc*LiE0X$H-e?/ChckrH=W2;fLTPUIo\'].uh'ZN^g0De73P[H%Fqi
%SP;3p+VPk%-Anu>Z8gZC2_2MF+dB+J_>R(J"pi_[M07$>qJNQ#7@]CYJ-D3S0gYGJ:3"^uo200ET?KI!>a=lMe;#JY1mg_?blTrH
%mNrr$1ANosa=>NAQCNb#'6r(P\ZW)"CIc+aMbf(^aYQ\rF<2dXFe$n3RK&STO)u*GMeu^_I2S#;G?E[r%F>>b4?jO:X56l8k9aoB
%6B-ZJX>j50#=f3Cc'R7hK#10>?!6R<2-SnUp/7>8V%%OZSI#diIg<ud&[*Z#XKW=CWc\dMc(^tbba9Z<E>:n+TU<`qp(sp[l\`ne
%mBF#("-D/k_3"T"SYJuA-01:j9f@b3OC%Mk;F*@^:BRP&r1t)[frWB>daW*%^O5RW_Tp=<Z,r@DE:"/d6@J"'<`1$.6\1q#MTa&+
%+F"+/,6l%#6K:GXPRAJY_FG=oLo+^e_'Yn[;+kDtDJ@00O9;q4!B*Kscg1+d\^Ia-Fb9$["BF]#Q)\PV2)kDHpJZQiE[7;f>?I`-
%=g>H.D0?"-c`lFj'Yr6C'PGN=HVjU$Xd;L&[VIbUkN'BEAQBO=FUJcoiO>%l*kIfOSE[M^pJVXb3Ef#EirtRuMX?[ZJud1P9^d8E
%+uBq0Lc,6c$R/)I5d[O7>Fh0[LBgAMg3&T?fFj"Kjij\jkrp3gS\?;.Oh*b7jDV:JW#Li,h67(E%/nll_VB_r<Y^K,<A>5Fb3k=(
%-r+gg0&K"`EIWYt*OatfoXikP=JYAI,Ii_6asHm-fO[q,K%3lK7jPVF1WO(sVj0Ke0CX8YWR=S2IJV,$d21');DR4:M4%&qEL,L`
%L2kllM^r.gq/RJkp$:>`(L<c,9,o*6ZO]b_a9oaP"S+?$+Y%Gb'"23KT%2*p1VDG]=-_dt6%Gs%_-RI\>'8mQ@n.Q%@oX1M3tMaD
%R-,RS!Z@?B\7Uo3Pq9d_W=C`,gVU`$j_p/$s5]gOpp^:X07WTm07N_ds6f@TeaiJ7dm*d-pODpEs20>44C[5Ur.k=<5Q6:iBKGhd
%-FLk=5:U>-aQ2TN>o8"i5C`KuJ"g<Mf`12spODBSq>:3^n,Cdcrg3ZTj$3Ras5tL'h1,:)5Q7(jrp@ILs#9uC?iKh55Q'i^n%\kb
%5Q8d^rMq^PIK+TmVgnR'J)H+^SH#@@naH7fJ,B9Fni-T&5Q!/9T5T<H#X!qc_ld&:DCm!?8Z=(fM!hpDil:lQr[WKqTDP8[mlpIF
%r[?6VJ,SDWs$*A&s8JAaO8j"i;ID;KfC0]Q>sa12,74cn'OL\9ja=f+b;@X*]7fIMJ)`N23md:mbYb`&e)KWQp43ob,Fk9*cW[<X
%l*rSd+8Af[\2fb=%i5opm<GCEd:q-9\ScJm;@$=<"^T>mma\,JaFc?-&ub(kN)'=ZD-u.@"Xh0u+M1E`>;-9^s-+p"#M^)H5tV;b
%+B*Lf=u@(]=cJ:7h?P>SdsjpbBB=9_o*ABnqh$@N/%F_ab!@n\:N(kd^SWP)NYgq?Osg1aok-7rjV(O3CNCI$Pc)(O+:P4_"g$t5
%&;&JbDh-FmQ2q=!(mir#O!2AMTH3MA;IPXq1F+'e0FKIS3GI\sDE;Ui-+3-'6PE8q/5(Tu[3%[01-c5*+JA6<*+cMS[a6cB,J[bo
%;S6pV/'(c\E@G5`L$#7[e(IdMI8TfFO0(hp8JO*e;q3#OCJWO6IO?^OJl%U(+rUuQ&iWWNU'l*&Pk%\MP\u9B9SXSO1aiM]#),//
%.*c;NT_'Ke31hm/rkNmW)WbE#>LS'ajQ85N+it!"[te3nRT5bNjr\qH;cR=A>GBoOd6kA!!OPgC(kqFT8EYY4%G]bEA9ufVj#3-8
%Ph;DB4!_.;,+7$<ctR]Vak$j"^rMoJ2%Fh9kblV@_X^o58:FR^\nQt=eV@NQ5KnVeKl#DnW/@<BM['KR9TG7_#"QW7pA+qmcD-e&
%S&22u1<J6&hCY1p4/m]N]:[`/D"u;p$?2cnGRM)!GUAnRh;L7sdCkY5W^1n^(7i07,,(#c@?m-gNd;]bUW=S87.`h6Z+;?_$/<5a
%mX.:cn&uO&,#V^F1s0>WkF3/X6Roa2GFeZLC(q1o8q*1M9`'5MN.iJ%>KB$TmB6QBlm?8$WJp`oY$1D+nK)Ap;VkE@ebPGA49FuN
%Jd@`bZ*\H"DO<>?3c"V[*7:8t;.U[3KCcgAomE)-jQ]EQ'>H4i@;1L3dnlVMb^j_;o\XV($QYB[.XUP]i:uhj/+`DDPK7mo:p@5A
%Mf&;m<8gIMlIsPP:;;u*%ApBCpaX%]R%07FLK6f)2p3<`E5kj'W?'BYhcPR#asgc'MTaZIOkQ.$b*P#lZuRL/P,bS.5N7.X@=XPV
%]nkfeV1g0DE/j&j+:BGjZo6tfQj7k#ea8S9AOPioFIT`VK-Bc,<gQ@T82!%0W`Tp?#M6[uS;J<]Y%iBWnJ:1N\dF7LlLH*$d7bPP
%(=d`Kq39-Eoj5c<&p8Jn&EHdnqQeQ<<Im%]`uYM@UA;P"odN=MWmR+Y'S'-nLO$<D[RNq<8-7_nP*d$^1CF1h1*6iL&a/K'8#!@'
%STZ3i:8Y(qZHa-uGW"KGd@ok=3k#?.6=9lsY*)rh;BSi!4p4i*g16<KZ[4bg>`u;P&%[SZR7.'/Ak^3^LF-L>20=^*5"D5'o3IjZ
%@2D2(3!F_D$Rm6]*VFo_O:;J%^lZn_+$.t!/e.*&6ja-jJs6beN/nb4Zj\OL@VTumKp2@4O()*?1q76jjMG`o@OKWd,^V6T:N:L4
%mWOV.X++ao@`XhX&gpUqNfc2XS2M/5Q`*sD`+coK.&%!Vl922gYZ^4(4!hWr!()2L.:@BNaZIIDWYT"VAJ5,O]%R6JD27Ti$6Q*Y
%Lk2jr1pgS/+4o-:FsWaI>Jmg0%97q-YgE6M[jrKFq@.]NkQBs,-%/3S7I:_HOAJ$Cge*V'>m5X!.Zfua73((a&)9>8#E'i;%WAdU
%q?ml%''nP+Gnf*"i27-derJ2@Au`Ci+Zpk=3\#usL_npGV;5"bq(`2%fXn05kkOdA[ZCo9DQA47,[`>Y'FUi'*2W>o@!$\&SL1Q!
%rJLa>d6eFHb:Pct@cJKV4!h.Sd]!$]2bep,_r?1YT#3_H7!`64Y*4EH4K5OZ^j_*\9Nbl0;7bHsQlL/GmkJ3Z%ES4:_u#!Fl8-YQ
%g^CL1n*):9?#-XfpU/]Xkurt12NJ2;Xcjk9+pE+o"NHA[K&'1H<4JUqoXs'6-s(X/8P`RMi;ghhlh7QY[@^89/2;jMUMVm,G>Zrg
%S1MR'T,3G&!oJaff$Eip`B,7ZkB2,8@&'&VK1EGpL!F_3@Z+Fbp@A'OT;OiUVn?nsAc.0qUUhKeLokRWpod>D!ZNM\[K>T?S'K(2
%X`,ZAOR;u5E8J*477F"jH")S/5MTn1>3543h6d+0##*OA;JW@tMUL#eE:N*)NorPY8?rD7^RWD[?#Z.j"!()qra&XU@5"C-JU:@5
%9=ktE>*%Oho>Ur<NKaFfiGFY;-R^DL]1%nBk*(&2m3</f"?7ja*_f$&`NN6&g3\/&pEs1m2lkYFmjc+VBsY.-CU^;!/XfWR#YWqN
%&K3Q-B0_0nYVp,E8G\7(j7Cj'V%sURi,/Zo4l\X2dhVVhCsU4c`h-D03eXjKXtc]q*><GTp"mI<_[WW)^5K.YKUVd3*ZJL,2?sXV
%n=2VP@GXR!5[7CBGR/>MR,bSMqie'h4D0%i8?QTnp?C9(bA$:^<2o8#iQt%PZ_i:$6XL]!E2MT9d;su+*mT$`?;(\\.tH4,A]$\K
%i#EIekLae^0)B=h-h\!T$rKH,7<I'3XT.shkC\Ia,p3-i%3:Z0L#Hd0idtK2Le^N2@l`F_Z)*\h(4j;KG0[9//a)UObgiJ,bd8YR
%+A@AkOmmutM3;^#qKdj.%Wh>"T-3r'>/GtqaD^IN:sfI$E#O8_0&CLMd-=L#%k7lYnAKK;<*ZtGZppsK7TWc<=5c^$0P*[(\_@XY
%7_,^uHRMbe>Qs8H9bG-/&3.s>JlK1J'rLM92A0$ES2ro$;\Y/R4+tSqh2^8Zad2mDJ$ma+8r0hAX"XAgU[ltR%%?#XiM+#'J:ZIC
%$(7Q15XG(5B&d%O?TlWRr7(TrPEYkJ](KcE%f>@fAEt-nr_9&IC2_lcG7(]AMTJ/HoH<Ku*cdC=kRgCc6X>.8<VCJlh^#%9&m/;:
%$OiAdPA*1[?Mqp/ICFE27B9gQT^c/5HJ_9/#W3`p78,4(e$@oA5#6B)D%VFPZgtkniu65_[K0T0TeVk)FE&)m+Yc,kT*;J,CFX<b
%^&D2/T^Bd!CZabeC"qX$%-RS,+R7N9<<Wkc'O;I;dC;`qQBTh['X%4K+3*dDH2k!&:]&Ef:H`sA,SHJ4=Z;k[q]t0gD]DZ=pTlHB
%R;toW$C)d:9r*6M"OhLYSDa>aci!mj_bChoablK^+0>h@]6nf01$!)N+n^"HS@8"M*N/;rrd3&I9r(:'L>X-tni:R_osVT<Z:\K\
%4;h7s*CDcfp2sUUPt*$CWk1fS%=_9qjE)Qi;FfTQ4s/p5hX?[-YHbk,gJ'orc,\->nD3i\hq9)RY1Hg&J,@p<n%NX&&+]'PSk2JZ
%%Q=S:2(n^%F0e/D4(G^LA"0?Yr-b%+L]L:'VTFZb=A:\l[qVf+S?Z^)!6Rns=]OZs6S<Hs#qS?eFZDDAI#H0+_lQ+ff94-H^$LiN
%?o&Di$,(S^P7!g2$2*\5<9g%Bd=jW!H>\Gl?$1d93Tnn2g=,nUpaA,U`I.[\**%iiYFh0o&/n7WQKau)]fa[\\L6Z]k4_#%la\$7
%/uab#bscOM)5H#9hLppaRT9\A@CB/@%W9`#F@[fEK4]a'oJm"\:]&pP!)s`cL;bS%'aeq)V.9$K`$D#s9ra&EkMP9/=7P,1`Rf1g
%)p]Fh_o.G+SoCWFYus?#JbQ/cQ1O$9H2D-XiA$d^1GLl"GD,:]B_.gdp:MBUe[Cq/W.kA*7[s2FB9TFObF_I'`hth_H:A%ujF\gO
%&c@!%g,#`R>(ke%M6F(ocPVqWT9(8GRD0Ddh\Kmf-,M.;H4hT("hq+$&0&plI:)dPS$tHEgD3G!3jWk[!k_a=H'.mIaGf7004!aP
%mQ;dM4Mtl)s8"EkoL_=9r0MLQc$.u+6HZcr/5!E,[l9p0HS%1[0MDGAH(mC8/Fh]ulB$(GX?U2oO0e7]id9K$:u:P>#=["'!rF>$
%^5:+@38So8rh;i<\PH5B0Co=WOB9s=_qgZM3K*2$PClcr<!9@N4bJug-cklbH-RSX:D=A_(p"Gp6#]jOp[I:gr?2?$hg%9EaJHLp
%6rpb%fCi@[8ORt%)AH50O!^CXmsN:4Q^0j@T:9q/j"i9F=AQE.M"J'X#FL^kaWCKr,h)kj*'q<1nopZXJ&b!6^9'W@&`@>`Wfk-q
%5T[68=8UhN\Ts;*)NX2XY&bf[[d'X[*=@h,l2,\AL5@/*k2+++\.O.fB!NQdE!H4/c$)cu3ISQDaD-RF*#3LZ/:GbPYtm!0$QUiC
%2=p(rPC/QEI(Jk=doXg[jWr'tGi%mNi6n0>n_!Q>#@D7EgIT`1jjPt_:Mlu?mB^Cd)Ra9_j`lQQG?;Ji_u+5S-T<(A4r<hFY2)-S
%@NKYm#Q$R*(WQZt<%[Im/BhRthM;WEKb/0#8TEdf&<[i(dK5>s`M!k&j@`D+\1<6n7?aggiW@IapAUUB4c@#Biq+e!f+SXN2EbK7
%4M+7nj[m!6JL>qs8?)P_qCP@>h50#7<8AF"]S7&3J2+tI2k`V\F^u*,=8_\*.=FW\Qg!TZ;Tbc7,lZ62L+q!I].p\)MZWL+0oIZ6
%9-^2.kUDLJdc`->Z[PP7U>H9LP*"l[HHIG6hpRnU5((L>U:]nD$akFV6_`HET<aRB/ptf.Xg=c#>.ZsKg-\%"Y'-Af\[.a7C\HBF
%]PI44`Vlr#T3(TiWkUh+(\iRA]*)#N#=$;'$43`k[pLn8Ks-h.-LTe,3><]jD0X3.TJ6XrN-L[NBM=;X8anXLfRR!_T5Hoegn@_g
%A4qZ/na$)W`At+Z^h`A23&tg<K'qSQ6Tn^Dp7t<Pf@/3kHWHpAm?aW?Xo`N>--toAC#qLYdHe?Gea2&%G?2u6leYcug]dXlmG8TV
%Yp+[!]2,I).3RQ022e4,d"D!T"]96c&'`34P`jJ'T?LrWg[8P?PW:\I(L:4cP,^U_#gqoe)91hfjq=-mUrIQaV(F$m=e*2kZ%EE]
%oMZ-5%HRaJ<sZN%OV#R/MFS&30XC0pH9#)=@$d@q`C76eXcd&a],DB<8$st%\^&jd3?cldk&/)CL9XkXi/&Bg<QMb?j[pb`3^:/B
%20?(lkb-i,T\In\06[d80,o0?1p8qbAV7+S'N<V_/Y*NHT]b5nnLfL_?GrZpMtsC,cWotP5h,#j$15irpijq72ML<&VB:J4X]58(
%!=KD-,`4:eS+c:F/0oJqj4afS2"ViYCQk2*Fcu23I[MV*6uOE[PHCr_@Q+IDi^n$6UQZW_+j[.QD\2g#&Mim!%lEguTOoK*bqnQ;
%BiJEC1_a,V3I3STs)EY'!AZ9Z]F8"nKqD^+lM>[&$!tCo%X7kh3r?RBh(tHT+#2T7aYhAZEMeaP3h,ipjmeWiUO9bO$hLr]Igq"F
%@AtUY+gi;HM+J+Q2B1(YP>&-$''>DN18BVmrt1KC-B=pZ9OA(/HU!,KQ@DN<#!QpN$XPn+r8,IpKqY+^m<eU14KUGV#XgOC_dVC'
%(dEA2(IhYnRq-ZGa@oA0q&R+rKY`^Gq#jSkYVhn,6l@_=1ianTF,<4s8G>-:dV-@.2'[d!8`4bgbDQXlQiLk[XPV770k@8U;rSdm
%gJT:m!lit?YWNGIlK9UbAQSr5F_e#6R96,C#ZSMVJOjH&%0*:KDUp8.V3l(0<ojYC1cU7M=4JW!&I".&WoR6\3JpFm6m3X@Q\K$F
%d>(hr1&k.2+tcb(4aBA"='?mA'26GdhY+A/a`fO!74#'7f*2WU-,;Md++6=!@5'J%jMLDCE`7#I@bo[=e8DHj%u3JCnbj+H=()4-
%&U8dLK;lL*ELng]QS]YN5-S5B)"lsO<&<D4@8",AX)qOQf9':?((.+<C.tAI^:.la9riUkUq^0EC-fW<_[7LA&T3Lt==C(%-.bT1
%?Sk6WF,6X'?fX__XA/tOmZo"Q9S/f<MsqErA"L!-,!T5Vg;;$2]ln%&V']JQ8[$`?;cp8TMOf=#6'"oIgB637le'l*#EeAu@=q!J
%/jTa=-,EXI,4]6CAr4Y&Xq`8I=W&/_nckJT:F>>&\QYhjYY'QD)NA"qg%+Snc@TK9kZF"_k#7o-?LI:',1/3P7uZhVBB*:GATr"1
%)dE%8*-Z,(*U]dEND*f=DJ[m;g_(8[fLjo"X'L.g1Vd'brMr-^B[TD_T5P8#2Nhl7q6#s#?^EonfF-%$Re3:"h.f<l<o2Jo[!u?t
%k=>:LQURFHo\:];[Ni%2=&\2#*?/.FDV)NO2JJdXRV^Gjgn\dGC$m"QJ:D2J*ELFkq"iU"6)dphObmfZ/5T@kNR>hBm&MQaHdHa&
%<_fuc'`(?b:s$dZ9a%<TDFhK"7lT_eY!<*5XO7X+m&aq)DIU05MeOTqgV'$Y$saSfA#R)>*GbWA"I`<IrcUbP"b6B5puC>n<p!k3
%+R1p09d]`'@P=*RV!KDW=p2GPE<Wte0OI2`poAi['9jNA[7q[GUdEHR,Ps*"C@YlW"+p(Y'BIhBX6*\A-CTl3de68%q7Q1`[MO/S
%fhEB3Y78:kEAEq/UBT9NH"ARh8tl^1r3oglaNY>8]jod?BodY$A>9EsRbooo#.DpUL8[MTj2l9X9srdZE0d1GA5lEE\+Ehjk0DY!
%-.CA*5Deo2l)jX%$r-]R[WO>3X<@!1fiM*m;[&B)DUOXH&JOfb\Y&Qhk<o<Xfj!Kl.r$.E_D48snre.cVr\9*H(u[P9X&%G%eK?F
%T@`o:cPFZG7;2d].kb%rkpda@qe-Z2Crb)G$t^pd.Q:]fq8BIX61ZL7O%;5WE\[t3=_N]egX9<8c7@?W<fFZ9q4ttnl,19iLl[od
%M(qRqc=!.@BSr-VeRUa0\M%tYke`d'!Tak*X7"DC:dph$qU%\K3t%@f/gf)H&s7?,:b!APca);Pli2LdcF/BB'_s1XVJpIl9FLTZ
%2U&&`%:L;Koks<2iBceo#hcI"@nolF.<D_hOZ1+WWfo\h306WjZU!)_7)c9&n54q=&I0=QE1OX)!g&2S)52hQCrsKN74LfY"%AYb
%iDXmuEu)OHmbJ7'99pKhB$l"B8P)p?GScQ=PK,9g:4Pm$J;!Z.5>99Ms+%uWJU#0Q[E/$*?Je,%j:/e8QZSKH>^i>2<.^Q=pNc&W
%;>>]Le>,Ql6^oA)lXo2AH!9a'j-(NZ<UT"]TPq0IQm>a-^^hi2W(Nhq]aG'pa;K_,WR#@EdAD@(GsPm;0Ls[`\'+NYSpjJkj[808
%b;Uci!^n,'oVf(<4dLjAP.Q(*c/90`MQ0O':]Nd)Cc:=T\DuPC.[$>d%#g9<B+dL5:GH%,:,qSR&B]#`/Qu#*B8AXfW+j9bo1m%h
%pi[5!`'ra.U]3?4;G+L<bHguNp6k6%q=N%qgC56KQiYfAEg]>[4M+A.@Cg&lHC4KFdR`!9Fcd-V0O:a2"[+F4`%2=o@l,fp"WFJl
%eVp?5mU?\3K:/1YdJ==W3h($)S/c-X3jm#m5HKp42=pnMSCDJA"^D`q3A7;':[I%AWj@bF&+)uX2Y*kZe8$9ngQf_E04#ie8//6X
%s%WlU=otD_^2/G<qtMBrEn0T8nnH':NM7AfXF"&Yd]u?hgMMjoe('m4eMmj8Tqo&`0&9EGP!PPSs-`VF;0dnsgET%tC8?-86I8`!
%Ap.HO+,e=*492(^ee9:_Ysg:=ZoAU:R!?G[`uX+3KHut:m'ntZT@IKbKs+\G0uc%,S`+$h!ns!M25HGdrm,t44PiWK(6T1.;_4ma
%"G2jW];t_U,_I_<QJ"9NG:"itRdNeT-")K@8uUs2S(0'W(PhW1T_Y,&W/0mk4$^m3CPM=PMW"Q=3'/7Y^+P<"SKO*,dp4HV]OXGp
%gr$R'5QW\gC!]QT'4grD"EZ\]e-Wp6Zfgp"Rr_.nF#6nJ-sXT"V!Q%*S'7"69s]F_,8rfsFX0TSK2e$_i[t,GVP/`B<f9p"'5tjS
%,e&WB6)Kd/Ud/P?euY!rP]%NMg(Nf$?5I(gh!b@0"mm^0\1f,@fQ"Y*iS6;ED?47:Uf<[_6:ADBRhlI^83Ki$"$S2>3"s_%]T>VH
%LD`0BNb`'ml@f4*lOhS/j21]__Rlts@1?k1T"Lce/RI<la,*3&2*"-WS<b:nOTm(^V,fRur=Tc.6=WI)+j.?`nm5K:9G=O4UagKL
%N>@Mu%(*&1C:s\('=_rOagcC?ai2E*D7@C5]uj#!gT&0Db2HaK^XM:pGY)\bT-u*bYM\fpnpn`FaikUQn$'ZM4#!%[dA.2:8!`)`
%6G9:/ltYm[!?E`N?o'UV3h"sR7-Bju1\fQriOX5\S=<:,^0nF/Lb=sZVIK/<NZ/4`,e=*(mQbf^ET)q*\Q;tj&+?QrJJChK2FE,u
%MeBfi3TFrRn1K-W[)p6]kPo[eN6CFrg<T$3VRBRX4s;kTUk+&TQ+l3B>l.s1pI]@n0]8fr\Kda7aLRd;o3V6>#D1ia#$=B$$%q,R
%G0F@q59"Y>FHj,^7*))J7X'IY,CHW4%1Q6HgkI)512][lAk_FtW?7rh8&E]:ehl>MmDkM[d.9Um+*o/C#@:(N7rM&#dQ9(\'PYBW
%79E"D`[F$!T)Np0&(O.Pcf1,-:]52(:-j1t=t'T^#1,.O,Y0#GXMMoMl4qo.+G,l!,AoE\MEWkPciQW%PV)aYidXARnKd5_45_Of
%_D908kZ2T,9k<!aRTShErlOQ-.feT$%gbA"Z,%KFPLNK^&AVA<!YdHf&61II;]c(/U[,()'f)+efo1kC!Y3V*_NG\PF]$\-diR*M
%'>!Vfj"F(rq-*!/-o4tslDhKK&b5EqeatN\,2F"*DY.M8%QD)?[DnRq3E`.*(Pp,aX0e6s,p&5h-IjEkpeO#1bWWJLkZ@7%+Xa%b
%5^TGa(?_sJ&m75fs&I*&&j(Y9LRGWdY@89p_]J=K(4f%1.AlO>r9/>i^L<<0;d7AX7gCB!EXJe0S_^/:f)BHP^2CZts%#Y8Y0n?S
%_g3lM`UDj<i&.3IVAZlG)O>gg50,j)3n#7qVtb3(EP"lt(_n4:G3#*9CfjhGRGA0fZ*+iu%u9pA?V:a'L^Nbb[#;sr3aJ4bqHs%u
%LjcNUW"ce#[%19X7>=TfB*Xus>9P8#b3=JqcYaiW[_A+#NNU=4ClZU*Z<(ndDCh3sC5]PoqV*oVT\6:'<BqCNDde\s.V=9_.q/%j
%kr_j.A#a2hglC<OLA2(*R#qsl`dj!ZKFD<jNO24`'Lks4G`KMYBO$No$H3/QXNb##'gR"1q5VY]_@;tga:>ZTA#,AMG%IRc8mK@1
%h`'h<Q7e`m(%ioB9GKBT@KUob(\Qr&Qlq;]`+,CkeYu3-gh6fHF(:>:Q,NS/AkL2ZK11-R>Xi]ZR1s6(DOB5W[iWYs:9.4$ZhEm*
%GCEj=^PC3eB?+qAh96MA0;D4"/`7H2)E2\"X"RTk$;om+r*rBb/;p<^(/#9<^pG7kN9bl))C6g.l+UMA39tiIHrAZ<V.?mNB3Y60
%cuP@+8otc5q$;aHZ.L&R%IBrA=i,,onOCRj`W`WpC(#)^0Y?&d`;0P:U&/hBQYU"S0=I@._,2+NK;.)T^5ice4YMUM+K=LK2$cYf
%A85gG<G'h75+R"nb_*ZLlu'uqEhG+IP`&L!Hr&'-(Bg/2d92,5Vo?d^fceR+2Ha;JrVPNa).W:;E]g;[k5L>#XQS\Y_qXE>4#ZD8
%lhLPEWeEs2^aZFAee9PUpr1p\<(I<VVa["7:cc^DcO6n>V&HiWGp%FIRF[-a*6HIQ8OsZ?q-8,63q%%m].WD]M3[i-]]TI]&=mlk
%B%l9sS!tB,\r"PdkCo=SUeeR=nLSIs9KpelSt>\h+=a"^BZWuGL8t\'/$2<1RuS,gT'4YFI.8sqm>6Y)5<?`Go:Duo%8Jp3h78oQ
%Gub:AC#Q>(Y6TEm[o&4ndJMbG5g3JgdHc)($do*W3:6VF]&4WeIOat[X(WT7lEW/am>0MYkkORCD--2jH2kY1cE/sa,Da5*#5s=&
%&_IYYl.Ob#fMD&ai3:$@,`X#NUWAVYOHkeVD#EbNhl34'S`smO7)C(JdbMI7]B]$fWm.W<<o:n.JAict0>)s,=c%Q$L4&+@!D/6s
%;"LKoO4KM@D5"gM4o0an?j$&QMJ3+BSpX0$2jFM!?IYcs:%XdZQ]$FebrQk<Y,VYlK8"'0U9@a&e"#OgG*PgmQS!\(GP-+13e(;.
%bLL?ug+lE;<cR@GX9q)X<6?QtC<*]AAhY#jG;*3K`<&#BA"'@t;@&g/dU40$j.TC@Er]q?l(Z7>44X:o<1)t0c$#`;:e8P1[42<o
%[3R>2?1,oIb#N/V:aU1!+Il,>m86K[M%;nujgHds4U%\R("?1ESMS/r;U7ckW9OO<rE0RFW\@6;B!E[.qQ3em<!4`j<_-1qWY)=e
%Yl"@il_^X.[+"Zp-2<B;"p/L^8d4pJFW.DJ,;.QsYqq2:;AOYs+m[T8$(%!LmRJ1l3WO:JFJZM^DO6G=*%1msUC*%d36l'*V9tsJ
%>q-oY>]W-3c)U.1qtVfcHg(j@RI\5q3X8kJ7eU%V95IIto4$eF`McNk4%Y'V9e[g!,`5bM3ItrR%G?Zd>IDg;e%(YV7^KQ!CBDaa
%M,hb0[#M*ei36m;0ZIVM\Tgcu@Wc89)-ukXj\1g4Ujd9=i`C'">oc\:cG^./j<Epm"cK*5ohB:ea-K!o:CB)B>2RV#C8MY%]a*f>
%[PU1B`hMS\";g>q1e(>l\/tRM:L=rg=@oN4=Ea3>&$1L&IHpO6EGp$1D#XIRU7c&bA5lY5rUnTG>MXGSRt>E0<X=TK-FL!FHRVfL
%Wf_ZQ)bZ!V+TfVJeoJkRI*3t"0bpd!`2!`&SX&1PC,HTao6M(bm:p"@KiHnoM\pbsG6C_8EARPO%ET'q0peBslHfMO1L8`+fhiX-
%RK6`H_%tDM9aKI('n&igRi.]*P.p>G7d`qRhOJ$9GG7064U>i(E"rna)ljqnLPc$fZmHb'.gE-LV=PZO]tp@)HRtSfCZXE3E8dsH
%gX9P3=SM_>dT]I"S2IIZ(4%K9Bf4,dbmW-YQorjA0.?W-^;&Y&-5P8f5m'Qi*Y;-L%=E]B"!\KrB&W=jTsbb$QU5OB/@SH&)9q"L
%q0LG).J!/+A:oN#^lQ;t%[^/pIXI6u"dCS/>ln6ATn?A\E%N.5oADBAQ_S_YjlK=/&)-jSSr3bE6Sjs@HW37j8goma89sEaJO'[.
%8c%F47jXPE7ALpib(,m+k+g[V3)0eOnaRb59/9me$,IH4j1m,J#f_X8>\HXmR6`N]`]C=r$%h^+)@tQL%5S8Z2tULC&d7742'0,G
%EEgXOMr^_kIamff"P!3T&%JAZI>VKU=Z1dc@>5\*r+AtX6Q*>/CR6*;2a5>gWaq[!`Z:Yp9diF2d."i3].![C4RY1"`AjFtc!I-Q
%Z9oW9QVphY5fF.OgnLD\*SYP^$[^dn:9&[W?c*g+?`,<i"nd-aV6jJ)h")'8I\"@!h*pF$k;d@L#Z`L.mc[S(rR*C1cg8@%0#D0X
%(R8A#Fk>lLPj1a>C%/8nakb-=4]pP!;uO\.D.D-D2Hm^lHnW8$@46Kg_Oo*UD@8BT4eMa,hL"-4X_.WU-'+FL<6fQ4dMV;5+Zu^:
%5u"@54;4!N0qNkn%32Mr!YPX/(7j-U\D0YK,*.dL6p4Ll6rmsfMW_V9S="6+k8X$Grk3LN!=)f/mT?[FjWCViQQ0?&'Tir!MJh0P
%#1c%24=]EL>h__$B3;,fdNEa;.00PDjciQsM,5ITog"-6,r+Gqp[NkE,kX'jdE#Mt4n'+GfV$T:<tgK8,X5#&#B?[Hd'%>oC8#+6
%1)*c=LW'j[\kZd&X0&MI)TFsoM!/e((*4N#%%%:";[fd>fr5X,FDn/Dh,jn\BT1:YfX4dXmLUqoH=4Q*I?/+Yltf&=:q]=hC=1/Z
%Yr>W9*$10NNKWpE$NT<JH6\4<O`Nm1r^]L75pJdmP7P8``k_pTX&_e3qGkJkM.hJe1BoA#2"L@%&a6,L7aEqu*!_DA4<Q71!HX6m
%UA*CT:@h8qF[sFl5\HURlG*B\>*E`fUOTh?k*kWeHtF2*m<BE/g>TnJQNhm#dWQD]*dt,K!L0pD4>'LV36GAq9.`>#g7RVUD@a;2
%jOTT#@&>dp!P0FL8,J`T5cN##>'2=XgeWg[7@,8.$V[t+bb-_]5fc8!$2QsGV,d.1f1N]kQL^g#qHsI=Ih9OuAMSSt-kMcuV(AXH
%8V*F6*!aAdm0!Vt+uukb%Lc47Z>61j`,$1gOkkn+#gXBW/_NK9(CifJKIX#\\UrSg#-3hV7:m:Rd&BEu>)CfZ)(D5R9e5G5[oc!3
%87@^aC?SgPkpT7X#srJD;'c6H+lZQePc0omi\HOOb3c@JW7%Vc/HcYs;E6TC:UhZ%1G#J(L0ABBXaoD8iNe<8+"p,Q=m?AlA>ZX/
%nn"es/NdZ_J8%fb'&Jld,MCi\]`N7q,=su7Xc4N,U+5ihgR$9tAE`!]_Ye<&*2aEYUSV'O0XKeA;_Q\D(tZPp7KQ;4a&h8V%>,\!
%V\3;s8h!`_"A9oU]=##Mpr&^<rC3V;i-8?$87ng!FWo&GNcs7okMI0PXn43s&4_cg$C<3=UV37^Ha_j7bgNkiqBkE/C2VDoVgYE%
%Z6@;DaWJgF\3&D!e"X0jWn@gBD:elTL_YX^?UXu9-F'-,:lZQ*ZHlq(WQktsH:aVZ&Zdc8p1GC*=T*:R'3:na8sBsI_DE9D;or12
%KU,P34tSeD=#?!USrD4u#M&-IO7$kV*8N\?H*Mhir:97;o]u>'_hUhQjS[j298SK$lsD?W@9jJr_&=W2M^fNmD#QE*G@*jAj+D)f
%))(RCgQS](BCF0Lhg`-u^%tnqP3hiPRpTJaWub8aoUC*tj6HWcMbq0FLW;VBW4q6+a8@'/45n6G00I1p8,iNdHR.pA',aeH?!QA=
%f/1Dn0r4)fkTo/:SXqqBp6FOLO8o)-b.^iKY(!<uqn9/h*lUACF@<#p1*!%].(!#%``D*MLb=&EAg%r%FV=-r;@r:ME^B7N1BI9j
%m&gu1F7EichHt_TOb.h$fDY;;&lXV1lrA8Xc!7iXnK)#QQgV%2Hd0GImU,/Hn3cF@Dtr5t^3"Nc?aYrE4FMGQo@<+&^JX?AT2%VC
%=/VCO+0JDCcTfE6<U[*95@&cK3j1aGq;D\o:>27XI/Np(G=VE,!=0't$N~>
%AI9_PrivateDataEnd
